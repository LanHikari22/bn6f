.include "asm/asm31.inc"

.func
.thumb_func
sub_80B81EC:
	push {r4,lr}
	ldr r4, [r5,#oBattleObject_AIPtr]
	ldr r1, off_80B8200 // =off_80B8204 
	ldrb r0, [r4]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,pc}
	.balign 4, 0x00
off_80B8200: .word off_80B8204
off_80B8204: .word sub_8108F50+1
	.word sub_80F2330+1
	.word sub_80EA460+1
.endfunc // sub_80B81EC

.func
.thumb_func
sub_80B8210:
	push {lr}
	ldr r1, off_80B822C // =off_80B8220 
	ldrb r0, [r5,#oBattleObject_CurState]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80B8220: .word sub_80B8230+1
	.word sub_80B829C+1
	.word sub_80B843C+1
off_80B822C: .word off_80B8220
.endfunc // sub_80B8210

.func
.thumb_func
sub_80B8230:
	push {r4,lr}
	mov r0, #8
	mov r1, #0x12
	bl sprite_decompress
	mov r0, #0x80
	mov r1, #8
	mov r2, #0x12
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	ldr r1, off_80B828C // =dword_80B8294 
	ldrb r0, [r1,r0]
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, dword_80B8290 // =0x7fff 
	bl sub_8002ED0
	ldr r4, dword_80B85C4 // =0xd011208 
	mov r2, #0
	mov r3, #0xff
	bl sub_80C468C
	str r0, [r5,#0x60]
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,pc}
off_80B828C: .word dword_80B8294
dword_80B8290: .word 0x7FFF
dword_80B8294: .word 0x0
	.byte  3
	.byte  0
	.byte  0
	.byte  0
.endfunc // sub_80B8230

.func
.thumb_func
sub_80B829C:
	push {lr}
	ldr r1, off_80B82C0 // =off_80B82B4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	bl sub_80B844A
	pop {pc}
	.balign 4, 0x00
off_80B82B4: .word sub_80B82C4+1
	.word sub_80B8376+1
	.word sub_80B8406+1
off_80B82C0: .word off_80B82B4
.endfunc // sub_80B829C

.func
.thumb_func
sub_80B82C4:
	push {lr}
	ldr r1, off_80B82D4 // =off_80B82D8 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80B82D4: .word off_80B82D8
off_80B82D8: .word sub_80B82E0+1
	.word sub_80B8338+1
.endfunc // sub_80B82C4

.func
.thumb_func
sub_80B82E0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80B8304
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x1f
	strb r0, [r5,#0x19]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80B8336
loc_80B8304:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	lsr r0, r0, #1
	bcc loc_80B831E
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80B831E:
	ldrb r0, [r5,#0x19]
	sub r0, #2
	strb r0, [r5,#0x19]
	bgt locret_80B8336
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x19]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80B8336:
	pop {pc}
.endfunc // sub_80B82E0

.func
.thumb_func
sub_80B8338:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80B834A
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80B8374
loc_80B834A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B8374
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x10
	mov r3, #0
	bl object_checkPanelParameters
	cmp r0, #0
	bne loc_80B836C
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B8374
loc_80B836C:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B8374:
	pop {pc}
.endfunc // sub_80B8338

.func
.thumb_func
sub_80B8376:
	push {lr}
	ldr r1, off_80B8384 // =off_80B8388 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80B8384: .word off_80B8388
off_80B8388: .word sub_80B8390+1
	.word sub_80B83C0+1
.endfunc // sub_80B8376

.func
.thumb_func
sub_80B8390:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80B83A0
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #0x28 
	strh r0, [r5,#0x20]
loc_80B83A0:
	mov r0, #6
	strb r0, [r5,#0x10]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B83BE
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r5,#0xa]
	ldr r4, dword_80B85C8 // =0x11c1f 
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
locret_80B83BE:
	pop {r4,r7,pc}
.endfunc // sub_80B8390

.func
.thumb_func
sub_80B83C0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80B83D6
	mov r0, #0xc7
	bl sound_play // () -> void
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80B83D6:
	ldrh r0, [r5,#0x20]
	cmp r0, #0x20 
	bne loc_80B83F4
	ldrb r0, [r5,#6]
	cmp r0, #0
	bne loc_80B83E8
	bl sub_80B8512
	b loc_80B83EC
loc_80B83E8:
	bl sub_80B8564
loc_80B83EC:
	mov r0, #3
	mov r1, #0x23 
	bl sub_80302A8
loc_80B83F4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B8404
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B8404:
	pop {pc}
.endfunc // sub_80B83C0

.func
.thumb_func
sub_80B8406:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B8420
	mov r0, #0
	str r0, [r5,#0x4c]
	mov r0, #4
	strh r0, [r5,#0x10]
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xa]
	b locret_80B843A
loc_80B8420:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B843A
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x60]
	bl sub_80C46B0
	mov r0, #8
	str r0, [r5,#8]
locret_80B843A:
	pop {pc}
.endfunc // sub_80B8406

.func
.thumb_func
sub_80B843C:
	push {lr}
	ldr r0, [r5,#0x64]
	mov r1, #0
	strb r1, [r0]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80B843C

.func
.thumb_func
sub_80B844A:
	push {lr}
	ldrb r1, [r5,#0x19]
	lsl r0, r1, #5
	add r0, r0, r1
	lsl r0, r0, #5
	add r0, r0, r1
	bl sub_8002ED0
	pop {pc}
.endfunc // sub_80B844A

.func
.thumb_func
sub_80B845C:
	push {r4,r7,lr}
	sub sp, sp, #8
	mov r7, sp
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldr r3, off_80B8490 // =byte_80B8494 
	bl sub_81096FA
loc_80B8472:
	push {r0,r2,r3}
	bl sub_800CFDC
	cmp r0, #3
	pop {r0,r2,r3}
	bge loc_80B8482
	add r0, r0, r4
	b loc_80B8472
loc_80B8482:
	mov r1, #2
	add sp, sp, #8
	pop {r4,r7,pc}
	.word 0x0
	.word 0x0
off_80B8490: .word byte_80B8494
byte_80B8494: .byte 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0
	.byte 0x0
.endfunc // sub_80B845C

.func
.thumb_func
sub_80B84A4:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	mov r7, sp
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r6, off_80B84E0 // =byte_80B84E4 
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #2
	ldr r6, [r6,r2]
loc_80B84BE:
	push {r0-r3}
	bl object_getPanelParameters
	tst r0, r6
	pop {r0-r3}
	bne loc_80B84DA
	add r0, r0, r4
	beq loc_80B84D2
	cmp r0, #6
	ble loc_80B84BE
loc_80B84D2:
	mov r0, #3
	mul r0, r4
	ldrb r2, [r5,#0x12]
	add r0, r0, r2
loc_80B84DA:
	add sp, sp, #8
	pop {r4,r6,r7,pc}
	.byte  0
	.byte  0
off_80B84E0: .word byte_80B84E4
byte_80B84E4: .byte 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x8
.endfunc // sub_80B84A4

.func
.thumb_func
sub_80B84EC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #1
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80B8510
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x64]
	mov r1, #1
	strb r1, [r7]
locret_80B8510:
	pop {pc}
.endfunc // sub_80B84EC

.func
.thumb_func
sub_80B8512:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #5
	mul r0, r1
	add r0, #1
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	beq locret_80B8562
	bl sub_80B845C
	push {r0,r1}
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, dword_80B85CC // =0x705ff29 
	ldr r6, [r5,#0x2c]
	mov r2, #0
	mov r7, #3
	bl sub_80C53A6
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	pop {r0,r1}
	add r0, r0, r2
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r4, [r5,#0x16]
	lsl r4, r4, #8
	mov r0, #0x38 
	orr r4, r0
	bl sub_80E05F6
	ldr r4, dword_80B85D0 // =0x11400 
	bl sub_80E11E0
locret_80B8562:
	pop {r4,r6,r7,pc}
.endfunc // sub_80B8512

.func
.thumb_func
sub_80B8564:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #5
	mul r0, r1
	add r0, #1
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	beq locret_80B85C2
	bl sub_80B84A4
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, dword_80B85D4 // =0x705ff0b 
	ldr r6, [r5,#0x2c]
	mov r2, #0
	mov r7, #3
	push {r0-r3}
	bl sub_80C53A6
	pop {r0-r3}
	push {r0,r1}
	ldr r4, dword_80B85D8 // =0x705ff01 
	bl sub_80C53A6
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0xc
	lsl r3, r3, #0x10
	ldrb r4, [r5,#0x16]
	lsl r4, r4, #8
	mov r0, #0x36 
	orr r4, r0
	push {r1-r3}
	bl sub_80E05F6
	pop {r1-r3}
	add r4, #1
	bl sub_80E05F6
	ldr r4, dword_80B85DC // =0x12800 
	bl sub_80E11E0
locret_80B85C2:
	pop {r4,r6,r7,pc}
dword_80B85C4: .word 0xD011208
dword_80B85C8: .word 0x11C1F
dword_80B85CC: .word 0x705FF29
dword_80B85D0: .word 0x11400
dword_80B85D4: .word 0x705FF0B
dword_80B85D8: .word 0x705FF01
dword_80B85DC: .word 0x12800
.endfunc // sub_80B8564

.func
.thumb_func
sub_80B85E0:
	push {lr}
	ldr r1, off_80B85F0 // =off_80B85F4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80B85F0: .word off_80B85F4
off_80B85F4: .word sub_80B8600+1
	.word sub_80B863A+1
	.word object_freeMemory+1
.endfunc // sub_80B85E0

.func
.thumb_func
sub_80B8600:
	push {r7,lr}
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #0x30 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002F90 // () -> void
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#0x10]
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80B863A
	pop {r7,pc}
.endfunc // sub_80B8600

.func
.thumb_func
sub_80B863A:
	push {lr}
	ldr r4, [r5,#0x4c]
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r1, off_80B8694 // =off_80B8698 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80B8694: .word off_80B8698
off_80B8698: .word sub_80B86A4+1
	.word sub_80B86C4+1
	.word sub_80B86D4+1
.endfunc // sub_80B863A

.func
.thumb_func
sub_80B86A4:
	push {lr}
	bl sub_80B8800
	bl sub_80B8810
	bl sub_800139A
	lsr r0, r0, #2
	bcc locret_80B86C2
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	bl sub_80B86C4
locret_80B86C2:
	pop {pc}
.endfunc // sub_80B86A4

.func
.thumb_func
sub_80B86C4:
	push {lr}
	bl sub_80B8800
	bl sub_80B8810
	bl sub_80B881E
	pop {pc}
.endfunc // sub_80B86C4

.func
.thumb_func
sub_80B86D4:
	push {lr}
	bl sub_80B881E
	cmp r0, #0
	beq locret_80B86E8
	ldr r1, off_80B86EC // =off_80B86F0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80B86E8:
	pop {pc}
	.balign 4, 0x00
off_80B86EC: .word off_80B86F0
off_80B86F0: .word sub_80B86F8+1
	.word nullsub_8+1
.endfunc // sub_80B86D4

.func
.thumb_func
sub_80B86F8:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80B8782
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	bne loc_80B8748
	ldr r4, [r5,#0x64]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C536A
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x15
	bl sub_80E05F6
	mov r0, #0
	strh r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	b loc_80B877E
loc_80B8748:
	bl sub_80B8844
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	sub r1, #1
	bl object_crackPanel
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	add r1, #1
	bl object_crackPanel
	mov r0, #0xc0
	bl sound_play // () -> void
	mov r0, #0xe
	add r0, #0xff
	bl sound_play // () -> void
loc_80B877E:
	mov r0, #4
	strb r0, [r5,#0xa]
locret_80B8782:
	pop {r4,r6,r7,pc}
.endfunc // sub_80B86F8

.func
.thumb_func
nullsub_8:
	mov pc, lr
.endfunc // nullsub_8

	push {lr}
	push {r2,r5}
	mov r0, #2
	bl object_spawnType1
	add r0, r5, #0
	pop {r2,r5}
	beq locret_80B87A4
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80B87A4:
	pop {pc}
	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
	push {r5,lr}
	add r5, r0, #0
	beq locret_80B87EE
	ldrb r0, [r5,#9]
	cmp r0, #4
	bne locret_80B87EE
	str r1, [r5,#0x2c]
	strb r2, [r5,#0x12]
	strb r3, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80B88BC // =0x140000 
	mul r1, r0
	ldr r2, [r5,#0x34]
	sub r2, r2, r1
	str r2, [r5,#0x34]
	ldr r1, dword_80B88C0 // =0x280000 
	str r1, [r5,#0x3c]
	ldr r1, dword_80B88C4 // =0x6aaaa 
	mul r1, r0
	str r1, [r5,#0x40]
	ldr r1, dword_80B88C8 // =0xd5555 
	str r1, [r5,#0x48]
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r2, #8
	strb r2, [r5,#9]
	mov r2, #0
	strh r2, [r5,#0xa]
locret_80B87EE:
	pop {r5,pc}
	ldrb r2, [r0,#9]
	cmp r2, #8
	bne locret_80B87FE
	mov r2, #4
	strb r2, [r0,#9]
	mov r2, #0
	strh r2, [r0,#0xa]
locret_80B87FE:
	mov pc, lr
.func
.thumb_func
sub_80B8800:
	ldr r1, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r1
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov pc, lr
.endfunc // sub_80B8800

.func
.thumb_func
sub_80B8810:
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#0x10]
	cmp r0, #3
	ble loc_80B881A
	mov r0, #3
loc_80B881A:
	strb r0, [r5,#0x10]
	mov pc, lr
.endfunc // sub_80B8810

.func
.thumb_func
sub_80B881E:
	push {r4,lr}
	mov r4, #0
	bl battle_isPaused
	bne loc_80B8840
	ldr r3, [r5,#0x4c]
	ldrh r0, [r3,#0x24]
	cmp r0, #0
	beq loc_80B8840
	ldr r0, [r3,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80B88CC // =0x80110c00 
	tst r0, r1
	bne loc_80B8840
	bl sub_801BCA6
	mov r4, #1
loc_80B8840:
	add r0, r4, #0
	pop {r4,pc}
.endfunc // sub_80B881E

.func
.thumb_func
sub_80B8844:
	push {lr}
	mov r1, #0
	ldrb r2, [r5,#4]
	cmp r2, #4
	blt loc_80B8850
	mov r1, #4
loc_80B8850:
	ldr r0, off_80B88B0 // =dword_80B88B4 
	ldr r0, [r0,r1]
	str r0, [r5,#0x64]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80B8870
.endfunc // sub_80B8844

	sub r1, #1
	ldr r2, dword_80B88B4 // =0x15050a01 
	str r2, [r5,#0x64]
	bl sub_80B8870
	add r1, #2
	bl sub_80B8870
	pop {pc}
.func
.thumb_func
sub_80B8870:
	push {r0,r1,r4,r6,r7,lr}
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_80B8870

	mov r1, #0x10
	tst r0, r1
	pop {r0,r1}
	beq locret_80B88A4
	push {r0,r1}
	mov r2, #0
	mov r3, #0x30 
	lsl r3, r3, #0x10
	ldr r4, [r5,#0x64]
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C536A
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x34 
	bl sub_80E05F6
locret_80B88A4:
	pop {r0,r1,r4,r6,r7,pc}
	.word 0, 0
	.byte 0, 0
off_80B88B0: .word dword_80B88B4
dword_80B88B4: .word 0x15050A01
	.word 0x55050901
dword_80B88BC: .word 0x140000
dword_80B88C0: .word 0x280000
dword_80B88C4: .word 0x6AAAA
dword_80B88C8: .word 0xD5555
dword_80B88CC: .word 0x80110C00
.func
.thumb_func
sub_80B88D0:
	push {lr}
	ldr r1, off_80B88E0 // =off_80B88E4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80B88E0: .word off_80B88E4
off_80B88E4: .word sub_80B88F0+1
	.word sub_80B8932+1
	.word object_freeMemory+1
.endfunc // sub_80B88D0

.func
.thumb_func
sub_80B88F0:
	push {lr}
	bl sub_800E2AC
	mov r1, #0x10
	mov r2, #0x3d 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B88F0

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80B8932:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3a]
	add r0, #0x20 
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	add r0, #0x1f
	strh r0, [r5,#0x3e]
	add r0, r4, #0
	mov r1, #1
	bl sub_80030BA
	lsl r0, r0, #0x10
	mul r0, r6
	lsl r1, r1, #0x10
	ldr r2, [r5,#0x34]
	add r2, r2, r0
	str r2, [r5,#0x34]
	ldr r2, [r5,#0x38]
	add r2, r2, r1
	str r2, [r5,#0x38]
	ldr r0, [r5,#0x4c]
	mov r2, #2
	mvn r2, r2
	ldrb r1, [r5]
	and r1, r2
	ldrb r2, [r0]
	mov r3, #2
	and r2, r3
	orr r1, r2
	strb r1, [r5]
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x60]
	cmp r0, #0
	bne loc_80B89B4
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
loc_80B89B4:
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	bl battle_isTimeStop
	bne locret_80B89DA
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80B8A14 // =0x80110c00 
	tst r0, r1
	bne locret_80B89DA
	bl sub_801BBAC
	b locret_80B89DA
	bl object_freeMemory
locret_80B89DA:
	pop {r4,r6,pc}
.endfunc // sub_80B8932

.func
.thumb_func
sub_80B89DC:
	push {lr}
	push {r3,r5}
	mov r0, #3
	bl object_spawnType1
	add r0, r5, #0
	pop {r3,r5}
	beq locret_80B8A08
	str r3, [r0,#0x60]
	ldr r1, [r5,#0x34]
	str r1, [r0,#0x34]
	ldr r1, [r5,#0x38]
	str r1, [r0,#0x38]
	ldr r1, [r5,#0x3c]
	str r1, [r0,#0x3c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80B8A08:
	pop {pc}
.endfunc // sub_80B89DC

.func
.thumb_func
sub_80B8A0A:
	tst r0, r0
	beq locret_80B8A12
	mov r1, #8
	str r1, [r0,#8]
locret_80B8A12:
	mov pc, lr
dword_80B8A14: .word 0x80110C00
.endfunc // sub_80B8A0A

.func
.thumb_func
sub_80B8A18:
	push {lr}
	ldr r1, off_80B8A2C // =off_80B8A30 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80B8A2C: .word off_80B8A30
off_80B8A30: .word sub_80B8A3C+1
	.word loc_80B8AD4+1
	.word object_freeMemory+1
.endfunc // sub_80B8A18

.func
.thumb_func
sub_80B8A3C:
	push {r4,r7,lr}
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80B8A66
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	bl sub_800FC9E
	b loc_80B8A70
loc_80B8A66:
	ldrh r0, [r4,#0x28]
	bl sub_800F26C
	add r2, r1, #0
	add r1, r0, #0
loc_80B8A70:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B8A3C

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_801002C
	pop {r5}
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl sub_8010DF6
	ldr r0, [r5,#0x4c]
	mov r1, #0xf
	bl sub_80E1352
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80B8AD4
	pop {r4,r7,pc}
loc_80B8AD4:
	push {r4,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80B8AF0
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80B8AF0:
	ldr r1, off_80B8AFC // =off_80B8B00 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,pc}
off_80B8AFC: .word off_80B8B00
off_80B8B00: .word sub_80B8B08+1
	.word sub_80B8B6E+1
.func
.thumb_func
sub_80B8B08:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80B8B18
	mov r0, #0x22 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80B8B18:
	ldrh r0, [r5,#0x20]
	cmp r0, #4
	bne loc_80B8B3C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	bne loc_80B8B30
	mov r0, #1
	b loc_80B8B66
loc_80B8B30:
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0x33 
	add r0, #0xff
	bl sound_play // () -> void
loc_80B8B3C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80B8B6C
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0xa
	mul r0, r1
	lsl r0, r0, #0x10
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	ldr r1, [r5,#0x38]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	bl sub_80DBB0C
	mov r0, #0xac
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x5a 
loc_80B8B66:
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80B8B6C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80B8B08

.func
.thumb_func
sub_80B8B6E:
	push {r4,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80B8B9E
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	ldr r0, [r5,#0x4c]
	bl sub_80E13DC
	ldr r1, [r5,#0x60]
	mov r0, #0
	strb r0, [r1]
locret_80B8B9E:
	pop {r4,pc}
.endfunc // sub_80B8B6E

.func
.thumb_func
sub_80B8BA0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #4
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80B8BD0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	mov r1, #1
	strb r1, [r7]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrh r1, [r5,#0x28]
	strh r1, [r0,#0x28]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80B8BD0:
	pop {pc}
	.balign 4, 0x00
off_80B8BD4: .word 0x10C
	.word 0x1010C07, 0x10C0700, 0xC070002, 0x0
	.word 0x20C
	.word 0x60C00, 0x30C1000, 0xC000000, 0xD00003B, 0x33B0C
	.word 0x63B0C0D, 0x3B0C0D00, 0xC0D0009, 0x0
	.word 0x100000C, 0x1D0C00, 0xC0C0E00, 0xC0F0000, 0x4F, 0xC
	.word 0xC00, 0x500C0000, 0xC000000, 0xA000018, 0x80C, 0x190C08
	.word 0x290C0B00, 0xC140000, 0x1700002A, 0x2B0C, 0x360C19, 0x370C0000
	.word 0xC000000, 0x38, 0x2000C, 0x400C00, 0x1F0C1A00, 0x10160000
	.word 0x5A, 0x580C, 0x160C13, 0x160C0900, 0xC090001, 0xC000059
	.word 0x3020C, 0x1020C00, 0x20C0000, 0xC000002, 0xE00005D, 0x5E0C
	.word 0x600C0E, 0x270C0E00, 0xC000000, 0xE00005F, 0x610C, 0x4020C0E
	.word 0x52100000, 0xC000000, 0x19000010, 0xFF00080C, 0x130808, 0x430C0000
	.word 0xC180000, 0x5C
.endfunc // sub_80B8BA0

.func
.thumb_func
sub_80B8CD8:
	push {lr}
	ldr r1, off_80B8CE8 // =off_80B8CEC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80B8CE8: .word off_80B8CEC
off_80B8CEC: .word sub_80B8CF8+1
	.word sub_80B8DA6+1
	.word object_freeMemory+1
.endfunc // sub_80B8CD8

.func
.thumb_func
sub_80B8CF8:
	push {r4,lr}
	ldrb r0, [r5,#4]
	mov r1, #5
	mul r0, r1
	ldr r4, off_80B8E88 // =off_80B8BD4 
	add r4, r4, r0
	ldrb r1, [r4]
	ldrb r2, [r4,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B8CF8

	bl sub_8002F90 // () -> void
	ldr r1, [r5,#0x4c]
	ldrh r0, [r1,#0x28]
	ldr r1, off_80B8E8C // =0x1ac 
	cmp r0, r1
	blt loc_80B8D36
	ldr r1, dword_80B8E90 // =0x1b5 
	cmp r0, r1
	bgt loc_80B8D36
	ldrb r0, [r5,#0x16]
	mov r1, #0x2c 
	bl sub_80136CC
	tst r0, r0
	beq loc_80B8D36
	mov r0, #0xf8
	b loc_80B8D38
loc_80B8D36:
	ldrb r0, [r4,#3]
loc_80B8D38:
	strb r0, [r5,#0xc]
	ldrb r0, [r5,#5]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r4,#2]
	ldrb r1, [r5,#7]
	add r0, r0, r1
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0
	str r0, [r5,#0x40]
	str r0, [r5,#0x48]
	ldrb r1, [r5,#4]
	cmp r1, #0xf
	bne loc_80B8D82
	ldr r3, [r5,#0x4c]
	ldrh r3, [r3,#0x28]
	ldr r2, off_80B8E94 // =0x1a0 
	cmp r3, r2
	beq loc_80B8D9C
	mov r0, #0xb
	mov r1, #7
	neg r1, r1
	ldr r2, dword_80B8E98 // =0x1b6 
	cmp r3, r2
	beq loc_80B8D94
	mov r0, #0
	mov r1, #0xd
	b loc_80B8D94
loc_80B8D82:
	ldrb r1, [r4,#4]
	cmp r1, #0
	beq loc_80B8D9C
	ldr r3, [r5,#0x4c]
	ldrh r0, [r3,#0x28]
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
loc_80B8D94:
	lsl r0, r0, #0x10
	str r0, [r5,#0x40]
	lsl r1, r1, #0x10
	str r1, [r5,#0x48]
loc_80B8D9C:
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80B8DA6
	pop {r4,pc}
.func
.thumb_func
sub_80B8DA6:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	ldr r0, [r5,#0x40]
	add r1, r1, r0
	ldr r0, [r5,#0x48]
	add r3, r3, r0
	mov r0, #0xc
	ldrsb r0, [r5,r0]
	lsl r0, r0, #0x10
	sub r2, r2, r0
	sub r3, r3, r0
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r0, [r5,#0x4c]
	bl sub_8002F7E
	bl sub_8002F5C
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80B8E22
	ldrb r0, [r5,#6]
	tst r0, r0
	bne loc_80B8E16
	bl battle_isTimeStop
	bne locret_80B8E2E
loc_80B8E16:
	bl battle_isPaused
	bne locret_80B8E2E
	bl sub_801BBAC
	pop {r4,pc}
loc_80B8E22:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80B8E2E:
	pop {r4,pc}
.endfunc // sub_80B8DA6

.func
.thumb_func
sub_80B8E30:
	push {lr}
	push {r0,r5-r7}
	mov r0, #5
	bl object_spawnType1
	add r0, r5, #0
	pop {r1,r5-r7}
	beq loc_80B8E54
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	ldrh r1, [r5,#0x12]
	strh r1, [r0,#0x12]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r1, #0x14
	ldrb r2, [r0]
	orr r2, r1
	strb r2, [r0]
loc_80B8E54:
	str r0, [r7]
	pop {pc}
.endfunc // sub_80B8E30

.func
.thumb_func
sub_80B8E58:
	tst r0, r0
	beq locret_80B8E60
	mov r1, #8
	str r1, [r0,#8]
locret_80B8E60:
	mov pc, lr
.endfunc // sub_80B8E58

.func
.thumb_func
sub_80B8E62:
	ldr r2, off_80B8E9C // =off_80B8BD4 
	mov r1, #5
	mul r0, r1
	add r2, r2, r0
	ldrb r0, [r2]
	ldrb r1, [r2,#1]
	mov pc, lr
.endfunc // sub_80B8E62

.func
.thumb_func
sub_80B8E70:
	tst r0, r0
	beq locret_80B8E7A
	strb r1, [r0,#0x10]
	mov r1, #0xff
	strb r1, [r0,#0x11]
locret_80B8E7A:
	mov pc, lr
.endfunc // sub_80B8E70

.func
.thumb_func
sub_80B8E7C:
	tst r0, r0
	beq locret_80B8E84
	mov r1, #0xff
	strb r1, [r0,#0x11]
locret_80B8E84:
	mov pc, lr
	.balign 4, 0x00
off_80B8E88: .word off_80B8BD4
off_80B8E8C: .word 0x1AC
dword_80B8E90: .word 0x1B5
off_80B8E94: .word 0x1A0
dword_80B8E98: .word 0x1B6
off_80B8E9C: .word off_80B8BD4
.endfunc // sub_80B8E7C

.func
.thumb_func
sub_80B8EA0:
	push {lr}
	ldr r1, off_80B8EB4 // =off_80B8EB8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80B8EB4: .word off_80B8EB8
off_80B8EB8: .word sub_80B8EC4+1
	.word loc_80B8F0A+1
	.word object_freeMemory+1
.endfunc // sub_80B8EA0

.func
.thumb_func
sub_80B8EC4:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #8
	mov r1, #0xc
	bl sprite_decompress
	mov r1, #8
	mov r2, #0xc
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B8EC4

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80B8F0A:
	push {lr}
	ldr r1, off_80B8F18 // =off_80B8F1C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80B8F18: .word off_80B8F1C
off_80B8F1C: .word sub_80B8F30+1
	.word sub_80B8F66+1
	.word sub_80B8F8E+1
	.word sub_80B8FB6+1
	.word sub_80B8FEA+1
.func
.thumb_func
sub_80B8F30:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B8F54
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80B8F64
loc_80B8F54:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B8F64
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B8F64:
	pop {pc}
.endfunc // sub_80B8F30

.func
.thumb_func
sub_80B8F66:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B8F7C
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	str r0, [r5,#0x20]
	b locret_80B8F8C
loc_80B8F7C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B8F8C
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B8F8C:
	pop {pc}
.endfunc // sub_80B8F66

.func
.thumb_func
sub_80B8F8E:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B8FA4
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0xa
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80B8FB4
loc_80B8FA4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B8FB4
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B8FB4:
	pop {pc}
.endfunc // sub_80B8F8E

.func
.thumb_func
sub_80B8FB6:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B8FD8
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xb
	strb r0, [r5,#0x10]
	bl sub_80B903A
	mov r0, #0x80
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	b locret_80B8FE8
loc_80B8FD8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80B8FE8
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B8FE8:
	pop {pc}
.endfunc // sub_80B8FB6

.func
.thumb_func
sub_80B8FEA:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9000
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80B9012
loc_80B9000:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80B9012
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80B9012:
	pop {pc}
.endfunc // sub_80B8FEA

.func
.thumb_func
sub_80B9014:
	push {lr}
	push {r0-r2,r5}
	mov r0, #6
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80B9038
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80B9038:
	pop {pc}
.endfunc // sub_80B9014

.func
.thumb_func
sub_80B903A:
	push {r4,r6,r7,lr}
	mov r7, #0
loc_80B903E:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	sub r1, #1
	add r1, r1, r7
	push {r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r1}
	beq loc_80B906E
	mov r0, #0
	mov r4, #1
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80B9060
	mov r0, #7
	mov r4, #0
loc_80B9060:
	lsl r4, r4, #8
	mov r3, #4
	orr r4, r3
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	bl sub_80C8514
loc_80B906E:
	add r7, #1
	cmp r7, #3
	blt loc_80B903E
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
.endfunc // sub_80B903A

loc_80B9078:
	push {lr}
	ldr r1, off_80B908C // =off_80B9090 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80B908C: .word off_80B9090
off_80B9090: .word sub_80B909C+1
	.word sub_80B90E4+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80B909C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #1
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B909C

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #2
	mov r1, #1
	mov r2, #1
	bl sub_8010DF6
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80B90E4:
	push {lr}
	ldr r1, off_80B90F4 // =off_80B90F8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80B90F4: .word off_80B90F8
off_80B90F8: .word sub_80B910C+1
	.word sub_80B9160+1
	.word sub_80B9188+1
	.word sub_80B91B0+1
	.word sub_80B91E8+1
.endfunc // sub_80B90E4

.func
.thumb_func
sub_80B910C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9130
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #5
	str r0, [r5,#0x20]
	b locret_80B915A
loc_80B9130:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B915A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80B915C // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80B9152
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B915A
loc_80B9152:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B915A:
	pop {pc}
dword_80B915C: .word 0x10010
.endfunc // sub_80B910C

.func
.thumb_func
sub_80B9160:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9176
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	str r0, [r5,#0x20]
	b locret_80B9186
loc_80B9176:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9186
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B9186:
	pop {pc}
.endfunc // sub_80B9160

.func
.thumb_func
sub_80B9188:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B919E
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	b locret_80B91AE
loc_80B919E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B91AE
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B91AE:
	pop {pc}
.endfunc // sub_80B9188

.func
.thumb_func
sub_80B91B0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B91CA
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x15
	strb r0, [r5,#0x10]
	bl sub_80B9240
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	b locret_80B91E6
loc_80B91CA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x34 
	beq loc_80B91E2
	cmp r0, #0
	bge locret_80B91E6
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B91E6
loc_80B91E2:
	mov r0, #0x10
	strb r0, [r5,#0x10]
locret_80B91E6:
	pop {pc}
.endfunc // sub_80B91B0

.func
.thumb_func
sub_80B91E8:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B91FE
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	str r0, [r5,#0x20]
	b locret_80B9218
loc_80B91FE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80B9218
	mov r0, #2
	mov r1, #1
	bl loc_8011044
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80B9218:
	pop {pc}
.endfunc // sub_80B91E8

.func
.thumb_func
sub_80B921A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #7
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80B923E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80B923E:
	pop {pc}
.endfunc // sub_80B921A

.func
.thumb_func
sub_80B9240:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	add r0, r0, r4
	ldrb r1, [r5,#0x13]
	bl sub_80B9288
.endfunc // sub_80B9240

	mov r6, #0
loc_80B9254:
	mov r1, #2
	mul r1, r4
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	sub r1, #1
	add r1, r1, r6
	bl sub_80B9288
	add r6, #1
	cmp r6, #3
	blt loc_80B9254
	mov r6, #0
loc_80B926E:
	mov r1, #3
	mul r1, r4
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	sub r1, #2
	add r1, r1, r6
	bl sub_80B9288
	add r6, #1
	cmp r6, #5
	blt loc_80B926E
	pop {r4,r6,pc}
.func
.thumb_func
sub_80B9288:
	push {r4,r6,lr}
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_80B9288

	ldr r1, dword_80B92B4 // =0x10010 
	and r0, r1
	cmp r0, r1
	pop {r0,r1}
	bne locret_80B92B0
	ldrb r2, [r5,#0xe]
	mov r4, #4
	mov r3, #0x1e
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x10
	orr r4, r3
	ldr r6, [r5,#0x2c]
	bl sub_80C8DE0
locret_80B92B0:
	pop {r4,r6,pc}
	.balign 4, 0x00
dword_80B92B4: .word 0x10010
loc_80B92B8:
	push {lr}
	ldr r1, off_80B92CC // =off_80B92D0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80B92CC: .word off_80B92D0
off_80B92D0: .word sub_80B92DC+1
	.word loc_80B931A+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80B92DC:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r1, #8
	mov r2, #2
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B92DC

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80B931A:
	push {lr}
	ldr r1, off_80B9328 // =off_80B932C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80B9328: .word off_80B932C
off_80B932C: .word sub_80B9340+1
	.word sub_80B9376+1
	.word sub_80B939E+1
	.word sub_80B93C6+1
	.word sub_80B9408+1
.func
.thumb_func
sub_80B9340:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9364
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80B9374
loc_80B9364:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9374
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B9374:
	pop {pc}
.endfunc // sub_80B9340

.func
.thumb_func
sub_80B9376:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B938C
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	str r0, [r5,#0x20]
	b locret_80B939C
loc_80B938C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B939C
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B939C:
	pop {pc}
.endfunc // sub_80B9376

.func
.thumb_func
sub_80B939E:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B93B4
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	mov r0, #0xd
	strh r0, [r5,#0x20]
	b locret_80B93C4
loc_80B93B4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B93C4
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B93C4:
	pop {pc}
.endfunc // sub_80B939E

.func
.thumb_func
sub_80B93C6:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B93E8
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0xc6
	bl sound_play // () -> void
	mov r0, #0
	bl sub_80B9458
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	b locret_80B9406
loc_80B93E8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x3c 
	beq loc_80B9400
	cmp r0, #0
	bgt locret_80B9406
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B9406
loc_80B9400:
	mov r0, #1
	bl sub_80B9458
locret_80B9406:
	pop {pc}
.endfunc // sub_80B93C6

.func
.thumb_func
sub_80B9408:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B941E
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80B9430
loc_80B941E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80B9430
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80B9430:
	pop {pc}
.endfunc // sub_80B9408

.func
.thumb_func
sub_80B9432:
	push {lr}
	push {r0-r2,r5}
	mov r0, #8
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80B9456
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80B9456:
	pop {pc}
.endfunc // sub_80B9432

.func
.thumb_func
sub_80B9458:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	lsl r0, r0, #3
	ldrb r3, [r5,#0x16]
	lsl r3, r3, #2
	add r0, r0, r3
	ldr r3, off_80B94A8 // =dword_80B94AC 
	ldr r2, [r3,r0]
	mov r3, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r4, #0x26 
	ldrb r6, [r5,#0x16]
	add r7, sp, #4
	bl sub_800D3FE
	add r6, r0, #0
	tst r6, r6
	beq loc_80B94A2
	sub r6, #1
loc_80B9482:
	add r0, sp, #4
	ldrb r0, [r0,r6]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	ldrb r2, [r5,#0xe]
	ldr r4, [sp]
	add r4, #1
	push {r6}
	ldr r6, [r5,#0x2c]
	bl sub_80D0F0C
	pop {r6}
	sub r6, #1
	cmp r6, #0
	bge loc_80B9482
loc_80B94A2:
	add sp, sp, #0x24
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80B94A8: .word dword_80B94AC
dword_80B94AC: .word 0x4010000, 0x8010000, 0x810000, 0x810000
.endfunc // sub_80B9458

loc_80B94BC:
	push {lr}
	ldr r1, off_80B94D0 // =off_80B94D4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
off_80B94D0: .word off_80B94D4
off_80B94D4: .word sub_80B94E0+1
	.word loc_80B951E+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80B94E0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #6
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B94E0

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80B951E:
	push {lr}
	ldr r1, off_80B952C // =off_80B9530 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80B952C: .word off_80B9530
off_80B9530: .word sub_80B954C+1
	.word sub_80B95AC+1
	.word sub_80B95F2+1
	.word sub_80B961A+1
	.word sub_80B966C+1
	.word sub_80B96C2+1
	.word sub_80B971E+1
.func
.thumb_func
sub_80B954C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B957A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #2
	mov r1, #6
	mov r2, #1
	bl sub_8010DF6
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #6
	str r0, [r5,#0x20]
	b locret_80B95A4
loc_80B957A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B95A4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80B95A8 // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80B959C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B95A4
loc_80B959C:
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B95A4:
	pop {pc}
	.balign 4, 0x00
dword_80B95A8: .word 0x10010
.endfunc // sub_80B954C

.func
.thumb_func
sub_80B95AC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B95C2
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	str r0, [r5,#0x20]
	b locret_80B95F0
loc_80B95C2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B95F0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x16]
	tst r1, r1
	bne loc_80B95D8
	cmp r0, #2
	bgt loc_80B95DE
	b loc_80B95E8
loc_80B95D8:
	cmp r0, #5
	blt loc_80B95DE
	b loc_80B95E8
loc_80B95DE:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B95F0
loc_80B95E8:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B95F0:
	pop {pc}
.endfunc // sub_80B95AC

.func
.thumb_func
sub_80B95F2:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9608
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80B9618
loc_80B9608:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9618
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B9618:
	pop {pc}
.endfunc // sub_80B95F2

.func
.thumb_func
sub_80B961A:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B965A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r4, #4
	ldr r6, [r5,#0x2c]
	bl sub_80C86B0
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	mov r4, #0x2a 
	orr r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0
	bl sub_80E05F6
	mov r0, #0x2e 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	b locret_80B966A
loc_80B965A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B966A
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B966A:
	pop {r4,r6,pc}
.endfunc // sub_80B961A

.func
.thumb_func
sub_80B966C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9694
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	push {r4,r7}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r4, #4
	mov r2, #0x60 
	add r7, r5, r2
	bl sub_80E3976
	pop {r4,r7}
	mov r0, #0x42 
	strh r0, [r5,#0x20]
	b locret_80B96C0
loc_80B9694:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x39 
	beq loc_80B96B0
	cmp r0, #0x1b
	beq loc_80B96B6
	cmp r0, #0
	bgt locret_80B96C0
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B96C0
loc_80B96B0:
	mov r0, #0x10
	strb r0, [r5,#0x10]
	b locret_80B96C0
loc_80B96B6:
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq locret_80B96C0
	mov r1, #1
	strb r1, [r0,#0xb]
locret_80B96C0:
	pop {pc}
.endfunc // sub_80B966C

.func
.thumb_func
sub_80B96C2:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B96FE
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #0x8a
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x5a 
	strh r0, [r5,#0x20]
	bl sub_80B9776
	add r3, r0, #0
	lsl r3, r3, #0x10
	ldrh r4, [r5,#0x20]
	lsl r4, r4, #8
	orr r4, r3
	mov r3, #4
	orr r4, r3
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	bl sub_80C6EE0
	b locret_80B971C
loc_80B96FE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B971C
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80B9714
	mov r1, #2
	strb r1, [r0,#0xb]
loc_80B9714:
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B971C:
	pop {r4,r6,pc}
.endfunc // sub_80B96C2

.func
.thumb_func
sub_80B971E:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9734
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #8
	str r0, [r5,#0x20]
	b locret_80B974E
loc_80B9734:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80B974E
	mov r0, #2
	mov r1, #6
	bl loc_8011044
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80B974E:
	pop {pc}
.endfunc // sub_80B971E

.func
.thumb_func
sub_80B9750:
	push {lr}
	push {r0-r2,r5}
	mov r0, #9
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80B9774
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80B9774:
	pop {pc}
.endfunc // sub_80B9750

.func
.thumb_func
sub_80B9776:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	mov r4, #1
loc_80B9782:
	ldrb r0, [r5,#0x12]
	add r1, r4, #0
	mul r1, r6
	add r0, r0, r1
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #2
	ldr r3, off_80B97B4 // =off_80B97B8 
	ldr r2, [r3,r2]
	mov r3, #0
	add r7, sp, #0
	push {r0}
	bl sub_800CFDC
.endfunc // sub_80B9776

	tst r0, r0
	pop {r0}
	bne loc_80B97AE
	cmp r0, #1
	ble loc_80B97AE
	cmp r0, #6
	bge loc_80B97AE
	add r4, #1
	b loc_80B9782
loc_80B97AE:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80B97B4: .word off_80B97B8
off_80B97B8: .word LCDControl
	.word start_
loc_80B97C0:
	push {lr}
	ldr r1, off_80B97D4 // =off_80B97D8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80B97D4: .word off_80B97D8
off_80B97D8: .word sub_80B97E4+1
	.word loc_80B9822+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80B97E4:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #7
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B97E4

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80B9822:
	push {lr}
	ldr r1, off_80B9830 // =off_80B9834 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80B9830: .word off_80B9834
off_80B9834: .word sub_80B9848+1
	.word sub_80B989C+1
	.word sub_80B98C4+1
	.word sub_80B98EC+1
	.word sub_80B9970+1
.func
.thumb_func
sub_80B9848:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B986C
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80B9896
loc_80B986C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9896
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80B9898 // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80B988E
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B9896
loc_80B988E:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B9896:
	pop {pc}
dword_80B9898: .word 0x10010
.endfunc // sub_80B9848

.func
.thumb_func
sub_80B989C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B98B2
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	str r0, [r5,#0x20]
	b locret_80B98C2
loc_80B98B2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B98C2
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B98C2:
	pop {pc}
.endfunc // sub_80B989C

.func
.thumb_func
sub_80B98C4:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B98DA
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80B98EA
loc_80B98DA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B98EA
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B98EA:
	pop {pc}
.endfunc // sub_80B98C4

.func
.thumb_func
sub_80B98EC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80B9902
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	b locret_80B9966
loc_80B9902:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x37 
	beq loc_80B991A
	cmp r0, #0
	bge locret_80B9966
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B9966
loc_80B991A:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80B9968 // =0x700ff11 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80B996C // =0x1 
	bl sub_80C53A6
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x33 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	mov r0, #0xb
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #1
	mov r1, #0x1e
	bl sub_80302A8
locret_80B9966:
	pop {r4,r6,r7,pc}
dword_80B9968: .word 0x700FF11
dword_80B996C: .word 0x1
.endfunc // sub_80B98EC

.func
.thumb_func
sub_80B9970:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80B9986
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80B9998
loc_80B9986:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9998
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80B9998:
	pop {pc}
.endfunc // sub_80B9970

.func
.thumb_func
sub_80B999A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xa
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80B99BE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80B99BE:
	pop {pc}
.endfunc // sub_80B999A

loc_80B99C0:
	push {lr}
	ldr r1, off_80B99D4 // =off_80B99D8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80B99D4: .word off_80B99D8
off_80B99D8: .word sub_80B99E4+1
	.word sub_80B9A34+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80B99E4:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #8
	mov r1, #0xd
	bl sprite_decompress
	mov r1, #8
	mov r2, #0xd
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B99E4

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #2
	mov r1, #0xd
	mov r2, #1
	bl sub_8010DF6
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80B9A34:
	push {lr}
	ldr r1, off_80B9A44 // =off_80B9A48 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80B9A44: .word off_80B9A48
off_80B9A48: .word sub_80B9A60+1
	.word sub_80B9A96+1
	.word sub_80B9ABA+1
	.word sub_80B9AEA+1
	.word sub_80B9B30+1
	.word sub_80B9B58+1
.endfunc // sub_80B9A34

.func
.thumb_func
sub_80B9A60:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9A84
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0xe1
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x13
	str r0, [r5,#0x20]
	b locret_80B9A94
loc_80B9A84:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9A94
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B9A94:
	pop {pc}
.endfunc // sub_80B9A60

.func
.thumb_func
sub_80B9A96:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9AA8
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x1e
	str r0, [r5,#0x20]
	b locret_80B9AB8
loc_80B9AA8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9AB8
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B9AB8:
	pop {pc}
.endfunc // sub_80B9A96

.func
.thumb_func
sub_80B9ABA:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9AD8
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0
	ldrh r1, [r5,#0x20]
	bl sub_80302A8
	b locret_80B9AE8
loc_80B9AD8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9AE8
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B9AE8:
	pop {pc}
.endfunc // sub_80B9ABA

.func
.thumb_func
sub_80B9AEA:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9B04
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #5
	strb r0, [r5,#0x10]
	bl sub_80B9B94
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	b locret_80B9B2E
loc_80B9B04:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x1e
	beq loc_80B9B20
	cmp r0, #0x14
	beq loc_80B9B2A
	cmp r0, #0
	bgt locret_80B9B2E
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B9B2E
loc_80B9B20:
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
	b locret_80B9B2E
loc_80B9B2A:
	mov r0, #0
	strb r0, [r5,#0x10]
locret_80B9B2E:
	pop {pc}
.endfunc // sub_80B9AEA

.func
.thumb_func
sub_80B9B30:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9B46
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #8
	strb r0, [r5,#0x10]
	mov r0, #0xe
	strh r0, [r5,#0x20]
	b locret_80B9B56
loc_80B9B46:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9B56
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B9B56:
	pop {pc}
.endfunc // sub_80B9B30

.func
.thumb_func
sub_80B9B58:
	push {lr}
	mov r0, #2
	mov r1, #0xd
	bl loc_8011044
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80B9B58

.func
.thumb_func
sub_80B9B6E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xb
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80B9B92
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80B9B92:
	pop {pc}
.endfunc // sub_80B9B6E

.func
.thumb_func
sub_80B9B94:
	push {r4,r6,r7,lr}
	mov r4, #1
loc_80B9B98:
	ldrb r0, [r5,#0x16]
	add r1, r4, #0
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80B9BEC // =dword_80B9BF0 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D086
.endfunc // sub_80B9B94

	tst r0, r0
	beq loc_80B9BE2
	mov r2, #1
	ldrb r3, [r5,#0x16]
	tst r3, r3
	beq loc_80B9BBA
	mov r2, #6
loc_80B9BBA:
	cmp r0, r2
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80B9C00 // =dword_80B9C04 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80B9BE2
	push {r4,r6}
	ldrb r2, [r5,#0xe]
	mov r4, #4
	ldr r6, [r5,#0x2c]
	bl sub_80CB1E2
	pop {r4,r6}
loc_80B9BE2:
	add r4, #1
	cmp r4, #3
	ble loc_80B9B98
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80B9BEC: .word dword_80B9BF0
dword_80B9BF0: .word 0x0
	.word 0x20, 0x20, 0x0
off_80B9C00: .word dword_80B9C04
dword_80B9C04: .word 0x10, 0x3800000, 0x10, 0x3800000
loc_80B9C14:
	push {lr}
	ldr r1, off_80B9C28 // =off_80B9C2C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80B9C28: .word off_80B9C2C
off_80B9C2C: .word sub_80B9C38+1
	.word sub_80B9C9C+1
	.word sub_80B9F00+1
.func
.thumb_func
sub_80B9C38:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #8
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B9C38

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	beq loc_80B9C96
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	b locret_80B9C9A
loc_80B9C96:
	mov r0, #8
	strb r0, [r5,#8]
locret_80B9C9A:
	pop {pc}
.func
.thumb_func
sub_80B9C9C:
	push {lr}
	bl sub_801A00E
	.hword 0xF760
	.word 0x6D69FA17, 0x42006F08, 0xF760D001, 0x4904F9E1, 0x58097A68
	.word 0x470846FE, 0xF9ACF760, 0xBD00
	.word off_80B9CC8
off_80B9CC8: .word sub_80B9CDC+1
	.word sub_80B9D12+1
	.word sub_80B9D36+1
	.word sub_80B9D6E+1
	.word sub_80B9E40+1
.endfunc // sub_80B9C9C

.func
.thumb_func
sub_80B9CDC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9D00
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80B9D10
loc_80B9D00:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9D10
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B9D10:
	pop {pc}
.endfunc // sub_80B9CDC

.func
.thumb_func
sub_80B9D12:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9D24
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x1e
	str r0, [r5,#0x20]
	b locret_80B9D34
loc_80B9D24:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9D34
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80B9D34:
	pop {pc}
.endfunc // sub_80B9D12

.func
.thumb_func
sub_80B9D36:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9D4C
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0x17
	strh r0, [r5,#0x20]
	b locret_80B9D6C
loc_80B9D4C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x14
	beq loc_80B9D64
	cmp r0, #0
	bgt locret_80B9D6C
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B9D6C
loc_80B9D64:
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	bl sub_8002F90 // () -> void
locret_80B9D6C:
	pop {pc}
.endfunc // sub_80B9D36

.func
.thumb_func
sub_80B9D6E:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9DBC
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	bl sub_801A07C
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0x10
	strh r0, [r5,#0x3e]
	bl sub_8002E3C
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80B9E30 // =dword_80B9E34 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80B9F34 // =0x50000 
	mul r0, r1
	mov r1, #0
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80B9E2E
loc_80B9DBC:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldrb r4, [r5,#0x12]
	bl sub_800E2AC
	bl sub_801A04C
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80B9F38 // =0xa000 
	mul r0, r1
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x40]
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80B9DF0
	mov r0, #4
	bl sub_801A07C
loc_80B9DF0:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80B9E0E
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80B9E38 // =byte_80B9E3C 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	mov r2, #0x23 
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80B9E0E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x1e
	beq loc_80B9E26
	cmp r0, #0
	bgt locret_80B9E2E
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80B9E2E
loc_80B9E26:
	mov r0, #0x3d 
	add r0, #0xff
	bl sound_play // () -> void
locret_80B9E2E:
	pop {r4,pc}
off_80B9E30: .word dword_80B9E34
dword_80B9E34: .word 0x3070300
off_80B9E38: .word byte_80B9E3C
byte_80B9E3C: .byte 0x1, 0x3, 0x6, 0x3
.endfunc // sub_80B9D6E

.func
.thumb_func
sub_80B9E40:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9E9A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	mov r0, #0x10
	strh r0, [r5,#0x3e]
	bl sub_8002E3C
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80B9EF0 // =dword_80B9EF4 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80B9F3C // =0xc0000 
	mul r0, r1
	ldr r1, dword_80B9F40 // =0x73333 
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	mov r0, #0x28 
	lsl r0, r0, #0x10
	mov r1, #5
	mul r0, r1
	ldr r1, dword_80B9F3C // =0xc0000 
	svc 6
	strh r0, [r5,#0x20]
	mov r0, #0x3d 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80B9EEE
loc_80B9E9A:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldrb r4, [r5,#0x12]
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80B9EC0
	mov r0, #4
	bl sub_801A07C
loc_80B9EC0:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80B9EDE
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80B9EF8 // =off_80B9EFC 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	mov r2, #0x25 
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80B9EDE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80B9EEE
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80B9EEE:
	pop {r4,pc}
off_80B9EF0: .word dword_80B9EF4
dword_80B9EF4: .word 0x50002
off_80B9EF8: .word off_80B9EFC
off_80B9EFC: .word byte_2030204
.endfunc // sub_80B9E40

.func
.thumb_func
sub_80B9F00:
	push {lr}
	mov r0, #0
	ldr r1, [r5,#0x60]
	strb r0, [r1]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80B9F00

.func
.thumb_func
sub_80B9F0E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xc
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80B9F32
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	mov r1, #1
	strb r1, [r7]
locret_80B9F32:
	pop {pc}
dword_80B9F34: .word 0x50000
dword_80B9F38: .word 0xA000
dword_80B9F3C: .word 0xC0000
dword_80B9F40: .word 0x73333
.endfunc // sub_80B9F0E

loc_80B9F44:
	push {lr}
	ldr r1, off_80B9F58 // =off_80B9F5C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80B9F58: .word off_80B9F5C
off_80B9F5C: .word sub_80B9F68+1
	.word loc_80B9FA6+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80B9F68:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r1, #8
	mov r2, #3
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80B9F68

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80B9FA6:
	push {lr}
	ldr r1, off_80B9FB4 // =off_80B9FB8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80B9FB4: .word off_80B9FB8
off_80B9FB8: .word sub_80B9FD8+1
	.word sub_80BA02C+1
	.word sub_80BA054+1
	.word sub_80BA090+1
	.word sub_80BA0D8+1
	.word sub_80BA0FC+1
	.word sub_80BA152+1
	.word sub_80BA186+1
.func
.thumb_func
sub_80B9FD8:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80B9FFC
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80BA026
loc_80B9FFC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA026
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80BA028 // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80BA01E
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BA026
loc_80BA01E:
	mov r0, #0x1c
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA026:
	pop {pc}
dword_80BA028: .word 0x10010
.endfunc // sub_80B9FD8

.func
.thumb_func
sub_80BA02C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA042
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xa
	str r0, [r5,#0x20]
	b locret_80BA052
loc_80BA042:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA052
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA052:
	pop {pc}
.endfunc // sub_80BA02C

.func
.thumb_func
sub_80BA054:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA074
	mov r0, #4
	strb r0, [r5,#0xa]
	bl sub_80BA1D6
	tst r0, r0
	beq loc_80BA086
	strb r0, [r5,#5]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	b locret_80BA08E
loc_80BA074:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA08E
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BA08E
loc_80BA086:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA08E:
	pop {pc}
.endfunc // sub_80BA054

.func
.thumb_func
sub_80BA090:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA0A0
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strh r0, [r5,#0x20]
loc_80BA0A0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA0D6
	ldrb r0, [r5,#5]
	bl sub_80BA238
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldrb r1, [r5,#5]
	add r0, r0, r1
	strb r0, [r5,#5]
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	beq loc_80BA0CE
	cmp r0, #1
	blt loc_80BA0CE
	cmp r0, #6
	bgt loc_80BA0CE
	mov r0, #0xf
	strh r0, [r5,#0x20]
	b locret_80BA0D6
loc_80BA0CE:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA0D6:
	pop {pc}
.endfunc // sub_80BA090

.func
.thumb_func
sub_80BA0D8:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA0EA
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x3c 
	str r0, [r5,#0x20]
	b locret_80BA0FA
loc_80BA0EA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA0FA
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA0FA:
	pop {pc}
.endfunc // sub_80BA0D8

.func
.thumb_func
sub_80BA0FC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA11E
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80BA294
	tst r0, r0
	beq loc_80BA148
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0x10
	strh r0, [r5,#0x20]
	b locret_80BA150
loc_80BA11E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xd
	beq loc_80BA136
	cmp r0, #0
	bgt locret_80BA150
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BA150
loc_80BA136:
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #3
	strb r0, [r5,#0x10]
	b locret_80BA150
loc_80BA148:
	mov r0, #0x1c
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA150:
	pop {pc}
.endfunc // sub_80BA0FC

.func
.thumb_func
sub_80BA152:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA174
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	mov r0, #0x59 
	add r0, #0xff
	bl sound_play // () -> void
	bl sub_80BA31C
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80BA184
loc_80BA174:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA184
	mov r0, #0x1c
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA184:
	pop {pc}
.endfunc // sub_80BA152

.func
.thumb_func
sub_80BA186:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA19C
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80BA1AE
loc_80BA19C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BA1AE
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80BA1AE:
	pop {pc}
.endfunc // sub_80BA186

.func
.thumb_func
sub_80BA1B0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xd
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BA1D4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80BA1D4:
	pop {pc}
.endfunc // sub_80BA1B0

.func
.thumb_func
sub_80BA1D6:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x1c
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	str r0, [sp]
	mov r4, #6
	ldrb r0, [r5,#0x16]
	tst r0, r0
	beq loc_80BA1EC
	mov r4, #1
loc_80BA1EC:
	add r0, r4, #0
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	beq loc_80BA21C
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r2, off_80BA224 // =dword_80BA228 
	add r1, r1, r2
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #4
	bl sub_800CFDC
	tst r0, r0
	bne loc_80BA218
	ldr r0, [sp]
	add r4, r4, r0
	cmp r4, #1
	blt loc_80BA21C
	cmp r4, #6
	bgt loc_80BA21C
	b loc_80BA1EC
loc_80BA218:
	add r0, r4, #0
	b loc_80BA21E
loc_80BA21C:
	mov r0, #0
loc_80BA21E:
	add sp, sp, #0x1c
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80BA224: .word dword_80BA228
dword_80BA228: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.endfunc // sub_80BA1D6

.func
.thumb_func
sub_80BA238:
	push {r4,r6,lr}
	add r4, r0, #0
	mov r6, #1
loc_80BA23E:
	add r0, r4, #0
	add r1, r6, #0
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80BA280 // =dword_80BA284 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80BA238

	tst r0, r0
	pop {r0,r1}
	beq loc_80BA276
	push {r4,r6}
	mov r2, #0
	mov r4, #1
	ldrb r6, [r5,#4]
	ldrh r3, [r5,#0x2c]
	lsr r3, r3, #0xc
	lsl r3, r3, #0xc
	orr r6, r3
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_80D0996
	pop {r5}
	pop {r4,r6}
loc_80BA276:
	add r6, #1
	cmp r6, #3
	ble loc_80BA23E
	pop {r4,r6,pc}
	.byte 0, 0
off_80BA280: .word dword_80BA284
dword_80BA284: .word 0x0
	.word 0xF8800A0, 0x20, 0xF880080
.func
.thumb_func
sub_80BA294:
	push {r4,r7,lr}
	sub sp, sp, #0x18
	mov r4, #1
loc_80BA29A:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	mov r1, #1
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80BA2FE
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80BA304 // =off_80BA308 
	ldr r2, [r2,r1]
	mov r3, #0
	add r7, sp, #0
	bl sub_800CFDC
	tst r0, r0
	bne loc_80BA2CE
	add r4, #1
	cmp r4, #6
	blt loc_80BA29A
	b loc_80BA2FE
loc_80BA2CE:
	bl object_getFlipDirection_800E2CA // () -> int
	neg r4, r0
	add r0, sp, #0
	ldrb r0, [r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	add r0, r0, r4
	ldr r3, off_80BA310 // =dword_80BA314 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80BA318 - 0x80ba314)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80BA300
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r0, r2
	bne loc_80BA2FE
	cmp r1, r3
	beq loc_80BA300
loc_80BA2FE:
	mov r0, #0
loc_80BA300:
	add sp, sp, #0x18
	pop {r4,r7,pc}
off_80BA304: .word off_80BA308
off_80BA308: .word LCDControl
	.word start_
off_80BA310: .word dword_80BA314
dword_80BA314: .word 0x10
dword_80BA318: .word 0xF880080
.endfunc // sub_80BA294

.func
.thumb_func
sub_80BA31C:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80BA35C // =0x700ff04 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80BA360 // =0x3 
	bl sub_80C53A6
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x39 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,r6,r7,pc}
dword_80BA35C: .word 0x700FF04
dword_80BA360: .word 0x3
.endfunc // sub_80BA31C

.func
.thumb_func
sub_80BA364:
	push {lr}
	ldr r1, off_80BA378 // =off_80BA37C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80BA378: .word off_80BA37C
off_80BA37C: .word sub_80BA388+1
	.word sub_80BA3D8+1
	.word object_freeMemory+1
.endfunc // sub_80BA364

.func
.thumb_func
sub_80BA388:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #8
	mov r1, #0xe
	bl sprite_decompress
	mov r1, #8
	mov r2, #0xe
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #2
	mov r1, #0xe
	mov r2, #1
	bl sub_8010DF6
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80BA388

.func
.thumb_func
sub_80BA3D8:
	push {lr}
	ldr r1, off_80BA3E8 // =off_80BA3EC 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BA3E8: .word off_80BA3EC
off_80BA3EC: .word sub_80BA414+1
	.word sub_80BA468+1
	.word sub_80BA490+1
	.word sub_80BA4BA+1
	.word sub_80BA528+1
	.word sub_80BA56C+1
	.word sub_80BA5AA+1
	.word sub_80BA5D2+1
	.word sub_80BA5F6+1
	.word sub_80BA62E+1
.endfunc // sub_80BA3D8

.func
.thumb_func
sub_80BA414:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA438
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0xa
	str r0, [r5,#0x20]
	b locret_80BA462
loc_80BA438:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA462
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80BA464 // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80BA45A
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BA462
loc_80BA45A:
	mov r0, #0x24 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA462:
	pop {pc}
dword_80BA464: .word 0x10010
.endfunc // sub_80BA414

.func
.thumb_func
sub_80BA468:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA47E
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	str r0, [r5,#0x20]
	b locret_80BA48E
loc_80BA47E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA48E
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA48E:
	pop {pc}
.endfunc // sub_80BA468

.func
.thumb_func
sub_80BA490:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA4A6
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0xd
	strb r0, [r5,#0x10]
	mov r0, #0x13
	strh r0, [r5,#0x20]
	b locret_80BA4B8
loc_80BA4A6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA4B8
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BA4B8
locret_80BA4B8:
	pop {pc}
.endfunc // sub_80BA490

.func
.thumb_func
sub_80BA4BA:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA4E6
	mov r1, #4
	strb r1, [r5,#0xa]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x3e]
	mov r0, #0xe
	strb r0, [r5,#0x10]
	mov r0, #5
	str r0, [r5,#0x20]
	b locret_80BA51A
loc_80BA4E6:
	ldrh r0, [r5,#0x3e]
	sub r0, #6
	strh r0, [r5,#0x3e]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA51A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80BA51C // =off_80BA520 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80BA512
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BA51A
loc_80BA512:
	mov r0, #0x1c
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA51A:
	pop {pc}
off_80BA51C: .word off_80BA520
off_80BA520: .word LCDControl
	.word start_
.endfunc // sub_80BA4BA

.func
.thumb_func
sub_80BA528:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA54A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	bl sub_80BA6A4
	mov r0, #0xab
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x2e 
	strh r0, [r5,#0x20]
	b locret_80BA56A
loc_80BA54A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x15
	beq loc_80BA562
	cmp r0, #0
	bgt locret_80BA56A
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BA56A
loc_80BA562:
	mov r0, #0x15
	add r0, #0xff
	bl sound_play // () -> void
locret_80BA56A:
	pop {pc}
.endfunc // sub_80BA528

.func
.thumb_func
sub_80BA56C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA584
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	mov r0, #0x48 
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
loc_80BA584:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80BA598
	bl sub_80BA686
	mov r0, #0xc
	strh r0, [r5,#0x22]
	bl sub_80BA6B6
loc_80BA598:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA5A8
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA5A8:
	pop {pc}
.endfunc // sub_80BA56C

.func
.thumb_func
sub_80BA5AA:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA5C0
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #7
	strh r0, [r5,#0x20]
	b locret_80BA5D0
loc_80BA5C0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA5D0
	mov r0, #0x20 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA5D0:
	pop {pc}
.endfunc // sub_80BA5AA

.func
.thumb_func
sub_80BA5D2:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA5E4
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80BA5F4
loc_80BA5E4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA5F4
	mov r0, #0x20 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA5F4:
	pop {pc}
.endfunc // sub_80BA5D2

.func
.thumb_func
sub_80BA5F6:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA60C
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	mov r0, #5
	strh r0, [r5,#0x20]
	b locret_80BA62C
loc_80BA60C:
	ldrh r0, [r5,#0x3e]
	add r0, #6
	strh r0, [r5,#0x3e]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA62C
	mov r0, #2
	mov r1, #0xe
	bl loc_8011044
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80BA62C:
	pop {pc}
.endfunc // sub_80BA5F6

.func
.thumb_func
sub_80BA62E:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA644
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xd
	strb r0, [r5,#0x10]
	mov r0, #0x13
	strh r0, [r5,#0x20]
	b locret_80BA65E
loc_80BA644:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA65E
	mov r0, #2
	mov r1, #0xe
	bl loc_8011044
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80BA65E:
	pop {pc}
.endfunc // sub_80BA62E

.func
.thumb_func
sub_80BA660:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xe
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BA684
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80BA684:
	pop {pc}
.endfunc // sub_80BA660

.func
.thumb_func
sub_80BA686:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80BA69C // =0x1605ff01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80BA6A0 // =0x3 
	bl sub_80C53A6
	pop {r4,r6,r7,pc}
dword_80BA69C: .word 0x1605FF01
dword_80BA6A0: .word 0x3
.endfunc // sub_80BA686

.func
.thumb_func
sub_80BA6A4:
	push {lr}
	mov r0, #1
	ldrh r1, [r5,#0x3a]
	add r1, r1, r0
	strh r1, [r5,#0x3a]
	ldrh r1, [r5,#0x3e]
	add r1, r1, r0
	strh r1, [r5,#0x3e]
	pop {pc}
.endfunc // sub_80BA6A4

.func
.thumb_func
sub_80BA6B6:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r6, r0, #0
	add r7, r1, #0
	bl sub_8001532
	add r2, r0, #0
	mov r1, #0x1f
	and r0, r1
	lsl r0, r0, #0x10
	lsr r2, r2, #1
	bcs loc_80BA6D6
	neg r0, r0
loc_80BA6D6:
	add r1, r6, r0
	add r2, r7, #0
	push {r1,r2}
	bl sub_8001532
	add r2, r0, #0
	mov r1, #0xf
	and r0, r1
	lsl r0, r0, #0x10
	lsr r2, r2, #1
	bcs loc_80BA6EE
	neg r0, r0
loc_80BA6EE:
	mov r3, #0x14
	lsl r3, r3, #0x10
	add r3, r3, r0
	pop {r1,r2}
	ldr r4, dword_80BA704 // =0x100000 
	add r2, r2, r4
	add r3, r3, r4
	mov r4, #0x21 
	bl sub_80E05F6
	pop {r4,r6,r7,pc}
dword_80BA704: .word 0x100000
.endfunc // sub_80BA6B6

loc_80BA708:
	push {lr}
	ldr r1, off_80BA71C // =off_80BA720 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80BA71C: .word off_80BA720
off_80BA720: .word sub_80BA72C+1
	.word loc_80BA772+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BA72C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #8
	mov r1, #0xf
	bl sprite_decompress
	mov r1, #8
	mov r2, #0xf
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BA72C

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80BA772:
	push {lr}
	ldr r1, off_80BA780 // =off_80BA784 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BA780: .word off_80BA784
off_80BA784: .word sub_80BA7A0+1
	.word sub_80BA7F4+1
	.word sub_80BA81C+1
	.word sub_80BA84C+1
	.word sub_80BA89C+1
	.word sub_80BA8D0+1
	.word sub_80BA8F6+1
.func
.thumb_func
sub_80BA7A0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA7C4
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #2
	str r0, [r5,#0x20]
	b locret_80BA7EE
loc_80BA7C4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA7EE
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80BA7F0 // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80BA7E6
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BA7EE
loc_80BA7E6:
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA7EE:
	pop {pc}
dword_80BA7F0: .word 0x10010
.endfunc // sub_80BA7A0

.func
.thumb_func
sub_80BA7F4:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA80A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	str r0, [r5,#0x20]
	b locret_80BA81A
loc_80BA80A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA81A
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA81A:
	pop {pc}
.endfunc // sub_80BA7F4

.func
.thumb_func
sub_80BA81C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA83A
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #6
	strb r0, [r5,#0x10]
	mov r4, #1
	bl sub_80E71A0
	str r0, [r5,#0x60]
	mov r0, #0xf
	strh r0, [r5,#0x20]
	b locret_80BA84A
loc_80BA83A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA84A
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA84A:
	pop {pc}
.endfunc // sub_80BA81C

.func
.thumb_func
sub_80BA84C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA86C
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #7
	strb r0, [r5,#0x10]
	bl sub_80BA946
	mov r0, #0xba
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80BA89A
loc_80BA86C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA89A
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80BA87E
	bl sub_80E71B8
loc_80BA87E:
	bl sub_80BA9A4
	str r0, [r5,#0x64]
	tst r0, r0
	beq loc_80BA892
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BA89A
loc_80BA892:
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA89A:
	pop {pc}
.endfunc // sub_80BA84C

.func
.thumb_func
sub_80BA89C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA8B2
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80BA8CE
loc_80BA8B2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xf
	beq loc_80BA8CA
	cmp r0, #0
	bgt locret_80BA8CE
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BA8CE
loc_80BA8CA:
	bl sub_80BAA0C
locret_80BA8CE:
	pop {pc}
.endfunc // sub_80BA89C

.func
.thumb_func
sub_80BA8D0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA8E0
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
loc_80BA8E0:
	ldr r0, [r5,#0x74]
	ldr r1, [r5,#0x64]
	cmp r0, r1
	bne locret_80BA8F4
	bl sub_80BAA4C
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BA8F4:
	pop {pc}
.endfunc // sub_80BA8D0

.func
.thumb_func
sub_80BA8F6:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BA90C
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #2
	strh r0, [r5,#0x20]
	b locret_80BA91E
loc_80BA90C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BA91E
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80BA91E:
	pop {pc}
.endfunc // sub_80BA8F6

.func
.thumb_func
sub_80BA920:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xf
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BA944
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80BA944:
	pop {pc}
.endfunc // sub_80BA920

.func
.thumb_func
sub_80BA946:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80BA99C // =0x19050301 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80BA9A0 // =0x1101 
	bl sub_80C53A6
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80BA99C // =0x19050301 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80BA9A0 // =0x1101 
	bl sub_80C53A6
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80BA99C // =0x19050301 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80BA9A0 // =0x1101 
	bl sub_80C53A6
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80BA99C: .word 0x19050301
dword_80BA9A0: .word 0x1101
.endfunc // sub_80BA946

.func
.thumb_func
sub_80BA9A4:
	push {r4,r6,r7,lr}
	mov r7, #0
	mov r4, #0
loc_80BA9AA:
	mov r6, #1
loc_80BA9AC:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	add r0, r0, r4
	ldr r1, off_80BA9F4 // =dword_80BA9F8 
	ldrb r0, [r1,r0]
	add r1, r6, #0
	push {r0,r1}
	ldrb r2, [r5,#0x16]
	bl sub_800D618
.endfunc // sub_80BA9A4

	tst r0, r0
	pop {r0,r1}
	beq loc_80BA9E4
	ldr r3, off_80BAA00 // =dword_80BAA04 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80BAA08 - 0x80baa04)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80BA9E4
	lsl r1, r1, #4
	orr r0, r1
	mov r1, #0x68 
	add r1, r1, r7
	strb r0, [r5,r1]
	add r7, #1
loc_80BA9E4:
	add r6, #1
	cmp r6, #3
	ble loc_80BA9AC
	add r4, #1
	cmp r4, #3
	ble loc_80BA9AA
	add r0, r7, #0
	pop {r4,r6,r7,pc}
off_80BA9F4: .word dword_80BA9F8
dword_80BA9F8: .word 0x2030405, 0x5040302
off_80BAA00: .word dword_80BAA04
dword_80BAA04: .word 0x10
dword_80BAA08: .word 0xF880080
.func
.thumb_func
sub_80BAA0C:
	push {r4,r6,r7,lr}
	mov r7, #0
loc_80BAA10:
	mov r0, #0x68 
	add r0, r0, r7
	ldrb r0, [r5,r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r2, #0
	add r4, r7, #0
	mov r3, #1
	lsl r3, r3, #8
	orr r4, r3
	ldrh r3, [r5,#0x2e]
	lsl r3, r3, #0x10
	ldrb r6, [r5,#4]
	orr r6, r3
	ldrh r3, [r5,#0x2c]
	lsr r3, r3, #0xc
	lsl r3, r3, #0xc
	orr r6, r3
	push {r7}
	mov r7, #0x74 
	add r7, r7, r5
	bl sub_80D7C7E
	pop {r7}
	add r7, #1
	ldr r0, [r5,#0x64]
	cmp r7, r0
	blt loc_80BAA10
	pop {r4,r6,r7,pc}
.endfunc // sub_80BAA0C

.func
.thumb_func
sub_80BAA4C:
	push {r4,r6,lr}
	mov r4, #0
loc_80BAA50:
	mov r6, #1
loc_80BAA52:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	add r0, r0, r4
	ldr r1, off_80BAA80 // =off_80BAA84 
	ldrb r0, [r1,r0]
	add r1, r6, #0
	push {r0,r1}
	ldrb r2, [r5,#0x16]
	bl sub_800D618
	tst r0, r0
	pop {r0,r1}
	beq loc_80BAA72
	bl object_setPanelAllianceTimerShort
	b loc_80BAA78
loc_80BAA72:
	add r6, #1
	cmp r6, #3
	ble loc_80BAA52
loc_80BAA78:
	add r4, #1
	cmp r4, #3
	ble loc_80BAA50
	pop {r4,r6,pc}
off_80BAA80: .word off_80BAA84
off_80BAA84: .word byte_2030405
	.word 0x5040302
.endfunc // sub_80BAA4C

.func
.thumb_func
sub_80BAA8C:
	push {lr}
	ldr r1, off_80BAAA0 // =off_80BAAA4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
off_80BAAA0: .word off_80BAAA4
off_80BAAA4: .word sub_80BAAB0+1
	.word sub_80BAB00+1
	.word object_freeMemory+1
.endfunc // sub_80BAA8C

.func
.thumb_func
sub_80BAAB0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #8
	mov r1, #0x10
	bl sprite_decompress
	mov r1, #8
	mov r2, #0x10
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BAAB0

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #2
	mov r1, #0x10
	mov r2, #1
	bl sub_8010DF6
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80BAB00:
	push {lr}
	ldr r1, off_80BAB10 // =off_80BAB14 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BAB10: .word off_80BAB14
off_80BAB14: .word sub_80BAB30+1
	.word sub_80BAB84+1
	.word sub_80BABAC+1
	.word sub_80BAC50+1
	.word sub_80BAC98+1
	.word sub_80BADB4+1
	.word sub_80BADE4+1
.endfunc // sub_80BAB00

.func
.thumb_func
sub_80BAB30:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BAB54
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #2
	strh r0, [r5,#0x20]
	b locret_80BAB7E
loc_80BAB54:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BAB7E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80BAB80 // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80BAB76
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BAB7E
loc_80BAB76:
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BAB7E:
	pop {pc}
dword_80BAB80: .word 0x10010
.endfunc // sub_80BAB30

.func
.thumb_func
sub_80BAB84:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BAB9A
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	b locret_80BABAA
loc_80BAB9A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BABAA
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BABAA:
	pop {pc}
.endfunc // sub_80BAB84

.func
.thumb_func
sub_80BABAC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BABDA
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0
	str r0, [r5,#0x60]
	ldr r0, [r5,#0x60]
	ldr r1, off_80BAC48 // =byte_80BAC4C 
	ldrb r0, [r1,r0]
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0x35 
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	mov r1, #0x14
	mul r0, r1
	strh r0, [r5,#0x22]
	b locret_80BAC44
loc_80BABDA:
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x58]
	ldrh r0, [r0,#0x2c]
	mov r1, #1
	tst r0, r1
	bne loc_80BAC34
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80BAC0E
	ldr r0, [r5,#0x60]
	add r0, #1
	mov r1, #3
	and r0, r1
	str r0, [r5,#0x60]
	ldr r0, [r5,#0x60]
	ldr r1, off_80BAC48 // =byte_80BAC4C 
	ldrb r0, [r1,r0]
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0x35 
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
loc_80BAC0E:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80BAC44
	bl sub_8001532
	mov r1, #3
	and r0, r1
	str r0, [r5,#0x60]
	ldr r0, [r5,#0x60]
	ldr r1, off_80BAC48 // =byte_80BAC4C 
	ldrb r0, [r1,r0]
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BAC44
loc_80BAC34:
	mov r0, #0x83
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BAC44:
	pop {pc}
	.balign 4, 0x00
off_80BAC48: .word byte_80BAC4C
byte_80BAC4C: .byte 0x2, 0x4, 0x8, 0x6
.endfunc // sub_80BABAC

.func
.thumb_func
sub_80BAC50:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BAC78
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x23 
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x60]
	cmp r0, #3
	bne locret_80BAC96
	bl sub_80BAF06
	mov r0, #0x1c
	add r0, #0xff
	bl sound_play // () -> void
	b locret_80BAC96
loc_80BAC78:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x10
	beq loc_80BAC92
	cmp r0, #0
	bgt locret_80BAC96
	mov r0, #0x10
	strb r0, [r5,#9]
	ldr r0, [r5,#0x60]
	lsl r0, r0, #2
	strh r0, [r5,#0xa]
	b locret_80BAC96
loc_80BAC92:
	mov r0, #7
	strb r0, [r5,#0x10]
locret_80BAC96:
	pop {pc}
.endfunc // sub_80BAC50

.func
.thumb_func
sub_80BAC98:
	push {lr}
	ldr r1, off_80BACA8 // =off_80BACAC 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BACA8: .word off_80BACAC
off_80BACAC: .word sub_80BACBC+1
	.word sub_80BAD06+1
	.word sub_80BAD76+1
	.word sub_80BAD34+1
.endfunc // sub_80BAC98

.func
.thumb_func
sub_80BACBC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BACDC
	mov r0, #4
	strb r0, [r5,#0xb]
	bl sub_80BAE3C
	tst r0, r0
	beq loc_80BACFC
	strb r0, [r5,#5]
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #0
	strh r0, [r5,#0x20]
	b locret_80BAD04
loc_80BACDC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BAD04
	ldrb r0, [r5,#6]
	bl sub_80BAE60
	ldrb r0, [r5,#6]
	add r0, #1
	strb r0, [r5,#6]
	ldrb r1, [r5,#5]
	cmp r0, r1
	bge loc_80BACFC
	mov r0, #0xc
	strh r0, [r5,#0x20]
	b locret_80BAD04
loc_80BACFC:
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BAD04:
	pop {pc}
.endfunc // sub_80BACBC

.func
.thumb_func
sub_80BAD06:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BAD22
	mov r0, #4
	strb r0, [r5,#0xb]
	bl sub_80BAE7A
	mov r0, #0x99
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80BAD32
loc_80BAD22:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BAD32
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BAD32:
	pop {pc}
.endfunc // sub_80BAD06

.func
.thumb_func
sub_80BAD34:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BAD4A
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #0
	strh r0, [r5,#0x20]
	b locret_80BAD74
loc_80BAD4A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BAD74
	ldrb r0, [r5,#6]
	bl sub_80BAEDC
	tst r0, r0
	beq loc_80BAD6C
	ldrb r0, [r5,#6]
	add r0, #1
	strb r0, [r5,#6]
	cmp r0, #5
	bge loc_80BAD6C
	mov r0, #0xf
	strh r0, [r5,#0x20]
	b locret_80BAD74
loc_80BAD6C:
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BAD74:
	pop {pc}
.endfunc // sub_80BAD34

.func
.thumb_func
sub_80BAD76:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BAD8C
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #0
	strh r0, [r5,#0x20]
	b locret_80BADB2
loc_80BAD8C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BADB2
	ldrb r0, [r5,#6]
	bl sub_80BAEC0
	ldrb r0, [r5,#6]
	add r0, #1
	strb r0, [r5,#6]
	cmp r0, #3
	bge loc_80BADAA
	mov r0, #0x10
	strh r0, [r5,#0x20]
	b locret_80BADB2
loc_80BADAA:
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BADB2:
	pop {pc}
.endfunc // sub_80BAD76

.func
.thumb_func
sub_80BADB4:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BADC6
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80BADE2
loc_80BADC6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #5
	beq loc_80BADDE
	cmp r0, #0
	bgt locret_80BADE2
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BADE2
loc_80BADDE:
	mov r0, #8
	strb r0, [r5,#0x10]
locret_80BADE2:
	pop {pc}
.endfunc // sub_80BADB4

.func
.thumb_func
sub_80BADE4:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BADFA
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #2
	strh r0, [r5,#0x20]
	b locret_80BAE14
loc_80BADFA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BAE14
	mov r0, #2
	mov r1, #0x10
	bl loc_8011044
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80BAE14:
	pop {pc}
.endfunc // sub_80BADE4

.func
.thumb_func
sub_80BAE16:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x10
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BAE3A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80BAE3A:
	pop {pc}
.endfunc // sub_80BAE16

.func
.thumb_func
sub_80BAE3C:
	push {r7,lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80BAE54 // =off_80BAE58 
	ldr r2, [r1,r0]
	mov r3, #0
	mov r7, #0x64 
	add r7, r7, r5
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80BAE3C

	pop {r7,pc}
	.balign 4, 0x00
off_80BAE54: .word off_80BAE58
off_80BAE58: .word LCDControl
	.word start_
.func
.thumb_func
sub_80BAE60:
	push {r4,r6,lr}
	mov r1, #0x64 
	add r0, r0, r1
	ldrb r0, [r5,r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r2, #1
	mov r4, #1
	ldr r6, [r5,#0x2c]
	bl sub_80D6D18
	pop {r4,r6,pc}
.endfunc // sub_80BAE60

.func
.thumb_func
sub_80BAE7A:
	push {r4,r6,r7,lr}
	mov r7, #0
	sub r7, #1
loc_80BAE80:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	add r1, r1, r7
	mov r2, #2
	mov r4, #0
	mov r3, #0x1e
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #1
	lsl r3, r3, #0x10
	orr r4, r3
	ldr r6, [r5,#0x2c]
	push {r0,r1}
	bl sub_80D6EB0
	pop {r0,r1}
	push {r0,r1}
	bl object_isPanelSolid
.endfunc // sub_80BAE7A

	tst r0, r0
	pop {r0,r1}
	beq loc_80BAEB8
	mov r2, #7
	bl object_setPanelType
loc_80BAEB8:
	add r7, #1
	cmp r7, #1
	ble loc_80BAE80
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80BAEC0:
	push {r4,r6,r7,lr}
	add r4, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	add r1, r4, #1
	mov r2, #3
	ldr r6, [r5,#0x2c]
	bl sub_80DC4B8
	pop {r4,r6,r7,pc}
.endfunc // sub_80BAEC0

.func
.thumb_func
sub_80BAEDC:
	push {r4,r6,r7,lr}
	add r4, r0, #1
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_isPanelSolid
.endfunc // sub_80BAEDC

	tst r0, r0
	pop {r0,r1}
	bne loc_80BAEFC
	mov r0, #0
	b locret_80BAF04
loc_80BAEFC:
	mov r2, #4
	ldr r6, [r5,#0x2c]
	bl sub_80DC5B4
locret_80BAF04:
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80BAF06:
	push {r4,r6,lr}
	mov r4, #1
loc_80BAF0A:
	mov r6, #1
loc_80BAF0C:
	add r0, r4, #0
	add r1, r6, #0
	push {r0,r1}
	bl object_isPanelSolid
.endfunc // sub_80BAF06

	tst r0, r0
	pop {r0,r1}
	beq loc_80BAF40
	push {r0,r1}
	mov r2, #6
	bl object_setPanelType
	pop {r0,r1}
	push {r4,r6}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #8
	mov r4, #2
	mov r6, #5
	lsl r6, r6, #0x10
	orr r4, r6
	bl sub_80E05F6
	pop {r4,r6}
loc_80BAF40:
	add r6, #1
	cmp r6, #3
	ble loc_80BAF0C
	add r4, #1
	cmp r4, #6
	ble loc_80BAF0A
	pop {r4,r6,pc}
	.byte 0, 0
.func
.thumb_func
sub_80BAF50:
	push {lr}
	ldr r1, off_80BAF64 // =off_80BAF68 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80BAF64: .word off_80BAF68
off_80BAF68: .word sub_80BAF74+1
	.word loc_80BB00C+1
	.word object_freeMemory+1
.endfunc // sub_80BAF50

.func
.thumb_func
sub_80BAF74:
	push {r4,r7,lr}
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80BAF9E
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	bl sub_800FC9E
	b loc_80BAFA8
loc_80BAF9E:
	ldrh r0, [r4,#0x28]
	bl sub_800F26C
	add r2, r1, #0
	add r1, r0, #0
loc_80BAFA8:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BAF74

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_801002C
	pop {r5}
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl sub_8010DF6
	ldr r0, [r5,#0x4c]
	mov r1, #0xf
	bl sub_80E1352
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80BB00C
	pop {r4,r7,pc}
loc_80BB00C:
	push {r4,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80BB028
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80BB028:
	ldr r1, off_80BB034 // =off_80BB038 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,pc}
off_80BB034: .word off_80BB038
off_80BB038: .word sub_80BB048+1
	.word sub_80BB098+1
	.word sub_80BB0D2+1
	.word sub_80BB10C+1
.func
.thumb_func
sub_80BB048:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x16]
	ldr r1, off_80BB090 // =byte_80BB094 
	ldrb r6, [r1,r0]
	str r6, [r5,#0x6c]
	str r6, [r5,#0x74]
	add r0, #2
	ldrb r1, [r1,r0]
	str r1, [r5,#0x70]
	mov r1, #1
	str r1, [r5,#0x78]
	bl sub_80BB23E
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
	ldr r0, off_80BB288 // =0x12c 
	strh r0, [r5,#0x22]
	mov r0, #6
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	bl sub_80BB098
	pop {r4,r6,pc}
	.word 0, 0, 0
	.byte 0, 0
off_80BB090: .word byte_80BB094
byte_80BB094: .byte 0x5, 0x2, 0x1, 0x6
.endfunc // sub_80BB048

.func
.thumb_func
sub_80BB098:
	push {lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	beq loc_80BB0C6
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80BB0BA
	mov r0, #6
	strh r0, [r5,#0x20]
	bl ho_80BB170
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
loc_80BB0BA:
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x58]
	ldrh r0, [r0,#0x2c]
	mov r1, #1
	tst r0, r1
	beq locret_80BB0D0
loc_80BB0C6:
	mov r0, #0xbd
	bl sound_play // () -> void
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BB0D0:
	pop {pc}
.endfunc // sub_80BB098

.func
.thumb_func
sub_80BB0D2:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BB0E2
	mov r0, #0x10
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BB0E2:
	bl sub_80BB1D8
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	ldrh r0, [r5,#0x20]
	cmp r0, #4
	bne loc_80BB0F6
	mov r0, #0xc
	strb r0, [r5,#0x10]
loc_80BB0F6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BB10A
	bl sub_80BB1FE
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80BB10A:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BB0D2

.func
.thumb_func
sub_80BB10C:
	push {r4,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BB13C
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	ldr r0, [r5,#0x4c]
	bl sub_80E13DC
	ldr r1, [r5,#0x60]
	mov r0, #0
	strb r0, [r1]
locret_80BB13C:
	pop {r4,pc}
.endfunc // sub_80BB10C

.func
.thumb_func
sub_80BB13E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x13
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BB16E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	mov r1, #1
	strb r1, [r7]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrh r1, [r5,#0x28]
	strh r1, [r0,#0x28]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80BB16E:
	pop {pc}
.endfunc // sub_80BB13E

.func
.thumb_func
ho_80BB170:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	ldr r1, off_80BB188 // =jt_80BB18C 
	ldrb r0, [r5,#0xb]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_80BB23E
	pop {r4,r6,r7,pc}
off_80BB188: .word jt_80BB18C
jt_80BB18C: .word sub_80BB19C+1
	.word sub_80BB1A6+1
	.word sub_80BB1BA+1
	.word sub_80BB1C4+1
.endfunc // ho_80BB170

.func
.thumb_func
sub_80BB19C:
	mov r0, #2
	str r0, [r5,#0x78]
	mov r0, #4
	strb r0, [r5,#0xb]
	mov pc, lr
.endfunc // sub_80BB19C

.func
.thumb_func
sub_80BB1A6:
	push {lr}
	ldr r1, [r5,#0x74]
	sub r1, r1, r6
	str r1, [r5,#0x74]
	ldr r0, [r5,#0x70]
	cmp r0, r1
	bne locret_80BB1B8
	mov r0, #8
	strb r0, [r5,#0xb]
locret_80BB1B8:
	pop {pc}
.endfunc // sub_80BB1A6

.func
.thumb_func
sub_80BB1BA:
	mov r0, #1
	str r0, [r5,#0x78]
	mov r0, #0xc
	strb r0, [r5,#0xb]
	mov pc, lr
.endfunc // sub_80BB1BA

.func
.thumb_func
sub_80BB1C4:
	push {lr}
	ldr r1, [r5,#0x74]
	add r1, r1, r6
	str r1, [r5,#0x74]
	ldr r0, [r5,#0x6c]
	cmp r0, r1
	bne locret_80BB1D6
	mov r0, #0
	strb r0, [r5,#0xb]
locret_80BB1D6:
	pop {pc}
.endfunc // sub_80BB1C4

.func
.thumb_func
sub_80BB1D8:
	push {lr}
	ldrh r0, [r5,#0x22]
	mov r1, #4
	tst r0, r1
	bne locret_80BB1FC
	ldr r0, [r5,#0x74]
	ldr r1, [r5,#0x78]
	mov r2, #2
	ldrb r3, [r5,#0x16]
	bl sub_8109660
	ldr r0, [r5,#0x74]
	ldr r1, [r5,#0x78]
	add r1, #1
	mov r2, #2
	ldrb r3, [r5,#0x16]
	bl sub_8109660
locret_80BB1FC:
	pop {pc}
.endfunc // sub_80BB1D8

.func
.thumb_func
sub_80BB1FE:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r7, r0, #0
	ldr r0, [r5,#0x74]
	ldr r1, [r5,#0x78]
	mov r2, #1
	ldr r4, dword_80BB28C // =0x1e04 
	ldr r6, [r5,#0x2c]
	bl sub_80BB228
.endfunc // sub_80BB1FE

	add r0, r0, r7
	bl sub_80BB228
	add r1, #1
	bl sub_80BB228
	sub r0, r0, r7
	bl sub_80BB228
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80BB228:
	push {r0-r3,lr}
	push {r0-r3}
	bl object_getPanelParameters
.endfunc // sub_80BB228

	mov r1, #0x10
	tst r0, r1
	pop {r0-r3}
	beq locret_80BB23C
	bl sub_80C8DE0
locret_80BB23C:
	pop {r0-r3,pc}
.func
.thumb_func
sub_80BB23E:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	mov r4, #0x48 
	ldr r0, [r5,#0x74]
	ldr r1, [r5,#0x78]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	bl sub_80BB278
	ldr r0, dword_80BB290 // =0x280000 
	mul r0, r6
	add r1, r1, r0
	bl sub_80BB278
	ldr r0, dword_80BB294 // =0x180000 
	add r2, r2, r0
	bl sub_80BB278
	ldr r0, dword_80BB290 // =0x280000 
	mul r0, r6
	sub r1, r1, r0
	bl sub_80BB278
	pop {r4,r6,pc}
.endfunc // sub_80BB23E

.func
.thumb_func
sub_80BB278:
	push {r1-r3,lr}
	bl sub_80E05F6
	cmp r0, #0
	beq locret_80BB286
	mov r1, #6
	strh r1, [r0,#0x20]
locret_80BB286:
	pop {r1-r3,pc}
off_80BB288: .word 0x12C
dword_80BB28C: .word 0x1E04
dword_80BB290: .word 0x280000
dword_80BB294: .word 0x180000
	.word 0
	.byte 0, 0, 0, 0
.endfunc // sub_80BB278

.func
.thumb_func
sub_80BB2A0:
	push {lr}
	ldr r1, off_80BB2B4 // =off_80BB2B8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80BB2B4: .word off_80BB2B8
off_80BB2B8: .word sub_80BB2C4+1
	.word loc_80BB35C+1
	.word object_freeMemory+1
.endfunc // sub_80BB2A0

.func
.thumb_func
sub_80BB2C4:
	push {r4,r7,lr}
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80BB2EE
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	bl sub_800FC9E
	b loc_80BB2F8
loc_80BB2EE:
	ldrh r0, [r4,#0x28]
	bl sub_800F26C
	add r2, r1, #0
	add r1, r0, #0
loc_80BB2F8:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BB2C4

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_801002C
	pop {r5}
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl sub_8010DF6
	ldr r0, [r5,#0x4c]
	mov r1, #0xf
	bl sub_80E1352
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80BB35C
	pop {r4,r7,pc}
loc_80BB35C:
	push {r4,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80BB378
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80BB378:
	ldr r1, off_80BB384 // =off_80BB388 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,pc}
off_80BB384: .word off_80BB388
off_80BB388: .word sub_80BB398+1
	.word sub_80BB3F6+1
	.byte 0x2F 
	.byte 0xB4
	.byte 0xB
	.byte  8
	.byte 0x6B 
	.byte 0xB4
	.byte 0xB
	.byte  8
.func
.thumb_func
sub_80BB398:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	mov r1, #2
	str r1, [r5,#0x78]
	ldrb r0, [r5,#0x16]
	ldr r1, off_80BB3F0 // =byte_80BB3F4 
	ldrb r6, [r1,r0]
	str r6, [r5,#0x6c]
loc_80BB3AC:
	add r0, r6, #0
	ldrb r1, [r5,#0x16]
	bl sub_800D5F0
.endfunc // sub_80BB398

	cmp r0, #0
	beq loc_80BB3BC
	sub r6, r6, r4
	b loc_80BB3AC
loc_80BB3BC:
	add r6, r6, r4
	str r6, [r5,#0x70]
	str r6, [r5,#0x74]
	mov r0, #0x49 
	mov r1, #0xc
	bl sub_80BB59A
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
	ldr r0, off_80BB5EC // =0x12c 
	strh r0, [r5,#0x22]
	mov r0, #0xc
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	bl sub_80BB3F6
	pop {r4,r6,pc}
	.word 0, 0
	.byte 0, 0, 0, 0
off_80BB3F0: .word byte_80BB3F4
byte_80BB3F4: .byte 0x6, 0x1
.func
.thumb_func
sub_80BB3F6:
	push {lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	beq loc_80BB424
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80BB418
	mov r0, #0xc
	strh r0, [r5,#0x20]
	bl sub_80BB4CE
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
loc_80BB418:
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x58]
	ldrh r0, [r0,#0x2c]
	mov r1, #1
	tst r0, r1
	beq locret_80BB42C
loc_80BB424:
	ldrb r0, [r5,#0xb]
	str r0, [r5,#0x7c]
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BB42C:
	pop {pc}
.endfunc // sub_80BB3F6

	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BB43E
	mov r0, #0x10
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BB43E:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	ldrh r0, [r5,#0x20]
	cmp r0, #4
	bne loc_80BB44E
	mov r0, #0xc
	strb r0, [r5,#0x10]
loc_80BB44E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BB468
	mov r0, #0xb4
	bl sound_play // () -> void
	bl sub_80BB52E
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80BB468:
	pop {r4,r6,r7,pc}
	push {r4,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BB49A
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	ldr r0, [r5,#0x4c]
	bl sub_80E13DC
	ldr r1, [r5,#0x60]
	mov r0, #0
	strb r0, [r1]
locret_80BB49A:
	pop {r4,pc}
.func
.thumb_func
sub_80BB49C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x14
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BB4CC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	mov r1, #1
	strb r1, [r7]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrh r1, [r5,#0x28]
	strh r1, [r0,#0x28]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80BB4CC:
	pop {pc}
.endfunc // sub_80BB49C

.func
.thumb_func
sub_80BB4CE:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	ldr r1, off_80BB4EC // =off_80BB4F0 
	ldrb r0, [r5,#0xb]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	mov r0, #0x49 
	mov r1, #0xc
	bl sub_80BB59A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80BB4EC: .word off_80BB4F0
off_80BB4F0: .word sub_80BB4F8+1
	.word sub_80BB514+1
.endfunc // sub_80BB4CE

.func
.thumb_func
sub_80BB4F8:
	ldr r1, [r5,#0x74]
	ldr r0, [r5,#0x6c]
	cmp r0, r1
	bne loc_80BB50E
	sub r0, r0, r6
	str r0, [r5,#0x74]
	mov r0, #1
	str r0, [r5,#0x78]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BB512
loc_80BB50E:
	add r1, r1, r6
	str r1, [r5,#0x74]
locret_80BB512:
	mov pc, lr
.endfunc // sub_80BB4F8

.func
.thumb_func
sub_80BB514:
	ldr r1, [r5,#0x78]
	cmp r1, #3
	blt loc_80BB528
	ldr r0, [r5,#0x70]
	str r0, [r5,#0x74]
	mov r0, #2
	str r0, [r5,#0x78]
	mov r0, #0
	strb r0, [r5,#0xb]
	b locret_80BB52C
loc_80BB528:
	add r1, #1
	str r1, [r5,#0x78]
locret_80BB52C:
	mov pc, lr
.endfunc // sub_80BB514

.func
.thumb_func
sub_80BB52E:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r7, r0, #0
	mov r0, #4
	ldr r1, [r5,#0x7c]
	cmp r1, #0
	beq loc_80BB540
	mov r0, #0x1d
loc_80BB540:
	ldr r7, off_80BB5F0 // =off_8019B78 
	lsl r0, r0, #2
	ldr r7, [r7,r0]
loc_80BB546:
	mov r0, #0
	ldrsb r0, [r7,r0]
	cmp r0, #0x7f
	beq loc_80BB588
	ldr r2, [r5,#0x74]
	add r0, r0, r2
	mov r1, #1
	ldrsb r1, [r7,r1]
	ldr r2, [r5,#0x78]
	add r1, r1, r2
	push {r0,r1,r7}
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80BB5F4 // =0xa050601 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C53A6
	pop {r0,r1,r7}
	push {r0,r1}
	bl object_breakPanel_dup2
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0
	bl sub_80E05F6
	add r7, #2
	b loc_80BB546
loc_80BB588:
	mov r0, #0x10
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #1
	mov r1, #0x1e
	bl sub_80302A8
	pop {r4,r6,r7,pc}
.endfunc // sub_80BB52E

.func
.thumb_func
sub_80BB59A:
	push {r4,r6,r7,lr}
	add r4, r0, #0
	add r7, r1, #0
	ldr r0, [r5,#0x74]
	ldr r1, [r5,#0x78]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	bl sub_80BB5DC
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80BB5CA
	ldr r0, dword_80BB5F8 // =0x180000 
	sub r2, r2, r0
	bl sub_80BB5DC
	ldr r0, dword_80BB5FC // =0x300000 
	add r2, r2, r0
	bl sub_80BB5DC
	b locret_80BB5DA
loc_80BB5CA:
	ldr r0, dword_80BB600 // =0x280000 
	sub r1, r1, r0
	bl sub_80BB5DC
	ldr r0, dword_80BB604 // =0x500000 
	add r1, r1, r0
	bl sub_80BB5DC
locret_80BB5DA:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BB59A

.func
.thumb_func
sub_80BB5DC:
	push {r1-r3,lr}
	bl sub_80E05F6
	cmp r0, #0
	beq locret_80BB5E8
	strh r7, [r0,#0x20]
locret_80BB5E8:
	pop {r1-r3,pc}
	.balign 4, 0x00
off_80BB5EC: .word 0x12C
off_80BB5F0: .word off_8019B78
dword_80BB5F4: .word 0xA050601
dword_80BB5F8: .word 0x180000
dword_80BB5FC: .word 0x300000
dword_80BB600: .word 0x280000
dword_80BB604: .word 0x500000
.endfunc // sub_80BB5DC

loc_80BB608:
	push {lr}
	ldr r1, off_80BB61C // =off_80BB620 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80BB61C: .word off_80BB620
off_80BB620: .word sub_80BB62C+1
	.word loc_80BB66A+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BB62C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r1, #8
	mov r2, #4
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BB62C

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80BB66A:
	push {lr}
	ldr r1, off_80BB678 // =off_80BB67C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BB678: .word off_80BB67C
off_80BB67C: .word sub_80BB694+1
	.word sub_80BB6E8+1
	.word sub_80BB710+1
	.word sub_80BB772+1
	.word sub_80BB79A+1
	.word sub_80BB7CC+1
.func
.thumb_func
sub_80BB694:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BB6B8
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80BB6E2
loc_80BB6B8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BB6E2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80BB6E4 // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80BB6DA
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BB6E2
loc_80BB6DA:
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BB6E2:
	pop {pc}
dword_80BB6E4: .word 0x10010
.endfunc // sub_80BB694

.func
.thumb_func
sub_80BB6E8:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BB6FE
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	str r0, [r5,#0x20]
	b locret_80BB70E
loc_80BB6FE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BB70E
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BB70E:
	pop {pc}
.endfunc // sub_80BB6E8

.func
.thumb_func
sub_80BB710:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BB73A
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #3
	str r0, [r5,#0x60]
	bl sub_80BB866
	bl sub_80BB81C
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
	ldr r0, off_80BB910 // =0x168 
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x22]
	b locret_80BB770
loc_80BB73A:
	bl sub_80BB89C
	tst r0, r0
	bne loc_80BB74A
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80BB754
loc_80BB74A:
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BB770
loc_80BB754:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80BB770
	bl sub_80BB866
	bl sub_80BB81C
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x22]
locret_80BB770:
	pop {pc}
.endfunc // sub_80BB710

.func
.thumb_func
sub_80BB772:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BB788
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0xa
	str r0, [r5,#0x20]
	b locret_80BB798
loc_80BB788:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BB798
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BB798:
	pop {pc}
.endfunc // sub_80BB772

.func
.thumb_func
sub_80BB79A:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BB7BA
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	bl sub_80BB8B0
	mov r0, #0xba
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	b locret_80BB7CA
loc_80BB7BA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BB7CA
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BB7CA:
	pop {pc}
.endfunc // sub_80BB79A

.func
.thumb_func
sub_80BB7CC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BB7E2
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80BB7F4
loc_80BB7E2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BB7F4
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80BB7F4:
	pop {pc}
.endfunc // sub_80BB7CC

.func
.thumb_func
sub_80BB7F6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x15
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BB81A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80BB81A:
	pop {pc}
.endfunc // sub_80BB7F6

.func
.thumb_func
sub_80BB81C:
	push {r4,r6,lr}
	mov r6, #1
loc_80BB820:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r6
	ldr r1, [r5,#0x64]
	lsl r1, r1, #1
	ldr r2, off_80BB85C // =dword_80BB860 
	add r2, r2, r1
	mov r3, #0
	ldrsb r1, [r2,r3]
	mul r1, r0
	mov r3, #1
	ldrsb r2, [r2,r3]
	mul r2, r6
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	add r1, r1, r2
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq locret_80BB85A
	ldrb r4, [r5,#4]
	bl sub_80E7942
	add r6, #1
	cmp r6, #5
	ble loc_80BB820
locret_80BB85A:
	pop {r4,r6,pc}
off_80BB85C: .word dword_80BB860
dword_80BB860: .word 0x1FF01
	.byte  1
	.byte  1
.endfunc // sub_80BB81C

.func
.thumb_func
sub_80BB866:
	push {lr}
	ldrb r2, [r5,#0x13]
	sub r2, #1
	mov r3, #5
	mul r2, r3
	ldr r3, off_80BB888 // =dword_80BB88C 
	add r2, r2, r3
	ldr r1, [r5,#0x60]
	add r1, #1
	ldrb r0, [r2,r1]
	cmp r0, #0xff
	bne loc_80BB882
	ldrb r0, [r2]
	mov r1, #0
loc_80BB882:
	str r0, [r5,#0x64]
	str r1, [r5,#0x60]
	pop {pc}
off_80BB888: .word dword_80BB88C
dword_80BB88C: .word 0xFFFF0201, 0x20100FF, 0x100FF01, 0xFFFFFF
.endfunc // sub_80BB866

.func
.thumb_func
sub_80BB89C:
	push {lr}
	mov r0, #0
	ldr r1, [r5,#0x4c]
	ldr r1, [r1,#0x58]
	ldrh r1, [r1,#0x2c]
	mov r2, #1
	tst r1, r2
	beq locret_80BB8AE
	mov r0, #1
locret_80BB8AE:
	pop {pc}
.endfunc // sub_80BB89C

.func
.thumb_func
sub_80BB8B0:
	push {r4,r6,lr}
	mov r6, #1
loc_80BB8B4:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r6
	ldr r1, [r5,#0x64]
	lsl r1, r1, #1
	ldr r2, off_80BB904 // =dword_80BB908 
	add r2, r2, r1
	mov r3, #0
	ldrsb r1, [r2,r3]
	mul r1, r0
	mov r3, #1
	ldrsb r2, [r2,r3]
	mul r2, r6
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	add r1, r1, r2
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq locret_80BB902
	push {r6}
	ldrb r2, [r5,#0xe]
	ldr r4, [r5,#0x64]
	mov r3, #0x3c 
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x10
	orr r4, r3
	ldr r6, [r5,#0x2c]
	bl sub_80DDA5A
	pop {r6}
	add r6, #1
	cmp r6, #5
	ble loc_80BB8B4
locret_80BB902:
	pop {r4,r6,pc}
off_80BB904: .word dword_80BB908
dword_80BB908: .word 0x1FF01, 0x101
off_80BB910: .word 0x168
.endfunc // sub_80BB8B0

loc_80BB914:
	push {lr}
	ldr r1, off_80BB928 // =off_80BB92C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80BB928: .word off_80BB92C
off_80BB92C: .word sub_80BB938+1
	.word loc_80BB976+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BB938:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r1, #8
	mov r2, #5
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BB938

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80BB976:
	push {lr}
	ldr r1, off_80BB984 // =off_80BB988 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BB984: .word off_80BB988
off_80BB988: .word sub_80BB99C+1
	.word sub_80BB9F0+1
	.word sub_80BBA26+1
	.word sub_80BBA8E+1
	.word sub_80BBAB8+1
.func
.thumb_func
sub_80BB99C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BB9C0
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80BB9EA
loc_80BB9C0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BB9EA
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80BB9EC // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80BB9E2
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BB9EA
loc_80BB9E2:
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BB9EA:
	pop {pc}
dword_80BB9EC: .word 0x10010
.endfunc // sub_80BB99C

.func
.thumb_func
sub_80BB9F0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BBA08
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80BBB38
	str r0, [r5,#0x60]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	b locret_80BBA24
loc_80BBA08:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x1e
	beq loc_80BBA20
	cmp r0, #0
	bgt locret_80BBA24
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BBA24
loc_80BBA20:
	mov r0, #0xf
	strb r0, [r5,#0x10]
locret_80BBA24:
	pop {pc}
.endfunc // sub_80BB9F0

.func
.thumb_func
sub_80BBA26:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BBA3E
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0xe3
	bl sound_play // () -> void
	bl sub_80BBAEC
	b locret_80BBA8C
loc_80BBA3E:
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80BBA72
	bl object_isPanelSolid
	tst r0, r0
	beq loc_80BBA84
	bl sub_800E2AC
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80BBA72
	bl sub_80BBB18
loc_80BBA72:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BBA8C
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BBA8C
loc_80BBA84:
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BBA8C:
	pop {r4,pc}
.endfunc // sub_80BBA26

.func
.thumb_func
sub_80BBA8E:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BBAA4
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	str r0, [r5,#0x20]
	b locret_80BBAB6
loc_80BBAA4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BBAB6
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80BBAB6:
	pop {pc}
.endfunc // sub_80BBA8E

.func
.thumb_func
sub_80BBAB8:
	push {lr}
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80BBAB8

.func
.thumb_func
sub_80BBAC6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x16
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BBAEA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80BBAEA:
	pop {pc}
.endfunc // sub_80BBAC6

.func
.thumb_func
sub_80BBAEC:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80BBB94 // =0x40000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #7
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80BBB02
	mov r0, #0
loc_80BBB02:
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	cmp r0, #0
	bge loc_80BBB0C
	neg r0, r0
loc_80BBB0C:
	mov r2, #0x28 
	lsl r2, r2, #0x10
	mul r0, r2
	svc 6
	strh r0, [r5,#0x20]
	pop {pc}
.endfunc // sub_80BBAEC

.func
.thumb_func
sub_80BBB18:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80BBB30 // =0x6050a01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80BBB34 // =0x3 
	bl sub_80C53A6
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80BBB30: .word 0x6050A01
dword_80BBB34: .word 0x3
.endfunc // sub_80BBB18

.func
.thumb_func
sub_80BBB38:
	push {r4,r6,r7,lr}
	mov r4, #0
loc_80BBB3C:
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	add r1, r4, #1
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, off_80BBB88 // =dword_80BBB8C 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80BBB90 - 0x80bbb8c)
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80BBB38

	tst r0, r0
	pop {r0,r1}
	beq loc_80BBB84
	push {r4}
	ldrb r2, [r5,#0xe]
	mov r3, #1
	lsl r4, r4, #8
	orr r4, r3
	mov r3, #0x3c 
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0xff
	lsl r3, r3, #0x18
	orr r4, r3
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80BBB94 // =0x40000 
	bl sub_80DB014
	pop {r4}
	add r4, #1
	cmp r4, #4
	ble loc_80BBB3C
loc_80BBB84:
	add r0, r4, #0
	pop {r4,r6,r7,pc}
off_80BBB88: .word dword_80BBB8C
dword_80BBB8C: .word 0x10
dword_80BBB90: .word 0xF800000
dword_80BBB94: .word 0x40000
loc_80BBB98:
	push {lr}
	ldr r1, off_80BBBAC // =off_80BBBB0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80BBBAC: .word off_80BBBB0
off_80BBBB0: .word sub_80BBBBC+1
	.word sub_80BBC04+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BBBBC:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r1, #8
	mov r2, #9
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BBBBC

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #2
	mov r1, #9
	mov r2, #1
	bl sub_8010DF6
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80BBC04:
	push {lr}
	ldr r1, off_80BBC14 // =off_80BBC18 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BBC14: .word off_80BBC18
off_80BBC18: .word sub_80BBC2C+1
	.word sub_80BBC80+1
	.word sub_80BBCD8+1
	.word sub_80BBD60+1
	.word sub_80BBDAC+1
.endfunc // sub_80BBC04

.func
.thumb_func
sub_80BBC2C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BBC50
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #9
	str r0, [r5,#0x20]
	b locret_80BBC7A
loc_80BBC50:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BBC7A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80BBC7C // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80BBC72
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BBC7A
loc_80BBC72:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BBC7A:
	pop {pc}
dword_80BBC7C: .word 0x10010
.endfunc // sub_80BBC2C

.func
.thumb_func
sub_80BBC80:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BBCA2
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldr r1, dword_80BBF04 // =0x8000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0x28 
	str r0, [r5,#0x20]
	b locret_80BBCD6
loc_80BBCA2:
	ldrh r0, [r5,#0x20]
	cmp r0, #0x19
	bgt loc_80BBCB4
	cmp r0, #0xa
	blt loc_80BBCB4
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
loc_80BBCB4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x19
	beq loc_80BBCCC
	cmp r0, #0
	bgt locret_80BBCD6
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BBCD6
loc_80BBCCC:
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0xe6
	bl sound_play // () -> void
locret_80BBCD6:
	pop {pc}
.endfunc // sub_80BBC80

.func
.thumb_func
sub_80BBCD8:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BBCFE
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	bl sub_80BBE0E
	mov r0, #0xc1
	add r0, #0xff
	bl sound_play // () -> void
	mov r4, #1
	bl sub_80E7896
	str r0, [r5,#0x60]
	b locret_80BBD48
loc_80BBCFE:
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80BBD16
	bl sub_80BBE3A
loc_80BBD16:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80BBD4C // =dword_80BBD50 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_80BBD40
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BBD48
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BBD48
loc_80BBD40:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BBD48:
	pop {r4,pc}
	.balign 4, 0x00
off_80BBD4C: .word dword_80BBD50
dword_80BBD50: .word 0x10, 0x5800000, 0x10, 0xA800000
.endfunc // sub_80BBCD8

.func
.thumb_func
sub_80BBD60:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BBD88
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x96
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	mov r0, #0
	str r0, [r5,#0x64]
	str r0, [r5,#0x68]
	mov r0, #0xe5
	bl sound_play // () -> void
	mov r0, #2
	ldrh r1, [r5,#0x20]
	bl sub_80302A8
loc_80BBD88:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80BBDA2
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80BBDAA
	bl sub_80BBE58
	mov r0, #0x19
	strh r0, [r5,#0x22]
	b locret_80BBDAA
loc_80BBDA2:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BBDAA:
	pop {pc}
.endfunc // sub_80BBD60

.func
.thumb_func
sub_80BBDAC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BBDCC
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	str r0, [r5,#0x20]
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq locret_80BBDE6
	bl sub_80E78AE
	b locret_80BBDE6
loc_80BBDCC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BBDE6
	mov r0, #2
	mov r1, #9
	bl loc_8011044
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80BBDE6:
	pop {pc}
.endfunc // sub_80BBDAC

.func
.thumb_func
sub_80BBDE8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x17
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BBE0C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80BBE0C:
	pop {pc}
.endfunc // sub_80BBDE8

.func
.thumb_func
sub_80BBE0E:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80BBF08 // =0x80000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #6
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80BBE24
	mov r0, #1
loc_80BBE24:
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	cmp r0, #0
	bge loc_80BBE2E
	neg r0, r0
loc_80BBE2E:
	mov r2, #0x28 
	lsl r2, r2, #0x10
	mul r0, r2
	svc 6
	strh r0, [r5,#0x20]
	pop {pc}
.endfunc // sub_80BBE0E

.func
.thumb_func
sub_80BBE3A:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80BBE50 // =0x15050a01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80BBE54 // =0x3 
	bl sub_80C53A6
	pop {r4,r6,r7,pc}
dword_80BBE50: .word 0x15050A01
dword_80BBE54: .word 0x3
.endfunc // sub_80BBE3A

.func
.thumb_func
sub_80BBE58:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	str r0, [sp]
	str r1, [sp,#4]
	ldr r0, [r5,#0x64]
	ldr r1, [r5,#0x68]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80BBEDC // =off_80BBEE0 
	add r1, r1, r0
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80BBE58

	add r6, r0, #0
	tst r6, r6
	bne loc_80BBE9C
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80BBEF0 // =dword_80BBEF4 
	add r1, r1, r0
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_80BBECE
loc_80BBE9C:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	str r0, [r5,#0x64]
	str r1, [r5,#0x68]
	ldrb r2, [r5,#0xe]
	mov r4, #0xa
	mov r3, #1
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #1
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x18
	orr r4, r3
	ldr r6, [r5,#0x2c]
	bl sub_80D54F0
loc_80BBECE:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80BBEDC: .word off_80BBEE0
off_80BBEE0: .word BG2Rotation_ScalingParameterA_dx_
	.byte 0, 0, 0, 0
	.word start_
	.word 0x20
off_80BBEF0: .word dword_80BBEF4
dword_80BBEF4: .word 0x20, 0x0, 0x0
	.word 0x20
dword_80BBF04: .word 0x8000
dword_80BBF08: .word 0x80000
loc_80BBF0C:
	push {lr}
	ldr r1, off_80BBF20 // =off_80BBF24 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
off_80BBF20: .word off_80BBF24
off_80BBF24: .word sub_80BBF30+1
	.word loc_80BBF6E+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BBF30:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0xa
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BBF30

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80BBF6E:
	push {lr}
	ldr r1, off_80BBF7C // =off_80BBF80 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BBF7C: .word off_80BBF80
off_80BBF80: .word sub_80BBF94+1
	.word sub_80BBFE8+1
	.word sub_80BC024+1
	.word sub_80BC058+1
	.word sub_80BC0B0+1
.func
.thumb_func
sub_80BBF94:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BBFB8
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0xa
	str r0, [r5,#0x20]
	b locret_80BBFE2
loc_80BBFB8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BBFE2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80BBFE4 // =0x10010 
	and r0, r1
	cmp r0, r1
	bne loc_80BBFDA
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BBFE2
loc_80BBFDA:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BBFE2:
	pop {pc}
dword_80BBFE4: .word 0x10010
.endfunc // sub_80BBF94

.func
.thumb_func
sub_80BBFE8:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BBFFA
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x14
	str r0, [r5,#0x20]
	b locret_80BC022
loc_80BBFFA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xa
	beq loc_80BC012
	cmp r0, #0
	bgt locret_80BC022
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BC022
loc_80BC012:
	bl sub_80BC100
	strb r0, [r5,#4]
	tst r0, r0
	beq locret_80BC022
	mov r0, #0xad
	bl sound_play // () -> void
locret_80BC022:
	pop {pc}
.endfunc // sub_80BBFE8

.func
.thumb_func
sub_80BC024:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BC03A
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0x22 
	str r0, [r5,#0x20]
	b locret_80BC056
loc_80BC03A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #9
	beq loc_80BC052
	cmp r0, #0
	bgt locret_80BC056
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BC056
loc_80BC052:
	mov r0, #0x11
	strb r0, [r5,#0x10]
locret_80BC056:
	pop {pc}
.endfunc // sub_80BC024

.func
.thumb_func
sub_80BC058:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BC080
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80BC13E
	mov r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	strb r0, [r5,#5]
	ldrb r0, [r5,#4]
	add r0, #1
	mov r1, #0x14
	mul r0, r1
	strh r0, [r5,#0x20]
	strh r1, [r5,#0x22]
	b locret_80BC0AE
loc_80BC080:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80BC0A6
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80BC0AE
	bl sub_80BC160
	mov r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#5]
	add r0, #1
	strb r0, [r5,#5]
	mov r1, #0x14
	strh r1, [r5,#0x22]
	b locret_80BC0AE
loc_80BC0A6:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BC0AE:
	pop {pc}
.endfunc // sub_80BC058

.func
.thumb_func
sub_80BC0B0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80BC0C6
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	str r0, [r5,#0x20]
	b locret_80BC0D8
loc_80BC0C6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BC0D8
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80BC0D8:
	pop {pc}
.endfunc // sub_80BC0B0

.func
.thumb_func
sub_80BC0DA:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x18
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BC0FE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80BC0FE:
	pop {pc}
.endfunc // sub_80BC0DA

.func
.thumb_func
sub_80BC100:
	push {r4,r6,r7,lr}
	mov r0, #0xa0
	mov r7, r10
	ldr r7, [r7,#0x18]
	add r7, r7, r0
	mov r4, #0
	mov r6, #0
loc_80BC10E:
	ldr r0, [r7,r4]
	tst r0, r0
	beq loc_80BC134
	add r1, r6, #0
	lsl r1, r1, #2
	mov r2, #0x60 
	add r1, r1, r2
	ldrh r2, [r0,#0x28]
	push {r0-r2}
	add r0, r2, #0
	bl sub_800F486
	tst r0, r0
	pop {r0-r2}
	beq loc_80BC134
	str r2, [r5,r1]
	add r6, #1
	bl sub_800F884
loc_80BC134:
	add r4, #4
	cmp r4, #0x1c
	ble loc_80BC10E
	add r0, r6, #0
	pop {r4,r6,r7,pc}
.endfunc // sub_80BC100

.func
.thumb_func
sub_80BC13E:
	push {r4,r6,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r4, #1
	ldr r6, [r5,#0x2c]
	bl sub_80DB800
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x51 
	add r4, r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	pop {r4,r6,pc}
.endfunc // sub_80BC13E

.func
.thumb_func
sub_80BC160:
	push {r6,r7,lr}
	ldrb r0, [r5,#5]
	lsl r0, r0, #2
	mov r1, #0x60 
	add r1, r1, r0
	ldr r7, [r5,r1]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	bl sub_80DBC90
	pop {r6,r7,pc}
	.balign 4, 0x00
.endfunc // sub_80BC160

loc_80BC17C:
	push {lr}
	ldr r1, off_80BC18C // =off_80BC190 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BC18C: .word off_80BC190
off_80BC190: .word sub_80BC19C+1
	.word loc_80BC1DA+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BC19C:
	push {r7,lr}
	mov r0, #0x80
	mov r1, #4
	mov r2, #3
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BC19C

	bl sub_8002E52
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #3
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	mov r0, #0x65 
	mov r1, #0x60 
	strb r1, [r5,r0]
	bl loc_80BC1DA
	pop {r7,pc}
loc_80BC1DA:
	push {lr}
	bl sub_802D234
	cmp r0, #6
	bne loc_80BC1FE
	ldrb r0, [r5]
	mov r1, #4
	tst r0, r1
	beq loc_80BC1FE
	mov r0, r10
	ldr r0, [r0,#0x18]
	ldrb r0, [r0,#1]
	cmp r0, #0xc
	bne loc_80BC1FE
	ldrb r0, [r5]
	mov r1, #4
	bic r0, r1
	strb r0, [r5]
loc_80BC1FE:
	ldr r4, [r5,#0x4c]
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r1, off_80BC254 // =off_80BC258 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BC254: .word off_80BC258
off_80BC258: .word sub_80BC268+1
	.word sub_80BC284+1
	.word sub_80BC29C+1
	.word sub_80BC36E+1
.func
.thumb_func
sub_80BC268:
	push {lr}
	bl sub_80BC424
	bl sub_800139A
	lsr r0, r0, #2
	bcc locret_80BC282
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	bl sub_80BC284
locret_80BC282:
	pop {pc}
.endfunc // sub_80BC268

.func
.thumb_func
sub_80BC284:
	push {lr}
	bl sub_80BC434
	tst r0, r0
	beq locret_80BC29A
	bl sub_80BC494
	tst r0, r0
	beq locret_80BC29A
	bl sub_80BC424
locret_80BC29A:
	pop {pc}
.endfunc // sub_80BC284

.func
.thumb_func
sub_80BC29C:
	push {lr}
	bl sub_80BC494
	tst r0, r0
	beq locret_80BC2B8
	bl sub_80BC434
	cmp r0, #0
	beq locret_80BC2B8
	ldr r1, off_80BC2BC // =off_80BC2C0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80BC2B8:
	pop {pc}
	.balign 4, 0x00
off_80BC2BC: .word off_80BC2C0
off_80BC2C0: .word sub_80BC2C8+1
	.word sub_80BC30E+1
.endfunc // sub_80BC29C

.func
.thumb_func
sub_80BC2C8:
	push {r4,r6,r7,lr}
	mov r1, #0x68 
	ldrh r0, [r5,r1]
	sub r0, #1
	strh r0, [r5,r1]
	cmp r0, #0
	beq loc_80BC2E8
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x44]
	sub r0, r0, r1
	str r0, [r5,#0x40]
	b loc_80BC304
loc_80BC2E8:
	bl sub_80BC424
	ldr r3, [r5,#0x4c]
	mov r1, #0
	str r1, [r3,#0x60]
	ldr r3, [r5,#0x4c]
	mov r1, #1
	str r1, [r3,#0x6c]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80BC304:
	bl sub_800E2AC
	bl sub_80BC468
	pop {r4,r6,r7,pc}
.endfunc // sub_80BC2C8

.func
.thumb_func
sub_80BC30E:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	add r3, r0, #0
	ldr r0, [r5,#0x40]
	mul r0, r3
	ldr r1, [r5,#0x74]
	add r0, r0, r1
	str r0, [r5,#0x74]
	ldr r1, dword_80BC4DC // =0x780000 
	cmp r0, r1
	bge loc_80BC348
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x44]
	sub r0, r0, r1
	add r1, r0, #0
	mul r1, r3
	ldr r2, dword_80BC4E0 // =0x10000 
	cmp r1, r2
	bge loc_80BC344
	add r0, r2, #0
	mul r0, r3
loc_80BC344:
	str r0, [r5,#0x40]
	b loc_80BC364
loc_80BC348:
	bl sub_80BC424
	ldr r3, [r5,#0x4c]
	mov r1, #0
	str r1, [r3,#0x60]
	ldr r3, [r5,#0x4c]
	mov r1, #1
	str r1, [r3,#0x6c]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80BC364:
	bl sub_800E2AC
	bl sub_80BC468
	pop {r4,r6,r7,pc}
.endfunc // sub_80BC30E

.func
.thumb_func
sub_80BC36E:
	push {lr}
	bl sub_80BC434
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80BC388
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x74]
	bl sub_80E1A86
	mov r0, #8
	str r0, [r5,#8]
locret_80BC388:
	pop {pc}
.endfunc // sub_80BC36E

	push {lr}
	push {r2,r4,r5}
	mov r0, #0x19
	bl object_spawnType1
	add r0, r5, #0
	pop {r2,r4,r5}
	beq locret_80BC3AC
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
	mov r1, #0x64 
	strb r4, [r0,r1]
locret_80BC3AC:
	pop {pc}
	tst r0, r0
	beq locret_80BC3B6
	mov r1, #8
	str r1, [r0,#8]
locret_80BC3B6:
	mov pc, lr
	push {r5,lr}
	add r5, r0, #0
	beq locret_80BC41E
	ldrb r0, [r5,#9]
	cmp r0, #4
	bne locret_80BC41E
	str r1, [r5,#0x2c]
	mov r0, #0x60 
	strb r2, [r5,r0]
	mov r0, #0x61 
	strb r3, [r5,r0]
	strb r2, [r5,#0x12]
	strb r3, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, off_80BC4E4 // =dword_810AA3C 
	mov r2, #0x64 
	ldrb r3, [r5,r2]
	lsl r3, r3, #2
	ldr r2, [r1,r3]
	mul r2, r0
	str r2, [r5,#0x40]
	ldr r1, off_80BC4E8 // =dword_810AA54 
	ldr r2, [r1,r3]
	mul r2, r0
	str r2, [r5,#0x44]
	lsr r3, r3, #1
	ldr r1, off_80BC4EC // =dword_810AA30 
	ldrh r0, [r1,r3]
	mov r1, #0x68 
	strh r0, [r5,r1]
	mov r1, #9
	add r0, r5, r1
	mov r1, #4
	ldr r2, [r5,#0x4c]
	ldrh r2, [r2,#0x24]
	mov r4, #1
	ldr r6, [r5,#0x2c]
	bl sub_80D964E
	str r0, [r5,#0x6c]
	bl sub_80BC424
	mov r2, #8
	strb r2, [r5,#9]
	mov r2, #0
	strh r2, [r5,#0xa]
locret_80BC41E:
	pop {r5,pc}
	// <mkdata>
	.hword 0x1 // mov r1, r0
	sub r3, #5
.func
.thumb_func
sub_80BC424:
	ldr r1, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r1
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov pc, lr
.endfunc // sub_80BC424

.func
.thumb_func
sub_80BC434:
	push {r4,lr}
	mov r4, #0
	bl sub_802D234
	cmp r0, #6
	beq loc_80BC446
	bl battle_isPaused
	bne loc_80BC464
loc_80BC446:
	ldr r3, [r5,#0x4c]
	ldrh r0, [r3,#0x24]
	cmp r0, #0
	beq loc_80BC464
	ldr r0, [r3,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80BC4F0 // =0x110c00 
	tst r0, r1
	bne loc_80BC464
	bl battle_isTimeStop
	bne loc_80BC464
	bl sub_801BC64
	mov r4, #1
loc_80BC464:
	add r0, r4, #0
	pop {r4,pc}
.endfunc // sub_80BC434

.func
.thumb_func
sub_80BC468:
	push {r4-r7,lr}
	bl battle_isPaused
	bne locret_80BC492
	ldr r3, [r5,#0x4c]
	ldrh r0, [r3,#0x24]
	cmp r0, #0
	beq locret_80BC492
	ldr r0, [r3,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80BC4F0 // =0x110c00 
	tst r0, r1
	bne locret_80BC492
	ldr r0, [r3,#0x34]
	ldr r1, [r5,#0x34]
	sub r0, r1, r0
	lsr r0, r0, #0x10
	mov r1, #0
	add r5, r3, #0
	bl sub_801DCCC
locret_80BC492:
	pop {r4-r7,pc}
.endfunc // sub_80BC468

.func
.thumb_func
sub_80BC494:
	push {r4-r7,lr}
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x24]
	cmp r0, #0
	bne locret_80BC4B2
	ldr r4, dword_80BC4E0 // =0x10000 
	ldr r7, [r5,#0x58]
	add r7, #0x74 
	bl sub_80E1A6A
	mov r0, #0x20 
	strh r0, [r5,#0x20]
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
locret_80BC4B2:
	pop {r4-r7,pc}
.endfunc // sub_80BC494

	push {r4-r7,lr}
	ldr r0, off_80BC4F4 // =dword_810AA3C 
	mov r1, #0x64 
	ldrb r1, [r5,r1]
	ldrb r0, [r0,r1]
	ldr r1, off_80BC4F8 // =dword_810AA54 
	mov r2, #0x64 
	ldrb r2, [r5,r2]
	ldrb r1, [r1,r2]
	lsl r0, r0, #0x10
	svc 6
	mov r0, #0x1b
	lsl r0, r0, #0x10
	mov r1, #0x3c 
	svc 6
	add r2, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r2
	pop {r4-r7,pc}
dword_80BC4DC: .word 0x780000
dword_80BC4E0: .word 0x10000
off_80BC4E4: .word dword_810AA3C
off_80BC4E8: .word dword_810AA54
off_80BC4EC: .word dword_810AA30
dword_80BC4F0: .word 0x110C00
off_80BC4F4: .word dword_810AA3C
off_80BC4F8: .word dword_810AA54
loc_80BC4FC:
	push {lr}
	ldr r1, off_80BC514 // =off_80BC518 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl battle_isTimeStop
	bne locret_80BC512
	bl sub_801BBAC
locret_80BC512:
	pop {pc}
off_80BC514: .word off_80BC518
off_80BC518: .word sub_80BC524+1
	.word loc_80BC56E+1
	.word sub_8016C4E+1
.func
.thumb_func
sub_80BC524:
	push {lr}
	mov r1, #8
	mov r2, #0x14
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldr r2, [r5,#0x4c]
	ldrb r0, [r2,#0x10]
	ldrb r1, [r5,#5]
	sub r0, r0, r1
	ldrb r1, [r5,#4]
	add r0, r0, r1
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BC524

	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sprite_update
	bl loc_80BC56E
	pop {pc}
loc_80BC56E:
	push {lr}
	ldr r1, off_80BC584 // =off_80BC588 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	.hword 0xE001
aR_0: .asciz " (r"
	.byte 0xBD, 0x0, 0x0
off_80BC584: .word off_80BC588
off_80BC588: .word sub_80BC58C+1
.func
.thumb_func
sub_80BC58C:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	ldrb r0, [r4,#0x10]
	ldrb r1, [r5,#5]
	sub r0, r0, r1
	ldrb r1, [r5,#4]
	add r0, r0, r1
	strb r0, [r5,#0x10]
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrb r0, [r5,#7]
	tst r0, r0
	beq loc_80BC5BA
	ldrh r0, [r4,#0x3e]
	cmp r0, #0xff
	beq loc_80BC5BA
	mov r0, #0
	strh r0, [r5,#0x3e]
loc_80BC5BA:
	ldrb r0, [r5,#6]
	ldrh r1, [r5,#0x3a]
	sub r1, r1, r0
	strh r1, [r5,#0x3a]
	ldrh r1, [r5,#0x3e]
	sub r1, r1, r0
	strh r1, [r5,#0x3e]
	ldr r0, [r5,#0x4c]
	mov r2, #2
	mvn r2, r2
	ldrb r1, [r5]
	and r1, r2
	ldrb r2, [r0]
	mov r3, #2
	and r2, r3
	orr r1, r2
	strb r1, [r5]
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	pop {r4,pc}
.endfunc // sub_80BC58C

.func
.thumb_func
sub_80BC610:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1a
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BC636
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r3, [r0,#0x4c]
	mov r1, #0
	str r1, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80BC636:
	pop {pc}
.endfunc // sub_80BC610

	tst r0, r0
	beq locret_80BC642
	strb r1, [r0,#0x10]
	mov r1, #0xff
	strb r1, [r0,#0x11]
locret_80BC642:
	mov pc, lr
.func
.thumb_func
sub_80BC644:
	tst r0, r0
	beq locret_80BC64C
	mov r1, #0xff
	strb r1, [r0,#0x11]
locret_80BC64C:
	mov pc, lr
	.byte 0, 0
.endfunc // sub_80BC644

loc_80BC650:
	push {lr}
	ldr r1, off_80BC660 // =off_80BC664 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BC660: .word off_80BC664
off_80BC664: .word sub_80BC670+1
	.word sub_80BC78C+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BC670:
	push {r4,lr}
	ldrb r0, [r5,#4]
	ldr r1, off_80BC870 // =0x1a0 
	add r0, r0, r1
	strh r0, [r5,#0x28]
	ldrb r0, [r5,#4]
	mov r1, #0
	bl sub_800FC9E
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BC670

	bl sub_8002E52
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #4
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, dword_80BC750 // =0xffffffff 
	mov r1, #0x68 
	str r0, [r5,r1]
	ldr r0, dword_80BC874 // =0x280000 
	mov r1, #0x62 
	ldrh r1, [r5,r1]
	svc 6
	str r0, [r5,#0x64]
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	ldr r0, [r5,#0x64]
	mov r1, #0x62 
	ldrh r1, [r5,r1]
	mul r0, r1
	mul r0, r2
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldrb r0, [r5,#0x13]
	mov r1, #4
	sub r0, r1, r0
	ldr r1, dword_80BC878 // =0x180000 
	mul r0, r1
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	mov r1, #0
	str r1, [r5,#0x3c]
	ldr r1, [r5,#0x3c]
	add r1, r1, r0
	str r1, [r5,#0x3c]
	str r0, [r5,#0x6c]
	ldrb r0, [r5,#4]
	ldr r1, off_80BC754 // =dword_80BC758 
	lsl r0, r0, #2
	ldr r0, [r1,r0]
	str r0, [r5,#0x70]
	ldr r1, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bl sub_8010DD0
	ldrb r1, [r5,#4]
	cmp r1, #6
	bne loc_80BC718
	mov r1, #1
	str r1, [r0,#0x60]
loc_80BC718:
	bl sprite_forceWhitePallete
	mov r0, #0
	str r0, [r5,#0x74]
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,pc}
	.word 0, 0
	.byte 0, 0
	.word dword_80BC734
dword_80BC734: .word 0xFF740000, 0xFF9C0000, 0xFFC40000, 0xFFEC0000, 0x140000
	.word 0x3C0000, 0x640000
dword_80BC750: .word 0xFFFFFFFF
off_80BC754: .word dword_80BC758
dword_80BC758: .word 0x0
	.word 0x80000, 0x0
	.word 0x40000, 0x0, 0x0, 0x0, 0x0
	.word 0xFFF80000, 0x0, 0x0, 0x0, 0x0
.func
.thumb_func
sub_80BC78C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#9]
	tst r0, r0
	bne loc_80BC7AC
	bl sprite_forceWhitePallete
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80BC816
	bl sub_8002DD8
	mov r1, #0xa
	strh r1, [r5,#0x20]
	mov r0, #1
	strb r0, [r5,#9]
loc_80BC7AC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80BC816
	ldr r0, [r5,#0x74]
	tst r0, r0
	bne loc_80BC7C4
	mov r0, #1
	str r0, [r5,#0x74]
	mov r0, #0x8c
	bl sound_play // () -> void
loc_80BC7C4:
	mov r0, #0x62 
	ldrh r1, [r5,r0]
	sub r1, #1
	strh r1, [r5,r0]
	cmp r1, #0
	ble loc_80BC81C
	mov r1, #2
	strh r1, [r5,#0x20]
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	add r3, r0, #0
	mov r0, #0x68 
	ldr r0, [r5,r0]
	ldr r1, [r5,#0x64]
	mov r2, #0x62 
	ldrh r2, [r5,r2]
	mul r0, r1
	mul r0, r2
	mul r0, r3
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x6c]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	mov r0, #0
	str r0, [r5,#0x3c]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, [r5,#0x70]
	ldr r1, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	mov r0, #0x68 
	ldr r1, [r5,r0]
	neg r1, r1
	str r1, [r5,r0]
loc_80BC816:
	bl sub_801BBAC
	b locret_80BC842
loc_80BC81C:
	bl sub_8011020
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	mov r4, #3
	bl sub_80E05F6
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
	bl object_freeMemory
locret_80BC842:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BC78C

.func
.thumb_func
sub_80BC844:
	push {lr}
	push {r0,r1,r3,r5}
	mov r0, #0x1b
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BC86E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	mov r1, #0x62 
	strh r3, [r0,r1]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	mov r1, #6
	strh r1, [r0,#0x20]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80BC86E:
	pop {pc}
off_80BC870: .word 0x1A0
dword_80BC874: .word 0x280000
dword_80BC878: .word 0x180000
.endfunc // sub_80BC844

loc_80BC87C:
	push {r4-r7,lr}
	bl battle_isBattleOver
	tst r0, r0
	beq loc_80BC88A
	mov r0, #8
	str r0, [r5,#8]
loc_80BC88A:
	ldr r1, off_80BC898 // =off_80BC89C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80BC898: .word off_80BC89C
off_80BC89C: .word sub_80BC8A8+1
	.word sub_80BC8EC+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BC8A8:
	push {r4-r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #0x48 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BC8A8

	bl sub_8002F90 // () -> void
	ldr r0, [r5,#0x60]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	bl sub_800E29C // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80BC8EC
	pop {r4-r7,pc}
	.balign 4, 0x00
.func
.thumb_func
sub_80BC8EC:
	push {r4-r7,lr}
	ldr r1, off_80BC910 // =off_80BC914 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	mov r1, #2
.endfunc // sub_80BC8EC

	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	pop {r4-r7,pc}
	.byte 0, 0
off_80BC910: .word off_80BC914
off_80BC914: .word sub_80BC920+1
	.word sub_80BC958+1
	.word sub_80BC976+1
.func
.thumb_func
sub_80BC920:
	push {r4-r7,lr}
	bl sub_80BC9F8
	tst r0, r0
	beq loc_80BC94A
	bl sub_80BC9D2
	tst r0, r0
	beq locret_80BC956
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80BC956
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
	b locret_80BC956
loc_80BC94A:
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80BC956:
	pop {r4-r7,pc}
.endfunc // sub_80BC920

.func
.thumb_func
sub_80BC958:
	push {r4-r7,lr}
	bl sub_80BC9F8
	tst r0, r0
	beq loc_80BC968
	bl sub_80BC9D2
	b locret_80BC974
loc_80BC968:
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80BC974:
	pop {r4-r7,pc}
.endfunc // sub_80BC958

.func
.thumb_func
sub_80BC976:
	push {r4-r7,lr}
	bl battle_isPaused
	bne locret_80BC996
	bl battle_isTimeStop
	bne locret_80BC996
	bl sub_801BC64
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80BC996
	mov r0, #8
	str r0, [r5,#8]
locret_80BC996:
	pop {r4-r7,pc}
.endfunc // sub_80BC976

.func
.thumb_func
sub_80BC998:
	push {lr}
	push {r0-r2,r5}
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r0, #0x1c
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	tst r0, r0
	beq locret_80BC9BC
	str r5, [r0,#0x4c]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r3, [r0,#0x60]
locret_80BC9BC:
	pop {pc}
.endfunc // sub_80BC998

.func
.thumb_func
sub_80BC9BE:
	tst r0, r0
	beq locret_80BC9D0
	ldrb r1, [r0,#9]
	cmp r1, #8
	beq locret_80BC9D0
	mov r1, #2
	strb r1, [r0,#0x10]
	mov r1, #8
	strb r1, [r0,#9]
locret_80BC9D0:
	mov pc, lr
.endfunc // sub_80BC9BE

.func
.thumb_func
sub_80BC9D2:
	push {r4-r7,lr}
	mov r4, #0
	bl battle_isPaused
	bne loc_80BC9F4
	ldr r3, [r5,#0x4c]
	ldr r0, [r3,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80BCA00 // =0x80110c00 
	tst r0, r1
	bne loc_80BC9F4
	bl battle_isTimeStop
	bne loc_80BC9F4
	bl sub_801BC64
	mov r4, #1
loc_80BC9F4:
	add r0, r4, #0
	pop {r4-r7,pc}
.endfunc // sub_80BC9D2

.func
.thumb_func
sub_80BC9F8:
	push {r4-r7,lr}
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x24]
	pop {r4-r7,pc}
dword_80BCA00: .word 0x80110C00
.endfunc // sub_80BC9F8

loc_80BCA04:
	push {lr}
	ldr r1, off_80BCA14 // =off_80BCA18 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BCA14: .word off_80BCA18
off_80BCA18: .word sub_80BCA24+1
	.word sub_80BCA72+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BCA24:
	push {r7,lr}
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x13
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BCA24

	bl sub_8002F90 // () -> void
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	ldr r1, [r0,#0x34]
	str r1, [r5,#0x34]
	ldrh r1, [r0,#0x3a]
	add r1, #2
	strh r1, [r5,#0x3a]
	ldrh r1, [r0,#0x3e]
	add r1, #0x18
	strh r1, [r5,#0x3e]
	mov r0, #5
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #0
	str r0, [r5,#0x60]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80BCA72
	pop {r7,pc}
.func
.thumb_func
sub_80BCA72:
	push {lr}
	ldr r4, [r5,#0x4c]
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r1, off_80BCACC // =off_80BCAD0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BCACC: .word off_80BCAD0
off_80BCAD0: .word sub_80BCAD4+1
.endfunc // sub_80BCA72

.func
.thumb_func
sub_80BCAD4:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80BCB0C
	bl sub_80BCB34
	tst r0, r0
	beq locret_80BCB10
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x64]
	tst r1, r1
	bne loc_80BCAF2
	neg r0, r0
loc_80BCAF2:
	mov r1, #6
	mul r1, r0
	ldrh r0, [r5,#0x36]
	add r0, r0, r1
	strh r0, [r5,#0x36]
	ldrh r0, [r5,#0x3e]
	add r0, #4
	strh r0, [r5,#0x3e]
	ldr r0, [r5,#0x60]
	add r0, #1
	str r0, [r5,#0x60]
	cmp r0, #0x5a 
	bne locret_80BCB10
loc_80BCB0C:
	mov r0, #8
	str r0, [r5,#8]
locret_80BCB10:
	pop {pc}
.endfunc // sub_80BCAD4

.func
.thumb_func
sub_80BCB12:
	push {lr}
	push {r1,r2,r5}
	mov r0, #0x1d
	bl object_spawnType1
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80BCB32
	str r5, [r0,#0x4c]
	str r1, [r0,#0x64]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80BCB32:
	pop {pc}
.endfunc // sub_80BCB12

.func
.thumb_func
sub_80BCB34:
	push {r4,lr}
	mov r4, #0
	bl battle_isPaused
	bne loc_80BCB4A
	bl battle_isTimeStop
	bne loc_80BCB4A
	bl sub_801BC64
	mov r4, #1
loc_80BCB4A:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
.endfunc // sub_80BCB34

loc_80BCB50:
	push {lr}
	ldr r1, off_80BCB64 // =off_80BCB68 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80BCB64: .word off_80BCB68
off_80BCB68: .word sub_80BCB74+1
	.word sub_80BCC0C+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BCB74:
	push {r4,r7,lr}
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80BCB9E
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	bl sub_800FC9E
	b loc_80BCBA8
loc_80BCB9E:
	ldrh r0, [r4,#0x28]
	bl sub_800F26C
	add r2, r1, #0
	add r1, r0, #0
loc_80BCBA8:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BCB74

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_801002C
	pop {r5}
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl sub_8010DF6
	ldr r0, [r5,#0x4c]
	mov r1, #0xf
	bl sub_80E1352
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80BCC0C
	pop {r4,r7,pc}
.func
.thumb_func
sub_80BCC0C:
	push {lr}
	ldr r1, off_80BCC1C // =off_80BCC20 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BCC1C: .word off_80BCC20
off_80BCC20: .word sub_80BCC2C+1
	.word sub_80BCC88+1
	.word sub_80BCC96+1
.endfunc // sub_80BCC0C

.func
.thumb_func
sub_80BCC2C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BCC4E
	mov r0, #0xa
	strb r0, [r5,#0x10]
	push {r7}
	ldr r4, dword_80BCD10 // =0x10018 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BCC4E:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xa
	blt locret_80BCC86
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	mov r4, #0xff
	ldr r6, [r5,#0x2c]
	mov r7, #7
	add r7, r7, r5
	bl sub_80DAB9C
	ldr r0, [r5,#0x64]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0x81
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BCC86:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BCC2C

.func
.thumb_func
sub_80BCC88:
	push {lr}
	ldrb r0, [r5,#7]
	tst r0, r0
	bne locret_80BCC94
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BCC94:
	pop {pc}
.endfunc // sub_80BCC88

.func
.thumb_func
sub_80BCC96:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80BCCA6
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BCCA6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BCCDA
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	ldr r0, [r5,#0x4c]
	bl sub_80E13DC
	ldr r1, [r5,#0x60]
	mov r0, #0
	strb r0, [r1]
locret_80BCCDA:
	pop {r4,pc}
.endfunc // sub_80BCC96

.func
.thumb_func
sub_80BCCDC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1e
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BCD0C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	mov r1, #1
	strb r1, [r7]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrh r1, [r5,#0x28]
	strh r1, [r0,#0x28]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80BCD0C:
	pop {pc}
	.byte 0, 0
dword_80BCD10: .word 0x10018
.endfunc // sub_80BCCDC

loc_80BCD14:
	push {lr}
	ldr r1, off_80BCD28 // =off_80BCD2C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80BCD28: .word off_80BCD2C
off_80BCD2C: .word sub_80BCD38+1
	.word loc_80BCE4C+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BCD38:
	push {r4,r7,lr}
	ldr r0, [r5,#0x4c]
	ldr r1, [r0,#0x58]
	str r1, [r5,#0x58]
	ldrb r0, [r5,#4]
	cmp r0, #1
	beq loc_80BCD4E
	ldr r0, [r5,#0x4c]
	ldr r1, [r0,#0x28]
	str r1, [r5,#0x28]
	b loc_80BCD52
loc_80BCD4E:
	ldr r1, dword_80BCE48 // =0x1ab 
	strh r1, [r5,#0x28]
loc_80BCD52:
	ldrb r0, [r5,#4]
	cmp r0, #1
	bne loc_80BCD5E
	mov r1, #8
	mov r2, #0xb
	b loc_80BCD90
loc_80BCD5E:
	ldr r4, [r5,#0x4c]
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80BCD86
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	bl sub_800FC9E
	b loc_80BCD90
loc_80BCD86:
	ldrh r0, [r5,#0x28]
	bl sub_800F26C
	add r2, r1, #0
	add r1, r0, #0
loc_80BCD90:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BCD38

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl object_getFlipDirection_800E2CA // () -> int
	add r7, r0, #0
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	ldrb r0, [r5,#4]
	add r0, r0, r0
	ldr r4, off_80BCE40 // =dword_80BCE44 
	add r4, r4, r0
	mov r0, #0
	ldrsb r0, [r4,r0]
	mul r0, r7
	lsl r0, r0, #0x10
	add r1, r1, r0
	mov r0, #1
	ldrsb r0, [r4,r0]
	lsl r0, r0, #0x10
	add r2, r2, r0
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#4]
	cmp r0, #1
	beq loc_80BCDF8
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_801002C
	pop {r5}
	bl sprite_setPallete // (int pallete) -> void
loc_80BCDF8:
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl sub_8010DF6
	ldr r0, [r5,#0x4c]
	mov r1, #0
	bl sub_80E1352
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BCE34
	push {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	mov r7, #0
	ldr r5, [r5,#0x4c]
	mov r4, #1
	bl sub_80BD20A
	pop {r5}
	str r5, [r0,#0x70]
	str r0, [r5,#0x70]
loc_80BCE34:
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80BCE4C
	pop {r4,r7,pc}
	.byte 0, 0
off_80BCE40: .word dword_80BCE44
dword_80BCE44: .word 0xA0AF6F6
dword_80BCE48: .word 0x1AB
loc_80BCE4C:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BCE60
	ldr r1, off_80BCE6C // =off_80BCE74 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
loc_80BCE60:
	ldr r1, off_80BCE70 // =off_80BCE80 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BCE6C: .word off_80BCE74
off_80BCE70: .word off_80BCE80
off_80BCE74: .word sub_80BCE90+1
	.word sub_80BCEB2+1
	.word loc_80BCF3A+1
off_80BCE80: .word loc_80BD064+1
	.word sub_80BCEB2+1
	.word sub_80BD114+1
	.word sub_80BD1DA+1
.func
.thumb_func
sub_80BCE90:
	push {lr}
	ldr r0, [r5,#0x70]
	ldrb r1, [r0,#9]
	cmp r1, #4
	beq loc_80BCEA8
	cmp r1, #0xc
	bne locret_80BCEB0
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #8
	strh r0, [r5,#0xa]
	b locret_80BCEB0
loc_80BCEA8:
	mov r0, #4
	strb r0, [r5,#9]
	bl sub_80BCEB2
locret_80BCEB0:
	pop {pc}
.endfunc // sub_80BCE90

.func
.thumb_func
sub_80BCEB2:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BCEF0
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r5,#0x28]
	mov r1, #0
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r3, [r5,#0x3c]
	add r3, r3, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	mov r4, #0x4e 
	bl sub_80E05F6
	mov r1, #0x28 
	strh r1, [r0,#0x20]
	mov r0, #0x71 
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BCEF0:
	ldrh r0, [r5,#0x20]
	cmp r0, #0x14
	bne loc_80BCF20
	ldrh r0, [r5,#0x28]
	mov r1, #0
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r3, [r5,#0x3c]
	add r3, r3, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	mov r4, #0x4f 
	bl sub_80E05F6
	mov r1, #0x14
	strh r1, [r0,#0x20]
	mov r0, #0x72 
	bl sound_play // () -> void
loc_80BCF20:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BCF38
	mov r0, #0
	str r0, [r5,#0x64]
	str r0, [r5,#0x6c]
	ldrb r0, [r5,#9]
	add r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BCF38:
	pop {r4,pc}
.endfunc // sub_80BCEB2

loc_80BCF3A:
	push {lr}
	ldr r1, off_80BCF48 // =off_80BCF4C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BCF48: .word off_80BCF4C
off_80BCF4C: .word sub_80BCF58+1
	.word sub_80BCF7A+1
	.word sub_80BCFF6+1
.func
.thumb_func
sub_80BCF58:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BCF68
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BCF68:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BCF78
	mov r0, #0xa
	strh r0, [r5,#0x22]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BCF78:
	pop {pc}
.endfunc // sub_80BCF58

.func
.thumb_func
sub_80BCF7A:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BCFC6
	mov r0, #0xe
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0xf
	strh r0, [r5,#0x20]
	mov r0, #0x6a 
	bl sound_play // () -> void
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
	mov r0, #0x64 
	add r0, r0, r5
	mov r1, #1
	bl sub_80EB572
	ldr r0, [r5,#0x6c]
	bl sub_80B8E58
	ldr r4, dword_80BD240 // =0x10005 
	mov r7, #0x6c 
	add r7, r7, r5
	bl sub_80B8E30
	ldr r0, [r5,#0x50]
	bl sub_80C44D2
	bl sub_80BD24C
	bl sub_80BD2D8
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BCFC6:
	ldrh r0, [r5,#0x20]
	cmp r0, #0xa
	bne loc_80BCFD0
	bl sub_80BD2D8
loc_80BCFD0:
	ldrh r0, [r5,#0x20]
	cmp r0, #5
	bne loc_80BCFDA
	bl sub_80BD2D8
loc_80BCFDA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BCFF4
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80BCFF0
	mov r0, #8
	strh r0, [r5,#0xa]
	pop {pc}
loc_80BCFF0:
	mov r0, #0
	strb r0, [r5,#0xb]
locret_80BCFF4:
	pop {pc}
.endfunc // sub_80BCF7A

.func
.thumb_func
sub_80BCFF6:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80BD030
	ldr r0, [r5,#0x70]
	ldrb r0, [r0,#8]
	cmp r0, #8
	bne locret_80BD062
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
	ldr r0, [r5,#0x6c]
	bl sub_80B8E58
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BD030:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BD062
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	ldr r0, [r5,#0x4c]
	bl sub_80E13DC
	ldr r1, [r5,#0x60]
	tst r1, r1
	beq locret_80BD062
	mov r0, #0
	strb r0, [r1]
locret_80BD062:
	pop {r4,pc}
.endfunc // sub_80BCFF6

loc_80BD064:
	push {lr}
	ldr r1, off_80BD078 // =off_80BD07C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_80BD374
	pop {pc}
	.balign 4, 0x00
off_80BD078: .word off_80BD07C
off_80BD07C: .word sub_80BD084+1
	.word sub_80BD0DA+1
.func
.thumb_func
sub_80BD084:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD0A6
	ldr r0, dword_80BD244 // =0x7fff 
	bl sub_8002ED0
	mov r0, #0x1f
	strb r0, [r5,#0xc]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BD0D8
loc_80BD0A6:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	lsr r0, r0, #1
	bcc loc_80BD0C0
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80BD0C0:
	ldrb r0, [r5,#0xc]
	sub r0, #2
	strb r0, [r5,#0xc]
	bgt locret_80BD0D8
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0xc]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BD0D8:
	pop {pc}
.endfunc // sub_80BD084

.func
.thumb_func
sub_80BD0DA:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD0EC
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BD112
loc_80BD0EC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD112
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_isCurrentPanelSolid
	tst r0, r0
	bne loc_80BD10A
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BD112
loc_80BD10A:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BD112:
	pop {pc}
.endfunc // sub_80BD0DA

.func
.thumb_func
sub_80BD114:
	push {lr}
	ldr r1, off_80BD124 // =off_80BD128 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BD124: .word off_80BD128
off_80BD128: .word sub_80BD134+1
	.word sub_80BD156+1
	.word sub_80BD1B8+1
.endfunc // sub_80BD114

.func
.thumb_func
sub_80BD134:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD144
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BD144:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD154
	mov r0, #0xa
	strh r0, [r5,#0x22]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BD154:
	pop {pc}
.endfunc // sub_80BD134

.func
.thumb_func
sub_80BD156:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD188
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
	ldr r4, dword_80BD248 // =0x10b03 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #0xf
	strh r0, [r5,#0x20]
	bl sub_80BD2D8
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BD188:
	ldrh r0, [r5,#0x20]
	cmp r0, #0xa
	bne loc_80BD192
	bl sub_80BD2D8
loc_80BD192:
	ldrh r0, [r5,#0x20]
	cmp r0, #5
	bne loc_80BD19C
	bl sub_80BD2D8
loc_80BD19C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD1B6
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80BD1B2
	mov r0, #8
	strh r0, [r5,#0xa]
	pop {r4,r7,pc}
loc_80BD1B2:
	mov r0, #0
	strb r0, [r5,#0xb]
locret_80BD1B6:
	pop {r4,r7,pc}
.endfunc // sub_80BD156

.func
.thumb_func
sub_80BD1B8:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80BD1C8
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BD1C8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BD1D8
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BD1D8:
	pop {r4,pc}
.endfunc // sub_80BD1B8

.func
.thumb_func
sub_80BD1DA:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80BD1F4
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BD1F4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BD208
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80BD208:
	pop {r4,pc}
.endfunc // sub_80BD1DA

.func
.thumb_func
sub_80BD20A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1f
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BD23E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	tst r7, r7
	beq loc_80BD22E
	mov r1, #1
	strb r1, [r7]
loc_80BD22E:
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrh r1, [r5,#0x28]
	strh r1, [r0,#0x28]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80BD23E:
	pop {pc}
dword_80BD240: .word 0x10005
dword_80BD244: .word 0x7FFF
dword_80BD248: .word 0x10B03
.endfunc // sub_80BD20A

.func
.thumb_func
sub_80BD24C:
	push {r4-r7,lr}
	mov r7, #1
loc_80BD250:
	push {r7}
	add r1, r7, #0
	bl sub_80BD278
	ldr r4, dword_80BD274 // =0x405ff00 
	add r4, r4, r2
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C53A6
	pop {r7}
	add r7, #1
	cmp r7, #3
	ble loc_80BD250
	pop {r4-r7,pc}
	.balign 4, 0x00
dword_80BD274: .word 0x405FF00
.endfunc // sub_80BD24C

.func
.thumb_func
sub_80BD278:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	str r1, [sp,#4]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	str r0, [sp]
loc_80BD28A:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80BD2AE
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl sub_800C90A
	ldrb r1, [r0,#3]
	ldrb r2, [r5,#0x16]
	cmp r1, r2
	bne loc_80BD2AE
	ldr r0, [sp]
	add r0, r0, r4
	str r0, [sp]
	b loc_80BD28A
loc_80BD2AE:
	mov r1, #7
	cmp r4, #0
	bgt loc_80BD2B6
	mov r1, #0
loc_80BD2B6:
	ldr r0, [sp]
	sub r1, r1, r0
	cmp r1, #0
	bge loc_80BD2C0
	neg r1, r1
loc_80BD2C0:
	ldr r0, off_80BD2D4 // =dword_80BD2CC 
	ldrb r2, [r0,r1]
	ldr r0, [sp]
	ldr r1, [sp,#4]
	add sp, sp, #8
	pop {r4,r6,r7,pc}
dword_80BD2CC: .word 0x6020100, 0x82007
off_80BD2D4: .word dword_80BD2CC
.endfunc // sub_80BD278

.func
.thumb_func
sub_80BD2D8:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	mov r6, #0
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	add r0, r0, r4
	str r0, [sp,#0x20]
loc_80BD2EA:
	mov r0, #1
	str r0, [sp,#0x24]
loc_80BD2EE:
	ldr r0, [sp,#0x20]
	ldr r1, [sp,#0x24]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80BD32A
	ldr r0, [sp,#0x20]
	ldr r1, [sp,#0x24]
	bl sub_800C90A
	ldrb r1, [r0,#3]
	ldrb r2, [r5,#0x16]
	cmp r1, r2
	beq loc_80BD318
	ldr r0, [sp,#0x20]
	ldr r1, [sp,#0x24]
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #4
	strb r0, [r1,r6]
	add r6, #1
loc_80BD318:
	ldr r0, [sp,#0x24]
	add r0, #1
	str r0, [sp,#0x24]
	cmp r0, #3
	ble loc_80BD2EE
	ldr r0, [sp,#0x20]
	add r0, r0, r4
	str r0, [sp,#0x20]
	b loc_80BD2EA
loc_80BD32A:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r7, sp, #4
	ldrb r0, [r7,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	push {r1-r3}
	bl sub_800E456 // () -> int
	lsl r7, r0, #8
	pop {r1-r3}
	mov r4, #0x21 
	ldrb r6, [r5,#4]
	tst r6, r6
	beq loc_80BD35A
	mov r4, #0x16
loc_80BD35A:
	add r4, r4, r7
	bl sub_80E05F6
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
	.word 0x20, 0x0, 0x0
	.byte 0x20
	.byte  0
	.byte  0
	.byte  0
.endfunc // sub_80BD2D8

.func
.thumb_func
sub_80BD374:
	push {lr}
	ldrb r1, [r5,#0xc]
	lsl r0, r1, #5
	add r0, r0, r1
	lsl r0, r0, #5
	add r0, r0, r1
	bl sub_8002ED0
	pop {pc}
	.byte  0
	.byte  0
.endfunc // sub_80BD374

loc_80BD388:
	push {lr}
	ldr r1, off_80BD39C // =off_80BD3A0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80BD39C: .word off_80BD3A0
off_80BD3A0: .word sub_80BD3AC+1
	.word loc_80BD478+1
	.word sub_80BD984+1
.func
.thumb_func
sub_80BD3AC:
	push {r4,r6,r7,lr}
	ldr r7, off_80BD474 // =dword_80BD464 
	ldrb r0, [r5,#4]
	lsl r0, r0, #3
	add r7, r7, r0
	ldrh r0, [r7,#2]
	strh r0, [r5,#0x28]
	ldrb r0, [r7]
	mov r3, #0x80
	tst r0, r3
	beq loc_80BD3CC
	mov r2, #0x7f
	and r0, r2
	ldrb r1, [r7,#1]
	bl sprite_decompress
loc_80BD3CC:
	ldrb r1, [r7]
	mov r2, #0x7f
	and r1, r2
	ldrb r2, [r7,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BD3AC

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #4
	ldrsb r0, [r7,r0]
	mul r0, r4
	lsl r0, r0, #0x10
	add r1, r1, r0
	mov r0, #5
	ldrsb r0, [r7,r0]
	lsl r0, r0, #0x10
	add r2, r2, r0
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r0, #0x40 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl sub_8010DF6
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BD45A
	push {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	mov r7, #0
	ldr r5, [r5,#0x4c]
	mov r4, #1
	bl sub_80BD9A2
	pop {r5}
	str r5, [r0,#0x64]
	str r0, [r5,#0x64]
loc_80BD45A:
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80BD478
	pop {r4,r6,r7,pc}
dword_80BD464: .word 0x13D0B08, 0xA0A, 0x1671288, 0xF6F6
off_80BD474: .word dword_80BD464
loc_80BD478:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BD48C
	ldr r1, off_80BD498 // =off_80BD4A0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
loc_80BD48C:
	ldr r1, off_80BD49C // =off_80BD4B0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BD498: .word off_80BD4A0
off_80BD49C: .word off_80BD4B0
off_80BD4A0: .word sub_80BD4BC+1
	.word loc_80BD586+1
	.word loc_80BD742+1
	.word sub_80BD7EA+1
off_80BD4B0: .word loc_80BD81A+1
	.word loc_80BD89C+1
	.word sub_80BD7EA+1
.func
.thumb_func
sub_80BD4BC:
	push {lr}
	ldr r1, off_80BD4D0 // =off_80BD4D4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_80BD9D4
	pop {pc}
	.byte 0, 0
off_80BD4D0: .word off_80BD4D4
off_80BD4D4: .word sub_80BD4DC+1
	.word sub_80BD538+1
.endfunc // sub_80BD4BC

.func
.thumb_func
sub_80BD4DC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD4FE
	ldr r0, dword_80BD534 // =0x7fff 
	bl sub_8002ED0
	mov r0, #0x1f
	strb r0, [r5,#7]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BD530
loc_80BD4FE:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	lsr r0, r0, #1
	bcc loc_80BD518
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80BD518:
	ldrb r0, [r5,#7]
	sub r0, #2
	strb r0, [r5,#7]
	bgt locret_80BD530
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#7]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BD530:
	pop {pc}
	.balign 4, 0x00
dword_80BD534: .word 0x7FFF
.endfunc // sub_80BD4DC

.func
.thumb_func
sub_80BD538:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD54A
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BD584
loc_80BD54A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD584
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_isCurrentPanelSolid
	tst r0, r0
	bne loc_80BD568
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80BD584
loc_80BD568:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x14]
	mov r0, #1
	strb r0, [r5,#0x15]
	str r0, [r5,#0x6c]
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BD584:
	pop {pc}
.endfunc // sub_80BD538

loc_80BD586:
	push {lr}
	ldr r1, off_80BD594 // =off_80BD598 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BD594: .word off_80BD598
off_80BD598: .word sub_80BD5A8+1
	.word sub_80BD644+1
	.word sub_80BD67E+1
	.word sub_80BD6B6+1
.func
.thumb_func
sub_80BD5A8:
	push {lr}
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl object_isValidPanel
	beq loc_80BD62C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	ldr r2, [r5,#0x6c]
	tst r2, r2
	beq loc_80BD614
loc_80BD5BE:
	mov r1, #1
loc_80BD5C0:
	push {r0,r1}
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #2
	ldr r3, off_80BD638 // =off_80BD63C 
	ldr r2, [r3,r2]
	mov r3, #0
	bl object_checkPanelParameters
	pop {r0,r1}
	beq loc_80BD614
	push {r0,r1}
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r2, r0
	pop {r0,r1}
	add r0, r0, r2
	ldr r3, [r5,#0x4c]
	ldrb r2, [r3,#0x12]
	ldrb r3, [r3,#0x13]
	cmp r0, r2
	bne loc_80BD5F4
	cmp r1, r3
	bne loc_80BD5F4
	mov r0, #1
	b loc_80BD5FC
loc_80BD5F4:
	mov r2, #0x10
	ldr r3, dword_80BD9E8 // =0xf800000 
	bl object_checkPanelParameters
loc_80BD5FC:
	pop {r0,r1}
	beq loc_80BD614
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	mov r0, #0
	str r0, [r5,#0x6c]
	ldrb r0, [r5,#6]
	add r0, #1
	strb r0, [r5,#6]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
loc_80BD614:
	add r1, #1
	cmp r1, #3
	ble loc_80BD5C0
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	pop {r0,r1}
	add r0, r0, r2
	sub r2, r0, #1
	cmp r2, #5
	bls loc_80BD5BE
loc_80BD62C:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
	.balign 4, 0x00
off_80BD638: .word off_80BD63C
off_80BD63C: .word LCDControl
	.word start_
.endfunc // sub_80BD5A8

.func
.thumb_func
sub_80BD644:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD670
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x68]
	bl sub_80B8E58
	mov r0, #0
	str r0, [r5,#0x4c]
	mov r0, #3
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#6]
	cmp r0, #1
	bne loc_80BD66A
	mov r0, #0
	bl sub_80BDA7C
loc_80BD66A:
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BD67C
loc_80BD670:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD67C
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BD67C:
	pop {pc}
.endfunc // sub_80BD644

.func
.thumb_func
sub_80BD67E:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD6A8
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r5,#0x20]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldrb r1, [r5,#0x14]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	ldrb r0, [r5,#0x15]
	strb r0, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BD6B4
loc_80BD6A8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD6B4
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80BD6B4:
	pop {pc}
.endfunc // sub_80BD67E

.func
.thumb_func
sub_80BD6B6:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD6E6
	mov r0, #5
	strb r0, [r5,#0x10]
	add r0, #1
	strb r0, [r5,#0x11]
	ldr r4, dword_80BD9EC // =0x10b11 
	mov r7, #0x68 
	add r7, r7, r5
	bl sub_80B8E30
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #5
	bl sub_80BDA7C
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BD740
loc_80BD6E6:
	ldrh r0, [r5,#0x20]
	cmp r0, #5
	bne loc_80BD734
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, dword_80BD9F0 // =0x405ff04 
	ldr r6, [r5,#0x2c]
	ldrb r2, [r5,#0xe]
	mov r7, #3
	bl sub_80C53A6
	pop {r0,r1}
	push {r0,r1}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	add r4, #0x27 
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	mov r0, #1
	mov r1, #0xa
	bl sub_80302A8
	ldr r4, dword_80BD9F4 // =0x10a00 
	bl sub_80E11E0
loc_80BD734:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD740
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BD740:
	pop {r4,r7,pc}
.endfunc // sub_80BD6B6

loc_80BD742:
	push {lr}
	ldr r1, off_80BD750 // =off_80BD754 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BD750: .word off_80BD754
off_80BD754: .word sub_80BD760+1
	.word sub_80BD788+1
	.word sub_80BD7D6+1
.func
.thumb_func
sub_80BD760:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD77A
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x68]
	bl sub_80B8E58
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BD77A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD786
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BD786:
	pop {pc}
.endfunc // sub_80BD760

.func
.thumb_func
sub_80BD788:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD7C8
	ldrb r0, [r5,#6]
	cmp r0, #0
	beq loc_80BD7A8
	mov r0, #7
	strb r0, [r5,#0x10]
	bl sub_800E456 // () -> int
	mov r1, #1
	eor r0, r1
	bl sub_8002F5C
	b loc_80BD7AC
loc_80BD7A8:
	mov r0, #3
	strb r0, [r5,#0x10]
loc_80BD7AC:
	mov r0, #0x40 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #8
	strb r0, [r5,#0xb]
loc_80BD7C8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD7D4
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BD7D4:
	pop {pc}
.endfunc // sub_80BD788

.func
.thumb_func
sub_80BD7D6:
	push {lr}
	ldr r0, [r5,#0x64]
	ldrb r1, [r0,#9]
	cmp r1, #8
	bne locret_80BD7E8
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BD7E8:
	pop {pc}
.endfunc // sub_80BD7D6

.func
.thumb_func
sub_80BD7EA:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80BD804
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x68]
	bl sub_80B8E58
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BD804:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BD818
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80BD818:
	pop {r4,pc}
.endfunc // sub_80BD7EA

loc_80BD81A:
	push {lr}
	ldr r1, off_80BD828 // =off_80BD82C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BD828: .word off_80BD82C
off_80BD82C: .word sub_80BD834+1
	.word sub_80BD878+1
.func
.thumb_func
sub_80BD834:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD850
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BD876
loc_80BD850:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD876
	mov r0, #0
	strb r0, [r5,#6]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_isCurrentPanelSolid
	tst r0, r0
	bne loc_80BD86E
	mov r0, #4
	strh r0, [r5,#0xa]
	b locret_80BD876
loc_80BD86E:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BD876:
	pop {pc}
.endfunc // sub_80BD834

.func
.thumb_func
sub_80BD878:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD88A
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	b locret_80BD89A
loc_80BD88A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD89A
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BD89A:
	pop {pc}
.endfunc // sub_80BD878

loc_80BD89C:
	push {lr}
	ldr r1, off_80BD8B0 // =off_80BD8B4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_80BDAE0
	pop {pc}
	.byte 0, 0
off_80BD8B0: .word off_80BD8B4
off_80BD8B4: .word sub_80BD8BC+1
	.word sub_80BD960+1
.func
.thumb_func
sub_80BD8BC:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD952
	ldrb r0, [r5,#6]
	cmp r0, #0xc
	bne locret_80BD95E
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #5
	strb r0, [r5,#0x10]
	ldr r4, dword_80BD9F8 // =0x11c1f 
	mov r7, #0x68 
	add r7, r7, r5
	bl sub_80B8E30
	bl sub_80BDA08
	push {r0,r1}
	mov r3, #0
	ldr r4, dword_80BD9FC // =0x405ff12 
	ldr r6, [r5,#0x2c]
	mov r2, #0
	mov r7, #3
	bl sub_80C53A6
	pop {r0,r1}
	push {r0,r1}
	mov r3, #0
	ldr r4, dword_80BDA00 // =0x405ff13 
	ldr r6, [r5,#0x2c]
	mov r2, #0
	mov r7, #3
	bl sub_80C53A6
	pop {r0,r1}
	push {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r4, [r5,#0x16]
	lsl r4, r4, #8
	mov r0, #0x36 
	orr r4, r0
	bl sub_80E05F6
	pop {r0,r1}
	push {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r4, [r5,#0x16]
	lsl r4, r4, #8
	mov r0, #0x37 
	orr r4, r0
	bl sub_80E05F6
	pop {r0,r1}
	mov r0, #0xc7
	bl sound_play // () -> void
	mov r0, #3
	mov r1, #0x23 
	bl sub_80302A8
	ldr r4, dword_80BDA04 // =0x12800 
	bl sub_80E11E0
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80BD95E
loc_80BD952:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD95E
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BD95E:
	pop {r4,pc}
.endfunc // sub_80BD8BC

.func
.thumb_func
sub_80BD960:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BD972
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80BD982
loc_80BD972:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BD982
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BD982:
	pop {pc}
.endfunc // sub_80BD960

.func
.thumb_func
sub_80BD984:
	push {r4,lr}
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80BD99C
	mov r1, #0
	strb r1, [r0]
loc_80BD99C:
	bl object_freeMemory
	pop {r4,pc}
.endfunc // sub_80BD984

.func
.thumb_func
sub_80BD9A2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x20 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BD9D2
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	tst r7, r7
	beq loc_80BD9C6
	mov r1, #1
	strb r1, [r7]
loc_80BD9C6:
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80BD9D2:
	pop {pc}
.endfunc // sub_80BD9A2

.func
.thumb_func
sub_80BD9D4:
	push {lr}
	ldrb r1, [r5,#7]
	lsl r0, r1, #5
	add r0, r0, r1
	lsl r0, r0, #5
	add r0, r0, r1
	bl sub_8002ED0
	pop {pc}
	.balign 4, 0x00
dword_80BD9E8: .word 0xF800000
dword_80BD9EC: .word 0x10B11
dword_80BD9F0: .word 0x405FF04
dword_80BD9F4: .word 0x10A00
dword_80BD9F8: .word 0x11C1F
dword_80BD9FC: .word 0x405FF12
dword_80BDA00: .word 0x405FF13
dword_80BDA04: .word 0x12800
.endfunc // sub_80BD9D4

.func
.thumb_func
sub_80BDA08:
	push {lr}
	sub sp, sp, #0x10
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp,#8]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	str r0, [sp]
	ldrb r0, [r5,#0x13]
	str r0, [sp,#4]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80BDA74 // =off_80BDA68 
	ldr r0, [r1,r0]
	str r0, [sp,#0xc]
loc_80BDA26:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl object_isValidPanel
	beq loc_80BDA48
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl object_getPanelParameters
	ldr r1, [sp,#0xc]
	tst r0, r1
	bne loc_80BDA5E
	ldr r0, [sp]
	ldr r1, [sp,#8]
	add r0, r0, r1
	str r0, [sp]
	b loc_80BDA26
loc_80BDA48:
	ldrb r0, [r5,#0x16]
	ldr r1, off_80BDA78 // =dword_80BDA70 
	ldrb r0, [r0,r1]
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	bne loc_80BDA58
	ldr r1, [sp,#8]
	add r0, r0, r1
loc_80BDA58:
	ldrb r1, [r5,#0x13]
	str r0, [sp]
	str r1, [sp,#4]
loc_80BDA5E:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	add sp, sp, #0x10
	pop {pc}
	.balign 4, 0x00
off_80BDA68: .word LCDControl
	.word start_
dword_80BDA70: .word 0x205
off_80BDA74: .word off_80BDA68
off_80BDA78: .word dword_80BDA70
.endfunc // sub_80BDA08

.func
.thumb_func
sub_80BDA7C:
	push {r4,r6,r7,lr}
	sub sp, sp, #4
	str r0, [sp]
	cmp r0, #5
	bne loc_80BDAAC
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #8
	add r4, #0xb
	lsl r4, r4, #8
	mov r0, #0x11
	bl sub_80B8E62
	add r4, r4, r1
	lsl r4, r4, #8
	add r4, r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80BDAD8 // =0x8318 
	mov r7, #0x1e
	bl sub_80E33FA
loc_80BDAAC:
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #8
	ldr r0, [sp]
	add r4, r4, r0
	lsl r4, r4, #8
	mov r1, #8
	mov r2, #0xb
	add r4, r4, r2
	lsl r4, r4, #8
	add r4, r4, r1
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80BDAD8 // =0x8318 
	ldr r7, dword_80BDADC // =0x101001e 
	bl sub_80E33FA
	add sp, sp, #4
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80BDAD8: .word 0x8318
dword_80BDADC: .word 0x101001E
.endfunc // sub_80BDA7C

.func
.thumb_func
sub_80BDAE0:
	push {lr}
	ldr r1, off_80BDAF0 // =off_80BDAF4 
	ldrb r0, [r5,#6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BDAF0: .word off_80BDAF4
off_80BDAF4: .word sub_80BDB04+1
	.word sub_80BDB3C+1
	.word sub_80BDB8C+1
	.word nullsub_9+1
.endfunc // sub_80BDAE0

.func
.thumb_func
sub_80BDB04:
	push {r4,lr}
	ldrh r0, [r5,#0x28]
	mov r1, #0
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r3, [r5,#0x3c]
	add r3, r3, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	mov r4, #0x4e 
	bl sub_80E05F6
	str r0, [r5,#0x74]
	ldr r1, dword_80BDBA0 // =0x7fff 
	strh r1, [r0,#0x20]
	mov r0, #0x71 
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x22]
	mov r0, #4
	strb r0, [r5,#6]
	pop {r4,pc}
.endfunc // sub_80BDB04

.func
.thumb_func
sub_80BDB3C:
	push {lr}
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	ldr r0, [r5,#0x64]
	ldrb r1, [r0,#9]
	cmp r1, #8
	bne locret_80BDB8A
	ldrh r0, [r5,#0x22]
	cmp r0, #0x28 
	blt locret_80BDB8A
	ldr r0, [r5,#0x74]
	mov r1, #1
	strh r1, [r0,#0x20]
	ldrh r0, [r5,#0x28]
	mov r1, #0
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r3, [r5,#0x3c]
	add r3, r3, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	mov r4, #0x4f 
	bl sub_80E05F6
	mov r1, #0x1e
	strh r1, [r0,#0x20]
	mov r0, #0x72 
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x22]
	mov r0, #8
	strb r0, [r5,#6]
locret_80BDB8A:
	pop {r4,pc}
.endfunc // sub_80BDB3C

.func
.thumb_func
sub_80BDB8C:
	push {lr}
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	cmp r0, #0xf
	blt locret_80BDB9C
	mov r0, #0xc
	strb r0, [r5,#6]
locret_80BDB9C:
	pop {pc}
.endfunc // sub_80BDB8C

.func
.thumb_func
nullsub_9:
	mov pc, lr
dword_80BDBA0: .word 0x7FFF
.endfunc // nullsub_9

loc_80BDBA4:
	push {lr}
	ldr r1, off_80BDBB8 // =off_80BDBBC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80BDBB8: .word off_80BDBBC
off_80BDBBC: .word sub_80BDBC8+1
	.word loc_80BDCFC+1
	.word sub_80BE3C4+1
.func
.thumb_func
sub_80BDBC8:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BDC32
	mov r7, #1
	ldr r0, [r5,#0x4c]
	ldrh r1, [r0,#0x28]
	ldr r2, off_80BDCF0 // =0x1a0 
	cmp r1, r2
	beq loc_80BDBE6
	ldr r2, dword_80BDCF4 // =0x1ab 
	cmp r1, r2
	bgt loc_80BDBE6
	ldr r1, off_80BDCF0 // =0x1a0 
	mov r7, #0
loc_80BDBE6:
	strh r1, [r5,#0x28]
	ldr r1, [r0,#0x58]
	str r1, [r5,#0x58]
	str r7, [r5,#0x70]
	ldr r0, [r5,#0x4c]
	mov r1, #0xf
	bl sub_80E1352
	cmp r7, #0
	bne loc_80BDC00
	mov r1, #0
	mov r2, #0
	b loc_80BDC30
loc_80BDC00:
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80BDC26
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	bl sub_800FC9E
	b loc_80BDC30
loc_80BDC26:
	ldrh r0, [r5,#0x28]
	bl sub_800F26C
	add r2, r1, #0
	add r1, r0, #0
loc_80BDC30:
	b loc_80BDC3E
loc_80BDC32:
	mov r0, #0xc
	mov r1, #0xf
	bl sprite_decompress
	mov r1, #0xc
	mov r2, #0xf
loc_80BDC3E:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BDBC8

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BDC76
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
loc_80BDC76:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BDC98
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl sub_8010DF6
loc_80BDC98:
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BDCAE
	ldrb r0, [r5,#0x16]
	mov r1, #0x2c 
	bl sub_80136CC
	ldr r1, dword_80BDCF8 // =byte_80203EA 
	ldrb r0, [r1,r0]
	bl sprite_setPallete // (int pallete) -> void
loc_80BDCAE:
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BDCE2
	mov r0, #0
	str r0, [r5,#0x64]
	bl sub_80BE434
	strb r2, [r5,#0x14]
	strb r3, [r5,#0x15]
	tst r0, r0
	beq loc_80BDCE2
	push {r5}
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	mov r7, #0
	ldr r5, [r5,#0x4c]
	mov r4, #1
	bl sub_80BE3E8
	pop {r5}
	str r5, [r0,#0x64]
	str r0, [r5,#0x64]
	ldrh r2, [r5,#0x14]
	strh r2, [r0,#0x14]
	mov r1, #1
	strb r1, [r0,#0x17]
loc_80BDCE2:
	mov r0, #0
	strb r0, [r5,#7]
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80BDCFC
	pop {r4,r6,r7,pc}
off_80BDCF0: .word 0x1A0
dword_80BDCF4: .word 0x1AB
dword_80BDCF8: .word 0x80203EA
loc_80BDCFC:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BDD10
	ldr r1, off_80BDD1C // =off_80BDD24 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
loc_80BDD10:
	ldr r1, off_80BDD20 // =off_80BDD34 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BDD1C: .word off_80BDD24
off_80BDD20: .word off_80BDD34
off_80BDD24: .word sub_80BDD40+1
	.word sub_80BDD70+1
	.word sub_80BDD88+1
	.word sub_80BDEC0+1
off_80BDD34: .word sub_80BE144+1
	.word sub_80BE174+1
	.word loc_80BE22E+1
.func
.thumb_func
sub_80BDD40:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BDD5C
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BDD6E
loc_80BDD5C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BDD6E
	ldrb r0, [r5,#9]
	add r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BDD6E:
	pop {pc}
.endfunc // sub_80BDD40

.func
.thumb_func
sub_80BDD70:
	push {lr}
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq loc_80BDD7E
	ldrb r1, [r0,#9]
	cmp r1, #4
	bne locret_80BDD86
loc_80BDD7E:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BDD86:
	pop {pc}
.endfunc // sub_80BDD70

.func
.thumb_func
sub_80BDD88:
	push {lr}
	ldr r1, off_80BDD98 // =off_80BDD9C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BDD98: .word off_80BDD9C
off_80BDD9C: .word sub_80BDDA8+1
	.word sub_80BDDCA+1
	.word sub_80BDE58+1
.endfunc // sub_80BDD88

.func
.thumb_func
sub_80BDDA8:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BDDB8
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BDDB8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BDDC8
	mov r0, #0xc
	strh r0, [r5,#0x22]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BDDC8:
	pop {pc}
.endfunc // sub_80BDDA8

.func
.thumb_func
sub_80BDDCA:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BDE3C
	mov r0, #0xe
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #0x6a 
	bl sound_play // () -> void
	ldr r0, [r5,#0x68]
	bl sub_80B8E58
	ldr r0, [r5,#0x70]
	tst r0, r0
	beq loc_80BDDFC
	mov r0, #0x68 
	add r0, r0, r5
	mov r1, #1
	bl sub_80EB572
	b loc_80BDE06
loc_80BDDFC:
	mov r7, #0x68 
	add r7, r7, r5
	ldr r4, dword_80BDEB0 // =0x10006 
	bl sub_80B8E30
loc_80BDE06:
	ldr r0, [r5,#0x6c]
	bl sub_80B8E58
	ldr r4, dword_80BDEB4 // =0x10005 
	mov r7, #0x6c 
	add r7, r7, r5
	bl sub_80B8E30
	ldr r0, [r5,#0x50]
	bl sub_80C44D2
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, dword_80BDEB8 // =0x100000 
	mov r4, #0x1d
	ldr r6, dword_80BDEBC // =0x83001e 
	bl sub_80C4FFE
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BDE3C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BDE56
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80BDE52
	mov r0, #8
	strh r0, [r5,#0xa]
	pop {r4,r6,r7,pc}
loc_80BDE52:
	mov r0, #0
	strb r0, [r5,#0xb]
locret_80BDE56:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BDDCA

.func
.thumb_func
sub_80BDE58:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80BDE78
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x68]
	bl sub_80B8E58
	ldr r0, [r5,#0x6c]
	bl sub_80B8E58
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BDE78:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BDEAE
	ldrb r0, [r5,#0x14]
	tst r0, r0
	bne loc_80BDEA6
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	ldr r0, [r5,#0x4c]
	bl sub_80E13DC
	pop {r4,pc}
loc_80BDEA6:
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BDEAE:
	pop {r4,pc}
dword_80BDEB0: .word 0x10006
dword_80BDEB4: .word 0x10005
dword_80BDEB8: .word 0x100000
dword_80BDEBC: .word 0x83001E
.endfunc // sub_80BDE58

.func
.thumb_func
sub_80BDEC0:
	push {lr}
	ldr r1, off_80BDED0 // =off_80BDED4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BDED0: .word off_80BDED4
off_80BDED4: .word sub_80BDEF0+1
	.word sub_80BDF0E+1
	.word sub_80BDF3C+1
	.word sub_80BDFA6+1
	.word sub_80BE098+1
	.word sub_80BE0CE+1
	.word sub_80BE0FA+1
.endfunc // sub_80BDEC0

.func
.thumb_func
sub_80BDEF0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BDF00
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BDF00:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BDF0C
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BDF0C:
	pop {pc}
.endfunc // sub_80BDEF0

.func
.thumb_func
sub_80BDF0E:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BDF2E
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x68]
	bl sub_80B8E58
	ldr r0, [r5,#0x6c]
	bl sub_80B8E58
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BDF2E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BDF3A
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BDF3A:
	pop {pc}
.endfunc // sub_80BDF0E

.func
.thumb_func
sub_80BDF3C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BDF8C
	mov r0, #3
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldrb r1, [r5,#0x14]
	add r0, r0, r1
	ldrb r1, [r5,#0x15]
	ldr r3, dword_80BE12C // =0x7800000 
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80BDF5E
	ldr r3, dword_80BE130 // =0xb800000 
loc_80BDF5E:
	mov r2, #0x10
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80BDF78
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #1
	b loc_80BDF82
loc_80BDF78:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0
loc_80BDF82:
	strb r0, [r5,#7]
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BDF8C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BDFA4
	ldrb r0, [r5,#7]
	tst r0, r0
	bne loc_80BDFA0
	mov r0, #0x18
	strh r0, [r5,#0xa]
	pop {pc}
loc_80BDFA0:
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80BDFA4:
	pop {pc}
.endfunc // sub_80BDF3C

.func
.thumb_func
sub_80BDFA6:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x14
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE00C
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0xb0
	bl sound_play // () -> void
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x58]
	ldrb r1, [r0]
	mov r2, #0x74 
	strb r1, [r5,r2]
	ldrb r1, [r0,#1]
	mov r2, #0x75 
	strb r1, [r5,r2]
	mov r1, #2
	mov r2, #0
	strb r1, [r0]
	strb r2, [r0,#1]
	bl sub_80EBB78
	add r4, r0, #0
	lsl r4, r4, #8
	add r4, #1
	lsl r4, r4, #8
	bl sub_80EBAE8
	add r4, r4, r0
	lsl r4, r4, #8
	bl sub_80EBB34
	add r4, r4, r0
	mov r7, #0x68 
	add r7, r7, r5
	bl sub_80B8E30
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x58]
	mov r1, #0x74 
	ldrb r1, [r5,r1]
	strb r1, [r0]
	mov r1, #0x75 
	ldrb r1, [r5,r1]
	strb r1, [r0,#1]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE00C:
	ldrh r0, [r5,#0x20]
	cmp r0, #0xa
	bne loc_80BE086
	mov r0, #0x18
	ldr r1, dword_80BE134 // =0x405ff01 
	mov r2, #1
	mov r3, #0x19
	ldr r4, dword_80BE138 // =0x11e00 
	ldr r6, [r5,#0x64]
	tst r6, r6
	beq loc_80BE032
	ldrb r6, [r6,#7]
	tst r6, r6
	beq loc_80BE032
	mov r0, #0x36 
	ldr r1, dword_80BE13C // =0x405ff13 
	mov r2, #3
	mov r3, #0x23 
	ldr r4, dword_80BE140 // =0x12800 
loc_80BE032:
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	str r4, [sp,#0x10]
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	ldr r0, [sp]
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, [sp,#4]
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C53A6
	ldr r0, [sp,#8]
	ldr r1, [sp,#0xc]
	bl sub_80302A8
	ldr r4, [sp,#0x10]
	bl sub_80E11E0
loc_80BE086:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x32 
	ble loc_80BE094
	mov r0, #0x10
	strh r0, [r5,#0xa]
loc_80BE094:
	add sp, sp, #0x14
	pop {r4,r6,r7,pc}
.endfunc // sub_80BDFA6

.func
.thumb_func
sub_80BE098:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE0B8
	ldr r0, [r5,#0x68]
	bl sub_80B8E58
	ldr r0, [r5,#0x6c]
	bl sub_80B8E58
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE0B8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE0CC
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0x14
	strh r0, [r5,#0xa]
locret_80BE0CC:
	pop {pc}
.endfunc // sub_80BE098

.func
.thumb_func
sub_80BE0CE:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE0EC
	mov r0, #3
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x4c]
	ldrh r1, [r0,#0x12]
	strh r1, [r5,#0x12]
	bl sub_800E29C // () -> void
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE0EC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE0F8
	mov r0, #0x18
	strh r0, [r5,#0xa]
locret_80BE0F8:
	pop {pc}
.endfunc // sub_80BE0CE

.func
.thumb_func
sub_80BE0FA:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE10A
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE10A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE12A
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80BE12A:
	pop {pc}
dword_80BE12C: .word 0x7800000
dword_80BE130: .word 0xB800000
dword_80BE134: .word 0x405FF01
dword_80BE138: .word 0x11E00
dword_80BE13C: .word 0x405FF13
dword_80BE140: .word 0x12800
.endfunc // sub_80BE0FA

.func
.thumb_func
sub_80BE144:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE160
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80BE172
loc_80BE160:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE172
	ldrb r0, [r5,#9]
	add r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BE172:
	pop {pc}
.endfunc // sub_80BE144

.func
.thumb_func
sub_80BE174:
	push {lr}
	ldr r1, off_80BE184 // =off_80BE188 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BE184: .word off_80BE188
off_80BE188: .word sub_80BE190+1
	.word sub_80BE1DC+1
.endfunc // sub_80BE174

.func
.thumb_func
sub_80BE190:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE1B4
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	ldr r4, dword_80BE41C // =0x1080b 
	mov r7, #0x68 
	add r7, r7, r5
	bl sub_80B8E30
	mov r0, #0xf8
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE1B4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE1DA
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x50 
	mul r1, r0
	lsl r1, r1, #0x10
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80BE420 // =0x10000 
	mov r7, #0x6c 
	add r7, r7, r5
	bl sub_80E5D12
	str r0, [r5,#0x6c]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BE1DA:
	pop {r4,r7,pc}
.endfunc // sub_80BE190

.func
.thumb_func
sub_80BE1DC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE1F8
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x68]
	mov r1, #9
	bl sub_80B8E70
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE1F8:
	bl object_getFlipDirection_800E2CA // () -> int
	add r0, r0, r0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #5
	mov r3, #0
	ldr r4, dword_80BE424 // =0x1705ff04 
	mov r6, #3
	mov r7, #0
	bl sub_80C53A6
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE22C
	ldr r0, [r5,#0x6c]
	tst r0, r0
	beq loc_80BE224
	bl sub_80E5D3E
loc_80BE224:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BE22C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BE1DC

loc_80BE22E:
	push {lr}
	ldr r1, off_80BE23C // =off_80BE240 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BE23C: .word off_80BE240
off_80BE240: .word sub_80BE254+1
	.word sub_80BE282+1
	.word sub_80BE2B8+1
	.word sub_80BE312+1
	.word sub_80BE39A+1
.func
.thumb_func
sub_80BE254:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE274
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x68]
	bl sub_80B8E58
	ldr r0, [r5,#0x6c]
	bl sub_80B8E58
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE274:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE280
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BE280:
	pop {pc}
.endfunc // sub_80BE254

.func
.thumb_func
sub_80BE282:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE296
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE296:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE2B6
	ldrb r0, [r5,#0x14]
	tst r0, r0
	bne loc_80BE2B2
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
loc_80BE2B2:
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BE2B6:
	pop {pc}
.endfunc // sub_80BE282

.func
.thumb_func
sub_80BE2B8:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE304
	mov r0, #1
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldrb r1, [r5,#0x14]
	add r0, r0, r1
	ldrb r1, [r5,#0x15]
	mov r2, #0x10
	ldr r3, dword_80BE428 // =0xf800000 
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80BE2EA
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	b loc_80BE2F8
loc_80BE2EA:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
loc_80BE2F8:
	mov r0, #1
	strb r0, [r5,#7]
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE304:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE310
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80BE310:
	pop {pc}
.endfunc // sub_80BE2B8

.func
.thumb_func
sub_80BE312:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE32E
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE32E:
	ldrh r0, [r5,#0x20]
	cmp r0, #0xa
	bne loc_80BE388
	mov r0, #0x18
	ldr r1, dword_80BE42C // =0x405ff01 
	ldr r6, [r5,#0x64]
	tst r6, r6
	beq loc_80BE348
	ldrb r6, [r6,#7]
	tst r6, r6
	beq loc_80BE348
	mov r0, #0x36 
	ldr r1, dword_80BE430 // =0x405ff13 
loc_80BE348:
	str r0, [sp]
	str r1, [sp,#4]
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	ldr r0, [sp]
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, [sp,#4]
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C53A6
loc_80BE388:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x32 
	ble loc_80BE396
	mov r0, #0x10
	strh r0, [r5,#0xa]
loc_80BE396:
	add sp, sp, #8
	pop {r4,r6,r7,pc}
.endfunc // sub_80BE312

.func
.thumb_func
sub_80BE39A:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE3AE
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE3AE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE3C2
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80BE3C2:
	pop {pc}
.endfunc // sub_80BE39A

.func
.thumb_func
sub_80BE3C4:
	push {r4,lr}
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BE3D8
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
loc_80BE3D8:
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80BE3E2
	mov r1, #0
	strb r1, [r0]
loc_80BE3E2:
	bl object_freeMemory
	pop {r4,pc}
.endfunc // sub_80BE3C4

.func
.thumb_func
sub_80BE3E8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x21 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BE418
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	tst r7, r7
	beq loc_80BE40C
	mov r1, #1
	strb r1, [r7]
loc_80BE40C:
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80BE418:
	pop {pc}
	.balign 4, 0x00
dword_80BE41C: .word 0x1080B
dword_80BE420: .word 0x10000
dword_80BE424: .word 0x1705FF04
dword_80BE428: .word 0xF800000
dword_80BE42C: .word 0x405FF01
dword_80BE430: .word 0x405FF13
.endfunc // sub_80BE3E8

.func
.thumb_func
sub_80BE434:
	push {lr}
	sub sp, sp, #0x18
	mov r0, #0
	str r0, [sp,#4]
	str r0, [sp,#8]
	ldrb r0, [r5,#0x13]
	str r0, [sp,#0x10]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80BE4D0 // =off_80BE4C8 
	ldr r0, [r1,r0]
	str r0, [sp,#0x14]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	str r0, [sp,#4]
	ldrb r0, [r5,#0x13]
	str r0, [sp,#8]
loc_80BE45C:
	ldr r0, [sp,#4]
	ldr r1, [sp,#8]
	bl object_getPanelParameters
.endfunc // sub_80BE434

	tst r0, r0
	bne loc_80BE470
	mov r0, #0
	str r0, [sp,#4]
	str r0, [sp,#8]
	b loc_80BE490
loc_80BE470:
	ldr r1, [sp,#0x14]
	tst r0, r1
	beq loc_80BE4B2
	ldr r0, [sp,#4]
	ldr r1, [sp]
	add r1, r1, r1
	add r0, r0, r1
	str r0, [sp,#0xc]
	ldr r1, [sp,#8]
	str r1, [sp,#0x10]
	mov r2, #0x10
	ldr r3, dword_80BE4D4 // =0xf800000 
	bl object_checkPanelParameters
	tst r0, r0
	bne loc_80BE4BC
loc_80BE490:
	mov r0, #1
	ldr r1, [sp]
	cmp r1, #0
	blt loc_80BE49A
	mov r0, #6
loc_80BE49A:
	str r0, [sp,#0xc]
	ldr r1, [sp,#0x10]
	mov r2, #0x10
	ldr r3, dword_80BE4D4 // =0xf800000 
	bl object_checkPanelParameters
	tst r0, r0
	bne loc_80BE4BC
	mov r0, #0
	str r0, [sp,#0xc]
	str r0, [sp,#0x10]
	b loc_80BE4BC
loc_80BE4B2:
	ldr r0, [sp,#4]
	ldr r1, [sp]
	add r0, r0, r1
	str r0, [sp,#4]
	b loc_80BE45C
loc_80BE4BC:
	ldr r0, [sp,#0xc]
	ldr r1, [sp,#0x10]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add sp, sp, #0x18
	pop {pc}
off_80BE4C8: .word LCDControl
	.word start_
off_80BE4D0: .word off_80BE4C8
dword_80BE4D4: .word 0xF800000
loc_80BE4D8:
	push {lr}
	ldr r1, off_80BE4E8 // =off_80BE4EC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BE4E8: .word off_80BE4EC
off_80BE4EC: .word sub_80BE4F8+1
	.word sub_80BE55C+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BE4F8:
	push {r4-r7,lr}
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x1a
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BE4F8

	bl sub_8002F90 // () -> void
	bl sub_8002E52
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0x62 
	ldrb r1, [r5,r0]
	lsl r1, r1, #2
	ldr r2, off_80BE548 // =off_80BE54C 
	ldr r1, [r2,r1]
	ldrb r0, [r1]
	mov r1, #0x61 
	mov r2, #0x63 
	strb r0, [r5,#0x10]
	strb r0, [r5,r1]
	strb r0, [r5,r2]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80BE55C
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80BE548: .word off_80BE54C
off_80BE54C: .word dword_80BE554
	.word dword_80BE558
dword_80BE554: .word 0x9
dword_80BE558: .word 0x5
.func
.thumb_func
sub_80BE55C:
	push {r4-r7,lr}
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	bl battle_isTimeStop
	bne loc_80BE5A4
	ldr r1, off_80BE5BC // =off_80BE5C0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
loc_80BE5A4:
	mov r1, #2
.endfunc // sub_80BE55C

	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80BE5BC: .word off_80BE5C0
off_80BE5C0: .word sub_80BE5CC+1
	.word sub_80BE648+1
	.word sub_80BE6BC+1
.func
.thumb_func
sub_80BE5CC:
	push {r4-r7,lr}
	bl sub_80BE76A
	tst r0, r0
	beq locret_80BE646
	bl sub_80BE73E
	tst r0, r0
	beq locret_80BE646
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0x64 
	ldrh r1, [r5,r0]
	sub r1, #1
	strh r1, [r5,r0]
	tst r1, r1
	bne locret_80BE646
	bl sub_800E2AC
	mov r0, #0x68 
	ldrb r0, [r5,r0]
	mov r1, #0x69 
	ldrb r1, [r5,r1]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldr r0, [r5,#0x4c]
	mov r4, #0x70 
	ldrh r4, [r0,r4]
	mov r0, #0x34 
	add r0, r0, r5
	bl sub_8114F6A
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	mov r0, #0x6c 
	strh r3, [r5,r0]
	mov r0, #0
	mov r1, #0x64 
	strh r0, [r5,r1]
	ldr r0, [r5,#0x4c]
	mov r1, #0x70 
	ldrh r0, [r0,r1]
	mov r1, #0x66 
	strh r0, [r5,r1]
	mov r0, #0x6e 
	mov r1, #0
	strh r1, [r5,r0]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80BE646:
	pop {r4-r7,pc}
.endfunc // sub_80BE5CC

.func
.thumb_func
sub_80BE648:
	push {r4-r7,lr}
	bl sub_80BE76A
	tst r0, r0
	beq locret_80BE6BA
	bl sub_80BE73E
	tst r0, r0
	beq locret_80BE6BA
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, off_80BE78C // =byte_80065E0 
	mov r1, #0x6e 
	ldrh r1, [r5,r1]
	lsr r1, r1, #8
	lsl r1, r1, #1
	ldrh r0, [r0,r1]
	ldr r1, [r5,#0x70]
	lsr r1, r1, #0x10
	mul r0, r1
	lsl r0, r0, #8
	str r0, [r5,#0x3c]
	bl sub_800E2AC
	mov r1, #0x64 
	ldrh r0, [r5,r1]
	mov r1, #0x66 
	ldrh r1, [r5,r1]
	bl sub_8114F52
	mov r2, #0x63 
	ldrb r1, [r5,r2]
	add r0, r0, r1
	mov r1, #0x61 
	ldrb r2, [r5,r1]
	cmp r0, r2
	beq loc_80BE69A
	strb r0, [r5,#0x10]
	strb r0, [r5,r1]
loc_80BE69A:
	mov r0, #0x6c 
	ldrh r0, [r5,r0]
	mov r1, #0x6e 
	ldrh r2, [r5,r1]
	add r0, r0, r2
	strh r0, [r5,r1]
	mov r1, #0x64 
	ldrh r0, [r5,r1]
	add r0, #1
	strh r0, [r5,r1]
	mov r1, #0x66 
	ldrh r1, [r5,r1]
	cmp r0, r1
	bne locret_80BE6BA
	mov r0, #8
	str r0, [r5,#8]
locret_80BE6BA:
	pop {r4-r7,pc}
.endfunc // sub_80BE648

.func
.thumb_func
sub_80BE6BC:
	push {r4-r7,lr}
	bl sub_80BE73E
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80BE6D6
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x74]
	bl sub_80E1A86
	mov r0, #8
	str r0, [r5,#8]
locret_80BE6D6:
	pop {r4-r7,pc}
.endfunc // sub_80BE6BC

.func
.thumb_func
sub_80BE6D8:
	push {lr}
	push {r0,r1}
	push {r2-r6}
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r0, #0x22 
	bl object_spawnType1
	add r0, r5, #0
	pop {r2-r6}
	tst r0, r0
	beq loc_80BE730
	str r5, [r0,#0x4c]
	ldr r1, [r5,#0x34]
	str r1, [r0,#0x34]
	ldr r1, [r5,#0x38]
	sub r1, #1
	str r1, [r0,#0x38]
	ldr r1, [r5,#0x3c]
	str r1, [r0,#0x3c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r1, #0x60 
	strb r2, [r0,r1]
	mov r1, #0x64 
	strh r3, [r0,r1]
	add r2, r4, #0
	lsl r2, r2, #0x1c
	lsr r2, r2, #0x1c
	mov r1, #0x62 
	strb r2, [r0,r1]
	add r2, r4, #0
	lsl r2, r2, #0x18
	lsr r2, r2, #0x1c
	mov r1, #0x74 
	strb r2, [r0,r1]
	pop {r1,r2}
	mov r3, #0x68 
	strb r1, [r0,r3]
	mov r3, #0x69 
	strb r2, [r0,r3]
	str r6, [r0,#0x70]
	pop {pc}
loc_80BE730:
	pop {r0,r1}
	pop {pc}
.endfunc // sub_80BE6D8

	tst r0, r0
	beq locret_80BE73C
	mov r1, #8
	str r1, [r0,#8]
locret_80BE73C:
	mov pc, lr
.func
.thumb_func
sub_80BE73E:
	push {r4-r7,lr}
	mov r4, #0
	bl battle_isPaused
	bne loc_80BE766
	ldr r3, [r5,#0x4c]
	ldrh r0, [r3,#0x24]
	cmp r0, #0
	beq loc_80BE766
	ldr r0, [r3,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80BE790 // =0x80110c00 
	tst r0, r1
	bne loc_80BE766
	bl battle_isTimeStop
	bne loc_80BE766
	bl sub_801BC64
	mov r4, #1
loc_80BE766:
	add r0, r4, #0
	pop {r4-r7,pc}
.endfunc // sub_80BE73E

.func
.thumb_func
sub_80BE76A:
	push {r4-r7,lr}
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x24]
	cmp r0, #0
	bne locret_80BE788
	ldr r4, dword_80BE794 // =0x10000 
	ldr r7, [r5,#0x58]
	add r7, #0x74 
	bl sub_80E1A6A
	mov r0, #0x20 
	strh r0, [r5,#0x20]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
locret_80BE788:
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80BE78C: .word byte_80065E0
dword_80BE790: .word 0x80110C00
dword_80BE794: .word 0x10000
.endfunc // sub_80BE76A

loc_80BE798:
	push {lr}
	ldr r1, off_80BE7AC // =off_80BE7B0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80BE7AC: .word off_80BE7B0
off_80BE7B0: .word sub_80BE7BC+1
	.word sub_80BE834+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BE7BC:
	push {r4,r6,r7,lr}
	ldrb r1, [r5,#4]
	cmp r1, #0
	beq loc_80BE810
	mov r0, #0
	bl sub_800FC9E
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#4]
	ldr r1, off_80BE82C // =0x1ac 
	add r0, r0, r1
	sub r0, #1
	strh r0, [r5,#0x28]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	ldr r1, dword_80BE830 // =byte_80203EA 
	ldrb r0, [r1,r0]
	bl sprite_setPallete // (int pallete) -> void
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl sub_8010DF6
loc_80BE810:
	mov r0, #4
	str r0, [r5,#8]
	ldrb r1, [r5,#4]
	cmp r1, #0
	beq loc_80BE824
	ldrb r1, [r5,#5]
	cmp r1, #4
	bne loc_80BE824
	mov r1, #8
	strb r1, [r5,#9]
loc_80BE824:
	bl sub_80BE834
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80BE82C: .word 0x1AC
dword_80BE830: .word 0x80203EA
.endfunc // sub_80BE7BC

.func
.thumb_func
sub_80BE834:
	push {lr}
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80BE842
	bl sub_80BE878
	pop {pc}
loc_80BE842:
	ldr r1, off_80BE850 // =off_80BE854 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BE850: .word off_80BE854
off_80BE854: .word sub_80BEA50+1
	.word sub_80BEC68+1
	.word sub_80BEBBC+1
	.word sub_80BECF0+1
	.word sub_80BEE04+1
	.word loc_80BEE62+1
	.word sub_80BEF2C+1
	.word loc_80BEFE2+1
	.word sub_80BF11A+1
.endfunc // sub_80BE834

.func
.thumb_func
sub_80BE878:
	push {lr}
	ldr r1, off_80BE888 // =off_80BE88C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BE888: .word off_80BE88C
off_80BE88C: .word sub_80BE8A0+1
	.word sub_80BE8AE+1
	.word sub_80BE950+1
	.word sub_80BE97A+1
	.word sub_80BEA10+1
.endfunc // sub_80BE878

.func
.thumb_func
sub_80BE8A0:
	push {lr}
	mov r0, #0
	strh r0, [r5,#0x20]
	strh r0, [r5,#0x22]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80BE8A0

.func
.thumb_func
sub_80BE8AE:
	push {r4,r6,r7,lr}
	ldr r7, off_80BEA40 // =dword_80BE91C 
	mov r1, #0x20 
	bl sub_8013774
	tst r0, r0
	beq loc_80BE8BE
	ldr r7, dword_80BEA44 // =dword_80BE91C 
loc_80BE8BE:
	ldrh r6, [r5,#0x22]
	mov r2, #5
	mul r2, r6
	add r7, r7, r2
	ldrb r3, [r7]
	cmp r3, #0xff
	beq loc_80BE914
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrh r4, [r5,#0x22]
	lsl r4, r4, #8
	ldrb r2, [r7,#2]
	add r4, r4, r2
	lsl r4, r4, #8
	ldrb r2, [r7,#1]
	add r4, r4, r2
	ldrb r2, [r7]
	lsl r4, r4, #8
	add r4, r4, r2
	ldrb r2, [r7,#4]
	push {r7}
	mov r7, #0x6c 
	add r7, r7, r5
	add r7, r7, r6
	mov r3, #0
	ldr r6, [r5,#0x2c]
	bl sub_80BF160
	add r4, r0, #0
	pop {r7}
	ldrb r0, [r7,#3]
	bl sub_80BF192
	strb r0, [r4,#0x14]
	strb r1, [r4,#0x15]
	ldrb r0, [r7,#3]
	mov r1, #1
	eor r0, r1
	strb r0, [r4,#0xc]
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	b loc_80BE824
loc_80BE914:
	mov r0, #8
	strh r0, [r5,#0xa]
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80BE91C: .word 0x1000005, 0x2000100, 0x20100, 0x3030104, 0x100, 0x1000104
	.word 0xAFF00, 0x6000100, 0x2000300, 0x1050007, 0x30804, 0x2090000
	.word 0xFF000100
.endfunc // sub_80BE8AE

.func
.thumb_func
sub_80BE950:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BE968
	ldr r0, [r5,#0x6c]
	ldr r1, [r5,#0x70]
	orr r0, r1
	bne locret_80BE978
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BE968:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BE978
	mov r0, #0
	strh r0, [r5,#0x22]
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80BE978:
	pop {pc}
.endfunc // sub_80BE950

.func
.thumb_func
sub_80BE97A:
	push {r4,r6,r7,lr}
	ldr r7, off_80BEA48 // =dword_80BE9D8 
	mov r1, #0x20 
	bl sub_8013774
	tst r0, r0
	beq loc_80BE98A
	ldr r7, dword_80BEA4C // =dword_80BE9D8 
loc_80BE98A:
	ldrh r6, [r5,#0x22]
	mov r2, #5
	mul r2, r6
	add r7, r7, r2
	ldrb r3, [r7]
	cmp r3, #0xff
	beq loc_80BE9D2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrh r4, [r5,#0x22]
	lsl r4, r4, #8
	ldrb r2, [r7,#2]
	add r4, r4, r2
	lsl r4, r4, #8
	ldrb r2, [r7,#1]
	add r4, r4, r2
	ldrb r2, [r7]
	lsl r4, r4, #8
	add r4, r4, r2
	ldrb r2, [r7,#4]
	push {r7}
	mov r7, #0x6c 
	add r7, r7, r5
	add r7, r7, r6
	mov r3, #0
	ldr r6, [r5,#0x2c]
	bl sub_80BF160
	add r4, r0, #0
	pop {r7}
	ldrh r0, [r5,#0x12]
	strh r0, [r4,#0x14]
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	b loc_80BE824
loc_80BE9D2:
	mov r0, #0x10
	strh r0, [r5,#0xa]
	pop {r4,r6,r7,pc}
dword_80BE9D8: .word 0x1000405, 0x40100, 0x4020101, 0xFF030100, 0x1000403
	.word 0x40403, 0xAFF0301, 0x10004, 0x1000406, 0x40702
	.word 0x8FF0401, 0x10004, 0x1000409, 0xFF00
.endfunc // sub_80BE97A

.func
.thumb_func
sub_80BEA10:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEA28
	ldr r0, [r5,#0x6c]
	ldr r1, [r5,#0x70]
	orr r0, r1
	bne locret_80BEA3E
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEA28:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BEA3E
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80BEA3A
	mov r1, #0
	strb r1, [r0]
loc_80BEA3A:
	mov r0, #8
	str r0, [r5,#8]
locret_80BEA3E:
	pop {pc}
off_80BEA40: .word dword_80BE91C
dword_80BEA44: .word 0x80BE936
off_80BEA48: .word dword_80BE9D8
dword_80BEA4C: .word 0x80BE9F3
.endfunc // sub_80BEA10

.func
.thumb_func
sub_80BEA50:
	push {lr}
	ldr r1, off_80BEA60 // =off_80BEA64 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BEA60: .word off_80BEA64
off_80BEA64: .word sub_80BEA78+1
	.word sub_80BEACE+1
	.word sub_80BEB28+1
	.word sub_80BEB46+1
	.word sub_80BEB90+1
.endfunc // sub_80BEA50

.func
.thumb_func
sub_80BEA78:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEAA0
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#7]
	cmp r0, #3
	bge loc_80BEA98
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
loc_80BEA98:
	mov r0, #0x1f
	strh r0, [r5,#0x22]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEAA0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80BEAB2
	bl sub_8002EE8
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
loc_80BEAB2:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bge loc_80BEABE
	mov r0, #0
	strh r0, [r5,#0x22]
loc_80BEABE:
	ldrh r1, [r5,#0x22]
	lsl r0, r1, #5
	add r0, r0, r1
	lsl r0, r0, #5
	add r0, r0, r1
	bl sub_8002ED0
	pop {pc}
.endfunc // sub_80BEA78

.func
.thumb_func
sub_80BEACE:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEAE6
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #0x11
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEAE6:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x14
	ble loc_80BEAF4
	mov r0, #8
	strh r0, [r5,#0xa]
loc_80BEAF4:
	ldrh r0, [r5,#0x20]
	ldrb r1, [r5,#7]
	ldr r2, off_80BEBB8 // =dword_80BEB20 
	ldrb r1, [r2,r1]
	add r1, r1, r0
	ldrh r0, [r5,#0x20]
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r0, #0
	add r3, r1, #0
	pop {r0,r1}
	bl sub_80E58D2
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	pop {pc}
dword_80BEB20: .word 0x78AA5500, 0xC8
.endfunc // sub_80BEACE

.func
.thumb_func
sub_80BEB28:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEB38
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEB38:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BEB44
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80BEB44:
	pop {pc}
.endfunc // sub_80BEB28

.func
.thumb_func
sub_80BEB46:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEB5A
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEB5A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BEB8E
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0x10
	strh r0, [r5,#0xa]
	ldrb r0, [r5,#0x14]
	tst r0, r0
	bne locret_80BEB8E
	ldr r1, [r5,#0x60]
	tst r1, r1
	beq loc_80BEB7E
	mov r0, #0
	strb r0, [r1]
loc_80BEB7E:
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	mov r0, #8
	str r0, [r5,#8]
locret_80BEB8E:
	pop {pc}
.endfunc // sub_80BEB46

.func
.thumb_func
sub_80BEB90:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEBA4
	ldrb r0, [r5,#7]
	mov r1, #0x14
	mul r0, r1
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEBA4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BEBB4
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BEBB4:
	pop {pc}
	.balign 4, 0x00
off_80BEBB8: .word dword_80BEB20
.endfunc // sub_80BEB90

.func
.thumb_func
sub_80BEBBC:
	push {lr}
	ldr r1, off_80BEBCC // =off_80BEBD0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BEBCC: .word off_80BEBD0
off_80BEBD0: .word sub_80BEBD8+1
	.word sub_80BEC40+1
.endfunc // sub_80BEBBC

.func
.thumb_func
sub_80BEBD8:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEC28
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#7]
	cmp r0, #3
	bge loc_80BEBF8
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
loc_80BEBF8:
	mov r0, #0x14
	ldrb r1, [r5,#7]
	ldr r2, off_80BEC64 // =dword_80BEC38 
	ldrb r1, [r2,r1]
	add r1, r1, r0
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r0, #0
	add r3, r1, #0
	pop {r0,r1}
	bl sub_80E58D2
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEC28:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BEC34
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BEC34:
	pop {pc}
	.balign 4, 0x00
dword_80BEC38: .word 0x78AA5500, 0xC8
.endfunc // sub_80BEBD8

.func
.thumb_func
sub_80BEC40:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEC50
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEC50:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0
	ble locret_80BEC62
	mov r0, #0x1c
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BEC62:
	pop {pc}
off_80BEC64: .word dword_80BEC38
.endfunc // sub_80BEC40

.func
.thumb_func
sub_80BEC68:
	push {lr}
	ldr r1, off_80BEC78 // =off_80BEC7C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BEC78: .word off_80BEC7C
off_80BEC7C: .word sub_80BEC84+1
	.word sub_80BECC6+1
.endfunc // sub_80BEC68

.func
.thumb_func
sub_80BEC84:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BECB8
	ldrh r0, [r5,#0x14]
	strh r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#0x17]
	ldrb r1, [r5,#0xc]
	eor r0, r1
	strb r0, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BECB8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BECC4
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BECC4:
	pop {pc}
.endfunc // sub_80BEC84

.func
.thumb_func
sub_80BECC6:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BECDA
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BECDA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BECEE
	ldrb r0, [r5,#5]
	lsl r0, r0, #2
	add r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BECEE:
	pop {pc}
.endfunc // sub_80BECC6

.func
.thumb_func
sub_80BECF0:
	push {lr}
	ldr r1, off_80BED00 // =off_80BED04 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BED00: .word off_80BED04
off_80BED04: .word sub_80BED0C+1
	.word sub_80BEDCC+1
.endfunc // sub_80BECF0

.func
.thumb_func
sub_80BED0C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BED3A
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0xb0
	bl sound_play // () -> void
	ldrb r0, [r5,#6]
	ldr r1, dword_80BEDF0 // =dword_80BEDA8 
	ldrb r0, [r0,r1]
	ldr r4, dword_80BEDF4 // =0x10000 
	add r4, r4, r0
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	str r0, [r5,#0x64]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BED3A:
	ldrh r0, [r5,#0x20]
	cmp r0, #9
	bne loc_80BED94
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	ldrb r2, [r5,#6]
	lsl r2, r2, #2
	ldr r4, off_80BEDF8 // =dword_80BEDA8 
	ldr r4, [r4,r2]
	ldr r6, [r5,#0x2c]
	mov r7, #3
	ldrb r2, [r5,#0xe]
	mov r3, #0
	bl sub_80C53A6
	pop {r0,r1}
	push {r0,r1}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	ldrb r3, [r5,#6]
	ldr r2, off_80BEDFC // =dword_80BEDA8+24 
	ldrb r0, [r2,r3]
	add r4, r4, r0
	cmp r3, #2
	blt loc_80BED7C
	sub r3, #1
	lsl r3, r3, #0x10
	orr r4, r3
loc_80BED7C:
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	ldr r4, dword_80BEE00 // =0x10a00 
	bl sub_80E11E0
loc_80BED94:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x15
	ble locret_80BEDA6
	mov r0, #0x20 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BEDA6:
	pop {r4,r6,r7,pc}
dword_80BEDA8: .word 0x405FF01, 0x405FF04, 0x405FF04, 0x405FF04, 0x405FF04
	.word 0x405FF04, 0x16161618, 0x3031616, 0x1C1B1A19
.endfunc // sub_80BED0C

.func
.thumb_func
sub_80BEDCC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEDDC
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEDDC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BEDEC
	mov r0, #0x20 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BEDEC:
	pop {pc}
	.byte 0, 0
dword_80BEDF0: .word 0x80BEDC6
dword_80BEDF4: .word 0x10000
off_80BEDF8: .word dword_80BEDA8
off_80BEDFC: .word dword_80BEDA8+0x18
dword_80BEE00: .word 0x10A00
.endfunc // sub_80BEDCC

.func
.thumb_func
sub_80BEE04:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEE44
	mov r0, #0xf
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r4, #2
	mov r3, #0
	ldr r6, [r5,#0x2c]
	bl sub_80D8F98
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	str r0, [r5,#0x68]
	mov r0, #0xba
	bl sound_play // () -> void
	mov r0, #0x46 
	strh r0, [r5,#0x20]
	ldr r4, dword_80BF234 // =0x10a00 
	bl sub_80E11E0
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEE44:
	ldrh r0, [r5,#0x20]
	cmp r0, #0x28 
	bne loc_80BEE50
	ldr r0, [r5,#0x68]
	bl sub_80D8FB8
loc_80BEE50:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BEE60
	mov r0, #0x20 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BEE60:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BEE04

loc_80BEE62:
	push {lr}
	ldr r1, off_80BEE70 // =off_80BEE74 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BEE70: .word off_80BEE74
off_80BEE74: .word sub_80BEE80+1
	.word sub_80BEEA2+1
	.word sub_80BEF02+1
.func
.thumb_func
sub_80BEE80:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEE90
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEE90:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BEEA0
	mov r0, #4
	strh r0, [r5,#0xa]
	bl sub_80BEEA2
locret_80BEEA0:
	pop {pc}
.endfunc // sub_80BEE80

.func
.thumb_func
sub_80BEEA2:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEEF4
	mov r0, #0xa
	strb r0, [r5,#0x10]
	ldr r4, dword_80BF238 // =0x10120 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	ldrb r2, [r5,#0xe]
	ldr r4, dword_80BF23C // =0x11e00 
	ldr r6, [r5,#0x2c]
	mov r3, #0x10
	lsl r3, r3, #0x10
	mov r7, #0x68 
	add r7, r7, r5
	bl sub_80D2B8E
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0xf0
	bl sound_play // () -> void
	ldr r4, dword_80BF234 // =0x10a00 
	bl sub_80E11E0
	ldr r1, dword_80BF240 // =0x10000 
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEEF4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BEF00
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BEF00:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BEEA2

.func
.thumb_func
sub_80BEF02:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEF1A
	ldr r0, [r5,#0x64]
	mov r1, #0
	bl sub_80B8E70
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEF1A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BEF2A
	mov r0, #0x20 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BEF2A:
	pop {pc}
.endfunc // sub_80BEF02

.func
.thumb_func
sub_80BEF2C:
	push {lr}
	ldr r1, off_80BEF3C // =off_80BEF40 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BEF3C: .word off_80BEF40
off_80BEF40: .word sub_80BEF48+1
	.word sub_80BEFC0+1
.endfunc // sub_80BEF2C

.func
.thumb_func
sub_80BEF48:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEF8A
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x20 
	add r0, #0xff
	bl sound_play // () -> void
	ldr r4, dword_80BF244 // =0x1002a 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	add r4, #0x44 
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	mov r0, #0x15
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEF8A:
	ldrh r0, [r5,#0x20]
	cmp r0, #0xc
	bne loc_80BEFB2
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r4, dword_80BF248 // =0x405ff04 
	ldrb r2, [r5,#0xe]
	ldr r3, dword_80BF24C // =0x100000 
	ldr r6, [r5,#0x2c]
	push {r0,r1}
	mov r7, #3
	bl sub_80C53A6
	pop {r0,r1}
	ldr r4, dword_80BF234 // =0x10a00 
	bl sub_80E11E0
loc_80BEFB2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BEFBE
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BEFBE:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BEF48

.func
.thumb_func
sub_80BEFC0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BEFD0
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BEFD0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BEFE0
	mov r0, #0x20 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BEFE0:
	pop {pc}
.endfunc // sub_80BEFC0

loc_80BEFE2:
	push {lr}
	ldr r1, off_80BEFF0 // =off_80BEFF4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BEFF0: .word off_80BEFF4
off_80BEFF4: .word sub_80BF000+1
	.word sub_80BF07A+1
	.word sub_80BF0F8+1
.func
.thumb_func
sub_80BF000:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF03A
	mov r0, #0
	strh r0, [r5,#0x20]
	ldrh r0, [r5,#0x28]
	mov r1, #0
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r3, [r5,#0x3c]
	add r3, r3, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	mov r4, #0x4e 
	bl sub_80E05F6
	mov r1, #0x46 
	strh r1, [r0,#0x20]
	mov r0, #0x71 
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF03A:
	ldrh r0, [r5,#0x20]
	cmp r0, #0x46 
	bne loc_80BF06A
	ldrh r0, [r5,#0x28]
	mov r1, #0
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r3, [r5,#0x3c]
	add r3, r3, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	mov r4, #0x4f 
	bl sub_80E05F6
	mov r1, #0x14
	strh r1, [r0,#0x20]
	mov r0, #0x72 
	bl sound_play // () -> void
loc_80BF06A:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x5a 
	ble locret_80BF078
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BF078:
	pop {pc}
.endfunc // sub_80BF000

.func
.thumb_func
sub_80BF07A:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF08E
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF08E:
	ldrh r0, [r5,#0x20]
	cmp r0, #4
	bne loc_80BF0DE
	ldrb r0, [r5,#7]
	cmp r0, #0
	bne loc_80BF0DE
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r4, off_80BF250 // =dword_80BF0F0 
	ldr r4, [r4,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldr r6, [r5,#0x2c]
	mov r7, #3
	push {r4}
	bl sub_80C53A6
	pop {r4}
	add r0, r4, #0
	mov r1, #2
	mov r3, #0
	mov r4, #1
	bl sub_80E2FE8
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	mov r0, #3
	mov r1, #0x1e
	bl sub_80302A8
	ldr r4, dword_80BF254 // =0x12300 
	bl sub_80E11E0
	mov r0, #0xc3
	bl sound_play // () -> void
loc_80BF0DE:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x3c 
	ble locret_80BF0EC
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BF0EC:
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80BF0F0: .word 0x405FF82, 0x405FF81
.endfunc // sub_80BF07A

.func
.thumb_func
sub_80BF0F8:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF108
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF108:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80BF118
	mov r0, #0x20 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BF118:
	pop {pc}
.endfunc // sub_80BF0F8

.func
.thumb_func
sub_80BF11A:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF134
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF134:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF15E
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldr r1, [r5,#0x60]
	tst r1, r1
	beq loc_80BF14E
	mov r0, #0
	strb r0, [r1]
loc_80BF14E:
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	mov r0, #8
	str r0, [r5,#8]
locret_80BF15E:
	pop {pc}
.endfunc // sub_80BF11A

.func
.thumb_func
sub_80BF160:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x23 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BF190
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	tst r7, r7
	beq loc_80BF184
	mov r1, #1
	strb r1, [r7]
loc_80BF184:
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80BF190:
	pop {pc}
.endfunc // sub_80BF160

.func
.thumb_func
sub_80BF192:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	ldrb r1, [r5,#0x17]
	eor r1, r0
	ldrb r0, [r5,#0x16]
	bl object_getFlipDirection // (int a1, int a2) -> int
	str r0, [sp,#0x1c]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80BF258 // =off_80BF224 
	add r0, r0, r1
	ldr r1, [r0]
	str r1, [sp,#0x10]
	ldr r1, [r0,#4]
	str r1, [sp,#0x14]
	ldr r2, [sp,#0x10]
	ldr r3, [sp,#0x14]
	add r7, sp, #0
	bl sub_800CEA0
.endfunc // sub_80BF192

	add r6, r0, #0
	beq loc_80BF21E
	mov r4, #0
	mov r7, #0
loc_80BF1C4:
	add r0, sp, #0
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	ldr r2, [sp,#0x1c]
	add r0, r0, r2
	str r0, [sp,#0x20]
	str r1, [sp,#0x24]
	ldr r3, [r5,#0x4c]
	ldrb r2, [r3,#0x12]
	cmp r2, r0
	bne loc_80BF1E4
	ldrb r2, [r3,#0x13]
	cmp r2, r1
	beq loc_80BF1F4
loc_80BF1E4:
	ldr r0, [sp,#0x20]
	ldr r1, [sp,#0x24]
	mov r2, #0x10
	ldr r3, dword_80BF25C // =0xf800000 
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_80BF202
loc_80BF1F4:
	ldr r0, [sp,#0x20]
	ldr r1, [sp,#0x24]
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #8
	strb r0, [r1,r7]
	add r7, #1
loc_80BF202:
	add r4, #1
	cmp r4, r6
	blt loc_80BF1C4
	add r0, r7, #0
	beq loc_80BF21E
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80BF21E:
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80BF224: .word LCDControl
	.word 0x0
	.word start_
	.word 0x0
dword_80BF234: .word 0x10A00
dword_80BF238: .word 0x10120
dword_80BF23C: .word 0x11E00
dword_80BF240: .word 0x10000
dword_80BF244: .word 0x1002A
dword_80BF248: .word 0x405FF04
dword_80BF24C: .word 0x100000
off_80BF250: .word dword_80BF0F0
dword_80BF254: .word 0x12300
off_80BF258: .word off_80BF224
dword_80BF25C: .word 0xF800000
loc_80BF260:
	push {lr}
	ldr r1, off_80BF274 // =off_80BF278 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80BF274: .word off_80BF278
off_80BF278: .word sub_80BF284+1
	.word sub_80BF2D0+1
	.word sub_80BF69C+1
.func
.thumb_func
sub_80BF284:
	push {r4,r6,r7,lr}
	mov r0, #0xc
	mov r1, #0x64 
	bl sprite_decompress
	mov r1, #0xc
	mov r2, #0x64 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BF284

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	ldr r0, dword_80BF2CC // =0x400000 
	str r0, [r5,#0x3c]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80BF2D0
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80BF2CC: .word 0x400000
.func
.thumb_func
sub_80BF2D0:
	push {lr}
	ldr r1, off_80BF2E0 // =off_80BF2E4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BF2E0: .word off_80BF2E4
off_80BF2E4: .word sub_80BF2FC+1
	.word sub_80BF324+1
	.word sub_80BF3B0+1
	.word loc_80BF44A+1
	.word sub_80BF4D0+1
	.word loc_80BF56A+1
.endfunc // sub_80BF2D0

.func
.thumb_func
sub_80BF2FC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF312
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF312:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF322
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BF322:
	pop {pc}
.endfunc // sub_80BF2FC

.func
.thumb_func
sub_80BF324:
	push {lr}
	ldr r1, off_80BF334 // =off_80BF338 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BF334: .word off_80BF338
off_80BF338: .word sub_80BF340+1
	.word sub_80BF38A+1
.endfunc // sub_80BF324

.func
.thumb_func
sub_80BF340:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF358
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #6
	strh r0, [r5,#0x22]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF358:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF388
	mov r0, #0xf
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #1
	mov r4, #0
	mov r6, #0x32 
	ldrh r3, [r5,#0x2c]
	lsr r3, r3, #0xc
	lsl r3, r3, #0xc
	add r6, r6, r3
	ldr r3, [r5,#0x3c]
	bl sub_80DC0C0
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80BF388
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BF388:
	pop {pc}
.endfunc // sub_80BF340

.func
.thumb_func
sub_80BF38A:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF39E
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF39E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF3AE
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BF3AE:
	pop {pc}
.endfunc // sub_80BF38A

.func
.thumb_func
sub_80BF3B0:
	push {lr}
	ldr r1, off_80BF3C0 // =off_80BF3C4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BF3C0: .word off_80BF3C4
off_80BF3C4: .word sub_80BF3CC+1
	.word sub_80BF428+1
.endfunc // sub_80BF3B0

.func
.thumb_func
sub_80BF3CC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF3E8
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0x11
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF3E8:
	ldrh r0, [r5,#0x20]
	bl sub_80BF402
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF400
	mov r0, #4
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BF400:
	pop {pc}
.endfunc // sub_80BF3CC

.func
.thumb_func
sub_80BF402:
	push {lr}
	mov r1, #8
	cmp r0, #0x14
	bgt loc_80BF40E
	mov r1, #4
	b loc_80BF418
loc_80BF40E:
	cmp r0, #0xa
	ble loc_80BF416
	mov r1, #2
	b loc_80BF418
loc_80BF416:
	mov r1, #1
loc_80BF418:
	mov r2, #0
	tst r0, r1
	beq loc_80BF420
	mov r2, #4
loc_80BF420:
	add r0, r2, #0
	bl sprite_setPallete // (int pallete) -> void
	pop {pc}
.endfunc // sub_80BF402

.func
.thumb_func
sub_80BF428:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF438
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF438:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF448
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BF448:
	pop {pc}
.endfunc // sub_80BF428

loc_80BF44A:
	push {lr}
	ldr r1, off_80BF458 // =off_80BF45C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BF458: .word off_80BF45C
off_80BF45C: .word sub_80BF464+1
	.word sub_80BF4A4+1
.func
.thumb_func
sub_80BF464:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF496
	mov r0, #0x64 
	strh r0, [r5,#0x20]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r4, #0
	mov r6, #2
	ldrh r3, [r5,#0x2c]
	lsr r3, r3, #0xc
	lsl r3, r3, #0xc
	add r6, r6, r3
	mov r3, #0
	bl sub_80DC22C
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF496:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF4A2
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BF4A2:
	pop {pc}
.endfunc // sub_80BF464

.func
.thumb_func
sub_80BF4A4:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF4BE
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #4
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF4BE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF4CE
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BF4CE:
	pop {pc}
.endfunc // sub_80BF4A4

.func
.thumb_func
sub_80BF4D0:
	push {lr}
	ldr r1, off_80BF4E0 // =off_80BF4E4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BF4E0: .word off_80BF4E4
off_80BF4E4: .word sub_80BF4EC+1
	.word sub_80BF548+1
.endfunc // sub_80BF4D0

.func
.thumb_func
sub_80BF4EC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF508
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0x11
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF508:
	ldrh r0, [r5,#0x20]
	bl sub_80BF522
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF520
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BF520:
	pop {pc}
.endfunc // sub_80BF4EC

.func
.thumb_func
sub_80BF522:
	push {lr}
	mov r1, #8
	cmp r0, #0x14
	bgt loc_80BF52E
	mov r1, #4
	b loc_80BF538
loc_80BF52E:
	cmp r0, #0xa
	ble loc_80BF536
	mov r1, #2
	b loc_80BF538
loc_80BF536:
	mov r1, #1
loc_80BF538:
	mov r2, #4
	tst r0, r1
	beq loc_80BF540
	mov r2, #0
loc_80BF540:
	add r0, r2, #0
	bl sprite_setPallete // (int pallete) -> void
	pop {pc}
.endfunc // sub_80BF522

.func
.thumb_func
sub_80BF548:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF558
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF558:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF568
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BF568:
	pop {pc}
.endfunc // sub_80BF548

loc_80BF56A:
	push {lr}
	ldr r1, off_80BF578 // =off_80BF57C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BF578: .word off_80BF57C
off_80BF57C: .word sub_80BF588+1
	.word sub_80BF5E0+1
	.word sub_80BF67E+1
.func
.thumb_func
sub_80BF588:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF5A0
	mov r0, #1
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF5A0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF5DE
	mov r0, #0x10
	strh r0, [r5,#0x20]
	bl sub_800E2C0
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r2, [r5,#0x34]
	sub r0, r0, r2
	mov r1, #0x10
	svc 6
	str r0, [r5,#0x40]
	ldr r0, [r5,#0x3c]
	neg r0, r0
	mov r1, #0x10
	svc 6
	str r0, [r5,#0x48]
	mov r0, #0x80
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BF5DE:
	pop {pc}
.endfunc // sub_80BF588

.func
.thumb_func
sub_80BF5E0:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80BF664
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80BF6E0 // =0xf800010 
	tst r0, r1
	bne loc_80BF614
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x12
	bl sub_80E05F6
	b loc_80BF656
loc_80BF614:
	mov r0, #0xc3
	bl sound_play // () -> void
	mov r0, #3
	mov r1, #0x1e
	bl sub_80302A8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80BF6E4 // =0xa05ff0f 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	push {r0,r1}
	bl sub_80C53A6
	pop {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r3, #0xf
	bl sub_80DB48A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #5
	mov r3, #0xf
	ldrb r4, [r5,#0x16]
	bl sub_801BD3C
	ldr r4, dword_80BF6E8 // =0x11e00 
	bl sub_80E11E0
loc_80BF656:
	mov r0, #8
	strh r0, [r5,#0xa]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	pop {r4,r6,r7,pc}
loc_80BF664:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bl sub_800E2AC
	bl sub_801A04C
	pop {r4,r6,r7,pc}
.endfunc // sub_80BF5E0

.func
.thumb_func
sub_80BF67E:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF68E
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF68E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF69A
	mov r0, #8
	str r0, [r5,#8]
locret_80BF69A:
	pop {pc}
.endfunc // sub_80BF67E

.func
.thumb_func
sub_80BF69C:
	push {r4,lr}
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80BF6A8
	mov r1, #0
	strb r1, [r0]
loc_80BF6A8:
	bl object_freeMemory
	pop {r4,pc}
.endfunc // sub_80BF69C

.func
.thumb_func
sub_80BF6AE:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x24 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BF6DE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	tst r7, r7
	beq loc_80BF6D2
	mov r1, #1
	strb r1, [r7]
loc_80BF6D2:
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80BF6DE:
	pop {pc}
dword_80BF6E0: .word 0xF800010
dword_80BF6E4: .word 0xA05FF0F
dword_80BF6E8: .word 0x11E00
.endfunc // sub_80BF6AE

loc_80BF6EC:
	push {lr}
	ldr r1, off_80BF700 // =off_80BF704 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80BF700: .word off_80BF704
off_80BF704: .word sub_80BF710+1
	.word loc_80BF7BC+1
	.word sub_80BFCB2+1
.func
.thumb_func
sub_80BF710:
	push {r4,r6,r7,lr}
	ldr r7, off_80BF7B8 // =dword_80BF7A8 
	ldrb r0, [r5,#4]
	lsl r0, r0, #3
	add r7, r7, r0
	ldrh r0, [r7,#2]
	strh r0, [r5,#0x28]
	ldrb r0, [r7]
	mov r3, #0x80
	tst r0, r3
	beq loc_80BF730
	mov r2, #0x7f
	and r0, r2
	ldrb r1, [r7,#1]
	bl sprite_decompress
loc_80BF730:
	ldrb r1, [r7]
	mov r2, #0x7f
	and r1, r2
	ldrb r2, [r7,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BF710

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #4
	ldrsb r0, [r7,r0]
	mul r0, r4
	lsl r0, r0, #0x10
	add r1, r1, r0
	mov r0, #5
	ldrsb r0, [r7,r0]
	lsl r0, r0, #0x10
	add r2, r2, r0
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r0, #0x40 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl sub_8010DF6
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80BF7BC
	pop {r4,r6,r7,pc}
dword_80BF7A8: .word 0x1A00000, 0x0
	.word 0x16D1388, 0x0
off_80BF7B8: .word dword_80BF7A8
loc_80BF7BC:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80BF7D0
	ldr r1, off_80BF7DC // =off_80BF7E4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
loc_80BF7D0:
	ldr r1, off_80BF7E0 // =off_80BF7F4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80BF7DC: .word off_80BF7E4
off_80BF7E0: .word off_80BF7F4
off_80BF7E4: .word sub_80BF800+1
	.word sub_80BF888+1
	.word sub_80BF97C+1
	.word sub_80BF9B0+1
off_80BF7F4: .word sub_80BFA1C+1
	.word sub_80BFAD8+1
	.word sub_80BFC28+1
.func
.thumb_func
sub_80BF800:
	push {lr}
	ldr r1, off_80BF810 // =off_80BF814 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BF810: .word off_80BF814
off_80BF814: .word sub_80BF81C+1
	.word sub_80BF866+1
.endfunc // sub_80BF800

.func
.thumb_func
sub_80BF81C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF83C
	mov r0, #0xfc
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x20]
	strh r0, [r5,#0x22]
	mov r0, #0x19
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #4
	strb r0, [r5,#0xb]
	b loc_80BF85E
loc_80BF83C:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #1
	ble loc_80BF85E
	mov r0, #0
	strh r0, [r5,#0x20]
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	cmp r0, #0xf
	ble loc_80BF85E
	bl sub_8002CCE
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
loc_80BF85E:
	ldrh r0, [r5,#0x22]
	bl sub_8002C7A
	pop {pc}
.endfunc // sub_80BF81C

.func
.thumb_func
sub_80BF866:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF876
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF876:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF886
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BF886:
	pop {pc}
.endfunc // sub_80BF866

.func
.thumb_func
sub_80BF888:
	push {lr}
	ldr r1, off_80BF898 // =off_80BF89C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BF898: .word off_80BF89C
off_80BF89C: .word sub_80BF8A8+1
	.word sub_80BF8DA+1
	.word sub_80BF94E+1
.endfunc // sub_80BF888

.func
.thumb_func
sub_80BF8A8:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF8CC
	mov r0, #0xa
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	ldr r4, dword_80BF978 // =0x10032 
	mov r7, #0x60 
	add r7, r7, r5
	bl sub_80B8E30
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF8CC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF8D8
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BF8D8:
	pop {r4,r7,pc}
.endfunc // sub_80BF8A8

.func
.thumb_func
sub_80BF8DA:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF8FC
	mov r0, #0
	strh r0, [r5,#0x20]
	strh r0, [r5,#0x22]
	ldr r0, [r5,#0x60]
	mov r1, #2
	bl sub_80B8E70
	mov r0, #2
	mov r1, #0x6a 
	bl sub_80302A8
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF8FC:
	ldrh r0, [r5,#0x22]
	cmp r0, #0
	bne loc_80BF90A
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
loc_80BF90A:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	cmp r0, #0x10
	blt loc_80BF918
	mov r0, #0
	strh r0, [r5,#0x22]
loc_80BF918:
	ldrh r2, [r5,#0x20]
	mov r0, #0
	mov r1, #0
	cmp r2, r1
	beq loc_80BF934
	mov r0, #1
	mov r1, #8
	cmp r2, r1
	beq loc_80BF934
	mov r0, #2
	mov r1, #0x10
	cmp r2, r1
	beq loc_80BF934
	b loc_80BF93A
loc_80BF934:
	mov r1, #0x5a 
	bl sub_80BFD02
loc_80BF93A:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	mov r1, #0x5a 
	add r1, #0x10
	cmp r0, r1
	ble locret_80BF94C
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BF94C:
	pop {pc}
.endfunc // sub_80BF8DA

.func
.thumb_func
sub_80BF94E:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF966
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x60]
	mov r1, #3
	bl sub_80B8E70
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF966:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF976
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BF976:
	pop {pc}
dword_80BF978: .word 0x10032
.endfunc // sub_80BF94E

.func
.thumb_func
sub_80BF97C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF996
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x60]
	bl sub_80B8E58
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF996:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BF9AE
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BF9AE:
	pop {pc}
.endfunc // sub_80BF97C

.func
.thumb_func
sub_80BF9B0:
	push {lr}
	ldr r1, off_80BF9C0 // =off_80BF9C4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80BF9C0: .word off_80BF9C4
off_80BF9C4: .word sub_80BF9CC+1
	.word sub_80BF9FE+1
.endfunc // sub_80BF9B0

.func
.thumb_func
sub_80BF9CC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BF9F2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	mov r4, #1
	ldr r6, [r5,#0x2c]
	mov r7, #0x14
	add r7, r7, r5
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_80BFCD0
	pop {r5}
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BF9F2:
	ldrb r0, [r5,#0x14]
	tst r0, r0
	bne locret_80BF9FC
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BF9FC:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BF9CC

.func
.thumb_func
sub_80BF9FE:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BFA0E
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BFA0E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BFA1A
	mov r0, #8
	str r0, [r5,#8]
locret_80BFA1A:
	pop {pc}
.endfunc // sub_80BF9FE

.func
.thumb_func
sub_80BFA1C:
	push {lr}
	ldr r1, off_80BFA2C // =off_80BFA30 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BFA2C: .word off_80BFA30
off_80BFA30: .word sub_80BFA38+1
	.word sub_80BFAAE+1
.endfunc // sub_80BFA1C

.func
.thumb_func
sub_80BFA38:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BFA74
	mov r0, #0x3c 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x20]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldr r1, dword_80BFAD0 // =0x640000 
	mul r1, r0
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, dword_80BFAD0 // =0x640000 
	str r0, [r5,#0x3c]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80BFAD4 // =0xa0000 
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80BFAD4 // =0xa0000 
	neg r0, r0
	str r0, [r5,#0x48]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BFA74:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	cmp r0, #7
	beq loc_80BFA90
	cmp r0, #5
	beq loc_80BFA90
	b loc_80BFA96
loc_80BFA90:
	mov r0, #0
	bl sub_80BFD90
loc_80BFA96:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xa
	blt locret_80BFAAC
	bl sub_800E29C // () -> void
	bl sub_8002CCE
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BFAAC:
	pop {r4,pc}
.endfunc // sub_80BFA38

.func
.thumb_func
sub_80BFAAE:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BFABE
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BFABE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BFACE
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BFACE:
	pop {pc}
dword_80BFAD0: .word 0x640000
dword_80BFAD4: .word 0xA0000
.endfunc // sub_80BFAAE

.func
.thumb_func
sub_80BFAD8:
	push {lr}
	ldr r1, off_80BFAE8 // =off_80BFAEC 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BFAE8: .word off_80BFAEC
off_80BFAEC: .word sub_80BFAF8+1
	.word sub_80BFB74+1
	.word sub_80BFBFA+1
.endfunc // sub_80BFAD8

.func
.thumb_func
sub_80BFAF8:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BFB36
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r5,#0x28]
	mov r1, #0
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r3, [r5,#0x3c]
	add r3, r3, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	mov r4, #0x4e 
	bl sub_80E05F6
	mov r1, #0x1e
	strh r1, [r0,#0x20]
	mov r0, #0x71 
	bl sound_play // () -> void
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BFB36:
	ldrh r0, [r5,#0x20]
	cmp r0, #0x14
	bne loc_80BFB66
	ldrh r0, [r5,#0x28]
	mov r1, #0
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r3, [r5,#0x3c]
	add r3, r3, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	mov r4, #0x4f 
	bl sub_80E05F6
	mov r1, #0xa
	strh r1, [r0,#0x20]
	mov r0, #0x72 
	bl sound_play // () -> void
loc_80BFB66:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BFB72
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80BFB72:
	pop {r4,r7,pc}
.endfunc // sub_80BFAF8

.func
.thumb_func
sub_80BFB74:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BFB98
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r5,#0x20]
	ldr r4, dword_80BFC1C // =0x10e03 
	mov r7, #0x60 
	add r7, r7, r5
	bl sub_80B8E30
	mov r0, #0xce
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BFB98:
	ldrh r0, [r5,#0x20]
	cmp r0, #0xa
	bne loc_80BFBEA
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80BFC20 // =0x405ff11 
	ldr r6, [r5,#0x2c]
	push {r0,r1,r7}
	mov r7, #3
	bl sub_80C53A6
	pop {r0,r1,r7}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	push {r1,r2}
	mov r4, #4
	lsl r4, r4, #8
	bl sub_800E456 // () -> int
	add r4, r4, r0
	lsl r4, r4, #8
	add r4, #0x1b
	pop {r1,r2}
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	mov r0, #2
	mov r1, #0x28 
	bl sub_80302A8
	ldr r4, dword_80BFC24 // =0x11e00 
	bl sub_80E11E0
loc_80BFBEA:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x1e
	ble locret_80BFBF8
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80BFBF8:
	pop {r4,r6,r7,pc}
.endfunc // sub_80BFB74

.func
.thumb_func
sub_80BFBFA:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BFC0A
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BFC0A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BFC1A
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80BFC1A:
	pop {pc}
dword_80BFC1C: .word 0x10E03
dword_80BFC20: .word 0x405FF11
dword_80BFC24: .word 0x11E00
.endfunc // sub_80BFBFA

.func
.thumb_func
sub_80BFC28:
	push {lr}
	ldr r1, off_80BFC38 // =off_80BFC3C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BFC38: .word off_80BFC3C
off_80BFC3C: .word sub_80BFC44+1
	.word sub_80BFC94+1
.endfunc // sub_80BFC28

.func
.thumb_func
sub_80BFC44:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BFC64
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x60]
	bl sub_80B8E58
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #0xf
	strh r0, [r5,#0x22]
	mov r0, #4
	strb r0, [r5,#0xb]
	b loc_80BFC8C
loc_80BFC64:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #2
	ble loc_80BFC8C
	mov r0, #0
	strh r0, [r5,#0x20]
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80BFC8C
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_8002CCE
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
loc_80BFC8C:
	ldrh r0, [r5,#0x22]
	bl sub_8002C7A
	pop {pc}
.endfunc // sub_80BFC44

.func
.thumb_func
sub_80BFC94:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80BFCA4
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80BFCA4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80BFCB0
	mov r0, #8
	str r0, [r5,#8]
locret_80BFCB0:
	pop {pc}
.endfunc // sub_80BFC94

.func
.thumb_func
sub_80BFCB2:
	push {r4,lr}
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq loc_80BFCCA
	mov r1, #0
	strb r1, [r0]
loc_80BFCCA:
	bl object_freeMemory
	pop {r4,pc}
.endfunc // sub_80BFCB2

.func
.thumb_func
sub_80BFCD0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x25 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BFD00
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x64]
	tst r7, r7
	beq loc_80BFCF4
	mov r1, #1
	strb r1, [r7]
loc_80BFCF4:
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80BFD00:
	pop {pc}
.endfunc // sub_80BFCD0

.func
.thumb_func
sub_80BFD02:
	push {r4,r6,r7,lr}
	sub sp, sp, #0xc
	mov r7, sp
	strb r0, [r7,#0xb]
	mov r2, #2
	sub r2, r2, r0
	mov r3, #8
	mul r2, r3
	add r2, r2, r1
	strb r2, [r7,#9]
	lsl r0, r0, #2
	ldr r1, off_80BFD88 // =off_80BFD68 
	ldr r1, [r1,r0]
	str r1, [sp]
	mov r0, #5
	strb r0, [r7,#8]
	mov r0, #8
	strb r0, [r7,#0xa]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp,#4]
loc_80BFD2C:
	ldr r6, [sp]
	mov r0, #0
	ldrsb r0, [r6,r0]
	cmp r0, #0x7f
	beq loc_80BFD62
	ldr r1, [sp,#4]
	mul r0, r1
	ldrb r2, [r5,#0x12]
	add r0, r0, r2
	mov r1, #1
	ldrsb r1, [r6,r1]
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	mov r2, #1
	ldr r3, dword_80BFD8C // =0x60000 
	ldr r4, [r7,#8]
	ldr r6, [r5,#0x2c]
	bl sub_80D07A0
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	ldr r0, [sp]
	add r0, #2
	str r0, [sp]
	b loc_80BFD2C
loc_80BFD62:
	add sp, sp, #0xc
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80BFD68: .word dword_80BFD74
	.word 0x80BFD77, 0x80BFD7E
dword_80BFD74: .word 0x27F0001, 0x20002FF, 0xFF037F01, 0x1030003, 0x7F
off_80BFD88: .word off_80BFD68
dword_80BFD8C: .word 0x60000
.endfunc // sub_80BFD02

.func
.thumb_func
sub_80BFD90:
	push {r4,r6,r7,lr}
	sub sp, sp, #4
	str r0, [sp]
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #0x18
	ldr r0, dword_80BFDE8 // =0x141308 
	add r4, r4, r0
	ldr r0, [sp]
	lsl r0, r0, #0x10
	add r4, r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r0, dword_80BFDEC // =0x10000 
	sub r2, r2, r0
	sub r3, r3, r0
	ldr r6, dword_80BFDF0 // =0x8108 
	mov r7, #0xf
	bl sub_80E33FA
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #0x18
	ldr r0, dword_80BFDF4 // =0x1308 
	add r4, r4, r0
	ldr r0, [sp]
	lsl r0, r0, #0x10
	add r4, r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r0, dword_80BFDEC // =0x10000 
	sub r2, r2, r0
	sub r3, r3, r0
	ldr r6, dword_80BFDF0 // =0x8108 
	ldr r7, dword_80BFDF8 // =0x101000f 
	bl sub_80E33FA
	add sp, sp, #4
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80BFDE8: .word 0x141308
dword_80BFDEC: .word 0x10000
dword_80BFDF0: .word 0x8108
dword_80BFDF4: .word 0x1308
dword_80BFDF8: .word 0x101000F
.endfunc // sub_80BFD90

loc_80BFDFC:
	push {lr}
	ldr r1, off_80BFE14 // =off_80BFE18 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl battle_isTimeStop
	bne locret_80BFE12
	bl sub_801BBAC
locret_80BFE12:
	pop {pc}
off_80BFE14: .word off_80BFE18
off_80BFE18: .word sub_80BFE24+1
	.word loc_80BFE6E+1
	.word sub_8016C4E+1
.func
.thumb_func
sub_80BFE24:
	push {lr}
	mov r1, #8
	mov r2, #0x15
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldr r2, [r5,#0x4c]
	ldrb r0, [r2,#0x10]
	ldrb r1, [r5,#5]
	sub r0, r0, r1
	ldrb r1, [r5,#4]
	add r0, r0, r1
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BFE24

	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sprite_update
	bl loc_80BFE6E
	pop {pc}
loc_80BFE6E:
	push {lr}
	ldr r1, off_80BFE84 // =off_80BFE88 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	.hword 0xE001
aR_1: .asciz " (r"
	.byte 0xBD, 0x0, 0x0
off_80BFE84: .word off_80BFE88
off_80BFE88: .word sub_80BFE8C+1
.func
.thumb_func
sub_80BFE8C:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	ldrb r0, [r4,#0x10]
	ldrb r1, [r5,#5]
	sub r0, r0, r1
	ldrb r1, [r5,#4]
	add r0, r0, r1
	strb r0, [r5,#0x10]
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrb r0, [r5,#6]
	ldrh r1, [r5,#0x3a]
	sub r1, r1, r0
	strh r1, [r5,#0x3a]
	ldrh r1, [r5,#0x3e]
	sub r1, r1, r0
	strh r1, [r5,#0x3e]
	ldr r0, [r5,#0x4c]
	mov r2, #2
	mvn r2, r2
	ldrb r1, [r5]
	and r1, r2
	ldrb r2, [r0]
	mov r3, #2
	and r2, r3
	orr r1, r2
	strb r1, [r5]
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	pop {r4,pc}
.endfunc // sub_80BFE8C

.func
.thumb_func
sub_80BFF00:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x26 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80BFF26
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r3, [r0,#0x4c]
	mov r1, #0
	str r1, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80BFF26:
	pop {pc}
.endfunc // sub_80BFF00

	tst r0, r0
	beq locret_80BFF32
	strb r1, [r0,#0x10]
	mov r1, #0xff
	strb r1, [r0,#0x11]
locret_80BFF32:
	mov pc, lr
.func
.thumb_func
sub_80BFF34:
	tst r0, r0
	beq locret_80BFF3C
	mov r1, #0xff
	strb r1, [r0,#0x11]
locret_80BFF3C:
	mov pc, lr
.endfunc // sub_80BFF34

.func
.thumb_func
sub_80BFF3E:
	push {r5,lr}
	tst r0, r0
	beq locret_80BFF54
	add r5, r0, #0
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	mov r1, #1
	eor r0, r1
	bl sub_8002F5C
locret_80BFF54:
	pop {r5,pc}
.endfunc // sub_80BFF3E

.func
.thumb_func
sub_80BFF56:
	push {r5,lr}
	tst r0, r0
	beq locret_80BFF66
	add r5, r0, #0
	bl sub_800E456 // () -> int
	bl sub_8002F5C
locret_80BFF66:
	pop {r5,pc}
.endfunc // sub_80BFF56

loc_80BFF68:
	push {lr}
	ldr r1, off_80BFF78 // =off_80BFF7C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80BFF78: .word off_80BFF7C
off_80BFF7C: .word sub_80BFF88+1
	.word loc_80BFFC0+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80BFF88:
	push {r7,lr}
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x19
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80BFF88

	bl sub_8002F90 // () -> void
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #6
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80BFFC0
	pop {r7,pc}
	.byte 0, 0
loc_80BFFC0:
	push {lr}
	ldr r4, [r5,#0x4c]
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r1, off_80C0018 // =off_80C001C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C0018: .word off_80C001C
off_80C001C: .word sub_80C0030+1
	.word sub_80C004C+1
	.word sub_80C006A+1
	.word sub_80C006E+1
	.word sub_80C0072+1
.func
.thumb_func
sub_80C0030:
	push {lr}
	bl sub_80C00CE
	bl sub_800139A
	lsr r0, r0, #2
	bcc locret_80C004A
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	bl sub_80C004C
locret_80C004A:
	pop {pc}
.endfunc // sub_80C0030

.func
.thumb_func
sub_80C004C:
	push {lr}
	bl sub_80C0116
	tst r0, r0
	beq locret_80C0068
	bl sub_80C00CE
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80C0064
	bl sub_80C0144
loc_80C0064:
	bl sub_80C00EA
locret_80C0068:
	pop {pc}
.endfunc // sub_80C004C

.func
.thumb_func
sub_80C006A:
	push {lr}
	pop {pc}
.endfunc // sub_80C006A

.func
.thumb_func
sub_80C006E:
	push {lr}
	pop {pc}
.endfunc // sub_80C006E

.func
.thumb_func
sub_80C0072:
	push {lr}
	bl sub_80C00CE
	bl battle_isTimeStop
	bne locret_80C0096
	bl sub_80C00EA
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C0096
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x74]
	bl sub_80E1A86
	mov r0, #8
	str r0, [r5,#8]
locret_80C0096:
	pop {pc}
.endfunc // sub_80C0072

	push {lr}
	push {r2,r5}
	mov r0, #0x27 
	bl object_spawnType1
	add r0, r5, #0
	pop {r2,r5}
	beq locret_80C00B6
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80C00B6:
	pop {pc}
	tst r0, r0
	beq locret_80C00C0
	mov r1, #8
	str r1, [r0,#8]
locret_80C00C0:
	mov pc, lr
	push {r5,lr}
	add r5, r0, #0
	tst r0, r0
	beq locret_80C00CC
	strb r1, [r5,#0x10]
locret_80C00CC:
	pop {r5,pc}
.func
.thumb_func
sub_80C00CE:
	ldr r1, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r1
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3a]
	ldrh r1, [r5,#0x3e]
	add r0, #1
	add r1, #1
	strh r0, [r5,#0x3a]
	strh r1, [r5,#0x3e]
	mov pc, lr
.endfunc // sub_80C00CE

.func
.thumb_func
sub_80C00EA:
	push {r4,lr}
	mov r4, #0
	bl battle_isPaused
	bne loc_80C0112
	bl battle_isTimeStop
	bne loc_80C0112
	ldr r3, [r5,#0x4c]
	ldrh r0, [r3,#0x24]
	cmp r0, #0
	beq loc_80C0112
	ldr r0, [r3,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80C0170 // =0x80110c00 
	tst r0, r1
	bne loc_80C0112
	bl sub_801BC64
	mov r4, #1
loc_80C0112:
	add r0, r4, #0
	pop {r4,pc}
.endfunc // sub_80C00EA

.func
.thumb_func
sub_80C0116:
	push {r4-r7,lr}
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x24]
	cmp r0, #0
	bne locret_80C0134
	ldr r4, dword_80C0174 // =0x10000 
	ldr r7, [r5,#0x58]
	add r7, #0x74 
	bl sub_80E1A6A
	mov r0, #0x20 
	strh r0, [r5,#0x20]
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
locret_80C0134:
	pop {r4-r7,pc}
.endfunc // sub_80C0116

	push {r5,lr}
	add r5, r0, #0
	tst r0, r0
	beq locret_80C0142
	mov r0, #1
	str r0, [r5,#0x60]
locret_80C0142:
	pop {r5,pc}
.func
.thumb_func
sub_80C0144:
	push {r4-r7,lr}
	mov r0, #0
	str r0, [r5,#0x60]
	bl sub_800E456 // () -> int
	lsl r4, r0, #0x18
	ldr r0, dword_80C016C // =0xa1904 
	orr r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	ldr r6, dword_80C0164 // =0x83e0 
	ldr r7, dword_80C0168 // =0x1010008 
	bl sub_80E33FA
	pop {r4-r7,pc}
dword_80C0164: .word 0x83E0
dword_80C0168: .word 0x1010008
dword_80C016C: .word 0xA1904
dword_80C0170: .word 0x80110C00
dword_80C0174: .word 0x10000
.endfunc // sub_80C0144

loc_80C0178:
	push {lr}
	ldr r1, off_80C0188 // =off_80C018C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C0188: .word off_80C018C
off_80C018C: .word sub_80C0198+1
	.word loc_80C01D8+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C0198:
	push {r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #8
	mov r2, #0xa
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C0198

	bl sub_8002F90 // () -> void
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0xf
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C01D8
	pop {r7,pc}
	.balign 4, 0x00
loc_80C01D8:
	push {lr}
	ldr r4, [r5,#0x4c]
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r1, off_80C0230 // =off_80C0234 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C0230: .word off_80C0234
off_80C0234: .word sub_80C023C+1
	.word sub_80C025C+1
.func
.thumb_func
sub_80C023C:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_80C031E
	tst r0, r0
	beq locret_80C025A
	bl sub_80C02DA
	bl sub_80C02F8
locret_80C025A:
	pop {pc}
.endfunc // sub_80C023C

.func
.thumb_func
sub_80C025C:
	push {lr}
	bl sub_80C031E
	tst r0, r0
	beq locret_80C02A4
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C0278
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #0x21 
	strb r0, [r5,#0x10]
loc_80C0278:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #2
	bne loc_80C028A
	mov r0, #0x7c 
	add r0, #0xff
	bl sound_play // () -> void
loc_80C028A:
	bl sub_80C02F8
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C02A4
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80C02A4:
	pop {pc}
.endfunc // sub_80C025C

.func
.thumb_func
sub_80C02A6:
	push {lr}
	push {r5}
	mov r0, #0x28 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C02BC
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80C02BC:
	pop {pc}
.endfunc // sub_80C02A6

	push {r4-r7,lr}
	tst r0, r0
	beq locret_80C02C8
	mov r1, #8
	str r1, [r0,#8]
locret_80C02C8:
	pop {r4-r7,pc}
.func
.thumb_func
sub_80C02CA:
	push {r4-r7,lr}
	tst r0, r0
	beq locret_80C02D8
	mov r1, #4
	strb r1, [r0,#9]
	mov r1, #0
	strb r1, [r0,#0xa]
locret_80C02D8:
	pop {r4-r7,pc}
.endfunc // sub_80C02CA

.func
.thumb_func
sub_80C02DA:
	push {r4-r7,lr}
	ldr r1, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r1
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3a]
	ldrh r1, [r5,#0x3e]
	add r0, #1
	add r1, #1
	strh r0, [r5,#0x3a]
	strh r1, [r5,#0x3e]
	pop {r4-r7,pc}
.endfunc // sub_80C02DA

.func
.thumb_func
sub_80C02F8:
	push {r4,lr}
	mov r4, #0
	bl battle_isPaused
	bne loc_80C031A
	ldr r3, [r5,#0x4c]
	ldrh r0, [r3,#0x24]
	cmp r0, #0
	beq loc_80C031A
	ldr r0, [r3,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80C0330 // =0x80110c00 
	tst r0, r1
	bne loc_80C031A
	bl sub_801BC64
	mov r4, #1
loc_80C031A:
	add r0, r4, #0
	pop {r4,pc}
.endfunc // sub_80C02F8

.func
.thumb_func
sub_80C031E:
	push {r4-r7,lr}
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x24]
	cmp r0, #0
	bne locret_80C032E
	mov r1, #8
	str r1, [r5,#8]
	mov r0, #0
locret_80C032E:
	pop {r4-r7,pc}
dword_80C0330: .word 0x80110C00
.endfunc // sub_80C031E

loc_80C0334:
	push {lr}
	ldr r1, off_80C0348 // =off_80C034C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C0348: .word off_80C034C
off_80C034C: .word sub_80C0358+1
	.word sub_80C03AE+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C0358:
	push {r4,r7,lr}
	bl sub_800E29C // () -> void
	mov r0, #0x80
	mov r1, #8
	mov r2, #0x13
	bl sprite_load // (int a1, int a2, int a3) ->
	ldrb r0, [r5,#4]
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C0358

	bl sub_8002E3C
	bl sub_8003006
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x60]
	bl sub_8002ED0
	ldrb r0, [r5,#6]
	bl sub_8002F5C
	mov r0, #2
	strb r0, [r5,#6]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne locret_80C03AC
	mov r0, #4
	strb r0, [r5,#9]
locret_80C03AC:
	pop {r4,r7,pc}
.func
.thumb_func
sub_80C03AE:
	push {lr}
	ldr r0, [r5,#0x48]
	cmp r0, #0
	bne loc_80C03BC
	bl battle_isTimeStop
	bne locret_80C03C6
loc_80C03BC:
	ldr r1, off_80C03C8 // =off_80C03CC 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80C03C6:
	pop {pc}
off_80C03C8: .word off_80C03CC
off_80C03CC: .word sub_80C03D4+1
	.word sub_80C0404+1
.endfunc // sub_80C03AE

.func
.thumb_func
sub_80C03D4:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#6]
	sub r0, #1
	strb r0, [r5,#6]
	bne loc_80C03F2
	mov r0, #3
	strb r0, [r5,#6]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C03F2:
	ldrb r0, [r5,#5]
	sub r0, #1
	strb r0, [r5,#5]
	bne locret_80C0402
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C0402:
	pop {pc}
.endfunc // sub_80C03D4

.func
.thumb_func
sub_80C0404:
	push {r6,r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#6]
	sub r0, #1
	strb r0, [r5,#6]
	bne loc_80C0422
	mov r0, #3
	strb r0, [r5,#6]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C0422:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C0446
	mov r0, #8
	str r0, [r5,#8]
locret_80C0446:
	pop {r6,r7,pc}
.endfunc // sub_80C0404

.func
.thumb_func
sub_80C0448:
	push {lr}
	push {r5}
	mov r0, #0x29 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C0478
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x60]
	ldrh r1, [r5,#0x12]
	strh r1, [r0,#0x12]
	ldr r1, [r7,#0x10]
	str r1, [r0,#0x20]
	ldr r1, [r5,#0x40]
	str r1, [r0,#0x40]
	ldr r1, [r5,#0x44]
	str r1, [r0,#0x44]
	ldrb r1, [r0]
	mov r2, #0x10
	bic r1, r2
	strb r1, [r0]
locret_80C0478:
	pop {pc}
.endfunc // sub_80C0448

	push {lr}
	push {r0}
	bl sub_80C0448
	pop {r1}
	cmp r0, #0
	beq locret_80C0496
	str r1, [r0,#0x48]
	ldr r1, [r5,#0x3c]
	str r1, [r0,#0x3c]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80C0496:
	pop {pc}
	cmp r0, #0
	beq locret_80C04A0
	mov r1, #8
	str r1, [r0,#8]
locret_80C04A0:
	mov pc, lr
	tst r0, r0
	beq locret_80C04AA
	mov r1, #0xff
	strb r1, [r0,#0x11]
locret_80C04AA:
	mov pc, lr
loc_80C04AC:
	push {lr}
	ldr r1, off_80C04BC // =off_80C04C0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C04BC: .word off_80C04C0
off_80C04C0: .word sub_80C04CC+1
	.word loc_80C0526+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C04CC:
	push {r4,r7,lr}
	mov r1, #8
	mov r2, #0xb
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C04CC

	bl sub_8002E3C
	bl sub_8002E52
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x8c
	bl sound_play // () -> void
	mov r0, #1
	ldrb r1, [r5,#4]
	mov r2, #1
	bl sub_8010DF6
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C0526
	pop {r4,r7,pc}
loc_80C0526:
	push {lr}
	ldr r1, off_80C0534 // =off_80C0538 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C0534: .word off_80C0538
off_80C0538: .word sub_80C0544+1
	.word sub_80C0584+1
	.word sub_80C05C6+1
.func
.thumb_func
sub_80C0544:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0554
	mov r0, #0x16
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C0554:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80C0566
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C057E
loc_80C0566:
	ldrh r1, [r5,#0x20]
	lsl r0, r1, #2
	ldrh r1, [r5,#0x20]
	mov r2, #0x70 
	mul r1, r2
	mov r2, #0xff
	and r1, r2
	bl sub_80C060A
	ldr r0, dword_80C0580 // =0x2108 
	bl sub_8002ED0
locret_80C057E:
	pop {pc}
dword_80C0580: .word 0x2108
.endfunc // sub_80C0544

.func
.thumb_func
sub_80C0584:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0594
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C0594:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80C05AE
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C05C4
loc_80C05AE:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #2
	bcc locret_80C05C4
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
locret_80C05C4:
	pop {pc}
.endfunc // sub_80C0584

.func
.thumb_func
sub_80C05C6:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C05DE
	mov r0, #0
	mov r1, #0
	bl sub_80C060A
	mov r0, #8
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C05DE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80C0600
	bl sub_8002CCE
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #1
	ldrb r1, [r5,#4]
	bl loc_8011044
	mov r0, #8
	str r0, [r5,#8]
	b locret_80C0608
loc_80C0600:
	ldrh r0, [r5,#0x20]
	add r0, r0, r0
	bl sub_8002C7A
locret_80C0608:
	pop {pc}
.endfunc // sub_80C05C6

.func
.thumb_func
sub_80C060A:
	push {r6,r7,lr}
	ldr r2, off_80C0654 // =byte_8006660 
	add r3, r1, r1
	ldrsh r6, [r2,r3]
	mul r6, r0
	lsl r6, r6, #8
	ldr r2, off_80C0658 // =byte_80065E0 
	ldrsh r7, [r2,r3]
	mul r7, r0
	lsl r7, r7, #8
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	add r1, r1, r6
	add r3, r3, r7
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3a]
	add r0, #2
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	add r0, #2
	strh r0, [r5,#0x3e]
	pop {r6,r7,pc}
.endfunc // sub_80C060A

	push {lr}
	push {r5}
	mov r0, #0x2a 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C0652
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80C0652:
	pop {pc}
off_80C0654: .word byte_8006660
off_80C0658: .word byte_80065E0
loc_80C065C:
	push {lr}
	ldr r1, off_80C0670 // =off_80C0674 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80C0670: .word off_80C0674
off_80C0674: .word sub_80C0680+1
	.word sub_80C06BC+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C0680:
	push {lr}
	ldr r0, dword_80C07B0 // =0x1000000 
	bl sub_801BE2A
.endfunc // sub_80C0680

	bl sub_8002E52
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #1
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3a]
	add r0, #2
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	add r0, #2
	strh r0, [r5,#0x3e]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C06BC
	pop {pc}
.func
.thumb_func
sub_80C06BC:
	push {lr}
	ldr r1, off_80C06CC // =off_80C06D0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C06CC: .word off_80C06D0
off_80C06D0: .word sub_80C06DC+1
	.word sub_80C0710+1
	.word sub_80C072E+1
.endfunc // sub_80C06BC

.func
.thumb_func
sub_80C06DC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C06F6
	mov r0, #0x14
	strh r0, [r5,#0x20]
	bl object_getFlipDirection_800E2CA // () -> int
	add r0, r0, r0
	lsl r0, r0, #0x10
	str r0, [r5,#0x40]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C06F6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80C0706
	mov r0, #0
	str r0, [r5,#0x40]
	mov r0, #4
	strh r0, [r5,#0xa]
loc_80C0706:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	pop {pc}
.endfunc // sub_80C06DC

.func
.thumb_func
sub_80C0710:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0720
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C0720:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C072C
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C072C:
	pop {pc}
.endfunc // sub_80C0710

.func
.thumb_func
sub_80C072E:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C073E
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C073E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80C074C
	mov r0, #8
	str r0, [r5,#8]
	b locret_80C075C
loc_80C074C:
	ldrh r1, [r5,#0x20]
	add r0, r1, r1
	mov r2, #0x70 
	mul r1, r2
	mov r2, #0xff
	and r1, r2
	bl sub_80C075E
locret_80C075C:
	pop {pc}
.endfunc // sub_80C072E

.func
.thumb_func
sub_80C075E:
	push {r6,r7,lr}
	ldr r2, off_80C07B4 // =byte_8006660 
	add r3, r1, r1
	ldrsh r6, [r2,r3]
	mul r6, r0
	lsl r6, r6, #8
	ldr r2, off_80C07B8 // =byte_80065E0 
	ldrsh r7, [r2,r3]
	mul r7, r0
	lsl r7, r7, #8
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	add r1, r1, r6
	add r3, r3, r7
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3a]
	add r0, #2
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	add r0, #2
	strh r0, [r5,#0x3e]
	pop {r6,r7,pc}
.endfunc // sub_80C075E

	push {lr}
	push {r5}
	mov r0, #0x2b 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C07AE
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80C07AE:
	pop {pc}
dword_80C07B0: .word 0x1000000
off_80C07B4: .word byte_8006660
off_80C07B8: .word byte_80065E0
loc_80C07BC:
	push {lr}
	ldr r1, dword_80C07D8 // = 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
	.byte 0xDD
	.byte  7
	.byte 0xC
	.byte  8
	.byte 0x41 
	.byte  8
	.byte 0xC
	.byte  8
	.byte 0x8D
	.byte 0xC
	.byte 0xC
	.byte  8
dword_80C07D8: .word 0x80C07CC
	push {lr}
	mov r0, #0xc
	mov r1, #0x50 
	bl sprite_decompress
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x50 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0
	ldrb r1, [r5,#4]
	cmp r1, #4
	bne loc_80C0828
	mov r0, #1
loc_80C0828:
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, dword_80C083C // =0x7fff 
	bl sub_8002ED0
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C0840
	pop {pc}
dword_80C083C: .word 0x7FFF
loc_80C0840:
	push {lr}
	ldr r1, off_80C086C // =off_80C0858 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	bl sub_80C0DB0
	pop {pc}
	.balign 4, 0x00
off_80C0858: .word sub_80C0870+1
	.word loc_80C0912+1
	.word sub_80C0A4C+1
	.word loc_80C0B76+1
	.word sub_80C0C04+1
off_80C086C: .word off_80C0858
.func
.thumb_func
sub_80C0870:
	push {lr}
	ldr r1, off_80C0880 // =off_80C0884 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80C0880: .word off_80C0884
off_80C0884: .word sub_80C088C+1
	.word sub_80C08EE+1
.endfunc // sub_80C0870

.func
.thumb_func
sub_80C088C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C08BA
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x26 
	bl sub_80E05F6
	mov r0, #0x1f
	strb r0, [r5,#0x19]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C08EC
loc_80C08BA:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	lsr r0, r0, #1
	bcc loc_80C08D4
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C08D4:
	ldrb r0, [r5,#0x19]
	sub r0, #2
	strb r0, [r5,#0x19]
	bgt locret_80C08EC
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x19]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C08EC:
	pop {pc}
.endfunc // sub_80C088C

.func
.thumb_func
sub_80C08EE:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0900
	mov r0, #0xf
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C0910
loc_80C0900:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0910
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C0910:
	pop {pc}
.endfunc // sub_80C08EE

loc_80C0912:
	push {lr}
	ldr r1, off_80C0920 // =off_80C0924 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C0920: .word off_80C0924
off_80C0924: .word sub_80C0938+1
	.word sub_80C0956+1
	.word sub_80C0988+1
	.word sub_80C09C6+1
	.word sub_80C0A0E+1
.func
.thumb_func
sub_80C0938:
	push {lr}
	bl sub_80C0C9A
.endfunc // sub_80C0938

	tst r0, r0
	beq loc_80C094C
	strb r0, [r5,#6]
	strb r1, [r5,#7]
	mov r0, #4
	strh r0, [r5,#0xa]
	b locret_80C0954
loc_80C094C:
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C0954:
	pop {pc}
.func
.thumb_func
sub_80C0956:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0972
	mov r0, #2
	strh r0, [r5,#0x10]
	mov r0, #0xbe
	bl sound_play // () -> void
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C0986
loc_80C0972:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0986
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C0986:
	pop {pc}
.endfunc // sub_80C0956

.func
.thumb_func
sub_80C0988:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C09A0
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #0xf
	lsl r0, r0, #0x10
	str r0, [r5,#0x48]
	mov r0, #4
	strb r0, [r5,#0xb]
	b loc_80C09B4
loc_80C09A0:
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	asr r0, r0, #0x10
	cmp r0, #0xa0
	blt loc_80C09B4
	mov r0, #0xc
	strh r0, [r5,#0xa]
	b locret_80C09C4
loc_80C09B4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C09C4
	mov r0, #5
	strh r0, [r5,#0x20]
	bl sub_80C0DC2
locret_80C09C4:
	pop {pc}
.endfunc // sub_80C0988

.func
.thumb_func
sub_80C09C6:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C09E6
	mov r0, #1
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x48]
	neg r0, r0
	str r0, [r5,#0x48]
	ldrh r1, [r5,#6]
	strh r1, [r5,#0x12]
	bl sub_800E29C // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
	b loc_80C09FC
loc_80C09E6:
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	asr r0, r0, #0x10
	bgt loc_80C09FC
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #0x10
	strh r0, [r5,#0xa]
	b locret_80C0A0C
loc_80C09FC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0A0C
	mov r0, #3
	strh r0, [r5,#0x20]
	bl sub_80C0DC2
locret_80C0A0C:
	pop {pc}
.endfunc // sub_80C09C6

.func
.thumb_func
sub_80C0A0E:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0A3A
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x26 
	bl sub_80E05F6
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C0A4A
loc_80C0A3A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0A4A
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C0A4A:
	pop {pc}
.endfunc // sub_80C0A0E

.func
.thumb_func
sub_80C0A4C:
	push {lr}
	ldr r1, off_80C0A5C // =off_80C0A60 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C0A5C: .word off_80C0A60
off_80C0A60: .word sub_80C0A6C+1
	.word sub_80C0A90+1
	.word sub_80C0B4A+1
.endfunc // sub_80C0A4C

.func
.thumb_func
sub_80C0A6C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0A82
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #9
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C0A8E
loc_80C0A82:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0A8E
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C0A8E:
	pop {pc}
.endfunc // sub_80C0A6C

.func
.thumb_func
sub_80C0A90:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0AEC
	push {r7}
	mov r4, #0
	ldrb r0, [r5,#4]
	cmp r0, #4
	bne loc_80C0AA6
	mov r4, #1
	mov r4, #0
loc_80C0AA6:
	lsl r4, r4, #8
	add r4, #1
	lsl r4, r4, #8
	add r4, #5
	lsl r4, r4, #8
	add r4, #0x12
	mov r7, #0x6c 
	add r7, r7, r5
	bl sub_80B8E30
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	pop {r7}
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #3
	strh r0, [r5,#0x22]
	mov r0, #1
	ldrb r1, [r5,#4]
	cmp r1, #5
	bne loc_80C0AD6
	mov r0, #3
loc_80C0AD6:
	str r0, [r5,#0x60]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_80C0D98
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C0B48
loc_80C0AEC:
	ldr r0, [r5,#0x68]
	add r0, #1
	mov r1, #7
	and r0, r1
	str r0, [r5,#0x68]
	cmp r0, #1
	bne loc_80C0B00
	mov r0, #0xbf
	bl sound_play // () -> void
loc_80C0B00:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0B48
	mov r0, #0xa
	strh r0, [r5,#0x20]
	ldrh r0, [r5,#0x22]
loc_80C0B0E:
	sub r0, #1
	strh r0, [r5,#0x22]
	ble loc_80C0B24
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_80C0D98
	b locret_80C0B48
loc_80C0B24:
	ldr r0, [r5,#0x60]
	sub r0, #1
	str r0, [r5,#0x60]
	beq loc_80C0B44
	mov r0, #3
	strh r0, [r5,#0x22]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_80C0D98
	mov r0, #0xff
	strb r0, [r5,#0x11]
	pop {pc}
loc_80C0B44:
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C0B48:
	pop {pc}
.endfunc // sub_80C0A90

.func
.thumb_func
sub_80C0B4A:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0B64
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x6c]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C0B74
loc_80C0B64:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0B74
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C0B74:
	pop {pc}
.endfunc // sub_80C0B4A

loc_80C0B76:
	push {lr}
	ldr r1, off_80C0B84 // =off_80C0B88 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C0B84: .word off_80C0B88
off_80C0B88: .word sub_80C0B90+1
	.word sub_80C0BC2+1
.func
.thumb_func
sub_80C0B90:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0BAC
	mov r0, #2
	strh r0, [r5,#0x10]
	mov r0, #0xbe
	bl sound_play // () -> void
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C0BC0
loc_80C0BAC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0BC0
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C0BC0:
	pop {pc}
.endfunc // sub_80C0B90

.func
.thumb_func
sub_80C0BC2:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0BDA
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #0xf
	lsl r0, r0, #0x10
	str r0, [r5,#0x48]
	mov r0, #4
	strb r0, [r5,#0xb]
	b loc_80C0BF2
loc_80C0BDA:
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	asr r0, r0, #0x10
	cmp r0, #0xa0
	blt loc_80C0BF2
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C0C02
loc_80C0BF2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0C02
	mov r0, #5
	strh r0, [r5,#0x20]
	bl sub_80C0DC2
locret_80C0C02:
	pop {pc}
.endfunc // sub_80C0BC2

.func
.thumb_func
sub_80C0C04:
	push {lr}
	ldr r1, off_80C0C14 // =off_80C0C18 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C0C14: .word off_80C0C18
off_80C0C18: .word sub_80C0C20+1
	.word sub_80C0C48+1
.endfunc // sub_80C0C04

.func
.thumb_func
sub_80C0C20:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0C32
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C0C46
loc_80C0C32:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0C46
	ldr r0, [r5,#0x4c]
	mov r1, #0
	bl sub_80E1332
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C0C46:
	pop {pc}
.endfunc // sub_80C0C20

.func
.thumb_func
sub_80C0C48:
	push {r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0C70
	ldrh r0, [r5,#0x2c]
	bl sub_80E199A
	add r6, r0, #0
	ldrb r0, [r5,#0xc]
	ldrb r1, [r5,#0xd]
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_80CE224
	pop {r5}
	mov r0, #0x5a 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C0C7C
loc_80C0C70:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C0C7C
	mov r0, #8
	str r0, [r5,#8]
locret_80C0C7C:
	pop {r6,pc}
	.byte 0, 0
	.word a22222
a22222: .asciz "22222"
	.balign 4, 0x00
.endfunc // sub_80C0C48

.func
.thumb_func
sub_80C0C8C:
	push {lr}
	ldr r0, [r5,#0x64]
	mov r1, #0
	strb r1, [r0]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80C0C8C

.func
.thumb_func
sub_80C0C9A:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x34
	mov r0, #0
	str r0, [sp,#0x18]
	str r0, [sp,#0x1c]
	mov r0, #0xff
	str r0, [sp,#0x28]
	str r0, [sp,#0x2c]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r2, off_80C0D8C // =off_80C0D90 
	ldr r2, [r2,r0]
	mov r3, #0
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80C0C9A

	str r0, [sp,#0x14]
	add r6, r0, #0
	beq loc_80C0D86
	mov r3, #0
	str r3, [sp,#0x30]
	mov r4, #0
	add r6, sp, #8
	add r7, sp, #0
loc_80C0CCA:
	ldr r1, [sp,#0x30]
	ldrb r0, [r7,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	str r0, [sp,#0x20]
	str r1, [sp,#0x24]
	ldrb r2, [r5,#0x12]
	ldrb r1, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	eor r1, r3
	tst r1, r1
	bne loc_80C0CE8
	cmp r0, r2
	b loc_80C0CEA
loc_80C0CE8:
	cmp r2, r0
loc_80C0CEA:
	ble loc_80C0D22
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldr r1, [sp,#0x20]
	add r0, r0, r1
	str r1, [sp,#0x20]
	ldr r1, [sp,#0x24]
	str r0, [sp,#0x20]
	ldr r3, [r5,#0x4c]
	ldrb r2, [r3,#0x12]
	ldrb r3, [r3,#0x13]
	cmp r0, r2
	bne loc_80C0D0A
	cmp r1, r3
	beq loc_80C0D16
loc_80C0D0A:
	mov r2, #0
	ldr r3, dword_80C0E00 // =0xf800000 
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_80C0D22
loc_80C0D16:
	ldr r0, [sp,#0x20]
	ldr r1, [sp,#0x24]
	lsl r1, r1, #4
	orr r0, r1
	strb r0, [r6,r4]
	add r4, #1
loc_80C0D22:
	ldr r0, [sp,#0x30]
	add r0, #1
	str r0, [sp,#0x30]
	ldr r1, [sp,#0x14]
	cmp r0, r1
	blt loc_80C0CCA
	str r4, [sp,#0x14]
	tst r4, r4
	beq loc_80C0D82
	mov r4, #0
	add r7, sp, #8
loc_80C0D38:
	ldrb r0, [r7,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	str r0, [sp,#0x20]
	str r1, [sp,#0x24]
	ldrb r2, [r5,#0x12]
	sub r2, r0, r2
	cmp r2, #0
	bge loc_80C0D4E
	neg r2, r2
loc_80C0D4E:
	ldrb r3, [r5,#0x13]
	sub r3, r1, r3
	cmp r3, #0
	bge loc_80C0D58
	neg r3, r3
loc_80C0D58:
	ldr r6, [sp,#0x28]
	cmp r2, r6
	blt loc_80C0D6E
	bgt loc_80C0D7A
	ldr r6, [sp,#0x2c]
	cmp r1, r6
	blt loc_80C0D6E
	bgt loc_80C0D7A
	ldr r6, [sp,#0x1c]
	cmp r1, r6
	bge loc_80C0D7A
loc_80C0D6E:
	ldr r0, [sp,#0x20]
	ldr r1, [sp,#0x24]
	str r0, [sp,#0x18]
	str r1, [sp,#0x1c]
	str r2, [sp,#0x28]
	str r3, [sp,#0x2c]
loc_80C0D7A:
	add r4, #1
	ldr r6, [sp,#0x14]
	cmp r4, r6
	blt loc_80C0D38
loc_80C0D82:
	ldr r0, [sp,#0x18]
	ldr r1, [sp,#0x1c]
loc_80C0D86:
	add sp, sp, #0x34
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C0D8C: .word off_80C0D90
off_80C0D90: .word LCDControl
	.word start_
.func
.thumb_func
sub_80C0D98:
	push {lr}
	mov r2, #0
	mov r3, #0x14
	lsl r3, r3, #0x10
	ldr r4, dword_80C0DAC // =0x4050001 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C53A6
	pop {pc}
dword_80C0DAC: .word 0x4050001
.endfunc // sub_80C0D98

.func
.thumb_func
sub_80C0DB0:
	push {lr}
	ldrb r1, [r5,#0x19]
	lsl r0, r1, #5
	add r0, r0, r1
	lsl r0, r0, #5
	add r0, r0, r1
	bl sub_8002ED0
	pop {pc}
.endfunc // sub_80C0DB0

.func
.thumb_func
sub_80C0DC2:
	push {lr}
	mov r0, #0x10
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	bl sub_801BDDE
	mov r4, #0x26 
	bl sub_80E05F6
	pop {pc}
.endfunc // sub_80C0DC2

.func
.thumb_func
sub_80C0DD8:
	push {lr}
	push {r0,r1,r3,r5}
	mov r0, #0x2c 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C0DFE
	strb r1, [r0,#0x12]
	strb r1, [r0,#0xc]
	strb r2, [r0,#0x13]
	strb r2, [r0,#0xd]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x64]
	mov r1, #1
	strb r1, [r7]
locret_80C0DFE:
	pop {pc}
dword_80C0E00: .word 0xF800000
.endfunc // sub_80C0DD8

loc_80C0E04:
	push {lr}
	ldr r1, off_80C0E14 // =off_80C0E18 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C0E14: .word off_80C0E18
off_80C0E18: .word sub_80C0E24+1
	.word sub_80C0EE2+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C0E24:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	str r0, [r5,#0x60]
	cmp r0, #2
	bne loc_80C0ED8
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	bl sub_800FC9E
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	push {r5}
	add r5, r4, #0
	bl sub_801002C
	pop {r5}
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x60]
	cmp r0, #2
	bne loc_80C0EC4
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	mov r2, #1
	bl sub_8011420
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	pop {r5}
	cmp r0, #0
	beq loc_80C0EC4
	ldr r0, [r5,#0x50]
	cmp r0, #0
	beq loc_80C0EC4
	mov r1, #1
	strb r1, [r0,#6]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
loc_80C0EC4:
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #3
	ldrb r1, [r5,#7]
	add r0, r0, r1
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
loc_80C0ED8:
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C0EE2
	pop {r4,pc}
.endfunc // sub_80C0E24

.func
.thumb_func
sub_80C0EE2:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C0F10
	ldrb r0, [r5,#7]
	tst r0, r0
	beq loc_80C0F08
	ldr r4, [r5,#0x4c]
	ldr r0, [r5,#0x60]
	cmp r0, #2
	bne loc_80C0F02
	add r0, r4, #0
	mov r1, #0
	bl sub_80E1352
	b loc_80C0F08
loc_80C0F02:
	add r0, r4, #0
	bl sub_80E146C
loc_80C0F08:
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C0F10:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80C0F4C
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldrb r0, [r5,#7]
	tst r0, r0
	bne loc_80C0F48
	ldr r0, [r5,#0x60]
	cmp r0, #2
	bne loc_80C0F42
	add r0, r4, #0
	bl sub_80E13DC
	b loc_80C0F48
loc_80C0F42:
	add r0, r4, #0
	bl sub_80E14AC
loc_80C0F48:
	mov r0, #8
	str r0, [r5,#8]
loc_80C0F4C:
	bl sub_801BBF4
	pop {r4,pc}
.endfunc // sub_80C0EE2

.func
.thumb_func
sub_80C0F52:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x2d 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80C0F6A
	str r1, [r0,#0x4c]
	strb r2, [r0,#7]
	ldrh r2, [r1,#0x16]
	strh r2, [r0,#0x16]
locret_80C0F6A:
	pop {pc}
.endfunc // sub_80C0F52

loc_80C0F6C:
	push {lr}
	ldr r1, off_80C0F7C // =off_80C0F80 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C0F7C: .word off_80C0F80
off_80C0F80: .word sub_80C0F8C+1
	.word sub_80C0FE8+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C0F8C:
	push {r7,lr}
	bl sub_802D234
	mov r1, #7
	cmp r0, #6
	beq loc_80C0F9A
	mov r0, #3
loc_80C0F9A:
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x10
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002F90 // () -> void
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	mov r1, #3
	svc 6
	mov r1, #0x12
	add r0, r0, r1
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #8
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	ldr r0, [r5,#0x4c]
	ldr r1, [r0,#0x34]
	str r1, [r5,#0x60]
	ldr r1, [r0,#0x38]
	str r1, [r5,#0x64]
	ldr r1, [r0,#0x3c]
	str r1, [r5,#0x68]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C0FE8
	pop {r7,pc}
	.balign 4, 0x00
.endfunc // sub_80C0F8C

.func
.thumb_func
sub_80C0FE8:
	push {lr}
	bl sub_802D234
	cmp r0, #6
	bne loc_80C100C
	ldrb r0, [r5]
	mov r1, #4
	tst r0, r1
	beq loc_80C100C
	mov r0, r10
	ldr r0, [r0,#0x18]
	ldrb r0, [r0,#1]
	cmp r0, #0xc
	bne loc_80C100C
	ldrb r0, [r5]
	mov r1, #4
loc_80C1008:
	bic r0, r1
	strb r0, [r5]
loc_80C100C:
	ldrb r0, [r5,#9]
	cmp r0, #8
	beq loc_80C1024
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80C1024
	bl sub_8002EE8
	bl sub_8002DD8
	b loc_80C105A
loc_80C1024:
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
loc_80C105A:
	ldr r1, off_80C1068 // =off_80C106C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C1068: .word off_80C106C
off_80C106C: .word sub_80C1078+1
	.word sub_80C1094+1
	.word sub_80C10AC+1
.endfunc // sub_80C0FE8

.func
.thumb_func
sub_80C1078:
	push {lr}
	bl sub_80C10FE
	bl sub_800139A
	lsr r0, r0, #2
	bcc locret_80C1092
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	bl sub_80C1094
locret_80C1092:
	pop {pc}
.endfunc // sub_80C1078

.func
.thumb_func
sub_80C1094:
	push {lr}
	bl sub_80C1182
	tst r0, r0
	beq locret_80C10AA
	bl sub_80C114E
	bl sub_80C10FE
	bl sub_80169BE
locret_80C10AA:
	pop {pc}
.endfunc // sub_80C1094

.func
.thumb_func
sub_80C10AC:
	push {lr}
	bl sub_80C114E
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C10C6
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x74]
	bl sub_80E1A86
	mov r0, #8
	str r0, [r5,#8]
locret_80C10C6:
	pop {pc}
.endfunc // sub_80C10AC

	push {lr}
	push {r2,r5}
	mov r0, #0x2e 
	bl object_spawnType1
	add r0, r5, #0
	pop {r2,r5}
	beq locret_80C10E6
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80C10E6:
	pop {pc}
.func
.thumb_func
sub_80C10E8:
	tst r0, r0
	beq locret_80C10F0
	mov r1, #8
	str r1, [r0,#8]
locret_80C10F0:
	mov pc, lr
.endfunc // sub_80C10E8

	push {r5,lr}
	add r5, r0, #0
	tst r0, r0
	beq locret_80C10FC
	strb r1, [r5,#0x10]
locret_80C10FC:
	pop {r5,pc}
.func
.thumb_func
sub_80C10FE:
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x70]
	tst r0, r0
	bne loc_80C1130
	ldr r1, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r1
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3a]
	ldrh r1, [r5,#0x3e]
	sub r0, #1
	sub r1, #1
	strh r0, [r5,#0x3a]
	strh r1, [r5,#0x3e]
	ldr r0, [r5,#0x4c]
	ldr r1, [r0,#0x34]
	str r1, [r5,#0x60]
	ldr r1, [r0,#0x38]
	str r1, [r5,#0x64]
	ldr r1, [r0,#0x3c]
	str r1, [r5,#0x68]
	b locret_80C114C
loc_80C1130:
	ldr r0, [r5,#0x60]
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x64]
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x68]
	str r0, [r5,#0x3c]
	mov r2, #0x66 
	mov r3, #0x6a 
	ldrh r0, [r5,r2]
	ldrh r1, [r5,r3]
	sub r0, #1
	sub r1, #1
	strh r0, [r5,#0x3a]
	strh r1, [r5,#0x3e]
locret_80C114C:
	mov pc, lr
.endfunc // sub_80C10FE

.func
.thumb_func
sub_80C114E:
	push {r4,lr}
	mov r4, #0
	bl sub_802D234
	cmp r0, #6
	beq loc_80C1160
	bl battle_isPaused
	bne loc_80C117E
loc_80C1160:
	ldr r3, [r5,#0x4c]
	ldrh r0, [r3,#0x24]
	cmp r0, #0
	beq loc_80C117E
	ldr r0, [r3,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80C11A4 // =0x80110c00 
	tst r0, r1
	bne loc_80C117E
	bl battle_isTimeStop
	bne loc_80C117E
	bl sub_801BC64
	mov r4, #1
loc_80C117E:
	add r0, r4, #0
	pop {r4,pc}
.endfunc // sub_80C114E

.func
.thumb_func
sub_80C1182:
	push {r4-r7,lr}
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x24]
	cmp r0, #0
	bne locret_80C11A0
	ldr r4, dword_80C11A8 // =0x10000 
	ldr r7, [r5,#0x58]
	add r7, #0x74 
	bl sub_80E1A6A
	mov r0, #0x20 
	strh r0, [r5,#0x20]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
locret_80C11A0:
	pop {r4-r7,pc}
	.balign 4, 0x00
dword_80C11A4: .word 0x80110C00
dword_80C11A8: .word 0x10000
.endfunc // sub_80C1182

loc_80C11AC:
	push {lr}
	ldr r1, off_80C11BC // =off_80C11C0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C11BC: .word off_80C11C0
off_80C11C0: .word sub_80C11CC+1
	.word sub_80C1204+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C11CC:
	push {r7,lr}
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x10
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C11CC

	bl sub_8002F90 // () -> void
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #7
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C1204
	pop {r7,pc}
	.balign 4, 0x00
.func
.thumb_func
sub_80C1204:
	push {lr}
	ldr r4, [r5,#0x4c]
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r1, off_80C1250 // =off_80C1254 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_80169BE
	pop {pc}
	.byte 0, 0
off_80C1250: .word off_80C1254
off_80C1254: .word sub_80C1268+1
	.word sub_80C12A6+1
	.word sub_80C1320+1
	.word sub_80C138E+1
	.word sub_80C13E4+1
.endfunc // sub_80C1204

.func
.thumb_func
sub_80C1268:
	push {lr}
	bl sub_80C1492
	tst r0, r0
	beq locret_80C12A4
	bl sub_80C1466
	tst r0, r0
	beq locret_80C12A4
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0x61 
	ldrb r1, [r5,r0]
	sub r1, #1
	strb r1, [r5,r0]
	tst r1, r1
	bne locret_80C12A4
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #1
	bl sub_80C1514
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80C12A4:
	pop {pc}
.endfunc // sub_80C1268

.func
.thumb_func
sub_80C12A6:
	push {lr}
	bl sub_80C1492
	tst r0, r0
	beq locret_80C131E
	bl sub_80C1466
	tst r0, r0
	beq locret_80C131E
	bl sub_80C14EC
	tst r0, r0
	beq locret_80C131E
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	mov r0, #0x64 
	ldrb r0, [r5,r0]
	mov r1, #1
	eor r0, r1
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x13]
	cmp r0, r1
	beq loc_80C12E4
	b locret_80C131E
loc_80C12E4:
	mov r0, #0x63 
	ldrb r0, [r5,r0]
	cmp r0, #0
	beq loc_80C1312
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #5
	mul r0, r1
	add r0, #1
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	beq loc_80C1312
	mov r0, #0x67 
	mov r1, #0
	strb r1, [r5,r0]
	ldr r0, [r5,#0x38]
	str r0, [r5,#0x68]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
	b locret_80C131E
loc_80C1312:
	bl sub_80C1538
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80C131E:
	pop {pc}
.endfunc // sub_80C12A6

.func
.thumb_func
sub_80C1320:
	push {lr}
	bl sub_80C1492
	tst r0, r0
	beq locret_80C138C
	bl sub_80C1466
	tst r0, r0
	beq locret_80C138C
	bl sub_80C14EC
	tst r0, r0
	beq locret_80C138C
	mov r0, #0x61 
	mov r1, #0x65 
	ldrb r2, [r5,r0]
	add r2, #1
	strb r2, [r5,r0]
	ldrb r3, [r5,r1]
	cmp r2, r3
	beq loc_80C135C
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	bl sub_80C14B2
	bl sub_800E2AC
	b locret_80C138C
loc_80C135C:
	mov r0, #0x63 
	ldrb r1, [r5,r0]
	sub r1, #1
	strb r1, [r5,r0]
	mov r0, #0x64 
	ldrb r1, [r5,r0]
	mov r2, #1
	eor r1, r2
	strb r1, [r5,r0]
	ldr r0, [r5,#0x44]
	neg r0, r0
	str r0, [r5,#0x44]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	mov r0, #0x61 
	mov r1, #0
	strb r1, [r5,r0]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80C138C:
	pop {pc}
.endfunc // sub_80C1320

.func
.thumb_func
sub_80C138E:
	push {lr}
	bl sub_80C1492
	tst r0, r0
	beq locret_80C13E2
	bl sub_80C1466
	tst r0, r0
	beq locret_80C13E2
	bl sub_80C14EC
	tst r0, r0
	beq locret_80C13E2
	mov r0, #0x61 
	ldrb r1, [r5,r0]
	cmp r1, #0
	beq loc_80C13C6
	sub r1, #1
	strb r1, [r5,r0]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	b locret_80C13E2
loc_80C13C6:
	mov r0, #0x60 
	ldrb r1, [r5,r0]
	cmp r1, #3
	bne loc_80C13D6
	ldr r0, [r5,#0x4c]
	mov r1, #0x7c 
	mov r2, #1
	strb r2, [r0,r1]
loc_80C13D6:
	mov r0, #0x64 
	ldrb r0, [r5,r0]
	bl sub_80C1514
	mov r0, #8
	str r0, [r5,#8]
locret_80C13E2:
	pop {pc}
.endfunc // sub_80C138E

.func
.thumb_func
sub_80C13E4:
	push {lr}
	bl sub_80C1466
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C13FE
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x74]
	bl sub_80E1A86
	mov r0, #8
	str r0, [r5,#8]
locret_80C13FE:
	pop {pc}
.endfunc // sub_80C13E4

	push {lr}
	push {r2,r3,r5}
	mov r0, #0x2f 
	bl object_spawnType1
	add r0, r5, #0
	pop {r2,r3,r5}
	tst r0, r0
	beq locret_80C145E
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r1, #0x60 
	strb r2, [r0,r1]
	mov r1, #0x61 
	strb r3, [r0,r1]
	mov r1, #0x62 
	mov r2, #0
	strb r2, [r0,r1]
	mov r1, #0x67 
	strb r2, [r0,r1]
	mov r1, #0x67 
	ldrb r1, [r5,r1]
	mov r2, #0x63 
	strb r1, [r0,r2]
	mov r1, #0x74 
	ldrb r1, [r5,r1]
	mov r2, #0x64 
	strb r1, [r0,r2]
	mov r1, #0x75 
	ldrb r1, [r5,r1]
	mov r2, #0x65 
	strb r1, [r0,r2]
	mov r1, #0x76 
	ldrb r1, [r5,r1]
	mov r2, #0x66 
	strb r1, [r0,r2]
	ldr r1, [r5,#0x40]
	ldr r2, [r5,#0x44]
	str r1, [r0,#0x40]
	str r2, [r0,#0x44]
	ldr r1, [r5,#0x34]
	str r1, [r0,#0x34]
	ldr r1, [r5,#0x38]
	str r1, [r0,#0x38]
	ldr r1, [r5,#0x3c]
	str r1, [r0,#0x3c]
locret_80C145E:
	pop {pc}
	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
.func
.thumb_func
sub_80C1466:
	push {r4,lr}
	mov r4, #0
	bl battle_isPaused
	bne loc_80C148E
	ldr r3, [r5,#0x4c]
	ldrh r0, [r3,#0x24]
	cmp r0, #0
	beq loc_80C148E
	ldr r0, [r3,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80C1560 // =0x80110c00 
	tst r0, r1
	bne loc_80C148E
	bl battle_isTimeStop
	bne loc_80C148E
	bl sub_801BC64
	mov r4, #1
loc_80C148E:
	add r0, r4, #0
	pop {r4,pc}
.endfunc // sub_80C1466

.func
.thumb_func
sub_80C1492:
	push {r4-r7,lr}
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x24]
	cmp r0, #0
	bne locret_80C14B0
	ldr r4, dword_80C1564 // =0x10000 
	ldr r7, [r5,#0x58]
	add r7, #0x74 
	bl sub_80E1A6A
	mov r0, #0x20 
	strh r0, [r5,#0x20]
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
locret_80C14B0:
	pop {r4-r7,pc}
.endfunc // sub_80C1492

.func
.thumb_func
sub_80C14B2:
	push {r4-r7,lr}
	mov r0, #0x66 
	ldrb r1, [r5,r0]
	mov r2, #0x67 
	ldrb r3, [r5,r2]
	add r3, r3, r1
	strb r3, [r5,r2]
	lsl r3, r3, #1
	ldr r2, off_80C1568 // =byte_80065E0 
	ldrh r0, [r2,r3]
	mov r1, #0xc
	mul r0, r1
	lsl r0, r0, #8
	mov r1, #0x64 
	ldrb r1, [r5,r1]
	lsl r1, r1, #2
	ldr r2, off_80C14E0 // =dword_80C14E4 
	ldr r1, [r2,r1]
	mul r0, r1
	ldr r1, [r5,#0x68]
	add r1, r1, r0
	str r1, [r5,#0x38]
	pop {r4-r7,pc}
off_80C14E0: .word dword_80C14E4
dword_80C14E4: .word 0x1, 0xFFFFFFFF
.endfunc // sub_80C14B2

.func
.thumb_func
sub_80C14EC:
	push {r4,lr}
	mov r4, #0
	bl battle_isPaused
	bne loc_80C1510
	ldr r3, [r5,#0x4c]
	ldrh r0, [r3,#0x24]
	cmp r0, #0
	beq loc_80C1510
	ldr r0, [r3,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80C1560 // =0x80110c00 
	tst r0, r1
	bne loc_80C1510
	bl battle_isTimeStop
	bne loc_80C1510
	mov r4, #1
loc_80C1510:
	add r0, r4, #0
	pop {r4,pc}
.endfunc // sub_80C14EC

.func
.thumb_func
sub_80C1514:
	push {r4-r7,lr}
	tst r0, r0
	beq locret_80C1532
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	lsl r0, r0, #8
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	mov r3, #0
	ldr r4, dword_80C1534 // =0x2 
	orr r4, r0
	bl sub_80E05F6
locret_80C1532:
	pop {r4-r7,pc}
dword_80C1534: .word 0x2
.endfunc // sub_80C1514

.func
.thumb_func
sub_80C1538:
	push {r4-r7,lr}
	mov r0, #0x64 
	ldrb r0, [r5,r0]
	lsl r0, r0, #2
	ldr r1, off_80C1554 // =dword_80C1558 
	ldr r0, [r1,r0]
	ldr r1, [r5,#0x44]
	cmp r1, #0
	bge loc_80C154C
	neg r1, r1
loc_80C154C:
	svc 6
	mov r1, #0x61 
	strb r0, [r5,r1]
	pop {r4-r7,pc}
off_80C1554: .word dword_80C1558
dword_80C1558: .word 0x400000, 0x100000
dword_80C1560: .word 0x80110C00
dword_80C1564: .word 0x10000
off_80C1568: .word byte_80065E0
	.byte 0, 0, 0, 0
.endfunc // sub_80C1538

.func
.thumb_func
sub_80C1570:
	push {lr}
	ldr r1, off_80C158C // =off_80C1580 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80C1580: .word sub_80C1590+1
	.word sub_80C15EC+1
	.word sub_80C17E6+1
off_80C158C: .word off_80C1580
.endfunc // sub_80C1570

.func
.thumb_func
sub_80C1590:
	push {lr}
	mov r0, #4
	mov r1, #0x1d
	bl sprite_decompress
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x1d
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0x64 
	ldrb r0, [r5,r0]
	mov r1, #3
	mul r0, r1
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C15EC
	pop {pc}
	.word 0x7FFF
.endfunc // sub_80C1590

.func
.thumb_func
sub_80C15EC:
	push {lr}
	ldr r1, off_80C160C // =byte_80C1600 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
byte_80C1600: .byte 0x11, 0x16, 0xC, 0x8, 0xBF, 0x16, 0xC, 0x8, 0xB3, 0x17
	.byte 0xC, 0x8
off_80C160C: .word byte_80C1600
.endfunc // sub_80C15EC

.func
.thumb_func
sub_80C1610:
	push {lr}
	ldr r1, off_80C1620 // =off_80C1624 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80C1620: .word off_80C1624
off_80C1624: .word sub_80C1630+1
	.word sub_80C166A+1
	.word sub_80C1698+1
.endfunc // sub_80C1610

.func
.thumb_func
sub_80C1630:
	push {r4-r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1648
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0x18
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C1668
loc_80C1648:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C1668
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x44 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C1668:
	pop {r4-r7,pc}
.endfunc // sub_80C1630

.func
.thumb_func
sub_80C166A:
	push {r4-r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C168A
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C1696
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C1696
loc_80C168A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C1696
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C1696:
	pop {r4-r7,pc}
.endfunc // sub_80C166A

.func
.thumb_func
sub_80C1698:
	push {r4-r7,lr}
	bl sub_80C18B0
	tst r0, r0
	beq loc_80C16B4
	mov r2, #0x65 
	strb r0, [r5,r2]
	mov r2, #0x66 
	strb r1, [r5,r2]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C16BC
loc_80C16B4:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C16BC:
	pop {r4-r7,pc}
.endfunc // sub_80C1698

.func
.thumb_func
sub_80C16BE:
	push {lr}
	ldr r1, off_80C16CC // =off_80C16D0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C16CC: .word off_80C16D0
off_80C16D0: .word sub_80C16E0+1
	.word sub_80C1734+1
	.word sub_80C174A+1
	.word sub_80C1786+1
.endfunc // sub_80C16BE

.func
.thumb_func
sub_80C16E0:
	push {r4-r7,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80C171E
	mov r0, #1
	strb r0, [r5,#0xb]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #1
	bl sub_80C1820
	mov r0, #0x65 
	ldrb r0, [r5,r0]
	mov r1, #0x66 
	ldrb r1, [r5,r1]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	bl sub_80C1820
	mov r0, #2
	strh r0, [r5,#0x20]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	b locret_80C1732
loc_80C171E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C1732
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C1732:
	pop {r4-r7,pc}
.endfunc // sub_80C16E0

.func
.thumb_func
sub_80C1734:
	push {r4-r7,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80C1740
	mov r0, #1
	strb r0, [r5,#0xb]
loc_80C1740:
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #8
	strh r0, [r5,#0xa]
	pop {r4-r7,pc}
.endfunc // sub_80C1734

.func
.thumb_func
sub_80C174A:
	push {r4-r7,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80C1764
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C1784
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #0xa
	strh r0, [r5,#0x20]
loc_80C1764:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C1784
	mov r0, #2
	strb r0, [r5,#0x10]
	bl sub_80C185C
	bl sub_80C188C
	mov r0, #0xb
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80C1784:
	pop {r4-r7,pc}
.endfunc // sub_80C174A

.func
.thumb_func
sub_80C1786:
	push {r4-r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C17A0
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C17B0
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #0x10
	strh r0, [r5,#0x20]
loc_80C17A0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C17B0
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C17B0:
	pop {r4-r7,pc}
.endfunc // sub_80C1786

.func
.thumb_func
sub_80C17B2:
	push {r4-r7,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C17D0
	mov r0, #0
	str r0, [r5,#0x4c]
	mov r0, #0x10
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #1
	bl sub_80C1820
	mov r0, #4
	strb r0, [r5,#0xa]
loc_80C17D0:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C17E4
	mov r0, #8
	str r0, [r5,#8]
locret_80C17E4:
	pop {r4-r7,pc}
.endfunc // sub_80C17B2

.func
.thumb_func
sub_80C17E6:
	push {lr}
	ldr r0, [r5,#0x60]
	mov r1, #0
	strb r1, [r0]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80C17E6

.func
.thumb_func
sub_80C17F4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x32 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C181E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	mov r2, #0x64 
	ldrb r1, [r0,#4]
	strb r1, [r0,r2]
	str r7, [r0,#0x60]
	mov r1, #1
	str r1, [r7]
locret_80C181E:
	pop {pc}
.endfunc // sub_80C17F4

.func
.thumb_func
sub_80C1820:
	push {r4-r7,lr}
	add r4, r2, #0
	push {r0,r1}
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	lsl r0, r0, #8
	add r2, r0, #0
	pop {r0,r1}
	push {r2}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	pop {r0}
	ldr r6, off_80C1850 // =dword_80C1854 
	lsl r4, r4, #2
	ldr r4, [r6,r4]
	orr r4, r0
	bl sub_80E05F6
	pop {r4-r7,pc}
	.byte 0, 0
off_80C1850: .word dword_80C1854
dword_80C1854: .word 0x15, 0x14
.endfunc // sub_80C1820

.func
.thumb_func
sub_80C185C:
	push {r4-r7,lr}
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	lsl r0, r0, #8
	push {r0}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	pop {r0}
	ldr r4, dword_80C1888 // =0x60216 
	orr r4, r0
	bl sub_80E05F6
	pop {r4-r7,pc}
dword_80C1888: .word 0x60216
.endfunc // sub_80C185C

.func
.thumb_func
sub_80C188C:
	push {r4-r7,lr}
	ldr r6, [r5,#0x2c]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80C18A8 // =0x705ff04 
	ldr r7, dword_80C18AC // =0x3 
	bl sub_80C53A6
	pop {r4-r7,pc}
dword_80C18A8: .word 0x705FF04
dword_80C18AC: .word 0x3
.endfunc // sub_80C188C

.func
.thumb_func
sub_80C18B0:
	push {r4-r7,lr}
	sub sp, sp, #0x24
	mov r7, r10
	ldr r7, [r7,#0x18]
	ldr r0, off_80C1A00 // =off_80C1A04 
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r0, [r0,r1]
	mov r1, #0
	mov r2, #0
	add r6, sp, #0
loc_80C18C6:
	ldr r3, [r7,r0]
	tst r3, r3
	beq loc_80C18D0
	str r3, [r6,r2]
	add r2, #4
loc_80C18D0:
	add r0, #4
	add r1, #1
	cmp r1, #4
	blt loc_80C18C6
	lsr r2, r2, #2
	add r0, r2, #0
	tst r0, r0
	beq loc_80C19A0
	add r7, sp, #0x10
	mov r4, #0
loc_80C18E4:
	push {r0,r5}
	sub r0, #1
	lsl r0, r0, #2
	ldr r5, [r6,r0]
	ldrh r0, [r5,#0x28]
	bl sub_800F26C
	cmp r0, #8
	bne loc_80C190A
	cmp r1, #0x14
	bne loc_80C190A
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	b loc_80C1914
loc_80C190A:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
loc_80C1914:
	bl object_getPanelParameters
	ldr r1, dword_80C1A0C // =0xf800000 
	and r0, r1
	bne loc_80C1922
	str r5, [r7,r4]
	add r4, #4
loc_80C1922:
	pop {r0,r5}
	sub r0, #1
	tst r0, r0
	bne loc_80C18E4
	lsr r4, r4, #2
	add r0, r4, #0
	tst r0, r0
	beq loc_80C19F8
	mov r3, #0
	add r4, sp, #0x20
loc_80C1936:
	push {r0,r5}
	sub r0, #1
	lsl r0, r0, #2
	ldr r1, [r7,r0]
	push {r1}
	ldr r5, [r5,#0x4c]
	bl object_getFlipDirection_800E2CA // () -> int
	pop {r1}
	push {r0}
	ldrb r0, [r5,#0x12]
	ldrb r2, [r1,#0x12]
	sub r2, r2, r0
	pop {r0}
	mul r2, r0
	cmp r2, #2
	blt loc_80C1970
	tst r3, r3
	bne loc_80C1964
	strb r2, [r4]
	str r1, [r6,r3]
	add r3, #4
	b loc_80C1970
loc_80C1964:
	ldrb r0, [r4]
	cmp r0, r2
	blt loc_80C1970
	strb r2, [r4]
	str r1, [r6,r3]
	add r3, #4
loc_80C1970:
	pop {r0,r5}
	sub r0, #1
	bne loc_80C1936
	lsr r3, r3, #2
	add r0, r3, #0
	tst r0, r0
	beq loc_80C19F8
	cmp r0, #1
	bgt loc_80C19AE
	ldr r5, [r6]
	ldrh r0, [r5,#0x28]
	bl sub_800F26C
	cmp r0, #8
	bne loc_80C19A2
	cmp r1, #0x14
	bne loc_80C19A2
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
loc_80C19A0:
	b loc_80C19F8
loc_80C19A2:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	b loc_80C19F8
loc_80C19AE:
	mov r1, #0
loc_80C19B0:
	push {r0,r1}
	tst r1, r1
	beq loc_80C19C4
	ldr r3, [r6,r1]
	ldrb r0, [r3,#0x13]
	ldrb r1, [r4,#0x13]
	cmp r0, r1
	bgt loc_80C19C2
	add r4, r3, #0
loc_80C19C2:
	b loc_80C19C6
loc_80C19C4:
	ldr r4, [r6,r1]
loc_80C19C6:
	pop {r0,r1}
	add r1, #4
	sub r0, #1
	bne loc_80C19B0
	add r5, r4, #0
	ldrh r0, [r5,#0x28]
	bl sub_800F26C
	cmp r0, #8
	bne loc_80C19EE
	cmp r1, #0x14
	bne loc_80C19EE
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	b loc_80C19F8
loc_80C19EE:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
loc_80C19F8:
	add sp, sp, #0x24
	pop {r4-r7,pc}
	.byte 0, 0, 0, 0
off_80C1A00: .word off_80C1A04
off_80C1A04: .word 0x90
	.word 0x80
dword_80C1A0C: .word 0xF800000
.endfunc // sub_80C18B0

.func
.thumb_func
sub_80C1A10:
	push {lr}
	ldr r1, off_80C1A24 // =off_80C1A28 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80C1A24: .word off_80C1A28
off_80C1A28: .word sub_80C1A34+1
	.word sub_80C1A7C+1
	.word object_freeMemory+1
.endfunc // sub_80C1A10

.func
.thumb_func
sub_80C1A34:
	push {lr}
	bl sub_80C205C
	mov r1, #0
	mov r2, #0xb
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C1A34

	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, dword_80C1A78 // =0x1b6 
	strh r0, [r5,#0x28]
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
	.balign 4, 0x00
dword_80C1A78: .word 0x1B6
.func
.thumb_func
sub_80C1A7C:
	push {lr}
	ldr r1, off_80C1A8C // =off_80C1A90 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C1A8C: .word off_80C1A90
off_80C1A90: .word sub_80C1AB8+1
	.word sub_80C1AEE+1
	.word sub_80C1B2E+1
	.word sub_80C1BC8+1
	.word sub_80C1BEC+1
	.word sub_80C1CA0+1
	.word sub_80C1CC4+1
	.word sub_80C1DA0+1
	.word sub_80C1DC4+1
	.word sub_80C1E7A+1
.endfunc // sub_80C1A7C

.func
.thumb_func
sub_80C1AB8:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1ADC
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #3
	strh r0, [r5,#0x20]
	b locret_80C1AEC
loc_80C1ADC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C1AEC
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C1AEC:
	pop {pc}
.endfunc // sub_80C1AB8

.func
.thumb_func
sub_80C1AEE:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1B0C
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_80C1ECE
	mov r0, #0
	strb r0, [r5,#4]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80C1B2C
loc_80C1B0C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C1B2C
	ldrb r0, [r5,#5]
	tst r0, r0
	beq loc_80C1B24
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C1B2C
loc_80C1B24:
	mov r0, #0x24 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C1B2C:
	pop {pc}
.endfunc // sub_80C1AEE

.func
.thumb_func
sub_80C1B2E:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1B7C
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0
	bl sub_80C1EF4
	tst r0, r0
	beq loc_80C1BBE
	strb r2, [r5,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0xb0
	bl sound_play // () -> void
	ldr r4, dword_80C1BC4 // =0x10c03 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	b locret_80C1BC2
loc_80C1B7C:
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80C1B8C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C1BC2
	b loc_80C1BA4
loc_80C1B8C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x12
	beq loc_80C1BB2
	cmp r0, #0
	bgt locret_80C1BC2
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
loc_80C1BA4:
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C1BC2
loc_80C1BB2:
	bl sub_80C2110
	mov r0, #0
	bl sub_80C2000
	b locret_80C1BC2
loc_80C1BBE:
	mov r0, #1
	strb r0, [r5,#6]
locret_80C1BC2:
	pop {r4,r7,pc}
dword_80C1BC4: .word 0x10C03
.endfunc // sub_80C1B2E

.func
.thumb_func
sub_80C1BC8:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1BDA
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80C1BEA
loc_80C1BDA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C1BEA
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C1BEA:
	pop {pc}
.endfunc // sub_80C1BC8

.func
.thumb_func
sub_80C1BEC:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1C4C
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #1
	bl sub_80C1EF4
	tst r0, r0
	beq loc_80C1C90
	strb r2, [r5,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0xa
	strb r0, [r5,#0x10]
	ldr r4, dword_80C1C9C // =0x10120 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	mov r0, #1
	bl sub_80C2000
	mov r0, #0xf0
	bl sound_play // () -> void
	mov r0, #0xa
	strh r0, [r5,#0x22]
	b locret_80C1C98
loc_80C1C4C:
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80C1C5C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C1C98
	b loc_80C1C6E
loc_80C1C5C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80C1C7C
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
loc_80C1C6E:
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C1C98
loc_80C1C7C:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80C1C98
	mov r0, #0xa
	strh r0, [r5,#0x22]
	mov r0, #1
	bl sub_80C2000
	b locret_80C1C98
loc_80C1C90:
	mov r0, #1
	strb r0, [r5,#6]
	bl sub_80C205C
locret_80C1C98:
	pop {r4,r7,pc}
	.balign 4, 0x00
dword_80C1C9C: .word 0x10120
.endfunc // sub_80C1BEC

.func
.thumb_func
sub_80C1CA0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1CB2
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80C1CC2
loc_80C1CB2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C1CC2
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C1CC2:
	pop {pc}
.endfunc // sub_80C1CA0

.func
.thumb_func
sub_80C1CC4:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1D2C
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #2
	bl sub_80C1EF4
	tst r0, r0
	beq loc_80C1D8E
	strb r2, [r5,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0xe
	strb r0, [r5,#0x10]
	bl sub_80C20B4
	ldr r4, dword_80C1D98 // =0x10b06 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	ldr r4, dword_80C1D9C // =0x10005 
	mov r7, #0x68 
	add r7, r7, r5
	bl sub_80B8E30
	mov r0, #0xb9
	bl sound_play // () -> void
	mov r0, #5
	strh r0, [r5,#0x22]
	b locret_80C1D96
loc_80C1D2C:
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80C1D3C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C1D96
	b loc_80C1D54
loc_80C1D3C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80C1D62
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
	ldr r0, [r5,#0x68]
	bl sub_80B8E58
loc_80C1D54:
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #0x1c
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C1D96
loc_80C1D62:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80C1D96
	mov r0, #5
	strh r0, [r5,#0x22]
	mov r0, #0xe
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sub_80C20B4
	mov r0, #0xb9
	bl sound_play // () -> void
	ldr r0, [r5,#0x64]
	bl sub_80B8E7C
	ldr r0, [r5,#0x68]
	bl sub_80B8E7C
	b locret_80C1D96
loc_80C1D8E:
	mov r0, #1
	strb r0, [r5,#6]
	bl sub_80C205C
locret_80C1D96:
	pop {r4,r7,pc}
dword_80C1D98: .word 0x10B06
dword_80C1D9C: .word 0x10005
.endfunc // sub_80C1CC4

.func
.thumb_func
sub_80C1DA0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1DB2
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80C1DC2
loc_80C1DB2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C1DC2
	mov r0, #0x20 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C1DC2:
	pop {pc}
.endfunc // sub_80C1DA0

.func
.thumb_func
sub_80C1DC4:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1E26
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #3
	bl sub_80C1EF4
	tst r0, r0
	beq loc_80C1E70
	strb r2, [r5,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #3
	bl sub_80C2000
	mov r0, #0
	bl sub_80C2082
	mov r0, #0xc7
	bl sound_play // () -> void
	mov r0, #2
	ldrh r1, [r5,#0x20]
	add r1, #0x1e
	bl sub_80302A8
	b locret_80C1E78
loc_80C1E26:
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80C1E36
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C1E78
	b loc_80C1E44
loc_80C1E36:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xf
	beq loc_80C1E52
	cmp r0, #0
	bgt locret_80C1E78
loc_80C1E44:
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #0x24 
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C1E78
loc_80C1E52:
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #4
	bl sub_80C2000
	mov r0, #0x59 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #1
	bl sub_80C2082
	b locret_80C1E78
loc_80C1E70:
	mov r0, #1
	strb r0, [r5,#6]
	bl sub_80C205C
locret_80C1E78:
	pop {pc}
.endfunc // sub_80C1DC4

.func
.thumb_func
sub_80C1E7A:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C1E98
	mov r0, #4
	strb r0, [r5,#0xb]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r5,#0x20]
	b locret_80C1EAA
loc_80C1E98:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C1EAA
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80C1EAA:
	pop {pc}
.endfunc // sub_80C1E7A

.func
.thumb_func
sub_80C1EAC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x33 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C1ECC
	strb r3, [r0,#0xe]
	str r6, [r0,#0x60]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80C1ECC:
	pop {pc}
.endfunc // sub_80C1EAC

.func
.thumb_func
sub_80C1ECE:
	push {r7,lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80C1EE8 // =off_80C1EEC 
	ldr r2, [r1,r0]
	mov r3, #0
	mov r7, #0x6c 
	add r7, r7, r5
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80C1ECE

	strb r0, [r5,#5]
	pop {r7,pc}
	.balign 4, 0x00
off_80C1EE8: .word off_80C1EEC
off_80C1EEC: .word LCDControl
	.word start_
.func
.thumb_func
sub_80C1EF4:
	push {r4,r6,r7,lr}
	sub sp, sp, #0xc
	lsl r0, r0, #2
	ldr r1, off_80C1FF0 // =dword_80C1F94+76 
	ldr r0, [r1,r0]
	str r0, [sp]
	bl sub_800E2C0
	str r0, [sp,#4]
	mov r0, #0
	str r0, [sp,#8]
	ldrb r4, [r5,#4]
loc_80C1F0C:
	mov r6, #0
loc_80C1F0E:
	add r0, r6, #0
	mov r1, #3
	mul r1, r0
	ldr r7, [sp]
	add r7, r7, r1
	ldrb r1, [r7]
	cmp r1, #0xff
	beq loc_80C1F66
	mov r0, #1
	ldrsb r2, [r7,r0]
	ldr r3, [sp,#4]
	mul r2, r3
	mov r0, #2
	ldrsb r3, [r7,r0]
	add r7, r1, #0
	mov r0, #0x6c 
	add r0, r0, r5
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	add r0, r0, r2
	add r1, r1, r3
	ldr r3, off_80C1FF4 // =dword_80C1FF8 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80C1FFC - 0x80c1ff8)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80C1F82
	ldr r3, [r5,#0x4c]
	ldrb r2, [r3,#0x12]
	ldrb r3, [r3,#0x13]
	cmp r0, r2
	bne loc_80C1F60
	cmp r1, r3
	bne loc_80C1F60
	mov r2, #1
	str r2, [sp,#8]
loc_80C1F60:
	add r6, #1
	cmp r6, #6
	blt loc_80C1F0E
loc_80C1F66:
	add r4, #1
	ldrb r0, [r5,#5]
	cmp r4, r0
	blt loc_80C1F0C
	ldr r0, [sp,#8]
	tst r0, r0
	beq loc_80C1F7E
	ldr r1, [r5,#0x4c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	mov r7, #0
	b loc_80C1F82
loc_80C1F7E:
	mov r0, #0
	b loc_80C1F8E
loc_80C1F82:
	add r4, #1
	ldrb r3, [r5,#5]
	cmp r4, r3
	blt loc_80C1F8C
	mov r4, #0
loc_80C1F8C:
	strb r4, [r5,#4]
loc_80C1F8E:
	add r2, r7, #0
	add sp, sp, #0xc
	pop {r4,r6,r7,pc}
dword_80C1F94: .word 0x100FF00, 0xFF000001, 0xFF0101FF, 0x101FF00, 0xFF0101
	.word 0x100FF00, 0xFE000001, 0x20100, 0xFF, 0x100FB00
	.word 0xFC000005, 0x40100, 0x100FD00, 0xFE000003, 0x20100
	.word 0x100FF00, 0xFF0001, 0x100FF00, 0xFF0001, 0x80C1F94
	.word 0x80C1FA8, 0x80C1FB8, 0x80C1FD8
off_80C1FF0: .word dword_80C1F94+0x4C
off_80C1FF4: .word dword_80C1FF8
dword_80C1FF8: .word 0x10000
dword_80C1FFC: .word 0xF880080
.endfunc // sub_80C1EF4

.func
.thumb_func
sub_80C2000:
	push {r4,r6,r7,lr}
	lsl r0, r0, #2
	ldr r1, off_80C2028 // =dword_80C202C 
	ldr r4, [r1,r0]
	ldr r1, off_80C2044 // =dword_80C2048 
	ldr r6, [r1,r0]
	ldr r1, [r5,#0x60]
	add r6, r6, r1
	ldr r7, dword_80C2040 // =0x3 
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	bl sub_80C53A6
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C2028: .word dword_80C202C
dword_80C202C: .word 0x4050604, 0x6050A02, 0x0
	.word 0x4050602, 0x4050604
dword_80C2040: .word 0x3
off_80C2044: .word dword_80C2048
dword_80C2048: .word 0x32, 0x14, 0x5, 0x32, 0x32
.endfunc // sub_80C2000

.func
.thumb_func
sub_80C205C:
	push {lr}
	ldr r1, [r5,#0x4c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0xa
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	pop {pc}
.endfunc // sub_80C205C

.func
.thumb_func
sub_80C2082:
	push {r4,lr}
	ldr r1, off_80C20AC // =dword_80C20B0 
	ldrb r4, [r1,r0]
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,pc}
off_80C20AC: .word dword_80C20B0
dword_80C20B0: .word 0x393A
.endfunc // sub_80C2082

.func
.thumb_func
sub_80C20B4:
	push {r4,r6,r7,lr}
	mov r4, #1
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80C2104 // =dword_80C2108 
	ldr r6, [r1,r0]
loc_80C20C0:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	cmp r0, #1
	blt locret_80C20F8
	cmp r0, #6
	bgt locret_80C20F8
	push {r0,r1}
	bl object_getPanelParameters
	tst r6, r0
	pop {r0,r1}
	bne loc_80C20E4
	add r4, #1
	b loc_80C20C0
loc_80C20E4:
	ldrb r2, [r5,#0xe]
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, dword_80C20FC // =0x4050501 
	mov r6, #5
	ldr r7, [r5,#0x60]
	add r6, r6, r7
	ldr r7, dword_80C2100 // =0x3 
	bl sub_80C53A6
locret_80C20F8:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80C20FC: .word 0x4050501
dword_80C2100: .word 0x3
off_80C2104: .word dword_80C2108
dword_80C2108: .word 0x5800000, 0xA800000
.endfunc // sub_80C20B4

.func
.thumb_func
sub_80C2110:
	push {r4,lr}
	mov r4, #0x16
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,pc}
.endfunc // sub_80C2110

loc_80C2138:
	push {lr}
	ldr r1, off_80C214C // =off_80C2150 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80C214C: .word off_80C2150
off_80C2150: .word sub_80C215C+1
	.word sub_80C21AC+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C215C:
	push {lr}
	bl sub_80C2678
	mov r1, #0
	mov r2, #0xc
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C215C

	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #2
	mov r1, #0x24 
	mov r2, #1
	bl sub_8010DF6
	ldr r0, dword_80C21A8 // =0x1b7 
	strh r0, [r5,#0x28]
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
dword_80C21A8: .word 0x1B7
.func
.thumb_func
sub_80C21AC:
	push {lr}
	ldr r1, off_80C21BC // =off_80C21C0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C21BC: .word off_80C21C0
off_80C21C0: .word sub_80C21E0+1
	.word sub_80C2216+1
	.word sub_80C2256+1
	.word sub_80C2300+1
	.word sub_80C2324+1
	.word sub_80C23CC+1
	.word sub_80C23F0+1
	.word sub_80C2498+1
.endfunc // sub_80C21AC

.func
.thumb_func
sub_80C21E0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2204
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #3
	strh r0, [r5,#0x20]
	b locret_80C2214
loc_80C2204:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2214
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C2214:
	pop {pc}
.endfunc // sub_80C21E0

.func
.thumb_func
sub_80C2216:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2234
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_80C24F4
	mov r0, #0
	strb r0, [r5,#4]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	b locret_80C2254
loc_80C2234:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2254
	ldrb r0, [r5,#5]
	tst r0, r0
	beq loc_80C224C
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C2254
loc_80C224C:
	mov r0, #0x1c
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C2254:
	pop {pc}
.endfunc // sub_80C2216

.func
.thumb_func
sub_80C2256:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C22B2
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0
	bl sub_80C2518
	tst r0, r0
	beq loc_80C22F6
	strb r2, [r5,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0xa
	strb r0, [r5,#0x10]
	ldr r4, dword_80C22FC // =0x10121 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	bl sub_80C26C8
	mov r0, #0
	bl sub_80C2600
	mov r0, #0xb8
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r5,#0x22]
	b locret_80C22FA
loc_80C22B2:
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80C22C2
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C22FA
	b loc_80C22D4
loc_80C22C2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80C22E2
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
loc_80C22D4:
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C22FA
loc_80C22E2:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80C22FA
	mov r0, #4
	strh r0, [r5,#0x22]
	mov r0, #0
	bl sub_80C2600
	b locret_80C22FA
loc_80C22F6:
	mov r0, #1
	strb r0, [r5,#6]
locret_80C22FA:
	pop {r4,r7,pc}
dword_80C22FC: .word 0x10121
.endfunc // sub_80C2256

.func
.thumb_func
sub_80C2300:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2312
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80C2322
loc_80C2312:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2322
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C2322:
	pop {pc}
.endfunc // sub_80C2300

.func
.thumb_func
sub_80C2324:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C237A
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #1
	bl sub_80C2518
	tst r0, r0
	beq loc_80C23BE
	strb r2, [r5,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #5
	strb r0, [r5,#0x10]
	ldr r4, dword_80C23C8 // =0x10d03 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	b locret_80C23C6
loc_80C237A:
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80C238A
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C23C6
	b loc_80C23A2
loc_80C238A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x12
	beq loc_80C23B0
	cmp r0, #0
	bgt locret_80C23C6
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
loc_80C23A2:
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #0x14
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C23C6
loc_80C23B0:
	mov r0, #0x17
	bl sub_80C26A0
	mov r0, #1
	bl sub_80C2600
	b locret_80C23C6
loc_80C23BE:
	mov r0, #1
	strb r0, [r5,#6]
	bl sub_80C2678
locret_80C23C6:
	pop {r4,r7,pc}
dword_80C23C8: .word 0x10D03
.endfunc // sub_80C2324

.func
.thumb_func
sub_80C23CC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C23DE
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80C23EE
loc_80C23DE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C23EE
	mov r0, #0x18
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C23EE:
	pop {pc}
.endfunc // sub_80C23CC

.func
.thumb_func
sub_80C23F0:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2446
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #2
	bl sub_80C2518
	tst r0, r0
	beq loc_80C248A
	strb r2, [r5,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #5
	strb r0, [r5,#0x10]
	ldr r4, dword_80C2494 // =0x10d03 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	b locret_80C2492
loc_80C2446:
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80C2456
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2492
	b loc_80C246E
loc_80C2456:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x12
	beq loc_80C247C
	cmp r0, #0
	bgt locret_80C2492
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
loc_80C246E:
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #0x1c
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C2492
loc_80C247C:
	mov r0, #0x16
	bl sub_80C26A0
	mov r0, #2
	bl sub_80C2600
	b locret_80C2492
loc_80C248A:
	mov r0, #1
	strb r0, [r5,#6]
	bl sub_80C2678
locret_80C2492:
	pop {r4,r7,pc}
dword_80C2494: .word 0x10D03
.endfunc // sub_80C23F0

.func
.thumb_func
sub_80C2498:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C24B6
	mov r0, #4
	strb r0, [r5,#0xb]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r5,#0x20]
	b locret_80C24D0
loc_80C24B6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C24D0
	mov r0, #2
	mov r1, #0x24 
	bl loc_8011044
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80C24D0:
	pop {pc}
.endfunc // sub_80C2498

.func
.thumb_func
sub_80C24D2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x34 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C24F2
	strb r3, [r0,#0xe]
	str r6, [r0,#0x60]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x54]
	mov r1, #1
	strb r1, [r7]
locret_80C24F2:
	pop {pc}
.endfunc // sub_80C24D2

.func
.thumb_func
sub_80C24F4:
	push {r7,lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80C250C // =off_80C2510 
	ldr r2, [r1,r0]
	mov r3, #0
	mov r7, #0x6c 
	add r7, r7, r5
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80C24F4

	strb r0, [r5,#5]
	pop {r7,pc}
off_80C250C: .word off_80C2510
off_80C2510: .word LCDControl
	.word start_
.func
.thumb_func
sub_80C2518:
	push {r4,r6,r7,lr}
	sub sp, sp, #0xc
	lsl r0, r0, #2
	ldr r1, off_80C25F0 // =dword_80C25B8+44 
	ldr r0, [r1,r0]
	str r0, [sp]
	bl sub_800E2C0
	str r0, [sp,#4]
	mov r0, #0
	str r0, [sp,#8]
	ldrb r4, [r5,#4]
loc_80C2530:
	mov r6, #0
loc_80C2532:
	add r0, r6, #0
	mov r1, #3
	mul r1, r0
	ldr r7, [sp]
	add r7, r7, r1
	ldrb r1, [r7]
	cmp r1, #0xff
	beq loc_80C258A
	mov r0, #1
	ldrsb r2, [r7,r0]
	ldr r3, [sp,#4]
	mul r2, r3
	mov r0, #2
	ldrsb r3, [r7,r0]
	add r7, r1, #0
	mov r0, #0x6c 
	add r0, r0, r5
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	add r0, r0, r2
	add r1, r1, r3
	ldr r3, off_80C25F4 // =dword_80C25F8 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80C25FC - 0x80c25f8)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80C25A6
	ldr r3, [r5,#0x4c]
	ldrb r2, [r3,#0x12]
	ldrb r3, [r3,#0x13]
	cmp r0, r2
	bne loc_80C2584
	cmp r1, r3
	bne loc_80C2584
	mov r2, #1
	str r2, [sp,#8]
loc_80C2584:
	add r6, #1
	cmp r6, #6
	blt loc_80C2532
loc_80C258A:
	add r4, #1
	ldrb r0, [r5,#5]
	cmp r4, r0
	blt loc_80C2530
	ldr r0, [sp,#8]
	tst r0, r0
	beq loc_80C25A2
	ldr r1, [r5,#0x4c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	mov r7, #0
	b loc_80C25A6
loc_80C25A2:
	mov r0, #0
	b loc_80C25B2
loc_80C25A6:
	add r4, #1
	ldrb r3, [r5,#5]
	cmp r4, r3
	blt loc_80C25B0
	mov r4, #0
loc_80C25B0:
	strb r4, [r5,#4]
loc_80C25B2:
	add r2, r7, #0
	add sp, sp, #0xc
	pop {r4,r6,r7,pc}
dword_80C25B8: .word 0x100FE00, 0xFF0002, 0x100FF00, 0xFE000001, 0x20100
	.word 0xFF, 0x100FF00, 0xFF000001, 0xFF0101FF, 0x101FF00
	.word 0xFF0101, 0x80C25B8, 0x80C25C0, 0x80C25D0
off_80C25F0: .word dword_80C25B8+0x2C
off_80C25F4: .word dword_80C25F8
dword_80C25F8: .word 0x10000
dword_80C25FC: .word 0xF880080
.endfunc // sub_80C2518

.func
.thumb_func
sub_80C2600:
	push {r4,r6,r7,lr}
	add r7, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, off_80C2660 // =dword_80C2664 
	ldrb r1, [r1,r7]
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	add r3, r7, #0
	lsl r3, r3, #2
	ldr r2, off_80C2668 // =dword_80C266C 
	ldr r3, [r2,r3]
	ldrb r2, [r5,#0xe]
	orr r2, r3
	add r3, r7, #0
	lsl r3, r3, #2
	ldr r4, off_80C263C // =dword_80C2640 
	ldr r4, [r4,r3]
	ldr r6, off_80C2650 // =dword_80C2654 
	ldr r6, [r6,r3]
	ldr r3, [r5,#0x60]
	add r6, r6, r3
	ldr r7, dword_80C264C // =0x3 
	mov r3, #0
	bl sub_80C53A6
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C263C: .word dword_80C2640
dword_80C2640: .word 0x4050601, 0x4050602, 0x4050604
dword_80C264C: .word 0x3
off_80C2650: .word dword_80C2654
dword_80C2654: .word 0xA, 0x32, 0x32
off_80C2660: .word dword_80C2664
dword_80C2664: .word 0x10102
off_80C2668: .word dword_80C266C
dword_80C266C: .word 0x0, 0x0, 0x0
.endfunc // sub_80C2600

.func
.thumb_func
sub_80C2678:
	push {lr}
	ldr r1, [r5,#0x4c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r1, #0xa
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	pop {pc}
.endfunc // sub_80C2678

.func
.thumb_func
sub_80C26A0:
	push {r4,lr}
	add r4, r0, #0
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,pc}
.endfunc // sub_80C26A0

.func
.thumb_func
sub_80C26C8:
	push {r4,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x59 
	bl sub_80E05F6
	mov r1, #0x1e
	strh r1, [r0,#0x20]
	pop {r4,pc}
	.byte 0, 0
.endfunc // sub_80C26C8

loc_80C26F0:
	push {lr}
	ldr r1, dword_80C270C // = 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
	.byte 0x11
	.byte 0x27 
	.byte 0xC
	.byte  8
	.byte 0x71 
	.byte 0x27 
	.byte 0xC
	.byte  8
	.byte 0x2D 
	.byte 0x2A 
	.byte 0xC
	.byte  8
dword_80C270C: .word 0x80C2700
	push {lr}
	mov r0, #0x80
	mov r1, #8
	mov r2, #0xb
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	ldr r1, off_80C2764 // =dword_80C276C 
	ldrb r0, [r1,r0]
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, dword_80C2768 // =0x7fff 
	bl sub_8002ED0
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C2770
	pop {pc}
off_80C2764: .word dword_80C276C
dword_80C2768: .word 0x7FFF
dword_80C276C: .word 0x0
loc_80C2770:
	push {lr}
	ldr r1, off_80C2794 // =off_80C2788 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	bl sub_80C2A3A
	pop {pc}
	.balign 4, 0x00
off_80C2788: .word sub_80C2798+1
	.word sub_80C2854+1
	.word 0x80C29FD
off_80C2794: .word off_80C2788
.func
.thumb_func
sub_80C2798:
	push {lr}
	ldr r1, off_80C27A8 // =off_80C27AC 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C27A8: .word off_80C27AC
off_80C27AC: .word sub_80C27B4+1
	.word sub_80C2804+1
.endfunc // sub_80C2798

.func
.thumb_func
sub_80C27B4:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C27D0
	mov r0, #0x1f
	strb r0, [r5,#0x19]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2802
loc_80C27D0:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	lsr r0, r0, #1
	bcc loc_80C27EA
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C27EA:
	ldrb r0, [r5,#0x19]
	sub r0, #2
	strb r0, [r5,#0x19]
	bgt locret_80C2802
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x19]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C2802:
	pop {pc}
.endfunc // sub_80C27B4

.func
.thumb_func
sub_80C2804:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2816
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2852
loc_80C2816:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2852
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x10
	mov r3, #0
	bl object_checkPanelParameters
	cmp r0, #0
	bne loc_80C2834
	mov r0, #8
	str r0, [r5,#8]
	b locret_80C2852
loc_80C2834:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x14]
	mov r0, #1
	strb r0, [r5,#0x15]
	str r0, [r5,#0x68]
	bl sub_800E456 // () -> int
	str r0, [r5,#0x6c]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C2852:
	pop {pc}
.endfunc // sub_80C2804

.func
.thumb_func
sub_80C2854:
	push {lr}
	ldr r1, off_80C2864 // =off_80C2868 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C2864: .word off_80C2868
off_80C2868: .word sub_80C2878+1
	.word sub_80C290C+1
	.word sub_80C2934+1
	.word sub_80C296C+1
.endfunc // sub_80C2854

.func
.thumb_func
sub_80C2878:
	push {lr}
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl object_isValidPanel
	beq loc_80C28F6
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	ldr r2, [r5,#0x68]
	tst r2, r2
	beq loc_80C28DE
loc_80C288E:
	mov r1, #1
loc_80C2890:
	push {r0,r1}
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #2
	ldr r3, off_80C2900 // =off_80C2904 
	ldr r2, [r3,r2]
	mov r3, #0
	bl object_checkPanelParameters
	pop {r0,r1}
	beq loc_80C28DE
	push {r0,r1}
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r2, r0
	pop {r0,r1}
	add r0, r0, r2
	ldr r3, [r5,#0x4c]
	ldrb r2, [r3,#0x12]
	ldrb r3, [r3,#0x13]
	cmp r0, r2
	bne loc_80C28C4
	cmp r1, r3
	bne loc_80C28C4
	mov r0, #1
	b loc_80C28CC
loc_80C28C4:
	mov r2, #0x10
	ldr r3, dword_80C2A74 // =0xf800000 
	bl object_checkPanelParameters
loc_80C28CC:
	pop {r0,r1}
	beq loc_80C28DE
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	mov r0, #0
	str r0, [r5,#0x68]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
loc_80C28DE:
	add r1, #1
	cmp r1, #3
	ble loc_80C2890
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	pop {r0,r1}
	add r0, r0, r2
	sub r2, r0, #1
	cmp r2, #5
	bls loc_80C288E
loc_80C28F6:
	mov r0, #0
	strh r0, [r5,#0xa]
	mov r0, #8
	strb r0, [r5,#9]
	pop {pc}
off_80C2900: .word off_80C2904
off_80C2904: .word LCDControl
	.word start_
.endfunc // sub_80C2878

.func
.thumb_func
sub_80C290C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2926
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x4c]
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2932
loc_80C2926:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2932
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C2932:
	pop {pc}
.endfunc // sub_80C290C

.func
.thumb_func
sub_80C2934:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C295E
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r5,#0x20]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldrb r1, [r5,#0x14]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	ldrb r0, [r5,#0x15]
	strb r0, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C296A
loc_80C295E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C296A
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80C296A:
	pop {pc}
.endfunc // sub_80C2934

.func
.thumb_func
sub_80C296C:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C299C
	mov r0, #5
	strb r0, [r5,#0x10]
	add r0, #1
	strb r0, [r5,#0x11]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r4, off_80C29EC // =loc_80C29F0 
	ldr r4, [r4,r0]
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C29E4
loc_80C299C:
	ldrh r0, [r5,#0x20]
	cmp r0, #0xa
	bne loc_80C29D8
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, dword_80C29E8 // =0x705ff04 
	ldr r6, [r5,#0x2c]
	mov r2, #0
	mov r7, #3
	bl sub_80C53A6
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, [r5,#0x6c]
	lsl r4, r4, #8
	mov r0, #0x27 
	orr r4, r0
	bl sub_80E05F6
loc_80C29D8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C29E4
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C29E4:
	pop {r4,r7,pc}
	.balign 4, 0x00
dword_80C29E8: .word 0x705FF04
off_80C29EC: .word loc_80C29F0
.endfunc // sub_80C296C

loc_80C29F0:
	lsr r1, r2, #0xc
	// <mkdata>
	.hword 0x1 // mov r1, r0
	lsr r1, r2, #0xc
	// <mkdata>
	.hword 0x1 // mov r1, r0
	lsr r1, r2, #0xc
	// <mkdata>
	.hword 0x1 // mov r1, r0
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C2A16
	mov r0, #0
	str r0, [r5,#0x4c]
	mov r0, #4
	strh r0, [r5,#0x10]
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xa]
	b locret_80C2A2A
loc_80C2A16:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2A2A
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80C2A2A:
	pop {pc}
	push {lr}
	ldr r0, [r5,#0x64]
	mov r1, #0
	strb r1, [r0]
	bl object_freeMemory
	pop {pc}
.func
.thumb_func
sub_80C2A3A:
	push {lr}
	ldrb r1, [r5,#0x19]
	lsl r0, r1, #5
	add r0, r0, r1
	lsl r0, r0, #5
	add r0, r0, r1
	bl sub_8002ED0
	pop {pc}
.endfunc // sub_80C2A3A

.func
.thumb_func
sub_80C2A4C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x3c 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C2A70
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x64]
	mov r1, #1
	strb r1, [r7]
locret_80C2A70:
	pop {pc}
	.balign 4, 0x00
dword_80C2A74: .word 0xF800000
.endfunc // sub_80C2A4C

loc_80C2A78:
	push {lr}
	mov r7, #0x60 
	add r7, r7, r5
	ldr r1, dword_80C2A98 // = 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
	.byte 0x9D
	.byte 0x2A 
	.byte 0xC
	.byte  8
	.byte 0xF9
	.byte 0x2A 
	.byte 0xC
	.byte  8
	.byte 0x77 
	.byte 0x2F 
	.byte 0xC
	.byte  8
dword_80C2A98: .word 0x80C2A8C
	push {lr}
	mov r0, #0x80
	mov r1, #8
	mov r2, #0xb
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r5,#0x12]
	strh r0, [r7,#0x10]
	mov r0, #0xb
	bl sub_800FCFC
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, dword_80C2AF4 // =0x7fff 
	bl sub_8002ED0
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C2AF8
	pop {pc}
dword_80C2AF4: .word 0x7FFF
loc_80C2AF8:
	push {lr}
	ldr r1, off_80C2B1C // =off_80C2B10 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	bl sub_80C2F84
	pop {pc}
	.byte 0, 0
off_80C2B10: .word sub_80C2B20+1
	.word loc_80C2BE6+1
	.word sub_80C2F40+1
off_80C2B1C: .word off_80C2B10
.func
.thumb_func
sub_80C2B20:
	push {lr}
	ldr r1, off_80C2B30 // =off_80C2B34 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80C2B30: .word off_80C2B34
off_80C2B34: .word sub_80C2B3C+1
	.word sub_80C2B8C+1
.endfunc // sub_80C2B20

.func
.thumb_func
sub_80C2B3C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2B58
	mov r0, #0x1f
	strb r0, [r5,#0x19]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2B8A
loc_80C2B58:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	lsr r0, r0, #1
	bcc loc_80C2B72
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C2B72:
	ldrb r0, [r5,#0x19]
	sub r0, #2
	strb r0, [r5,#0x19]
	bgt locret_80C2B8A
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x19]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C2B8A:
	pop {pc}
.endfunc // sub_80C2B3C

.func
.thumb_func
sub_80C2B8C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2BB6
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	mov r0, #0x14
	lsl r0, r0, #0x10
	add r3, r3, r0
	mov r4, #3
	bl sub_80E05F6
	mov r0, #0x77 
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2BE4
loc_80C2BB6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2BE4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x10
	mov r3, #0
	bl object_checkPanelParameters
	cmp r0, #0
	bne loc_80C2BD4
	mov r0, #8
	str r0, [r5,#8]
	b locret_80C2BE4
loc_80C2BD4:
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	strb r0, [r7,#0xc]
	mov r0, #4
	strb r0, [r5,#9]
	mov r1, #0
	strh r1, [r5,#0xa]
locret_80C2BE4:
	pop {pc}
.endfunc // sub_80C2B8C

loc_80C2BE6:
	push {lr}
	ldr r1, off_80C2BF4 // =off_80C2BF8 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C2BF4: .word off_80C2BF8
off_80C2BF8: .word sub_80C2C14+1
	.word sub_80C2CB4+1
	.word loc_80C2D06+1
	.word sub_80C2D56+1
	.word sub_80C2D8C+1
	.word sub_80C2E30+1
	.word sub_80C2E6E+1
.func
.thumb_func
sub_80C2C14:
	push {r4,lr}
	mov r0, #0
	strb r0, [r7,#0x18]
	strb r0, [r7,#0x16]
	strb r0, [r7,#0x17]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
loc_80C2C26:
	mov r1, #1
loc_80C2C28:
	push {r0,r1}
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #2
	ldr r3, off_80C2F28 // =off_80C2F2C 
	ldr r2, [r3,r2]
	mov r3, #0
	bl object_checkPanelParameters
.endfunc // sub_80C2C14

	pop {r0,r1}
	beq loc_80C2C86
	push {r0,r1}
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r2, r0
	pop {r0,r1}
	add r0, r0, r2
	sub r1, #1
	ldrb r2, [r7,#0x18]
	tst r2, r2
	bne loc_80C2C58
	strb r0, [r7,#0x18]
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
loc_80C2C58:
	push {r0,r1}
	bl object_isValidPanel
	pop {r0,r1}
	beq loc_80C2C76
	ldrb r2, [r5,#0x16]
	ldr r3, dword_80C2F38 // =0x7880080 
	tst r2, r2
	beq loc_80C2C6C
	ldr r3, dword_80C2F3C // =0xb880080 
loc_80C2C6C:
	strb r0, [r7,#0x14]
	strb r1, [r7,#0x15]
	ldr r2, dword_80C2F34 // =0x10 
	bl object_checkPanelParameters
loc_80C2C76:
	pop {r0,r1}
	beq loc_80C2C86
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	mov r0, #0
	strh r0, [r5,#0x22]
	mov r0, #0x1e
	b loc_80C2CAC
loc_80C2C86:
	add r1, #1
	cmp r1, #3
	ble loc_80C2C28
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	pop {r0,r1}
	add r0, r0, r2
	push {r0,r1}
	mov r1, #1
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	bne loc_80C2C26
	mov r0, #0xff
	strh r0, [r5,#0x22]
	mov r0, #0xf
loc_80C2CAC:
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {r4,pc}
.func
.thumb_func
sub_80C2CB4:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2CEE
	ldrb r0, [r7,#0x14]
	ldrb r1, [r7,#0x15]
	ldrh r2, [r5,#0x22]
	tst r2, r2
	beq loc_80C2CCA
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
loc_80C2CCA:
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x28 
	bl sub_80E05F6
	ldrh r1, [r5,#0x20]
	strh r1, [r0,#0x20]
	mov r0, #0xbd
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2D04
loc_80C2CEE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2D04
	ldrh r0, [r5,#0x22]
	tst r0, r0
	bne loc_80C2D42
	mov r0, #1
	strb r0, [r7,#0x19]
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C2D04:
	pop {pc}
loc_80C2D06:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2D20
	mov r0, #0
	str r0, [r5,#0x4c]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2D54
loc_80C2D20:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2D54
	ldrh r0, [r5,#0x22]
	cmp r0, #3
	bne loc_80C2D34
	mov r0, #0x14
	strh r0, [r5,#0xa]
	pop {pc}
loc_80C2D34:
	ldrb r0, [r7,#0x19]
	tst r0, r0
	beq loc_80C2D42
	ldrh r0, [r5,#0x22]
	bl sub_80C2EC4
	bne loc_80C2D4C
loc_80C2D42:
	mov r0, #0
	strh r0, [r5,#0xa]
	mov r0, #8
	strb r0, [r5,#9]
	pop {pc}
.endfunc // sub_80C2CB4

loc_80C2D4C:
	mov r0, #0
	strb r0, [r7,#0x19]
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80C2D54:
	pop {pc}
.func
.thumb_func
sub_80C2D56:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2D7E
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	bl sub_8002F5C
	mov r0, #3
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x14]
	strb r0, [r5,#0x12]
	ldrb r0, [r5,#0x15]
	strb r0, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2D8A
loc_80C2D7E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2D8A
	mov r0, #0x10
	strh r0, [r5,#0xa]
locret_80C2D8A:
	pop {pc}
.endfunc // sub_80C2D56

.func
.thumb_func
sub_80C2D8C:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2DBA
	mov r0, #5
	strb r0, [r5,#0x10]
	add r0, #1
	strb r0, [r5,#0x11]
	push {r7}
	ldr r4, dword_80C2E2C // =0x10b03 
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2E24
loc_80C2DBA:
	ldrh r0, [r5,#0x20]
	cmp r0, #5
	ble loc_80C2DCA
	bl sub_80C2EB0
	beq loc_80C2DCA
	mov r0, #1
	strb r0, [r7,#0x19]
loc_80C2DCA:
	ldrh r0, [r5,#0x20]
	cmp r0, #0xa
	bne loc_80C2E18
	push {r4}
	ldr r4, dword_80C2FF8 // =0x10500 
	bl sub_80E11E0
	pop {r4}
	ldr r0, [r7,#0xc]
	mov r1, #0
	bl object_getFlipDirection // (int a1, int a2) -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, dword_80C2E28 // =0x705ff04 
	ldr r6, [r5,#0x2c]
	mov r2, #0
	push {r7}
	mov r7, #3
	bl sub_80C53A6
	pop {r7}
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, [r7,#0xc]
	lsl r4, r4, #8
	mov r0, #0x27 
	orr r4, r0
	bl sub_80E05F6
loc_80C2E18:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2E24
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C2E24:
	pop {r4,r7,pc}
	.balign 4, 0x00
dword_80C2E28: .word 0x705FF04
dword_80C2E2C: .word 0x10B03
.endfunc // sub_80C2D8C

.func
.thumb_func
sub_80C2E30:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2E60
	mov r0, #0
	str r0, [r5,#0x4c]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x16]
	ldrb r4, [r5,#0x17]
	eor r0, r4
	mov r1, #1
	eor r0, r1
	bl sub_8002F5C
	mov r0, #3
	strh r0, [r5,#0x20]
	ldrh r0, [r7,#0x10]
	strh r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2E6C
loc_80C2E60:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2E6C
	mov r0, #0x18
	strh r0, [r5,#0xa]
locret_80C2E6C:
	pop {r4,pc}
.endfunc // sub_80C2E30

.func
.thumb_func
sub_80C2E6E:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C2E9E
	mov r0, #0
	str r0, [r5,#0x4c]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x14]
	add r0, #1
	ldrb r2, [r5,#0x16]
	ldrb r4, [r5,#0x17]
	eor r2, r4
	tst r2, r2
	beq loc_80C2E92
	sub r0, #2
loc_80C2E92:
	mov r1, #2
	bl sub_80C2FBC
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80C2EAE
loc_80C2E9E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C2EAE
	mov r0, #0
	strh r0, [r5,#0xa]
	mov r0, #8
	strb r0, [r5,#9]
locret_80C2EAE:
	pop {r4,pc}
.endfunc // sub_80C2E6E

.func
.thumb_func
sub_80C2EB0:
	push {lr}
	ldrb r0, [r5,#0x16]
	bl sub_80103BC
	ldr r0, [r0,#0x58]
	mov r2, #0x2c 
	ldrh r1, [r0,r2]
	mov r0, #1
	tst r0, r1
	pop {pc}
.endfunc // sub_80C2EB0

.func
.thumb_func
sub_80C2EC4:
	push {r4,r6,lr}
	add r6, r0, #0
	lsl r0, r0, #0x1f
	lsr r0, r0, #0x1f
	ldrb r1, [r5,#0x16]
	ldrb r2, [r5,#0x17]
	eor r0, r1
	eor r0, r2
	strb r0, [r7,#0xc]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	add r2, r6, r6
	ldr r3, off_80C2F1C // =dword_80C2F20 
	add r3, r3, r2
	mov r0, #0
	ldrsb r0, [r3,r0]
	mul r0, r4
	ldrb r2, [r5,#0x14]
	add r2, r2, r0
	strb r2, [r5,#0x14]
	mov r0, #1
	ldrsb r0, [r3,r0]
	ldrb r2, [r5,#0x15]
	add r2, r2, r0
	strb r2, [r5,#0x15]
	add r6, #1
	strh r6, [r5,#0x22]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl object_isValidPanel
	beq locret_80C2F1A
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	ldr r2, dword_80C2F34 // =0x10 
	ldr r3, dword_80C2F38 // =0x7880080 
	ldrb r4, [r5,#0x16]
	tst r4, r4
	beq loc_80C2F16
	ldr r3, dword_80C2F3C // =0xb880080 
loc_80C2F16:
	bl object_checkPanelParameters
locret_80C2F1A:
	pop {r4,r6,pc}
off_80C2F1C: .word dword_80C2F20
dword_80C2F20: .word 0x102FFFF, 0x1FE
off_80C2F28: .word off_80C2F2C
off_80C2F2C: .word LCDControl
	.word start_
dword_80C2F34: .word 0x10
dword_80C2F38: .word 0x7880080
dword_80C2F3C: .word 0xB880080
.endfunc // sub_80C2EC4

.func
.thumb_func
sub_80C2F40:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C2F60
	ldrb r0, [r5,#0x10]
	mov r1, #4
	cmp r0, r1
	beq loc_80C2F68
	strb r1, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x4c]
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xa]
	b locret_80C2F74
loc_80C2F60:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C2F74
loc_80C2F68:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80C2F74:
	pop {pc}
.endfunc // sub_80C2F40

	push {lr}
	ldr r0, [r5,#0x64]
	mov r1, #0
	strb r1, [r0]
	bl object_freeMemory
	pop {pc}
.func
.thumb_func
sub_80C2F84:
	push {lr}
	ldrb r1, [r5,#0x19]
	lsl r0, r1, #5
	add r0, r0, r1
	lsl r0, r0, #5
	add r0, r0, r1
	bl sub_8002ED0
	pop {pc}
.endfunc // sub_80C2F84

.func
.thumb_func
sub_80C2F96:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x3d 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C2FBA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x64]
	mov r1, #1
	strb r1, [r7]
locret_80C2FBA:
	pop {pc}
.endfunc // sub_80C2F96

.func
.thumb_func
sub_80C2FBC:
	push {r4,lr}
	b loc_80C2FC6
	push {r4,lr}
	ldrb r0, [r7,#0x18]
	ldrb r1, [r7,#0x19]
loc_80C2FC6:
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r0, [r5,#0x16]
	ldrb r4, [r5,#0x17]
	eor r0, r4
	lsl r0, r0, #8
	mov r4, #4
	orr r4, r0
	bl sub_80E3FB4
	mov r1, #0x3c 
	strh r1, [r0,#0x20]
	mov r0, #0x92
	bl sound_play // () -> void
	push {r4}
	ldr r4, dword_80C2FFC // =0x11400 
	bl sub_80E11E0
	pop {r4}
	pop {r4,pc}
	.balign 4, 0x00
dword_80C2FF8: .word 0x10500
dword_80C2FFC: .word 0x11400
.endfunc // sub_80C2FBC

loc_80C3000:
	push {lr}
	ldr r1, off_80C3014 // =off_80C3018 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80C3014: .word off_80C3018
off_80C3018: .word sub_80C3024+1
	.word sub_80C30C2+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C3024:
	push {r4,r7,lr}
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80C304E
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	bl sub_800FC9E
	b loc_80C3058
loc_80C304E:
	ldrh r0, [r4,#0x28]
	bl sub_800F26C
	add r2, r1, #0
	add r1, r0, #0
loc_80C3058:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C3024

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_801002C
	pop {r5}
	bl sprite_setPallete // (int pallete) -> void
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	str r0, [r5,#0x6c]
	str r1, [r5,#0x70]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl sub_8010DF6
	ldr r0, [r5,#0x4c]
	mov r1, #0xf
	bl sub_80E1352
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,r7,pc}
.func
.thumb_func
sub_80C30C2:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80C30DE
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C30DE:
	ldr r1, off_80C30F0 // =off_80C30F4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
	.byte  0
	.byte  0
	.byte  0
	.byte  0
off_80C30F0: .word off_80C30F4
off_80C30F4: .word sub_80C3100+1
	.word sub_80C314E+1
	.word sub_80C31B0+1
.endfunc // sub_80C30C2

.func
.thumb_func
sub_80C3100:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C3110
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C3110:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C314C
	mov r0, #0xe
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x22]
	ldr r0, [r5,#0x6c]
	cmp r0, #2
	bne loc_80C3144
	ldr r0, [r5,#0x70]
	cmp r0, #0
	beq loc_80C3132
	cmp r0, #0x19
	blt loc_80C3144
	sub r0, #0x18
loc_80C3132:
	mov r4, #1
	lsl r4, r4, #8
	orr r4, r0
	lsl r4, r4, #8
	add r4, #6
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
loc_80C3144:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C314C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80C3100

.func
.thumb_func
sub_80C314E:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80C318C
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldr r1, [r5,#0x64]
	cmp r1, #0
	beq loc_80C316E
	strb r0, [r1,#0x11]
	ldr r1, [r5,#0x50]
	cmp r1, #0
	beq loc_80C316E
	strb r0, [r1,#0x11]
loc_80C316E:
	mov r0, #0x12
	strh r0, [r5,#0x20]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	mov r4, #0xa
	lsl r4, r4, #8
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80D73D6
loc_80C318C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C31AE
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	beq loc_80C31A2
	mov r0, #0
	strb r0, [r5,#0xb]
	b locret_80C31AE
loc_80C31A2:
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C31AE:
	pop {r4,r6,r7,pc}
.endfunc // sub_80C314E

.func
.thumb_func
sub_80C31B0:
	push {r4,lr}
	ldrh r0, [r5,#0x20]
	cmp r0, #0x2d 
	bne loc_80C31C0
	mov r0, #0
	str r0, [r5,#0x64]
	mov r0, #0
	strb r0, [r5,#0x10]
loc_80C31C0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C31EE
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	ldr r0, [r5,#0x4c]
	bl sub_80E13DC
	ldr r1, [r5,#0x60]
	mov r0, #0
	strb r0, [r1]
locret_80C31EE:
	pop {r4,pc}
.endfunc // sub_80C31B0

.func
.thumb_func
sub_80C31F0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x45 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C3214
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	mov r1, #1
	strb r1, [r7]
locret_80C3214:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80C31F0

loc_80C3218:
	push {lr}
	ldr r1, off_80C322C // =off_80C3230 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C322C: .word off_80C3230
off_80C3230: .word sub_80C323C+1
	.word sub_80C32B6+1
	.word sub_80C3448+1
.func
.thumb_func
sub_80C323C:
	push {lr}
	mov r0, #0xc
	mov r1, #0x48 
	bl sprite_decompress
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x48 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C323C

	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_80C3460
	mov r0, #0x13
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	strb r0, [r5,#0xe]
	mov r0, #0
	str r0, [r5,#0x2c]
	bl sub_8019892
	tst r0, r0
	bne loc_80C3298
	bl object_freeMemory
	pop {pc}
loc_80C3298:
	mov r1, #0x17
	mov r2, #5
	mov r3, #0
	bl sub_8019FB4
	mov r0, #0x12
	bl sub_801A258
	bl sub_801A074 // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C32B6
	pop {pc}
.func
.thumb_func
sub_80C32B6:
	push {lr}
	bl sub_801A00E
	.word 0x7A684903, 0x46FE5809, 0xF7564708, 0xBD00FEA7
	.word off_80C32D0
off_80C32D0: .word sub_80C32D8+1
	.word loc_80C3322+1
.endfunc // sub_80C32B6

.func
.thumb_func
sub_80C32D8:
	push {lr}
	ldr r1, off_80C32E8 // =off_80C32EC 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C32E8: .word off_80C32EC
off_80C32EC: .word sub_80C32F4+1
	.word sub_80C330E+1
.endfunc // sub_80C32D8

.func
.thumb_func
sub_80C32F4:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C330C
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C330C:
	pop {pc}
.endfunc // sub_80C32F4

.func
.thumb_func
sub_80C330E:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C3320
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C3320:
	pop {pc}
.endfunc // sub_80C330E

loc_80C3322:
	push {lr}
	ldr r1, off_80C3330 // =off_80C3334 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C3330: .word off_80C3334
off_80C3334: .word sub_80C3348+1
	.word sub_80C3368+1
	.word sub_80C33AE+1
	.word sub_80C33CA+1
	.word sub_80C3408+1
.func
.thumb_func
sub_80C3348:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80C3348

.func
.thumb_func
sub_80C3368:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C33A6
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	tst r0, r0
	beq loc_80C33A8
	ldrb r1, [r0,#0x12]
	ldrb r2, [r0,#0x13]
	strb r1, [r5,#0x12]
	strb r2, [r5,#0x13]
	ldr r3, [r5,#0x54]
	strb r1, [r3,#0xa]
	strb r2, [r3,#0xb]
	bl sub_800E29C // () -> void
	ldrh r0, [r5,#0x3a]
	add r0, #1
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	add r0, #1
	strh r0, [r5,#0x3e]
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C33A6:
	pop {pc}
loc_80C33A8:
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80C3368

.func
.thumb_func
sub_80C33AE:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C33C8
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80C33C8:
	pop {pc}
.endfunc // sub_80C33AE

.func
.thumb_func
sub_80C33CA:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C3406
	ldrh r0, [r5,#6]
	ldr r1, dword_80C34DC // =0x17e 
	cmp r0, r1
	beq loc_80C33F4
	push {r5}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	add r5, r0, #0
	beq loc_80C33F4
	bl sub_800FC7C
	pop {r5}
loc_80C33F4:
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x10
	strh r0, [r5,#0xa]
locret_80C3406:
	pop {pc}
.endfunc // sub_80C33CA

.func
.thumb_func
sub_80C3408:
	push {r4,r6,lr}
	bl sub_8002DEA
	mov r1, #0x40 
	tst r0, r1
	beq loc_80C341C
	mov r0, #0x23 
	add r0, #0xff
	bl sound_play // () -> void
loc_80C341C:
	bl sub_801A074 // () -> void
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C3446
	bl sub_800E2C0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0x20 
	lsl r3, r3, #0x10
	mov r6, #8
	lsl r6, r6, #0x10
	mul r6, r0
	sub r1, r1, r6
	mov r4, #0x14
	bl sub_80E05F6
	mov r0, #8
	str r0, [r5,#8]
locret_80C3446:
	pop {r4,r6,pc}
.endfunc // sub_80C3408

.func
.thumb_func
sub_80C3448:
	push {lr}
	ldr r0, [r5,#0x54]
	bl sub_80198CE
	ldr r1, [r5,#0x4c]
	tst r1, r1
	beq loc_80C345A
	mov r0, #0
	strb r0, [r1]
loc_80C345A:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80C3448

.func
.thumb_func
sub_80C3460:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x16]
	push {r0}
	bl sub_80103BC
	add r7, r0, #0
	pop {r4}
	beq loc_80C348A
	ldrb r0, [r7,#0x12]
	ldrb r1, [r7,#0x13]
	ldr r6, off_80C34A4 // =dword_80C34A8 
	lsl r4, r4, #3
	ldr r2, [r6,r4]
	add r4, #4
	ldr r3, [r6,r4]
	push {r0,r1,r7}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1,r7}
	bne loc_80C3494
loc_80C348A:
	ldrb r0, [r5,#0x16]
	mov r1, #5
	mul r0, r1
	add r0, #1
	mov r1, #2
loc_80C3494:
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C34A4: .word dword_80C34A8
dword_80C34A8: .word 0x10000, 0x20, 0x10020, 0x0
.endfunc // sub_80C3460

.func
.thumb_func
sub_80C34B8:
	push {lr}
	push {r5}
	mov r0, #0x4b 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C34DA
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r7, [r0,#0x4c]
	mov r1, #1
	strb r1, [r7]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C34DA:
	pop {pc}
dword_80C34DC: .word 0x17E
.endfunc // sub_80C34B8

loc_80C34E0:
	push {lr}
	ldr r1, off_80C34F4 // =off_80C34F8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C34F4: .word off_80C34F8
off_80C34F8: .word sub_80C3504+1
	.word sub_80C3550+1
	.word sub_80C36A0+1
.func
.thumb_func
sub_80C3504:
	push {lr}
	mov r0, #0xc
	mov r1, #0x4b 
	bl sprite_decompress
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x4b 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C3504

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_80C36AE
	mov r0, #1
	str r0, [r5,#0x60]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C3550
	pop {pc}
.func
.thumb_func
sub_80C3550:
	push {lr}
	bl loc_80C3558
	pop {pc}
.endfunc // sub_80C3550

loc_80C3558:
	push {lr}
	ldr r1, off_80C3568 // =off_80C356C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C3568: .word off_80C356C
off_80C356C: .word sub_80C3584+1
	.word sub_80C3598+1
	.word sub_80C35CE+1
	.word sub_80C3630+1
	.word sub_80C364A+1
	.word sub_80C3678+1
.func
.thumb_func
sub_80C3584:
	push {lr}
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #0x21 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80C3584

.func
.thumb_func
sub_80C3598:
	push {r7,lr}
	mov r7, #0x34 
	add r7, r7, r5
	ldmia r7!, {r0-r2}
	mov r7, #0x40 
	add r7, r7, r5
	ldmia r7!, {r3,r4,r6}
	add r0, r0, r3
	add r1, r1, r4
	add r2, r2, r6
	mov r7, #0x34 
	add r7, r7, r5
	stmia r7!, {r0-r2}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C35CC
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #6
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x48]
	neg r0, r0
	str r0, [r5,#0x48]
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C35CC:
	pop {r7,pc}
.endfunc // sub_80C3598

.func
.thumb_func
sub_80C35CE:
	push {r7,lr}
	mov r7, #0x34 
	add r7, r7, r5
	ldmia r7!, {r0-r2}
	mov r7, #0x40 
	add r7, r7, r5
	ldmia r7!, {r3,r4,r6}
	add r0, r0, r3
	add r1, r1, r4
	add r2, r2, r6
	mov r7, #0x34 
	add r7, r7, r5
	stmia r7!, {r0-r2}
	bl sub_800E2C0
	ldr r1, dword_80C3628 // =0x40000 
	mul r1, r0
	ldr r0, [r5,#0x40]
	sub r0, r0, r1
	str r0, [r5,#0x40]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C3624
	mov r0, #2
	strb r0, [r5,#0x10]
	push {r5}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	add r5, r0, #0
	beq loc_80C3616
	bl sub_800FC7C
loc_80C3616:
	pop {r5}
	mov r0, #0x27 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80C3624:
	pop {r7,pc}
	.balign 4, 0x00
dword_80C3628: .word 0x40000
	.byte 0x55 
	.byte 0x55 
	.byte  1
	.byte  0
.endfunc // sub_80C35CE

.func
.thumb_func
sub_80C3630:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C3648
	mov r0, #0x4b 
	strh r0, [r5,#0x20]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x10
	strh r0, [r5,#0xa]
locret_80C3648:
	pop {pc}
.endfunc // sub_80C3630

.func
.thumb_func
sub_80C364A:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C366E
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0x10]
	bl sub_800E2C0
	ldr r1, dword_80C3670 // =0xc0000 
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80C3674 // =0x40000 
	str r0, [r5,#0x48]
	mov r0, #0x14
	strh r0, [r5,#0xa]
locret_80C366E:
	pop {pc}
dword_80C3670: .word 0xC0000
dword_80C3674: .word 0x40000
.endfunc // sub_80C364A

.func
.thumb_func
sub_80C3678:
	push {lr}
	mov r7, #0x34 
	add r7, r7, r5
	ldmia r7!, {r0-r2}
	mov r7, #0x40 
	add r7, r7, r5
	ldmia r7!, {r3,r4,r6}
	add r0, r0, r3
	add r1, r1, r4
	add r2, r2, r6
	mov r7, #0x34 
	add r7, r7, r5
	stmia r7!, {r0-r2}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C369E
	mov r0, #8
	str r0, [r5,#8]
locret_80C369E:
	pop {pc}
.endfunc // sub_80C3678

.func
.thumb_func
sub_80C36A0:
	push {lr}
	ldr r1, [r5,#0x4c]
	mov r0, #0
	strb r0, [r1]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80C36A0

.func
.thumb_func
sub_80C36AE:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	push {r0}
	bl sub_800E2C2
	add r6, r0, #0
	pop {r0}
	push {r6}
	bl sub_80103BC
	add r7, r0, #0
	pop {r6}
	mov r4, #0x34 
	add r4, r4, r7
	ldmia r4!, {r0-r2}
	mov r4, #0xf0
	mul r4, r6
	lsl r4, r4, #0x10
	add r0, r0, r4
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	mov r0, #0x70 
	lsl r0, r0, #0x10
	add r2, r2, r0
	str r2, [r5,#0x3c]
	bl sub_800E2C0
	ldr r1, dword_80C36F8 // =0xc0000 
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80C36FC // =0xfffc0000 
	str r0, [r5,#0x48]
	mov r0, #0
	str r0, [r5,#0x44]
	pop {r4,r6,r7,pc}
dword_80C36F8: .word 0xC0000
dword_80C36FC: .word 0xFFFC0000
.endfunc // sub_80C36AE

	push {lr}
	ldr r0, [r5,#0x60]
	sub r0, #1
	str r0, [r5,#0x60]
	bne locret_80C370E
	mov r0, #0x20 
	str r0, [r5,#0x60]
locret_80C370E:
	pop {pc}
.func
.thumb_func
sub_80C3710:
	push {lr}
	push {r5}
	mov r0, #0x4c 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C3732
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r7, [r0,#0x4c]
	mov r1, #1
	strb r1, [r7]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C3732:
	pop {pc}
.endfunc // sub_80C3710

loc_80C3734:
	push {lr}
	ldr r1, off_80C3748 // =off_80C374C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C3748: .word off_80C374C
off_80C374C: .word sub_80C3758+1
	.word sub_80C37AC+1
	.word sub_80C3900+1
.func
.thumb_func
sub_80C3758:
	push {lr}
	mov r0, #0xc
	mov r1, #0x4c 
	bl sprite_decompress
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x4c 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C3758

	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_80C390E
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	mov r0, #0x17
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C37AC
	pop {pc}
.func
.thumb_func
sub_80C37AC:
	push {lr}
	bl loc_80C37BC
	pop {pc}
.endfunc // sub_80C37AC

	add r7, #0xb8
	lsr r4, r1, #0x20
	add r7, #0xbd
	lsr r4, r1, #0x20
loc_80C37BC:
	push {lr}
	ldr r1, off_80C37CC // =off_80C37D0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C37CC: .word off_80C37D0
off_80C37D0: .word sub_80C37EC+1
	.word sub_80C3816+1
	.word sub_80C383E+1
	.word sub_80C3852+1
	.word sub_80C38A0+1
	.word sub_80C38BA+1
	.word sub_80C38DA+1
.func
.thumb_func
sub_80C37EC:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C3808
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x15
	bl sub_80E05F6
	mov r0, #0x10
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C3808:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C3814
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C3814:
	pop {r4,pc}
.endfunc // sub_80C37EC

.func
.thumb_func
sub_80C3816:
	push {lr}
	ldr r0, [r5,#0x3c]
	ldr r1, dword_80C396C // =0x40000 
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	lsr r0, r0, #0x10
	cmp r0, #0x10
	bgt locret_80C383C
	mov r0, #1
	strh r0, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0xd4
	bl sound_play // () -> void
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C383C:
	pop {pc}
.endfunc // sub_80C3816

.func
.thumb_func
sub_80C383E:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C3850
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80C3850:
	pop {pc}
.endfunc // sub_80C383E

.func
.thumb_func
sub_80C3852:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C389E
	bl sub_800E2C0
	push {r0}
	ldrb r0, [r5,#0x16]
	bl sub_80103BC
	tst r0, r0
	pop {r6}
	beq loc_80C3890
	ldrh r4, [r0,#0x12]
	lsl r4, r4, #0x10
	mov r0, #0x10
	lsl r0, r0, #0x10
	mul r6, r0
	neg r6, r6
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	add r1, r1, r6
	mov r3, #0xa
	lsl r3, r3, #0x10
	mov r7, #0xc
	add r7, r7, r5
	bl sub_80DE112
loc_80C3890:
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #0xb2
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r5,#0xa]
locret_80C389E:
	pop {pc}
.endfunc // sub_80C3852

.func
.thumb_func
sub_80C38A0:
	push {lr}
	ldrb r0, [r5,#0xc]
	tst r0, r0
	bne locret_80C38B8
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C38B8
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r5,#0xa]
locret_80C38B8:
	pop {pc}
.endfunc // sub_80C38A0

.func
.thumb_func
sub_80C38BA:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C38D8
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #0x10
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r0, #0x18
	strh r0, [r5,#0xa]
locret_80C38D8:
	pop {pc}
.endfunc // sub_80C38BA

.func
.thumb_func
sub_80C38DA:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	beq loc_80C38EE
	ldr r1, [r5,#0x3c]
	ldr r0, dword_80C396C // =0x40000 
	add r1, r1, r0
	str r1, [r5,#0x3c]
	b locret_80C38FE
loc_80C38EE:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	mov r0, #8
	str r0, [r5,#8]
locret_80C38FE:
	pop {pc}
.endfunc // sub_80C38DA

.func
.thumb_func
sub_80C3900:
	push {lr}
	ldr r0, [r5,#0x4c]
	mov r1, #0
	strb r1, [r0]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80C3900

.func
.thumb_func
sub_80C390E:
	push {lr}
	ldrb r0, [r5,#0x16]
	bl sub_80103BC
	ldrh r0, [r0,#0x12]
	strh r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	bl sub_800E2C0
	ldr r1, dword_80C3940 // =0x210000 
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, dword_80C393C // =0x3c0000 
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x3a]
	add r0, #1
	strh r0, [r5,#0x3a]
	pop {pc}
	.word loc_80C3944
dword_80C393C: .word 0x3C0000
dword_80C3940: .word 0x210000
.endfunc // sub_80C390E

loc_80C3944:
	lsl r2, r0, #0x14
	push {lr}
	push {r5}
	mov r0, #0x4d 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C3968
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r7, [r0,#0x4c]
	mov r1, #1
	strb r1, [r7]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C3968:
	pop {pc}
	.balign 4, 0x00
dword_80C396C: .word 0x40000
loc_80C3970:
	push {lr}
	ldr r1, off_80C3984 // =off_80C3988 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80C3984: .word off_80C3988
off_80C3988: .word sub_80C39BA+1
	.word loc_80C3A24+1
	.word sub_80C3994+1
.func
.thumb_func
sub_80C3994:
	push {lr}
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x12
	bl sub_80E05F6
	ldr r0, [r5,#0x4c]
	bl sub_80C46B0
	mov r0, #0
	ldr r1, [r5,#0x40]
	strb r0, [r1]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80C3994

.func
.thumb_func
sub_80C39BA:
	push {lr}
	mov r0, #8
	mov r1, #0x13
	bl sprite_decompress
	mov r0, #0x80
	mov r1, #8
	mov r2, #0x13
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C39BA

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80C3A20 // =0x14011308 
	bl sub_80C468C
	str r0, [r5,#0x4c]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0x64 
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C3A24
	pop {pc}
	.byte 0, 0
dword_80C3A20: .word 0x14011308
loc_80C3A24:
	push {r6,lr}
	mov r6, #0x78 
	add r6, r6, r5
	ldr r1, off_80C3A44 // =off_80C3A48 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80C3A40
	mov r0, #8
	str r0, [r5,#8]
locret_80C3A40:
	pop {r6,pc}
	.balign 4, 0x00
off_80C3A44: .word off_80C3A48
off_80C3A48: .word sub_80C3A50+1
	.word sub_80C3A78+1
.func
.thumb_func
sub_80C3A50:
	push {r4,lr}
	ldrh r0, [r5,#0x20]
	cmp r0, #0x50 
	bgt loc_80C3A60
	ldr r0, [r5,#0x3c]
	ldr r1, dword_80C3A74 // =0x8000 
	add r0, r0, r1
	str r0, [r5,#0x3c]
loc_80C3A60:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C3A70
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C3A70:
	pop {r4,pc}
	.balign 4, 0x00
dword_80C3A74: .word 0x8000
.endfunc // sub_80C3A50

.func
.thumb_func
sub_80C3A78:
	push {r4,r6,r7,lr}
	ldr r1, off_80C3A88 // =off_80C3A8C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C3A88: .word off_80C3A8C
off_80C3A8C: .word sub_80C3A98+1
	.word sub_80C3ACA+1
	.word sub_80C3B06+1
.endfunc // sub_80C3A78

.func
.thumb_func
sub_80C3A98:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80C3AA8
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #0xa
	strb r0, [r5,#0x10]
loc_80C3AA8:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C3AC8
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0x18
	strh r0, [r5,#0x22]
	mov r0, #0x60 
	add r0, r0, r5
	mov r1, #0x12
	bl ZeroFillHalfword
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C3AC8:
	pop {pc}
.endfunc // sub_80C3A98

.func
.thumb_func
sub_80C3ACA:
	push {lr}
	bl sub_80C3CD0
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80C3AF8
	mov r0, #1
	strb r0, [r5,#0xb]
	bl sub_80C3B54
	bl sub_80C3B54
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne loc_80C3AF4
	mov r0, #0xc
	strh r0, [r5,#0x20]
	mov r0, #8
	strh r0, [r5,#0xa]
	b locret_80C3B04
loc_80C3AF4:
	mov r0, #8
	strh r0, [r5,#0x20]
loc_80C3AF8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C3B04
	mov r0, #0
	strb r0, [r5,#0xb]
locret_80C3B04:
	pop {pc}
.endfunc // sub_80C3ACA

.func
.thumb_func
sub_80C3B06:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80C3B22
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C3B2E
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0
	strb r0, [r5,#0x10]
loc_80C3B22:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C3B2E
	mov r0, #8
	str r0, [r5,#8]
locret_80C3B2E:
	pop {pc}
.endfunc // sub_80C3B06

.func
.thumb_func
sub_80C3B30:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x4f 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C3B52
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x40]
	mov r1, #1
	strb r1, [r7]
locret_80C3B52:
	pop {pc}
.endfunc // sub_80C3B30

.func
.thumb_func
sub_80C3B54:
	push {r4,r6,r7,lr}
	bl sub_80C3C2C
	cmp r0, #0
	beq locret_80C3BA6
	bl sub_8001532
	mov r1, #7
	and r0, r1
	cmp r0, #3
	blt loc_80C3B78
	ldr r3, off_80C3BAC // =off_80C3BB0 
	bl sub_800EC48
	bl sub_80C3BC0
	cmp r0, #0
	bne loc_80C3B80
loc_80C3B78:
	ldr r2, dword_80C3BA8 // =0x10000 
	mov r3, #0
	bl sub_80C3BC0
loc_80C3B80:
	cmp r0, #0
	beq locret_80C3BA6
	mov r2, #6
	mul r2, r1
	sub r2, #6
	add r2, r2, r0
	sub r2, #1
	mov r3, #0x60 
	add r3, r3, r2
	mov r2, #0x16
	strb r2, [r5,r3]
	ldr r6, [r5,#0x2c]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80C3CE4 // =0x1001400 
	bl sub_80C5F4A
	bl sub_80C3CA0
locret_80C3BA6:
	pop {r4,r6,r7,pc}
dword_80C3BA8: .word 0x10000
off_80C3BAC: .word off_80C3BB0
off_80C3BB0: .word LCDControl
	.byte 0, 0, 0, 0
	.word start_
	.byte 0, 0, 0, 0
.endfunc // sub_80C3B54

.func
.thumb_func
sub_80C3BC0:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	mov r7, sp
	mov r6, #0
	mov r4, #0x74 
	add r4, r4, r5
loc_80C3BCC:
	ldrb r0, [r4]
	cmp r0, #0
	beq loc_80C3C14
	push {r4}
	mov r1, #3
loc_80C3BD6:
	push {r0-r3,r6,r7}
	bl object_getPanelParameters
	add r4, r0, #0
	pop {r0-r3,r6,r7}
	tst r4, r3
	bne loc_80C3C0A
	and r4, r2
	cmp r4, r2
	bne loc_80C3C0A
	push {r0-r3}
	mov r2, #6
	mul r2, r1
	sub r2, #6
	add r2, r2, r0
	sub r2, #1
	mov r3, #0x60 
	add r3, r3, r2
	ldrb r2, [r5,r3]
	cmp r2, #0
	pop {r0-r3}
	bne loc_80C3C0A
	lsl r4, r1, #4
	orr r4, r0
	strb r4, [r7,r6]
	add r6, #1
loc_80C3C0A:
	sub r1, #1
	bne loc_80C3BD6
	pop {r4}
	add r4, #1
	b loc_80C3BCC
loc_80C3C14:
	add r0, r6, #0
	beq loc_80C3C28
	bl sub_8001532
	add r1, r6, #0
	svc 6
	ldrb r0, [r7,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80C3C28:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
.endfunc // sub_80C3BC0

.func
.thumb_func
sub_80C3C2C:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	ldrb r4, [r5,#0x12]
	mov r6, #0x74 
	add r6, r6, r5
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	cmp r0, #0
	bne loc_80C3C48
	cmp r4, #3
	bge loc_80C3C6C
	mov r4, #3
	b loc_80C3C6C
loc_80C3C48:
	cmp r4, #4
	ble loc_80C3C6C
	mov r4, #4
	b loc_80C3C6C
loc_80C3C50:
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r4, r0
	add r0, r4, #0
	ldr r3, off_80C3C8C // =dword_80C3C90 
	bl sub_800EC48
	add r7, sp, #0
	bl sub_800CFDC
	cmp r0, #0
	beq loc_80C3C6C
	strb r4, [r6]
	add r6, #1
loc_80C3C6C:
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	mov r2, #1
	eor r0, r2
	mov r2, #5
	mul r0, r2
	add r0, #1
	cmp r0, r4
	bne loc_80C3C50
	mov r0, #0
	strb r0, [r6]
	mov r0, #0x74 
	ldrb r0, [r5,r0]
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
off_80C3C8C: .word dword_80C3C90
dword_80C3C90: .word 0x20, 0x0, 0x0
	.word 0x20
.endfunc // sub_80C3C2C

.func
.thumb_func
sub_80C3CA0:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r4, #0x14
	lsl r4, r4, #0x10
	mul r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	add r1, r1, r4
	mov r0, #0x22 
	lsl r0, r0, #0x10
	add r3, r3, r0
	mov r0, #0xf
	bl sub_801BDDE
	ldrb r4, [r5,#0x16]
	ldrb r6, [r5,#0x17]
	eor r4, r6
	lsl r4, r4, #8
	add r4, #0x57 
	bl sub_80E05F6
	pop {r4,r6,pc}
.endfunc // sub_80C3CA0

.func
.thumb_func
sub_80C3CD0:
	mov r2, #0x60 
	add r2, r2, r5
	mov r3, #0x11
loc_80C3CD6:
	ldrb r0, [r2,r3]
	sub r1, r0, #1
	bmi loc_80C3CDE
	strb r1, [r2,r3]
loc_80C3CDE:
	sub r3, #1
	bpl loc_80C3CD6
	mov pc, lr
dword_80C3CE4: .word 0x1001400
.endfunc // sub_80C3CD0

loc_80C3CE8:
	push {lr}
	ldr r1, off_80C3CFC // =off_80C3D00 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80C3CFC: .word off_80C3D00
off_80C3D00: .word sub_80C3D32+1
	.word loc_80C3D9C+1
	.word sub_80C3D0C+1
.func
.thumb_func
sub_80C3D0C:
	push {lr}
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x12
	bl sub_80E05F6
	ldr r0, [r5,#0x4c]
	bl sub_80C46B0
	mov r0, #0
	ldr r1, [r5,#0x40]
	strb r0, [r1]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80C3D0C

.func
.thumb_func
sub_80C3D32:
	push {lr}
	mov r0, #8
	mov r1, #0x13
	bl sprite_decompress
	mov r0, #0x80
	mov r1, #8
	mov r2, #0x13
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C3D32

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80C3D98 // =0x14011308 
	bl sub_80C468C
	str r0, [r5,#0x4c]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0x32 
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C3D9C
	pop {pc}
	.balign 4, 0x00
dword_80C3D98: .word 0x14011308
loc_80C3D9C:
	push {r6,lr}
	mov r6, #0x78 
	add r6, r6, r5
	ldr r1, off_80C3DBC // =off_80C3DC0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80C3DB8
	mov r0, #8
	str r0, [r5,#8]
locret_80C3DB8:
	pop {r6,pc}
	.balign 4, 0x00
off_80C3DBC: .word off_80C3DC0
off_80C3DC0: .word sub_80C3DC8+1
	.word sub_80C3DDC+1
.func
.thumb_func
sub_80C3DC8:
	push {r4,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C3DDA
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C3DDA:
	pop {r4,pc}
.endfunc // sub_80C3DC8

.func
.thumb_func
sub_80C3DDC:
	push {r4,r6,r7,lr}
	ldr r1, off_80C3DEC // =off_80C3DF0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C3DEC: .word off_80C3DF0
off_80C3DF0: .word sub_80C3E00+1
	.word sub_80C3E2E+1
	.word sub_80C3E46+1
	.word sub_80C3E88+1
.endfunc // sub_80C3DDC

.func
.thumb_func
sub_80C3E00:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80C3E10
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #8
	strb r0, [r5,#0x10]
loc_80C3E10:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C3E2C
	mov r0, #0xd
	strb r0, [r5,#0x10]
	mov r0, #0xfd
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80C3E2C:
	pop {pc}
.endfunc // sub_80C3E00

.func
.thumb_func
sub_80C3E2E:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C3E44
	mov r0, #9
	strb r0, [r5,#0x10]
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80C3E44:
	pop {pc}
.endfunc // sub_80C3E2E

.func
.thumb_func
sub_80C3E46:
	push {lr}
	ldrh r0, [r5,#0x20]
	cmp r0, #0x69 
	bne loc_80C3E54
	mov r0, #0
	bl sub_80C3EBC
loc_80C3E54:
	cmp r0, #0x55 
	bne loc_80C3E5E
	mov r0, #1
	bl sub_80C3EBC
loc_80C3E5E:
	cmp r0, #0x41 
	bne loc_80C3E68
	mov r0, #0
	bl sub_80C3EBC
loc_80C3E68:
	cmp r0, #0x2d 
	bne loc_80C3E72
	mov r0, #1
	bl sub_80C3EBC
loc_80C3E72:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C3E86
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80C3E86:
	pop {pc}
.endfunc // sub_80C3E46

.func
.thumb_func
sub_80C3E88:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C3E96
	mov r0, #8
	str r0, [r5,#8]
locret_80C3E96:
	pop {pc}
.endfunc // sub_80C3E88

.func
.thumb_func
sub_80C3E98:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x50 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C3EBA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x40]
	mov r1, #1
	strb r1, [r7]
locret_80C3EBA:
	pop {pc}
.endfunc // sub_80C3E98

.func
.thumb_func
sub_80C3EBC:
	push {r4,r6,r7,lr}
	lsl r6, r0, #1
	sub r6, #1
	mov r0, #0xff
	and r6, r0
	mov r4, #2
	lsl r4, r4, #8
	add r4, r4, r6
	lsl r4, r4, #8
	add r4, #3
	ldr r6, [r5,#0x2c]
	mov r2, #0
	mov r3, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80DD5B4
	pop {r4,r6,r7,pc}
.endfunc // sub_80C3EBC

loc_80C3EE0:
	push {lr}
	ldr r1, off_80C3EF0 // =off_80C3EF4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80C3EF0: .word off_80C3EF4
off_80C3EF4: .word sub_80C3F00+1
	.word sub_80C3F52+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C3F00:
	push {r4-r7,lr}
	bl sub_800E2AC
	ldrb r1, [r5,#4]
	ldrb r2, [r5,#5]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C3F00

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x64]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	ldrb r0, [r5,#7]
	ldrb r1, [r5,#6]
	cmp r1, #0
	bne loc_80C3F3C
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
loc_80C3F3C:
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C3F52
	pop {r4-r7,pc}
.func
.thumb_func
sub_80C3F52:
	push {r4-r7,lr}
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x6c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, [r5,#0x68]
	cmp r0, #0
	beq loc_80C3F80
	ldr r1, dword_80C40C8 // =0x10000 
	ldr r0, [r5,#0x38]
	sub r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x3c]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	b loc_80C3F8E
loc_80C3F80:
	ldr r1, dword_80C40C8 // =0x10000 
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
loc_80C3F8E:
	ldr r0, [r5,#0x78]
	cmp r0, #0
	bne loc_80C3FA8
	ldr r0, [r5,#0x4c]
	mov r2, #2
	mvn r2, r2
	ldrb r1, [r5]
	and r1, r2
	ldrb r2, [r0]
	mov r3, #2
	and r2, r3
	orr r1, r2
	strb r1, [r5]
loc_80C3FA8:
	ldrb r0, [r5,#6]
	cmp r0, #0
	bne loc_80C3FB8
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
loc_80C3FB8:
	ldr r0, [r5,#0x78]
	cmp r0, #0
	bne loc_80C3FC8
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
loc_80C3FC8:
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x60]
	cmp r0, #0
	bne loc_80C3FF0
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
loc_80C3FF0:
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r0, [r5,#0x70]
	tst r0, r0
	beq loc_80C4004
	bl sub_80C409C
loc_80C4004:
	bl battle_isTimeStop
	bne locret_80C4036
	bl battle_isPaused
	bne locret_80C4036
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80C40CC // =0x80110c00 
	tst r0, r1
	bne locret_80C4036
	ldr r0, [r5,#0x74]
	tst r0, r0
	beq loc_80C402C
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x24]
	cmp r0, #0
	bgt loc_80C402C
	b locret_80C4036
loc_80C402C:
	bl sub_801BBAC
	b locret_80C4036
	bl object_freeMemory
locret_80C4036:
	pop {r4-r7,pc}
.endfunc // sub_80C3F52

.func
.thumb_func
sub_80C4038:
	push {r4,lr}
	push {r0-r3,r5}
	mov r0, #0x54 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1-r5}
	beq locret_80C4070
	str r1, [r0,#0x6c]
	str r2, [r0,#0x68]
	str r3, [r0,#0x64]
	str r4, [r0,#0x60]
	ldr r1, [r5,#0x34]
	str r1, [r0,#0x34]
	ldr r1, [r5,#0x38]
	str r1, [r0,#0x38]
	ldr r1, [r5,#0x3c]
	str r1, [r0,#0x3c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
	mov r1, #0
	str r1, [r0,#0x70]
	str r1, [r0,#0x74]
locret_80C4070:
	pop {r4,pc}
.endfunc // sub_80C4038

.func
.thumb_func
sub_80C4072:
	tst r0, r0
	beq locret_80C407A
	mov r1, #8
	str r1, [r0,#8]
locret_80C407A:
	mov pc, lr
.endfunc // sub_80C4072

	tst r0, r0
	beq locret_80C4084
	mov r1, #1
	str r1, [r0,#0x70]
locret_80C4084:
	mov pc, lr
	tst r0, r0
	beq locret_80C408E
	mov r1, #1
	str r1, [r0,#0x74]
locret_80C408E:
	mov pc, lr
	tst r0, r0
	beq locret_80C4098
	mov r1, #1
	str r1, [r0,#0x78]
locret_80C4098:
	mov pc, lr
	.balign 4, 0x00
.func
.thumb_func
sub_80C409C:
	push {r4-r7,lr}
	bl sub_800E2AC
	ldrb r0, [r5,#0x13]
	mov r1, #3
	sub r0, r1, r0
	ldr r1, dword_80C40D0 // =0x180000 
	mul r0, r1
	ldr r1, [r5,#0x38]
	ldr r2, [r5,#0x3c]
	add r1, r1, r0
	str r1, [r5,#0x38]
	add r2, r2, r0
	str r2, [r5,#0x3c]
	ldrh r0, [r5,#0x3a]
	add r0, #1
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	add r0, #1
	strh r0, [r5,#0x3e]
	pop {r4-r7,pc}
	.balign 4, 0x00
dword_80C40C8: .word 0x10000
dword_80C40CC: .word 0x80110C00
dword_80C40D0: .word 0x180000
dword_80C40D4: .word 0x2110
.endfunc // sub_80C409C

loc_80C40D8:
	push {lr}
	ldr r1, off_80C40E8 // =off_80C40EC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C40E8: .word off_80C40EC
off_80C40EC: .word sub_80C40F8+1
	.word sub_80C4146+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C40F8:
	push {lr}
	bl sub_800E2AC
	ldrb r0, [r5,#4]
	add r0, r0, r0
	ldr r1, off_80C4210 // =dword_80C40D4 
	add r0, r0, r1
	ldrb r1, [r0]
	ldrb r2, [r0,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C40F8

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80C4146:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldr r0, [r5,#0x4c]
	mov r2, #2
	mvn r2, r2
	ldrb r1, [r5]
	and r1, r2
	ldrb r2, [r0]
	mov r3, #2
	and r2, r3
	orr r1, r2
	strb r1, [r5]
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r0, [r5,#0x60]
	tst r0, r0
	bne loc_80C41C0
	mov r4, #0
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#0x10]
	mov r1, #0
	cmp r0, r1
	beq loc_80C41BE
	mov r4, #0xff
loc_80C41BE:
	strh r4, [r5,#0x3e]
loc_80C41C0:
	bl battle_isTimeStop
	bne locret_80C41D6
	bl battle_isPaused
	bne locret_80C41D6
	bl sub_801BBAC
	b locret_80C41D6
	bl object_freeMemory
locret_80C41D6:
	pop {r4,pc}
.endfunc // sub_80C4146

.func
.thumb_func
sub_80C41D8:
	push {lr}
	push {r5}
	mov r0, #0x55 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C4202
	ldr r1, [r5,#0x34]
	str r1, [r0,#0x34]
	ldr r1, [r5,#0x38]
	str r1, [r0,#0x38]
	ldr r1, [r5,#0x3c]
	str r1, [r0,#0x3c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80C4202:
	pop {pc}
.endfunc // sub_80C41D8

.func
.thumb_func
sub_80C4204:
	tst r0, r0
	beq locret_80C420C
	mov r1, #8
	str r1, [r0,#8]
locret_80C420C:
	mov pc, lr
	.byte 0, 0
off_80C4210: .word dword_80C40D4
	.word 0x1010101, 0x1010101, 0x1010101, 0x1, 0x1010101, 0x1010101
	.word 0x1010101, 0x1010101, 0x1010101, 0x1010101, 0x1010101, 0x1010101
	.word 0x1010101, 0x1, 0x1010101, 0x1010101, 0x101, 0x1010101
	.word 0x1010101, 0x1010101, 0x1010101, 0x1010101, 0x10101, 0x0
	.word 0x0, 0x0, 0x0, 0x0
	.word 0x1010101, 0x1010101, 0x1010101, 0x1010101, 0x1010101
	.word 0x0, 0x0, 0x0, 0x0, 0x0
	.word 0x0, 0x0, 0x0, 0x0, 0x0
dword_80C42C0: .word 0x1010101, 0x1010101, 0x1010101, 0x1010101, 0x10101
	.word 0x80C4214, 0x80C4224, 0x80C4234, 0x80C424C, 0x80C4258
	.word 0x80C4258, 0x80C4270, 0x80C4284, 0x80C4258, 0x80C4258
	.word 0x80C4258, 0x80C4298, 0x80C4258, 0x80C4258, 0x80C4258
	.word 0x80C42B4, 0x80C42C0, 0x80C4258, 0x80C4258, 0xC1208
	.word 0xD081910, 0x1E0C040C, 0xE080E08, 0x530C510C, 0x4E10520C
	.word 0x630C540C, 0x10080D0C, 0x550C1308, 0x110C
.endfunc // sub_80C4204

loc_80C4348:
	push {lr}
	ldr r1, off_80C4358 // =off_80C435C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C4358: .word off_80C435C
off_80C435C: .word loc_80C4368+1
	.word loc_80C43C4+1
	.word object_freeMemory+1
loc_80C4368:
	push {lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80C43C0 // =dword_80C42C0+20 
	ldr r0, [r1,r0]
	str r0, [r5,#0x54]
	ldrb r0, [r5,#4]
	add r0, r0, r0
	.word 0x18404910
	ldrb r1, [r0]
	ldrb r2, [r0,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002F90 // () -> void
	mov r0, #0
	ldrb r1, [r5,#5]
	cmp r1, #0
	bne loc_80C439C
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
loc_80C439C:
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#7]
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C43C4
	pop {pc}
	.balign 4, 0x00
	.word dword_80C42C0+0x60
off_80C43C0: .word dword_80C42C0+0x14
loc_80C43C4:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	ldrb r0, [r4,#0x10]
	ldrb r1, [r5,#7]
	add r0, r0, r1
	strb r0, [r5,#0x10]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldr r0, [r5,#0x60]
	cmp r0, #0
	beq loc_80C43F4
	ldr r0, [r5,#0x3c]
	ldr r1, dword_80C452C // =0x10000 
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, [r5,#0x38]
	ldr r1, dword_80C452C // =0x10000 
	add r0, r0, r1
	str r0, [r5,#0x38]
	b loc_80C441C
loc_80C43F4:
	ldrb r0, [r5,#0x10]
	ldrb r1, [r5,#7]
	sub r0, r0, r1
	ldr r1, [r5,#0x54]
	ldrb r0, [r1,r0]
	cmp r0, #0
	bne loc_80C4414
	ldr r0, [r5,#0x3c]
	ldr r1, dword_80C452C // =0x10000 
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, [r5,#0x38]
	ldr r1, dword_80C452C // =0x10000 
	sub r0, r0, r1
	str r0, [r5,#0x38]
	b loc_80C441C
loc_80C4414:
	ldr r1, [r4,#0x3c]
	str r1, [r5,#0x3c]
	ldr r1, [r4,#0x38]
	str r1, [r5,#0x38]
loc_80C441C:
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C4434
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
loc_80C4434:
	ldrb r1, [r5,#5]
	cmp r1, #0
	bne loc_80C4444
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
loc_80C4444:
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r1, off_80C447C // =off_80C4480 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,pc}
off_80C447C: .word off_80C4480
off_80C4480: .word sub_80C4484+1
.func
.thumb_func
sub_80C4484:
	push {lr}
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldrb r0, [r5,#6]
	tst r0, r0
	bne loc_80C44A2
	bl battle_isTimeStop
	bne locret_80C44A6
	bl sub_801BBAC
	b locret_80C44A6
loc_80C44A2:
	bl sub_801BCD0
locret_80C44A6:
	pop {pc}
.endfunc // sub_80C4484

.func
.thumb_func
sub_80C44A8:
	push {lr}
	push {r5}
	mov r0, #0x56 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C44C6
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80C44C6:
	pop {pc}
.endfunc // sub_80C44A8

.func
.thumb_func
sub_80C44C8:
	tst r0, r0
	beq locret_80C44D0
	mov r1, #8
	str r1, [r0,#8]
locret_80C44D0:
	mov pc, lr
.endfunc // sub_80C44C8

.func
.thumb_func
sub_80C44D2:
	push {r5,lr}
	tst r0, r0
	beq locret_80C44E2
	mov r1, #0xff
	strb r1, [r0,#0x11]
	add r5, r0, #0
	bl sub_801BCD0
locret_80C44E2:
	pop {r5,pc}
.endfunc // sub_80C44D2

	push {r5,lr}
	tst r0, r0
	beq locret_80C44F8
	mov r1, #1
	strb r1, [r0,#0xb]
	add r5, r0, #0
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
locret_80C44F8:
	pop {r5,pc}
	push {r5,lr}
	tst r0, r0
	beq locret_80C450E
	mov r1, #1
	strb r1, [r0,#0xb]
	add r5, r0, #0
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
locret_80C450E:
	pop {r5,pc}
	tst r0, r0
	beq locret_80C4518
	mov r1, #0
	strb r1, [r0,#0xb]
locret_80C4518:
	mov pc, lr
	tst r0, r0
	beq locret_80C4524
	ldrb r2, [r0,#7]
	add r1, r1, r2
	strb r1, [r0,#7]
locret_80C4524:
	mov pc, lr
.func
.thumb_func
sub_80C4526:
	str r1, [r0,#0x60]
	mov pc, lr
	.balign 4, 0x00
dword_80C452C: .word 0x10000
.endfunc // sub_80C4526

loc_80C4530:
	push {lr}
	ldr r1, off_80C4540 // =off_80C4544 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80C4540: .word off_80C4544
off_80C4544: .word sub_80C4550+1
	.word loc_80C458C+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C4550:
	push {lr}
	mov r0, #0x80
	ldrb r1, [r5,#4]
	ldrb r2, [r5,#5]
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C4550

	bl sub_8002F90 // () -> void
	bl sub_80C46CC
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#0x10]
	ldrb r1, [r5,#7]
	add r0, r0, r1
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C458C
	pop {pc}
loc_80C458C:
	push {lr}
	ldr r4, [r5,#0x4c]
	ldrb r0, [r4,#0x10]
	ldrb r1, [r5,#7]
	add r0, r0, r1
	strb r0, [r5,#0x10]
	ldrb r1, [r5,#0x11]
	cmp r0, r1
	beq loc_80C45A6
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
loc_80C45A6:
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	ldr r0, [r5,#0x60]
	cmp r0, #0
	beq loc_80C45B8
	ldr r0, dword_80C46F4 // =0x10000 
	sub r2, r2, r0
	sub r3, r3, r0
loc_80C45B8:
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	bl sub_80C46CC
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r1, off_80C4610 // =off_80C4614 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C4610: .word off_80C4614
off_80C4614: .word sub_80C461C+1
	.word sub_80C464C+1
.func
.thumb_func
sub_80C461C:
	push {lr}
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	bl sub_800139A
	lsr r0, r0, #2
	bcc locret_80C464A
	ldrb r0, [r5,#6]
	cmp r0, #0
	bne loc_80C463E
	ldrb r0, [r5]
	mov r1, #4
	bic r0, r1
	strb r0, [r5]
loc_80C463E:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	bl sub_80C464C
locret_80C464A:
	pop {pc}
.endfunc // sub_80C461C

.func
.thumb_func
sub_80C464C:
	push {lr}
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r0, [r5,#0x6c]
	cmp r0, #0
	beq loc_80C466A
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80C46F8 // =0x100800 
	tst r0, r1
	bne locret_80C468A
loc_80C466A:
	ldrb r0, [r5,#6]
	cmp r0, #1
	beq loc_80C4680
	cmp r0, #2
	beq loc_80C4686
	bl battle_isTimeStop
	bne locret_80C468A
	bl sub_801BBAC
	b locret_80C468A
loc_80C4680:
	bl sub_801BBF4
	b locret_80C468A
loc_80C4686:
	bl sub_801BCD0
locret_80C468A:
	pop {pc}
.endfunc // sub_80C464C

.func
.thumb_func
sub_80C468C:
	push {lr}
	push {r2,r3,r5}
	mov r0, #0x57 
	bl object_spawnType1
	add r0, r5, #0
	pop {r2,r3,r5}
	beq locret_80C46AE
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r2, [r0,#0x60]
	str r3, [r0,#0x64]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80C46AE:
	pop {pc}
.endfunc // sub_80C468C

.func
.thumb_func
sub_80C46B0:
	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
.endfunc // sub_80C46B0

.func
.thumb_func
sub_80C46B6:
	tst r0, r0
	beq locret_80C46BE
	mov r1, #0xff
	strb r1, [r0,#0x11]
locret_80C46BE:
	mov pc, lr
.endfunc // sub_80C46B6

.func
.thumb_func
sub_80C46C0:
	mov r1, #1
	str r1, [r0,#0x68]
	mov pc, lr
.endfunc // sub_80C46C0

.func
.thumb_func
sub_80C46C6:
	mov r1, #1
	str r1, [r0,#0x6c]
	mov pc, lr
.endfunc // sub_80C46C6

.func
.thumb_func
sub_80C46CC:
	push {r4,lr}
	ldr r0, [r5,#0x64]
	cmp r0, #0xff
	bne loc_80C46DC
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	b locret_80C46F2
loc_80C46DC:
	ldr r1, [r5,#0x68]
	cmp r1, #0
	beq locret_80C46F2
	add r4, r0, #0
	mov r1, #0xe
	bl sub_8013774
	cmp r0, #0xff
	bne loc_80C46F0
	mov r4, #0xc
loc_80C46F0:
	add r0, r4, #0
locret_80C46F2:
	pop {r4,pc}
dword_80C46F4: .word 0x10000
dword_80C46F8: .word 0x100800
.endfunc // sub_80C46CC

loc_80C46FC:
	push {lr}
	ldr r1, off_80C470C // =off_80C4710 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C470C: .word off_80C4710
off_80C4710: .word sub_80C471C+1
	.word sub_80C4766+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C471C:
	push {lr}
	bl sub_800E2AC
	mov r1, #0x10
	mov r2, #0x5a 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C471C

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C4766
	pop {pc}
.func
.thumb_func
sub_80C4766:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldr r0, [r5,#0x4c]
	mov r2, #2
	mvn r2, r2
	ldrb r1, [r5]
	and r1, r2
	ldrb r2, [r0]
	mov r3, #2
	and r2, r3
	orr r1, r2
	strb r1, [r5]
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#0x10]
	ldrb r1, [r5,#5]
	cmp r0, r1
	bne loc_80C47E6
	bl battle_isTimeStop
	bne locret_80C47EA
	bl battle_isPaused
	bne locret_80C47EA
	bl sub_801BBAC
	b locret_80C47EA
loc_80C47E6:
	bl object_freeMemory
locret_80C47EA:
	pop {r4,pc}
.endfunc // sub_80C4766

.func
.thumb_func
sub_80C47EC:
	push {lr}
	push {r5}
	mov r0, #0x58 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C481A
	ldr r1, [r5,#0x34]
	str r1, [r0,#0x34]
	ldr r1, [r5,#0x38]
	str r1, [r0,#0x38]
	ldr r1, [r5,#0x3c]
	str r1, [r0,#0x3c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x10]
	strb r1, [r0,#5]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80C481A:
	pop {pc}
.endfunc // sub_80C47EC

	tst r0, r0
	beq locret_80C4824
	mov r1, #8
	str r1, [r0,#8]
locret_80C4824:
	mov pc, lr
	.balign 4, 0x00
loc_80C4828:
	push {lr}
	ldr r1, off_80C4838 // =off_80C483C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C4838: .word off_80C483C
off_80C483C: .word sub_80C4848+1
	.word loc_80C48FC+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C4848:
	push {r4,r7,lr}
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80C4872
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	bl sub_800FC9E
	b loc_80C487C
loc_80C4872:
	ldrh r0, [r4,#0x28]
	bl sub_800F26C
	add r2, r1, #0
	add r1, r0, #0
loc_80C487C:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C4848

	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3a]
	add r0, #1
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	add r0, #1
	strh r0, [r5,#0x3e]
	push {r5}
	add r5, r4, #0
	bl sub_801002C
	pop {r5}
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	bl sub_8010DF6
	ldr r0, [r5,#0x50]
	cmp r0, #0
	beq loc_80C48DE
	mov r1, #1
	strb r1, [r0,#6]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
loc_80C48DE:
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C48FC
	pop {r4,r7,pc}
	ldr r0, [r5,#0x60]
	mov r1, #0
	strb r1, [r0]
	bl object_freeMemory
	pop {r4,r7,pc}
loc_80C48FC:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80C4918
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C4918:
	ldr r1, off_80C492C // =off_80C4930 
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80C492C: .word off_80C4930
off_80C4930: .word sub_80C493C+1
	.word sub_80C49E4+1
	.word loc_80C4A52+1
.func
.thumb_func
sub_80C493C:
	push {lr}
	ldr r1, off_80C494C // =off_80C4950 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C494C: .word off_80C4950
off_80C4950: .word sub_80C4958+1
	.word sub_80C49A4+1
.endfunc // sub_80C493C

.func
.thumb_func
sub_80C4958:
	push {lr}
	bl sub_8002DD8
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C4978
	ldr r0, [r5,#0x4c]
	mov r1, #0xf
	bl sub_80E1352
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #2
	strh r0, [r5,#0x22]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C4978:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bge loc_80C4990
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #2
	strh r0, [r5,#0x22]
	bl sprite_forceWhitePallete
	mov r0, #0xd1
	bl sound_play // () -> void
loc_80C4990:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x78 
	blt locret_80C49A2
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C49A2:
	pop {pc}
.endfunc // sub_80C4958

.func
.thumb_func
sub_80C49A4:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C49B4
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C49B4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C49E2
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldr r0, [r5,#0x4c]
	bl sub_80E13DC
	ldr r0, [r5,#0x60]
	mov r1, #0
	strb r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
locret_80C49E2:
	pop {r4,pc}
.endfunc // sub_80C49A4

.func
.thumb_func
sub_80C49E4:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C4A0E
	ldr r0, [r5,#0x4c]
	mov r1, #0xf
	bl sub_80E1352
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_80101C4
	pop {r5}
	mov r0, #0
	strh r0, [r5,#0x20]
	bl sprite_forceWhitePallete
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C4A0E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C4A50
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldr r0, [r5,#0x4c]
	bl sub_80E13DC
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r0, #0xf0
	add r0, r0, r0
	bl sub_80101AE
	pop {r5}
	mov r0, #0x93
	bl sound_play // () -> void
	ldr r0, [r5,#0x60]
	mov r1, #0
	strb r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
locret_80C4A50:
	pop {r4,pc}
.endfunc // sub_80C49E4

loc_80C4A52:
	push {lr}
	ldr r1, off_80C4A60 // =off_80C4A64 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C4A60: .word off_80C4A64
off_80C4A64: .word sub_80C4A6C+1
	.word sub_80C4AAC+1
.func
.thumb_func
sub_80C4A6C:
	push {r4,lr}
	bl sub_8002DD8
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C4A94
	ldr r0, [r5,#0x4c]
	mov r1, #0xf
	bl sub_80E1352
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0x77 
	bl sound_play // () -> void
	mov r0, #0xd1
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C4A94:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80C4AA6
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r4,pc}
loc_80C4AA6:
	bl sprite_forceWhitePallete
	pop {r4,pc}
.endfunc // sub_80C4A6C

.func
.thumb_func
sub_80C4AAC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C4ABC
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C4ABC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C4AEA
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldr r0, [r5,#0x4c]
	bl sub_80E13DC
	ldr r0, [r5,#0x60]
	mov r1, #0
	strb r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
locret_80C4AEA:
	pop {pc}
.endfunc // sub_80C4AAC

.func
.thumb_func
sub_80C4AEC:
	push {lr}
	push {r0,r5}
	mov r0, #0x5d 
	bl object_spawnType1
	add r0, r5, #0
	pop {r1,r5}
	beq locret_80C4B14
	str r1, [r0,#0x60]
	mov r2, #1
	strb r2, [r1]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	push {r0}
	ldrb r0, [r5,#0x16]
	bl sub_80103BC
	add r1, r0, #0
	pop {r0}
	str r1, [r0,#0x4c]
locret_80C4B14:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80C4AEC

loc_80C4B18:
	push {lr}
	ldr r1, off_80C4B38 // =off_80C4B3C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl battle_isTimeStop
	bne locret_80C4B34
	bl battle_isPaused
	bne locret_80C4B34
	bl sub_801BC64
locret_80C4B34:
	pop {pc}
	.balign 4, 0x00
off_80C4B38: .word off_80C4B3C
off_80C4B3C: .word sub_80C4B48+1
	.word sub_80C4B84+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80C4B48:
	push {r4,lr}
	mov r0, #0x80
	mov r1, #0x14
	mov r2, #0x16
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C4B48

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_80C4C52
	strb r1, [r5,#0x10]
	strb r1, [r5,#0x11]
	add r0, r1, #0
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C4B84
	pop {r4,pc}
.func
.thumb_func
sub_80C4B84:
	push {lr}
	bl sub_80C4C52
	strb r1, [r5,#0x10]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80C4BA8
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	b loc_80C4BBE
loc_80C4BA8:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0xc]
	tst r0, r0
	bne loc_80C4BBE
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C4BBE:
	bl nullsub_10
	push {r5}
	ldr r5, [r5,#0x4c]
	bl object_getFlag // () -> int
	mov r1, #4
	tst r0, r1
	pop {r5}
	beq loc_80C4BDA
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C4BDA:
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrb r0, [r4,#0x17]
	strb r0, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x64]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80C4C0C
	ldrb r0, [r5,#0x16]
	bl sub_8015B54
	cmp r0, #2
	beq locret_80C4C10
	ldr r0, [r5,#0x64]
	mov r1, #0
	str r1, [r0]
loc_80C4C0C:
	bl object_freeMemory
locret_80C4C10:
	pop {pc}
.endfunc // sub_80C4B84

.func
.thumb_func
sub_80C4C12:
	push {lr}
	push {r5}
	mov r0, #0x5e 
	bl object_spawnType1
	add r0, r5, #0
	pop {r5}
	beq locret_80C4C38
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x64]
	str r0, [r7]
	mov r1, #1
	strb r1, [r0,#0xc]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80C4C38:
	pop {pc}
.endfunc // sub_80C4C12

.func
.thumb_func
sub_80C4C3A:
	mov r1, #8
	str r1, [r0,#8]
	ldr r2, [r0,#0x64]
	mov r1, #0
	str r1, [r2]
	mov pc, lr
.endfunc // sub_80C4C3A

.func
.thumb_func
sub_80C4C46:
	mov r1, #0
	strb r1, [r0,#0xc]
	mov pc, lr
.endfunc // sub_80C4C46

.func
.thumb_func
sub_80C4C4C:
	mov r1, #1
	strb r1, [r0,#0xc]
	mov pc, lr
.endfunc // sub_80C4C4C

.func
.thumb_func
sub_80C4C52:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x28]
	bl sub_800F29C
	cmp r1, #0x23 
	blt locret_80C4C76
	add r0, r1, #0
	mov r1, #0xc
	cmp r0, #0x23 
	beq locret_80C4C76
	cmp r0, #0x2f 
	beq locret_80C4C76
	cmp r0, #0x24 
	beq loc_80C4C74
	cmp r0, #0x29 
	ble locret_80C4C76
loc_80C4C74:
	mov r1, #0xd
locret_80C4C76:
	pop {pc}
off_80C4C78: .word 0x504
	.word 0xFFFF00, 0xFF, 0x30504, 0x1FFFF07, 0xFF, 0x10504
	.word 0x1000C00, 0xFF, 0x504, 0x1FFFF05, 0xFF, 0x20610512
	.word 0xFFFF07, 0xFF, 0x10000506, 0xFFFF0A, 0xFF, 0x504
	.word 0xFFFF05, 0xFF, 0x504, 0xFFFF00, 0xFF, 0x504
	.word 0xFFFF00, 0x4, 0x508, 0xFFFF09, 0xFF, 0x504
	.word 0xFFFF00, 0x20FF, 0x504, 0xFFFF00, 0x30FF, 0x30504
	.word 0x1FFFF0B, 0xFF, 0x504, 0xFFFF00, 0x6, 0x504
	.word 0xFFFF00, 0x7, 0x10504, 0xFFFF00, 0xFF, 0x504
	.word 0xFFFF0C, 0xFF, 0x504, 0xFFFF00, 0x10FF, 0x504
	.word 0xFFFF05, 0x20FF, 0x504, 0xFFFF05, 0x10FF, 0x504
	.word 0xFFFF05, 0x30FF, 0x504, 0xFFFF05, 0x3, 0x504
	.word 0xFFFF05, 0x1, 0x504, 0xFFFF05, 0x8, 0x504
	.word 0xFFFF05, 0x4, 0x547, 0xFFFF05, 0xFF, 0x504
	.word 0xFFFF05, 0xFB00FF, 0x504, 0xFFFF05, 0x11800FF, 0x10504
	.word 0xFFFF05, 0xFF, 0x30504, 0xFFFF05, 0xFF, 0x610504
	.word 0xFFFF00, 0xFF, 0x490504, 0xFFFF00, 0xFF, 0x450504
	.word 0xFFFF05, 0xFF, 0x504, 0xFFFF05, 0x60FF, 0x504
	.word 0xFFFF05, 0xB, 0x504, 0xFFFF05, 0xF400FF, 0x504
	.word 0xFFFF05, 0xC, 0x504, 0xFFFF05, 0x6, 0x504
	.word 0xFFFF05, 0x50FF, 0x504, 0xFFFF05, 0x7
.endfunc // sub_80C4C52

loc_80C4E58:
	push {lr}
	ldr r1, off_80C4E6C // =off_80C4E70 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C4E6C: .word off_80C4E70
off_80C4E70: .word sub_80C4E7C+1
	.word sub_80C4F02+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C4E7C:
	push {r7,lr}
	ldrb r0, [r5,#4]
	mov r1, #0xc
	mul r0, r1
	ldr r7, off_80C5084 // =off_80C4C78 
	add r7, r7, r0
	str r7, [r5,#0x4c]
	ldrb r1, [r7,#5]
	cmp r1, #0xff
	beq loc_80C4EB0
	ldrb r2, [r7,#6]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r7,#7]
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
loc_80C4EB0:
	ldrb r0, [r7,#3]
	strb r0, [r5,#0xe]
	bl sub_800E29C // () -> void
	bl sub_80C5090
	mov r0, #1
	strh r0, [r5,#0x22]
	bl sub_8019892
	tst r0, r0
	bne loc_80C4ECE
	bl object_freeMemory
	pop {r7,pc}
loc_80C4ECE:
	ldrb r1, [r7]
	ldrb r2, [r7,#1]
	ldrb r3, [r7,#2]
	bl sub_8019FB4
	ldrb r0, [r7,#4]
	bl sub_801A140
	ldrb r0, [r7,#9]
	cmp r0, #0
	beq loc_80C4EE8
	bl sub_801A258
loc_80C4EE8:
	ldrb r0, [r7,#0xa]
	ldrb r1, [r7,#0xb]
	cmp r0, #0
	beq loc_80C4EF4
	bl sub_801A4D0
loc_80C4EF4:
	bl sub_801A018
.endfunc // sub_80C4E7C

	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C4F02
	pop {r7,pc}
.func
.thumb_func
sub_80C4F02:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80C4F02

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C4FF0
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x70]
	tst r1, r1
	bne loc_80C4F70
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C4F2A
	ldrh r0, [r5,#0x22]
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C4F2A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80C4FF8
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #5
	ldrsb r2, [r5,r2]
	add r1, r1, r2
	strb r1, [r5,#0x13]
	mov r2, #0
	strb r2, [r5,#5]
	bl object_isValidPanel
	tst r0, r0
	bne loc_80C4F5E
	ldrb r0, [r5,#4]
	cmp r0, #0xc
	bne loc_80C4FF0
	bl sub_80C5014
	b loc_80C4FF0
loc_80C4F5E:
	bl sub_800E29C // () -> void
	bl sub_80C5090
	bl sub_801A04C
	mov r0, #0
	strb r0, [r5,#0xb]
	b loc_80C4FF8
loc_80C4F70:
	ldrb r0, [r5,#4]
	cmp r0, #0xc
	bne loc_80C4F7A
	bl sub_80C5050
loc_80C4F7A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#4]
	cmp r2, #7
	beq loc_80C4F8A
	cmp r2, #0x15
	beq loc_80C4F8A
	b loc_80C4F90
loc_80C4F8A:
	bl object_crackPanel
	b loc_80C4FF0
loc_80C4F90:
	cmp r2, #0x16
	bne loc_80C4F9A
	bl object_breakPanel_dup2
	b loc_80C4FF0
loc_80C4F9A:
	cmp r2, #0x22 
	bne loc_80C4FBA
	push {r0,r1}
	bl object_isPanelSolid
	pop {r0,r1}
	beq loc_80C4FF0
	ldr r3, [r5,#0x4c]
	ldrb r2, [r3,#8]
	ldrb r3, [r5,#0x16]
	cmp r3, #0
	beq loc_80C4FB4
	mov r2, #0xc
loc_80C4FB4:
	bl object_setPanelType
	b loc_80C4FF0
loc_80C4FBA:
	cmp r2, #0x24 
	bne loc_80C4FDA
	push {r0,r1}
	bl object_isPanelSolid
	pop {r0,r1}
	beq loc_80C4FF0
	ldr r3, [r5,#0x4c]
	ldrb r2, [r3,#8]
	ldrb r3, [r5,#0x16]
	cmp r3, #0
	beq loc_80C4FD4
	mov r2, #0xb
loc_80C4FD4:
	bl object_setPanelType
	b loc_80C4FF0
loc_80C4FDA:
	push {r0,r1}
	bl object_isPanelSolid
	pop {r0,r1}
	beq loc_80C4FF0
	ldr r3, [r5,#0x4c]
	ldrb r2, [r3,#8]
	cmp r2, #0xff
	beq loc_80C4FF0
	bl object_setPanelType
loc_80C4FF0:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
loc_80C4FF8:
	bl sub_801A018
	pop {pc}
.func
.thumb_func
sub_80C4FFE:
	push {lr}
	push {r0-r2,r5,r6}
	mov r0, #0
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5,r6}
	beq locret_80C5012
	bl sub_801155A
locret_80C5012:
	pop {pc}
.endfunc // sub_80C4FFE

.func
.thumb_func
sub_80C5014:
	push {r4,r6,r7,lr}
	mov r0, #3
	mov r1, #0x28 
	bl sub_80302A8
	mov r0, #0xc3
	bl sound_play // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	lsl r0, r0, #1
	ldrb r1, [r5,#0x12]
	sub r0, r1, r0
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	ldrb r4, [r5,#0x16]
	mov r2, #0
	mov r3, #0x11
	mov r7, #0
	bl sub_801BD3C
	pop {r0,r1}
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80C5088 // =0x405ff11 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C536A
	pop {r4,r6,r7,pc}
.endfunc // sub_80C5014

.func
.thumb_func
sub_80C5050:
	push {r4,r6,r7,lr}
	mov r0, #3
	mov r1, #0x28 
	bl sub_80302A8
	mov r0, #0xc3
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	ldrb r4, [r5,#0x16]
	mov r2, #0
	mov r3, #0xf
	mov r7, #0
	bl sub_801BD3C
	pop {r0,r1}
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80C508C // =0x405ff10 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C536A
	pop {r4,r6,r7,pc}
off_80C5084: .word off_80C4C78
dword_80C5088: .word 0x405FF11
dword_80C508C: .word 0x405FF10
.endfunc // sub_80C5050

.func
.thumb_func
sub_80C5090:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #0x1d
	bne locret_80C50A6
	ldr r1, dword_80C50A8 // =0x10000 
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
locret_80C50A6:
	pop {pc}
dword_80C50A8: .word 0x10000
dword_80C50AC: .word 0x10000, 0x100, 0x1000000
.endfunc // sub_80C5090

loc_80C50B8:
	push {lr}
	ldr r1, off_80C50CC // =off_80C50D0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C50CC: .word off_80C50D0
off_80C50D0: .word sub_80C50DC+1
	.word sub_80C5116+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C50DC:
	push {r7,lr}
	bl sub_800E29C // () -> void
	mov r0, #1
	strh r0, [r5,#0x22]
	bl sub_8019892
	tst r0, r0
	bne loc_80C50F4
	bl object_freeMemory
	pop {r7,pc}
loc_80C50F4:
	mov r1, #4
	mov r2, #5
	ldrb r3, [r5,#5]
	bl sub_8019FB4
	mov r0, #0xd
	bl sub_801A140
	bl sub_80C518C
	bl sub_801A018
.endfunc // sub_80C50DC

	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C5116
	pop {r7,pc}
.func
.thumb_func
sub_80C5116:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80C5116

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C5168
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x70]
	tst r1, r1
	bne loc_80C5168
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C513E
	ldrh r0, [r5,#0x22]
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C513E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80C5170
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80C5168
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	strb r0, [r5,#0xb]
	b loc_80C5170
loc_80C5168:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
loc_80C5170:
	bl sub_801A018
	pop {pc}
.func
.thumb_func
sub_80C5176:
	push {lr}
	push {r0-r2,r5}
	mov r0, #1
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C518A
	bl sub_801155A
locret_80C518A:
	pop {pc}
.endfunc // sub_80C5176

.func
.thumb_func
sub_80C518C:
	push {lr}
	ldr r2, [r5,#0x54]
	ldr r0, off_80C519C // =dword_80C50AC 
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r0, [r0,r1]
	str r0, [r2,#0x64]
	pop {pc}
off_80C519C: .word dword_80C50AC
dword_80C51A0: .word 0xEB3100A, 0x1212B311, 0xB3
.endfunc // sub_80C518C

loc_80C51AC:
	push {lr}
	ldr r1, off_80C51BC // =off_80C51C0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C51BC: .word off_80C51C0
off_80C51C0: .word sub_80C51CC+1
	.word sub_80C524C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C51CC:
	push {r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r2, #0
	mov r0, #0x80
	mov r1, #0xc
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C51CC

	bl sprite_update
	bl sub_8002F90 // () -> void
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#4]
	mov r2, #3
	mul r1, r2
	ldr r7, off_80C5248 // =dword_80C51A0 
	add r7, r7, r1
	str r7, [r5,#0x60]
	ldrb r1, [r7]
	mul r0, r1
	lsl r0, r0, #0x10
	str r0, [r5,#0x40]
	bl sub_8019892
	tst r0, r0
	bne loc_80C521E
	bl object_freeMemory
	pop {pc}
loc_80C521E:
	mov r3, #0
	ldrb r1, [r5,#4]
	mov r1, #4
	mov r2, #5
	bl sub_8019FB4
	ldrb r0, [r7,#1]
	tst r0, r0
	beq loc_80C5234
	bl sub_801A258
loc_80C5234:
	bl sub_801A146
	bl sub_801A018
	ldrb r0, [r7,#2]
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	pop {r7,pc}
off_80C5248: .word dword_80C51A0
.func
.thumb_func
sub_80C524C:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80C524C

	bl sub_801A0D4
	ldr r1, [r5,#0x54]
	ldr r0, [r1,#0x70]
	tst r0, r0
	bne loc_80C5288
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C5288
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80C5288
	bl sub_801A018
	bl sub_801BBAC
	pop {pc}
loc_80C5288:
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
	push {lr}
	push {r0-r2,r5}
	mov r0, #2
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C52AE
	bl sub_801155A
locret_80C52AE:
	pop {pc}
loc_80C52B0:
	push {lr}
	ldr r1, off_80C52C0 // =off_80C52C4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80C52C0: .word off_80C52C4
off_80C52C4: .word sub_80C52D0+1
	.word sub_80C532E+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C52D0:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80C52F0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80C52F6
loc_80C52F0:
	bl object_freeMemory
	pop {pc}
loc_80C52F6:
	ldrb r1, [r5,#7]
	ldrb r2, [r5,#6]
	ldr r3, [r5,#0x60]
	bl sub_8019FB4
	ldrb r1, [r5,#4]
	strb r1, [r7,#1]
	ldrb r0, [r5,#5]
	bl sub_801A140
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq loc_80C5314
	bl sub_801A258
loc_80C5314:
	ldr r0, [r5,#0x68]
	cmp r0, #0
	beq loc_80C5320
	ldr r1, [r5,#0x6c]
	bl sub_801A4D0
loc_80C5320:
	bl sub_801A018
.endfunc // sub_80C52D0

	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C532E
	pop {pc}
.func
.thumb_func
sub_80C532E:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80C532E

	bl sub_801A0D4
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	ldr r1, [r5,#0x70]
	tst r1, r1
	beq loc_80C5348
	ldr r2, dword_80C53BC // =0xc000000 
	and r2, r0
	str r2, [r1]
loc_80C5348:
	tst r0, r0
	bne loc_80C535A
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80C535A
	bl sub_801A018
	pop {pc}
loc_80C535A:
	bl sub_801A074 // () -> void
	ldr r0, [r5,#0x54]
	bl sub_80198CE
	bl object_freeMemory
	pop {pc}
.func
.thumb_func
sub_80C536A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #3
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C53A4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r2, #0xff
	add r1, r2, #0
	and r1, r7
	str r1, [r0,#0x60]
	lsr r1, r7, #8
	and r1, r2
	str r1, [r0,#0x64]
	lsr r1, r7, #0x10
	and r1, r2
	str r1, [r0,#0x68]
	lsr r1, r7, #0x18
	and r1, r2
	str r1, [r0,#0x6c]
	mov r1, #0
	str r1, [r0,#0x70]
locret_80C53A4:
	pop {pc}
.endfunc // sub_80C536A

.func
.thumb_func
sub_80C53A6:
	push {lr}
	bl sub_80C536A
	cmp r0, #0
	beq locret_80C53B8
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80C53B8:
	pop {pc}
	.balign 4, 0x00
dword_80C53BC: .word 0xC000000
.endfunc // sub_80C53A6

loc_80C53C0:
	push {lr}
	ldr r1, off_80C53D4 // =off_80C53D8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C53D4: .word off_80C53D8
off_80C53D8: .word sub_80C53FA+1
	.word sub_80C54E0+1
	.word sub_80C53E4+1
.func
.thumb_func
sub_80C53E4:
	push {lr}
	ldrb r0, [r5,#6]
	cmp r0, #0
	beq loc_80C53F4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
loc_80C53F4:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80C53E4

.func
.thumb_func
sub_80C53FA:
	push {r4,r7,lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80C54CA
	ldrb r0, [r5,#5]
	mov r1, #0x80
	tst r0, r1
	beq loc_80C5412
	bic r0, r1
	strb r0, [r5,#5]
	str r1, [r5,#0x64]
loc_80C5412:
	mov r1, #0xc
	mov r2, #0xe
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#7]
	ldr r1, off_80C55A8 // =dword_80C54D8+4 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r2, [r5,#7]
	cmp r2, #1
	bne loc_80C5466
	lsl r2, r2, #2
	ldr r1, off_80C55AC // =dword_80C54D0 
	ldr r1, [r1,r2]
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	b loc_80C548E
loc_80C5466:
	mov r1, #0x28 
	mul r1, r0
	ldrh r0, [r5,#0x36]
	sub r0, r0, r1
	strh r0, [r5,#0x36]
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x28]
	mov r1, #0x12
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r2, [r5,#0x34]
	add r2, r2, r0
	str r2, [r5,#0x34]
	ldr r2, [r5,#0x3c]
	add r2, r2, r1
	str r2, [r5,#0x3c]
loc_80C548E:
	ldrb r0, [r5,#5]
	lsl r0, r0, #0x10
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	ldr r1, [r5,#0x3c]
	add r1, r1, r0
	str r1, [r5,#0x3c]
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	beq loc_80C54CA
	mov r1, #0xa
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r1, #1
	strb r1, [r7,#1]
	mov r0, #1
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,r7,pc}
loc_80C54CA:
	bl object_freeMemory
	pop {r4,r7,pc}
dword_80C54D0: .word 0x40000, 0x0
dword_80C54D8: .word 0x140000, 0x10100
.endfunc // sub_80C53FA

.func
.thumb_func
sub_80C54E0:
	push {r7,lr}
	bl sub_801A00E
	.hword 0xF754
	.word 0xF744FDF5, 0x4200FE50, 0x6D6FD116, 0x42006F38, 0xF754D001
	.word 0x4906FDBB, 0x58097A68, 0x470846FE, 0xFD86F754, 0x7CE97CA8
	.word 0xFB62F747, 0xBD80
	.word off_80C551C
off_80C551C: .word sub_80C552A+1
.endfunc // sub_80C54E0

	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80C552A:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	cmp r0, #0
	beq loc_80C556E
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80C5566
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80C5566
	sub r0, #1
	strb r0, [r5,#5]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_80C5590
	ldr r2, [r5,#0x64]
	cmp r2, #0
	beq loc_80C5566
	sub r1, #1
	bl sub_80C5590
	add r1, #2
	bl sub_80C5590
loc_80C5566:
	ldrb r0, [r5,#4]
	sub r0, #1
	strb r0, [r5,#4]
	bne locret_80C5576
loc_80C556E:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C5576:
	pop {r4,r6,r7,pc}
.endfunc // sub_80C552A

.func
.thumb_func
sub_80C5578:
	push {lr}
	push {r0-r2,r5}
	mov r0, #4
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C558E
	str r7, [r0,#0x60]
	bl sub_801155A
locret_80C558E:
	pop {pc}
.endfunc // sub_80C5578

.func
.thumb_func
sub_80C5590:
	push {r0,r1,lr}
	mov r3, #0
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	ldr r7, [r5,#0x60]
	ldrb r2, [r5,#0xe]
	bl sub_80C5578
	ldr r1, [r5,#0x4c]
	str r1, [r0,#0x4c]
	pop {r0,r1,pc}
	.balign 4, 0x00
off_80C55A8: .word dword_80C54D8+4
off_80C55AC: .word dword_80C54D0
.endfunc // sub_80C5590

loc_80C55B0:
	push {lr}
	ldr r1, off_80C55C4 // =off_80C55C8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C55C4: .word off_80C55C8
off_80C55C8: .word sub_80C55E4+1
	.word sub_80C5654+1
	.word sub_80C55D4+1
.func
.thumb_func
sub_80C55D4:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldr r1, [r0]
	sub r1, #1
	str r0, [r1]
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80C55D4

.func
.thumb_func
sub_80C55E4:
	push {lr}
	mov r1, #0x10
	mov r2, #0x1c
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C55E4

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E2AC
	bl sub_8019892
	tst r0, r0
	bne loc_80C562A
	bl object_freeMemory
	pop {pc}
loc_80C562A:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	ldr r0, [r5,#0x4c]
	ldr r1, [r0]
	add r1, #1
	str r0, [r1]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C5654
	pop {pc}
.func
.thumb_func
sub_80C5654:
	push {lr}
	bl sub_801A00E
	.hword 0xF754
	.word 0xF744FD3B, 0x4200FD96, 0xF744D110, 0xD10AFD17, 0x6F006D68
	.word 0xD0014200, 0xFCFEF754, 0x7A68490B, 0x46FE5809, 0xF7544708
	.word 0xBD00FCC9, 0x19402034, 0x2414C80E, 0xFFB1F01A, 0x21027828
	.word 0x70284388, 0xFCEAF754, 0x60A82008, 0xBD00
	.word off_80C56AC
off_80C56AC: .word sub_80C56B4+1
	.word sub_80C5760+1
.endfunc // sub_80C5654

.func
.thumb_func
sub_80C56B4:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C56E4
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r4, [r5,#5]
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80C57BC // =0xffffa000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C56E4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80C572A
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl object_isCurrentPanelSolid
	bne loc_80C570C
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
loc_80C570C:
	mov r0, #1
	strh r0, [r5,#0x20]
	strh r0, [r5,#0x22]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #1
	bl sub_801A07C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C575E
loc_80C572A:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80C57BC // =0xffffa000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #3
	bcc locret_80C575E
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl object_highlightPanel
locret_80C575E:
	pop {r4,r6,r7,pc}
.endfunc // sub_80C56B4

.func
.thumb_func
sub_80C5760:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bge loc_80C5774
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #8
	strh r0, [r5,#0x22]
loc_80C5774:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80C578C
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x23 
	bl sub_80E05F6
	mov r0, #0x1a
	strh r0, [r5,#0x20]
loc_80C578C:
	ldrb r0, [r5,#4]
	sub r0, #1
	strb r0, [r5,#4]
	bne locret_80C579C
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C579C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80C5760

.func
.thumb_func
sub_80C579E:
	push {lr}
	push {r5}
	mov r0, #5
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80C57BA
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r1, #4
	strb r1, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x4c]
locret_80C57BA:
	pop {pc}
dword_80C57BC: .word 0xFFFFA000
.endfunc // sub_80C579E

.func
.thumb_func
sub_80C57C0:
	push {lr}
	ldr r1, off_80C57D4 // =off_80C57D8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C57D4: .word off_80C57D8
off_80C57D8: .word sub_80C57F4+1
	.word sub_80C5886+1
	.word sub_80C57E4+1
.endfunc // sub_80C57C0

.func
.thumb_func
sub_80C57E4:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldr r1, [r0]
	sub r1, #1
	str r0, [r1]
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80C57E4

.func
.thumb_func
sub_80C57F4:
	push {r4,lr}
	mov r1, #0x10
	mov r2, #0x17
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	mov r1, #4
	mul r0, r1
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E2AC
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#6]
	sub r2, r2, r3
	bpl loc_80C582C
	mov r1, #1
	eor r0, r1
loc_80C582C:
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80C583E
	bl object_freeMemory
	pop {pc}
loc_80C583E:
	mov r1, #0xa
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #2
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
.endfunc // sub_80C57F4

	mov r0, #0xf
	strh r0, [r5,#0x22]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#6]
	sub r0, r0, r1
	bpl loc_80C5864
	neg r0, r0
loc_80C5864:
	ldr r1, off_80C5A20 // =byte_80C5A12 
	cmp r0, #1
	ble loc_80C586C
	ldr r1, off_80C5A24 // =byte_80C5A18 
loc_80C586C:
	str r1, [r5,#0x60]
	ldrb r0, [r1]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C5886
	pop {r4,pc}
.func
.thumb_func
sub_80C5886:
	push {lr}
	bl sub_801A00E
	.word 0xFC22F754, 0xFC7DF744, 0xD10E4200, 0xFBFEF744, 0x6D68D108
	.word 0x42006F00, 0x490BD10D, 0x58097A68, 0x470846FE, 0xFBB2F754
	.word 0x2034BD00, 0xC80E1940, 0xF01A2414, 0x7828FE9A, 0x43882102
	.word 0xF7547028, 0x2008FBD3, 0xBD0060A8
	.word off_80C58D8
off_80C58D8: .word sub_80C58E0+1
	.word sub_80C59B6+1
.endfunc // sub_80C5886

.func
.thumb_func
sub_80C58E0:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80C590E
	mov r0, #1
	strb r0, [r5,#0xa]
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	ldr r3, dword_80C5A28 // =0xb0000 
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80C5A2C // =0xffffb000 
	mov r4, #0x30 
	strh r4, [r5,#0x20]
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
loc_80C590E:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80C5A2C // =0xffffb000 
	add r0, r1, r0
	str r0, [r5,#0x48]
	ldr r1, [r5,#0x60]
	ldrh r0, [r5,#0x20]
	cmp r0, #0x28 
	bne loc_80C5938
	ldrb r0, [r1,#1]
	b loc_80C5956
loc_80C5938:
	cmp r0, #0x20 
	bne loc_80C5940
	ldrb r0, [r1,#2]
	b loc_80C5956
loc_80C5940:
	cmp r0, #0x18
	bne loc_80C5948
	ldrb r0, [r1,#3]
	b loc_80C5956
loc_80C5948:
	cmp r0, #0x10
	bne loc_80C5950
	ldrb r0, [r1,#4]
	b loc_80C5956
loc_80C5950:
	cmp r0, #4
	bne loc_80C5958
	ldrb r0, [r1,#5]
loc_80C5956:
	strb r0, [r5,#0x10]
loc_80C5958:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80C598E
	ldrb r0, [r5,#6]
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#7]
	strb r1, [r5,#0x13]
	ldr r0, dword_80C5A30 // =0x30000 
	str r0, [r5,#0x3c]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #1
	bl sub_801A07C
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0xd1
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80C598E:
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #3
	bcc locret_80C599C
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl object_highlightPanel
locret_80C599C:
	pop {r4,r6,r7,pc}
	.byte 0, 0
	.word dword_80C59A4
dword_80C59A4: .word 0xF408F400, 0xFC08F808, 0xFCF8FC00, 0xF4F8F8F8
	.byte 0x0, 0xF8
.endfunc // sub_80C58E0

.func
.thumb_func
sub_80C59B6:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80C59CA
	mov r0, #1
	strb r0, [r5,#0xa]
	bl sub_801A074 // () -> void
	mov r0, #0x1a
	strh r0, [r5,#0x20]
loc_80C59CA:
	ldrh r0, [r5,#0x20]
	cmp r0, #8
	bgt loc_80C59E8
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	mov r1, #2
	tst r0, r1
	beq loc_80C59E8
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
loc_80C59E8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C59F4
	mov r0, #8
	str r0, [r5,#8]
locret_80C59F4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80C59B6

.func
.thumb_func
sub_80C59F6:
	push {lr}
	push {r5}
	mov r0, #6
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80C5A10
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r1, #2
	strb r1, [r0,#0xe]
	str r6, [r0,#0x2c]
locret_80C5A10:
	pop {pc}
byte_80C5A12: .byte 0x0
	.byte 0x0
	.word 0x1010100
byte_80C5A18: .byte 0x0
	.byte 0x2, 0x3, 0x3
	.word 0x104
off_80C5A20: .word byte_80C5A12
off_80C5A24: .word byte_80C5A18
dword_80C5A28: .word 0xB0000
dword_80C5A2C: .word 0xFFFFB000
dword_80C5A30: .word 0x30000
.endfunc // sub_80C59F6

loc_80C5A34:
	push {lr}
	ldr r1, off_80C5A48 // =off_80C5A4C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C5A48: .word off_80C5A4C
off_80C5A4C: .word sub_80C5A58+1
	.word sub_80C5AD4+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C5A58:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80C5AAC
	mov r1, #0x10
	mov r2, #0x24 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#4]
	add r0, #0x28 
	strb r0, [r5,#4]
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	ldr r0, [r5,#0x38]
	ldr r1, dword_80C5B90 // =0xffff0000 
	add r0, r0, r1
	str r0, [r5,#0x38]
	str r1, [r5,#0x3c]
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80C5AB2
loc_80C5AAC:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80C5A58

loc_80C5AB2:
	mov r1, #0x48 
	mov r2, #0x2a 
	mov r3, #1
	bl sub_8019FB4
	mov r0, #1
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C5AD4
	pop {pc}
.func
.thumb_func
sub_80C5AD4:
	push {r7,lr}
	bl sub_801A00E
.endfunc // sub_80C5AD4

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C5B32
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80C5B94 // =0x1000 
	tst r0, r1
	bne loc_80C5B02
	ldr r0, [r5,#0x54]
	ldrb r0, [r0,#1]
	cmp r0, #0
	beq loc_80C5B24
	mov r0, #3
	strh r0, [r5,#0x20]
	b loc_80C5B0A
loc_80C5B02:
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	tst r0, r0
	beq loc_80C5B24
loc_80C5B0A:
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80C5B98 // =0x3800000 
	tst r0, r1
	beq loc_80C5B24
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C5B24:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80C5B32
	bl sub_80C5B40
	b loc_80C5B3A
loc_80C5B32:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
loc_80C5B3A:
	bl sub_801A018
	pop {r7,pc}
.func
.thumb_func
sub_80C5B40:
	push {lr}
	ldrh r0, [r5,#0x20]
	ldrb r1, [r5,#4]
	sub r1, #0x28 
	cmp r0, r1
	bne loc_80C5B62
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x38]
	ldr r1, dword_80C5B9C // =0x10000 
	add r0, r0, r1
	str r0, [r5,#0x38]
	mov r1, #0
	str r1, [r5,#0x3c]
	mov r0, #1
	b loc_80C5B72
loc_80C5B62:
	sub r1, #2
	cmp r0, r1
	bne loc_80C5B6C
	mov r0, #2
	b loc_80C5B72
loc_80C5B6C:
	cmp r0, #2
	bne locret_80C5B74
	mov r0, #1
loc_80C5B72:
	strb r0, [r5,#0x10]
locret_80C5B74:
	pop {pc}
.endfunc // sub_80C5B40

.func
.thumb_func
sub_80C5B76:
	push {lr}
	push {r0-r2,r5}
	mov r0, #7
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C5B8E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
locret_80C5B8E:
	pop {pc}
dword_80C5B90: .word 0xFFFF0000
dword_80C5B94: .word 0x1000
dword_80C5B98: .word 0x3800000
dword_80C5B9C: .word 0x10000
dword_80C5BA0: .word 0x50A, 0x1030504, 0x1050A, 0x303050A
.endfunc // sub_80C5B76

loc_80C5BB0:
	push {lr}
	ldr r1, off_80C5BC4 // =off_80C5BC8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C5BC4: .word off_80C5BC8
off_80C5BC8: .word sub_80C5BD4+1
	.word sub_80C5C40+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C5BD4:
	push {lr}
	mov r1, #0xc
	mov r2, #2
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C5BD4

	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #1
	ldrb r1, [r5,#4]
	cmp r1, #2
	bne loc_80C5BFA
	mov r0, #3
loc_80C5BFA:
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r4, off_80C5C3C // =dword_80C5BA0 
	add r4, r4, r0
	str r4, [r5,#0x60]
	ldrb r0, [r4,#3]
	bl sprite_setPallete // (int pallete) -> void
	bl sub_8019892
	tst r0, r0
	bne loc_80C5C1E
	bl object_freeMemory
	pop {pc}
loc_80C5C1E:
	ldrb r1, [r4]
	ldrb r2, [r4,#1]
	ldrb r3, [r4,#2]
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C5C40
	pop {pc}
off_80C5C3C: .word dword_80C5BA0
.func
.thumb_func
sub_80C5C40:
	push {r4,lr}
	bl sub_801A00E
	.hword 0xF754
	.word 0xF744FA45, 0x4200FAA0, 0xF744D10E, 0xD108FA21, 0x6F006D68
	.word 0xD10D4200, 0x7A68490B, 0x46FE5809, 0xF7544708, 0xBD10F9D5
	.word 0x19402034, 0x2414C80E, 0xFCBDF01A, 0x21027828, 0x70284388
	.word 0xF9F6F754, 0x60A82008, 0xBD10
	.word off_80C5C94
off_80C5C94: .word sub_80C5C9C+1
	.word sub_80C5D84+1
.endfunc // sub_80C5C40

.func
.thumb_func
sub_80C5C9C:
	push {r4,r6,r7,lr}
	mov r0, r9
	push {r0}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C5CC0
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r7, off_80C5D70 // =dword_80C5D58 
	ldmia r7!, {r1-r3}
	mul r1, r0
	mov r7, #0x40 
	add r7, r7, r5
	stmia r7!, {r1-r3}
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C5CC0:
	mov r3, #0x34 
	add r7, r5, r3
	mov r9, r7
	ldmia r7!, {r0-r2}
	mov r3, #0x40 
	add r7, r5, r3
	ldmia r7!, {r3,r4,r6}
	add r0, r0, r3
	add r6, r6, r4
	add r2, r2, r6
	mov r7, r9
	stmia r7!, {r0-r2}
	str r6, [r5,#0x48]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80C5D52
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_800E24C
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	strb r1, [r7,#0xb]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80C5D42
	bl object_isCurrentPanelSolid
	tst r0, r0
	beq loc_80C5D36
	ldrb r0, [r5,#4]
	ldr r6, off_80C5D78 // =dword_80C5D7C 
	ldrb r3, [r6,r0]
	ldr r7, [r5,#0x54]
	strb r3, [r7,#1]
	ldr r2, off_80C5D74 // =dword_80C5D80 
	ldrb r2, [r2,r0]
	ldrb r0, [r7,#0xa]
	ldrb r1, [r7,#0xb]
	ldrb r4, [r5,#0x16]
	mov r7, #0
	bl sub_801BD3C
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r0}
	mov r9, r0
	pop {r4,r6,r7,pc}
loc_80C5D36:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #1
	bl sub_80E05F6
loc_80C5D42:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C5D52:
	pop {r0}
	mov r9, r0
	pop {r4,r6,r7,pc}
dword_80C5D58: .word 0x2E666, 0xFFFFD800, 0x20666, 0x2E666, 0x2E666, 0x2E666
off_80C5D70: .word dword_80C5D58
off_80C5D74: .word dword_80C5D80
off_80C5D78: .word dword_80C5D7C
dword_80C5D7C: .word 0xF000001
dword_80C5D80: .word 0x0
.endfunc // sub_80C5C9C

.func
.thumb_func
sub_80C5D84:
	push {lr}
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#4]
	cmp r0, #1
	bne loc_80C5DA4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	mov r4, #0x3c 
	lsl r4, r4, #8
	ldr r6, [r5,#0x2c]
	bl sub_80C6018
	b loc_80C5DB6
loc_80C5DA4:
	cmp r0, #2
	bne loc_80C5DB6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r6, [r5,#0x2c]
	bl sub_80C68B0
loc_80C5DB6:
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80C5D84

.func
.thumb_func
sub_80C5DBC:
	push {lr}
	push {r5}
	mov r0, #8
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80C5DD8
	mov r1, #0
	strb r1, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
locret_80C5DD8:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80C5DBC

loc_80C5DDC:
	push {lr}
	ldr r1, off_80C5DF0 // =off_80C5DF4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80C5DF0: .word off_80C5DF4
off_80C5DF4: .word sub_80C5E00+1
	.word sub_80C5E44+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C5E00:
	push {r7,lr}
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	bl sub_8019892
	add r7, r0, #0
	bne loc_80C5E18
	bl object_freeMemory
	pop {r7,pc}
loc_80C5E18:
	mov r3, #3
	ldrb r1, [r5,#6]
	cmp r1, #0
	beq loc_80C5E28
	mov r3, #1
	cmp r1, #1
	beq loc_80C5E28
	mov r3, #0
loc_80C5E28:
	mov r1, #0xa
	mov r2, #5
	bl sub_8019FB4
	mov r0, #0
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
.endfunc // sub_80C5E00

	mov r0, #4
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80C5E44:
	push {r4,r7,lr}
	bl sub_801A00E
	.hword 0xF754
	.word 0x7828F943, 0x42082110, 0xF744D103, 0x4200F99A, 0x4906D107
	.word 0x58097A68, 0x470846FE, 0xF8D6F754, 0xF754BD90, 0x2008F901
	.word 0xBD9060A8
	.word off_80C5E7C
off_80C5E7C: .word sub_80C5E84+1
	.word sub_80C5F0C+1
.endfunc // sub_80C5E44

.func
.thumb_func
sub_80C5E84:
	push {lr}
	ldrh r0, [r5,#0x20]
	mov r1, #4
	tst r0, r1
	bne loc_80C5E96
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
loc_80C5E96:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C5F0A
	ldrb r0, [r5,#7]
	cmp r0, #0
	beq loc_80C5EB2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	beq loc_80C5F02
loc_80C5EB2:
	mov r1, #0x10
	mov r2, #0x26 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq loc_80C5EF2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_8109794
loc_80C5EF2:
	mov r0, #0xb9
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C5F0A
loc_80C5F02:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C5F0A:
	pop {pc}
.endfunc // sub_80C5E84

.func
.thumb_func
sub_80C5F0C:
	push {lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80C5F1C
	mov r0, #1
	strb r0, [r5,#0xa]
	bl sub_801A074 // () -> void
loc_80C5F1C:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C5F2A
	mov r0, #8
	str r0, [r5,#8]
locret_80C5F2A:
	pop {pc}
.endfunc // sub_80C5F0C

.func
.thumb_func
sub_80C5F2C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #9
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C5F48
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80C5F48:
	pop {pc}
.endfunc // sub_80C5F2C

.func
.thumb_func
sub_80C5F4A:
	push {lr}
	bl sub_80C5F2C
	cmp r0, #0
	beq locret_80C5F5C
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80C5F5C:
	pop {pc}
	.byte 0, 0
.endfunc // sub_80C5F4A

loc_80C5F60:
	push {lr}
	ldr r1, off_80C5F74 // =off_80C5F78 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C5F74: .word off_80C5F78
off_80C5F78: .word sub_80C5F84+1
	.word sub_80C5FDE+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C5F84:
	push {lr}
	mov r1, #0xc
	mov r2, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C5F84

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_8019892
	tst r0, r0
	bne loc_80C5FC2
	bl object_freeMemory
	pop {pc}
loc_80C5FC2:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A146
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C5FDE
	pop {pc}
.func
.thumb_func
sub_80C5FDE:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80C5FDE

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C6006
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	blt loc_80C6006
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	bne loc_80C6006
	bl sub_801A018
	pop {pc}
loc_80C6006:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80C6018:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xa
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C6036
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
locret_80C6036:
	pop {pc}
dword_80C6038: .word 0x30517, 0xC00, 0x800, 0x50000, 0x30504, 0xC06, 0x800
	.word 0xA0000, 0x2010504, 0x32A0C02, 0x800, 0x60000, 0x504, 0x210C05
	.word 0x800, 0xC0000, 0x10504, 0x210C05, 0x800, 0x80000, 0x504
	.word 0x210C05, 0x200, 0xC0000, 0x10030506, 0x210C0A, 0x801, 0xA0000
.endfunc // sub_80C6018

loc_80C60A8:
	push {lr}
	ldr r1, off_80C60BC // =off_80C60C0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C60BC: .word off_80C60C0
off_80C60C0: .word sub_80C60CC+1
	.word sub_80C619C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C60CC:
	push {r4,r6,r7,lr}
	ldr r6, [r5,#0x60]
	ldrb r4, [r5,#4]
	mov r1, #0x10
	mul r1, r4
	ldr r7, off_80C6278 // =dword_80C6038 
	add r7, r7, r1
	str r7, [r5,#0x4c]
	ldrb r1, [r7,#5]
	ldrb r2, [r7,#6]
	cmp r4, #6
	bne loc_80C60EE
	mov r0, #0xff
	lsr r1, r6, #0x10
	and r1, r0
	lsr r2, r6, #0x18
	and r2, r0
loc_80C60EE:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C60CC

	ldrb r0, [r7,#0xa]
	cmp r0, #0
	beq loc_80C6104
	bl sub_8002E3C
	b loc_80C6108
loc_80C6104:
	bl sub_8002F90 // () -> void
loc_80C6108:
	ldrb r0, [r7,#7]
	cmp r4, #6
	bne loc_80C6114
	lsr r0, r6, #4
	mov r1, #0xf
	and r0, r1
loc_80C6114:
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	cmp r4, #6
	bne loc_80C6132
	lsr r0, r6, #0x18
	cmp r0, #0x23 
	bne loc_80C6132
	bl sub_8002EAC
	b loc_80C613A
loc_80C6132:
	bl sub_800E456 // () -> int
	bl sub_8002F5C
loc_80C613A:
	ldrb r0, [r5,#7]
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r7,#3]
	strb r0, [r5,#0xe]
	ldrb r0, [r7,#9]
	strb r0, [r5,#7]
	bl sub_800E2AC
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r7,#0xc]
	mul r0, r1
	str r0, [r5,#0x40]
	ldrb r0, [r7,#8]
	str r0, [r5,#0x64]
	bl sub_8019892
	tst r0, r0
	bne loc_80C6168
	bl object_freeMemory
	pop {r4,r6,r7,pc}
loc_80C6168:
	ldrb r1, [r7]
	ldrb r2, [r7,#1]
	ldrb r3, [r7,#2]
	bl sub_8019FB4
	ldrb r0, [r7,#4]
	bl sub_801A140
	ldrb r0, [r7,#0xb]
	cmp r0, #0
	beq loc_80C6182
	bl sub_801A258
loc_80C6182:
	bl sub_801A018
	mov r0, #0
	ldrb r1, [r5,#6]
	cmp r1, #0
	beq loc_80C6190
	ldr r0, dword_80C627C // =0xfffee000 
loc_80C6190:
	str r0, [r5,#0x48]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C619C
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80C619C:
	push {r4,r6,lr}
	bl sub_801A00E
.endfunc // sub_80C619C

	ldrb r0, [r5,#4]
	cmp r0, #2
	beq loc_80C61AE
	bl sub_801A0D4
	b loc_80C61B2
loc_80C61AE:
	bl sub_801A100
loc_80C61B2:
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x70]
	tst r1, r1
	bne loc_80C6228
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80C61D6
	sub r0, #1
	strb r0, [r5,#5]
	bne loc_80C6238
	ldrb r0, [r5,#4]
	cmp r0, #2
	bne loc_80C6238
	mov r0, #0x8b
	add r0, #0xff
	bl sound_play // () -> void
	b loc_80C6238
loc_80C61D6:
	ldr r1, [r5,#0x3c]
	ldr r0, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r0, #0
	ldr r1, [r5,#0x34]
	ldr r0, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E6E8
	tst r0, r0
	beq loc_80C6218
	ldrb r0, [r5,#7]
	sub r0, #1
	strb r0, [r5,#7]
	bgt loc_80C6218
	ldrb r0, [r5,#4]
	cmp r0, #5
	bne loc_80C6228
	bl sub_800E29C // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #7
	bl sub_80E05F6
	b loc_80C6228
loc_80C6218:
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80C6238
loc_80C6228:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
loc_80C6238:
	bl sub_801A018
	ldr r0, [r5,#0x64]
	cmp r0, #0
	beq locret_80C6246
	bl object_highlightCurrentCollisionPanels
locret_80C6246:
	pop {r4,r6,pc}
.func
.thumb_func
sub_80C6248:
	push {lr}
	push {r5}
	mov r0, #0xb
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80C6262
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
locret_80C6262:
	pop {pc}
.endfunc // sub_80C6248

	push {lr}
	bl sub_80C6248
	cmp r0, #0
	beq locret_80C6276
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80C6276:
	pop {pc}
off_80C6278: .word dword_80C6038
dword_80C627C: .word 0xFFFEE000
loc_80C6280:
	push {lr}
	ldr r1, off_80C6290 // =off_80C6294 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80C6290: .word off_80C6294
off_80C6294: .word sub_80C62A0+1
	.word loc_80C62B0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C62A0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80C62A0

loc_80C62B0:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C62E0
	ldrb r0, [r5,#6]
	cmp r0, #2
	beq loc_80C62D4
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#6]
	ldr r2, off_80C62F0 // =byte_80C62F4 
	ldrb r1, [r2,r1]
	cmp r0, r1
	bne loc_80C62E0
	bl battle_isTimeStop
	bne locret_80C62E4
loc_80C62D4:
	ldr r1, off_80C62E8 // =off_80C62EC 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80C62E4
loc_80C62E0:
	mov r0, #8
	str r0, [r5,#8]
locret_80C62E4:
	pop {pc}
	.balign 4, 0x00
off_80C62E8: .word off_80C62EC
off_80C62EC: .word sub_80C62F8+1
off_80C62F0: .word byte_80C62F4
byte_80C62F4: .byte 0xD, 0xE, 0x0, 0x5E
.func
.thumb_func
sub_80C62F8:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C6310
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	bl sub_80C6358
	mov r0, #0
	strh r0, [r5,#0x22]
loc_80C6310:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80C632A
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80C632E
	mov r0, #0xc
	strh r0, [r5,#0x22]
	bl sub_80C63AE
	b locret_80C632E
loc_80C632A:
	mov r0, #8
	str r0, [r5,#8]
locret_80C632E:
	pop {r4,r6,r7,pc}
.endfunc // sub_80C62F8

.func
.thumb_func
sub_80C6330:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xe
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C6356
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C6356:
	pop {pc}
.endfunc // sub_80C6330

.func
.thumb_func
sub_80C6358:
	push {r4,r6,r7,lr}
	mov r6, #0
loc_80C635C:
	ldr r3, off_80C6398 // =dword_80C639C 
	add r2, r6, #0
	lsl r2, r2, #1
	add r3, r3, r2
	mov r0, #0
	ldrsb r2, [r3,r0]
	mov r0, #1
	ldrsb r3, [r3,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80C638E
	ldrb r4, [r5,#5]
	ldrb r3, [r5,#6]
	lsl r3, r3, #8
	orr r4, r3
	ldr r7, [r5,#0x4c]
	bl sub_80E21AC
loc_80C638E:
	add r6, #1
	cmp r6, #9
	blt loc_80C635C
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C6398: .word dword_80C639C
dword_80C639C: .word 0xFFFF0000, 0xFF01FF00, 0x100FF, 0x10001FF
	.byte  1
	.byte  1
.endfunc // sub_80C6358

.func
.thumb_func
sub_80C63AE:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#6]
	cmp r0, #1
	beq loc_80C63D2
	cmp r0, #2
	beq loc_80C63E6
	cmp r0, #3
	beq loc_80C63FA
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldr r4, dword_80C6410 // =0x400ff0f 
	ldr r6, [r5,#0x2c]
	mov r7, #1
	bl sub_80C536A
	b locret_80C640C
loc_80C63D2:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldr r4, dword_80C6410 // =0x400ff0f 
	ldr r6, [r5,#0x2c]
	mov r7, #1
	bl sub_80C536A
	b locret_80C640C
loc_80C63E6:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldr r4, dword_80C6410 // =0x400ff0f 
	ldr r6, [r5,#0x2c]
	mov r7, #1
	bl sub_80C53A6
	b locret_80C640C
loc_80C63FA:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldr r4, dword_80C6410 // =0x400ff0f 
	ldr r6, [r5,#0x2c]
	mov r7, #1
	bl sub_80C536A
locret_80C640C:
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80C6410: .word 0x400FF0F
.endfunc // sub_80C63AE

loc_80C6414:
	push {lr}
	ldr r1, off_80C6428 // =off_80C642C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80C6428: .word off_80C642C
off_80C642C: .word sub_80C6438+1
	.word sub_80C647C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C6438:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x13
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldr r0, dword_80C6568 // =0x80000 
	str r0, [r5,#0x48]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	ldr r0, dword_80C656C // =0x1000000 
	str r0, [r5,#0x3c]
	mov r0, #0xa1
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80C647C
	pop {pc}
.endfunc // sub_80C6438

.func
.thumb_func
sub_80C647C:
	push {lr}
	ldr r1, off_80C6490 // =off_80C6494 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80C6490: .word off_80C6494
off_80C6494: .word sub_80C64A0+1
	.word sub_80C6524+1
	.word sub_80C6536+1
.endfunc // sub_80C647C

.func
.thumb_func
sub_80C64A0:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	bgt locret_80C650E
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldr r4, dword_80C6570 // =0xa05ff01 
	ldr r6, [r5,#0x2c]
	mov r7, #1
	bl sub_80C536A
	tst r0, r0
	beq loc_80C64CE
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
loc_80C64CE:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r7, off_80C6510 // =dword_80C6514 
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	add r7, r7, r2
	ldr r2, [r7,#4]
	ldr r3, [r7]
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_80C650A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x16]
	mov r3, #1
	eor r2, r3
	bl sub_800D668
	tst r0, r0
	beq loc_80C650A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#4]
	push {r0,r1}
	bl object_setPanelAlliance
	pop {r0,r1}
	bl object_setPanelAllianceTimerLong
loc_80C650A:
	mov r0, #4
	strb r0, [r5,#9]
locret_80C650E:
	pop {r4,r6,r7,pc}
off_80C6510: .word dword_80C6514
dword_80C6514: .word 0xF880080, 0x20, 0xF8800A0, 0x0
.endfunc // sub_80C64A0

.func
.thumb_func
sub_80C6524:
	push {lr}
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0xa2
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	pop {pc}
.endfunc // sub_80C6524

.func
.thumb_func
sub_80C6536:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	and r0, r1
	beq locret_80C6546
	mov r0, #8
	strb r0, [r5,#8]
locret_80C6546:
	pop {pc}
.endfunc // sub_80C6536

.func
.thumb_func
sub_80C6548:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xf
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C6564
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
locret_80C6564:
	pop {pc}
	.balign 4, 0x00
dword_80C6568: .word 0x80000
dword_80C656C: .word 0x1000000
dword_80C6570: .word 0xA05FF01
	.word 0, 0
	.byte 0, 0, 0, 0
.endfunc // sub_80C6548

loc_80C6580:
	push {lr}
	ldr r1, off_80C6590 // =off_80C6594 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80C6590: .word off_80C6594
off_80C6594: .word sub_80C65A0+1
	.word sub_80C65EE+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C65A0:
	push {r7,lr}
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [r5,#0x40]
	bl sub_8019892
	tst r0, r0
	bne loc_80C65BA
	bl object_freeMemory
	pop {r7,pc}
loc_80C65BA:
	mov r1, #0x3d 
	mov r2, #5
	mov r3, #0
	bl sub_8019FB4
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1,#2]
	bl sub_801A018
.endfunc // sub_80C65A0

	mov r0, #2
	strb r0, [r5,#5]
	mov r0, #0xc
	strh r0, [r5,#0x22]
	mov r0, #4
	str r0, [r5,#8]
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq locret_80C65EC
	mov r1, #4
	strb r1, [r5,#9]
	cmp r0, #0xff
	beq locret_80C65EC
	bl sub_80C673A
locret_80C65EC:
	pop {r7,pc}
.func
.thumb_func
sub_80C65EE:
	push {r7,lr}
	bl sub_801A00E
	.word 0xFD6EF753, 0x6F386D6F, 0xD00B4200, 0x28047A68, 0xF753D102
	.word 0xE005FD35, 0xF895F000, 0x72682004, 0x81682000, 0xFDB9F743
	.word 0xD1074200, 0x7A684908, 0x46FE5809, 0xF7534708, 0xBD80FCF5
	.word 0xFD20F753, 0x21027828, 0x70284388, 0x60A82008, 0xBD80
	.word off_80C6648
off_80C6648: .word sub_80C6650+1
	.word loc_80C667C+1
.endfunc // sub_80C65EE

.func
.thumb_func
sub_80C6650:
	push {lr}
	ldr r1, [r5,#0x40]
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80C667A
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80C667A:
	pop {pc}
.endfunc // sub_80C6650

loc_80C667C:
	push {lr}
	ldr r1, off_80C668C // =off_80C6690 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C668C: .word off_80C6690
off_80C6690: .word sub_80C6698+1
	.word sub_80C66E4+1
.func
.thumb_func
sub_80C6698:
	push {r4,r7,lr}
	ldr r0, [r5,#0x6c]
	cmp r0, #0
	bne loc_80C66BC
	mov r0, #1
	str r0, [r5,#0x6c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	beq loc_80C66BC
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #6
	bl object_setPanelType
loc_80C66BC:
	ldr r7, [r5,#0x54]
	bl sub_80C6726
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x23 
	bl sub_80E05F6
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #0xc
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {r4,r7,pc}
.endfunc // sub_80C6698

.func
.thumb_func
sub_80C66E4:
	push {lr}
	ldr r0, [r5,#0x68]
	add r1, r0, #1
	str r1, [r5,#0x68]
	mov r1, #7
	and r0, r1
	bne loc_80C66F8
	mov r0, #0x70 
	bl sound_play // () -> void
loc_80C66F8:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne loc_80C6704
	bl sub_80C6774
loc_80C6704:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C6724
	ldrb r0, [r5,#5]
	sub r0, #1
	strb r0, [r5,#5]
	cmp r0, #0
	beq loc_80C671C
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C6724
loc_80C671C:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C6724:
	pop {pc}
.endfunc // sub_80C66E4

.func
.thumb_func
sub_80C6726:
	push {lr}
	mov r1, #4
	mov r2, #5
	mov r3, #1
	bl sub_801A082
	ldrb r0, [r5,#0xe]
	bl sub_8019F8C
	pop {pc}
.endfunc // sub_80C6726

.func
.thumb_func
sub_80C673A:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, off_80C6760 // =off_80C6764 
	bl sub_81096FA
	mov r4, #4
	ldrb r6, [r5,#0x16]
	ldrb r7, [r5,#0x17]
	eor r6, r7
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_800D3FE
	str r0, [r5,#0x60]
	pop {r4,r6,r7,pc}
off_80C6760: .word off_80C6764
off_80C6764: .word LCDControl
	.word 0x0
	.word start_
	.word 0x0
.endfunc // sub_80C673A

.func
.thumb_func
sub_80C6774:
	push {r4,r6,r7,lr}
	ldr r7, [r5,#0x60]
loc_80C6778:
	cmp r7, #0
	beq locret_80C67A2
	sub r7, #1
	mov r0, #0x64 
	add r0, r0, r7
	ldrb r0, [r5,r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_80C67A4
	cmp r0, #0
	beq loc_80C67A0
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldrb r4, [r5,#4]
	add r4, #1
	ldr r6, [r5,#0x2c]
	bl sub_80C67D8
loc_80C67A0:
	b loc_80C6778
locret_80C67A2:
	pop {r4,r6,r7,pc}
.endfunc // sub_80C6774

.func
.thumb_func
sub_80C67A4:
	push {r4,r6,r7,lr}
	ldr r4, off_80C67F0 // =dword_2009380 
loc_80C67A8:
	ldr r4, [r4,#4]
	ldr r2, off_80C67F4 // =dword_2009AB0 
	cmp r4, r2
	beq locret_80C67D6
	mov r6, #0x10
	add r6, r6, r4
	ldrb r2, [r6,#2]
	mov r3, #0xf
	and r2, r3
	cmp r2, #3
	bne loc_80C67D4
	ldrb r2, [r6,#1]
	cmp r2, #0x10
	bne loc_80C67D4
	ldrb r2, [r6,#0x12]
	cmp r0, r2
	bne loc_80C67D4
	ldrb r2, [r6,#0x13]
	cmp r1, r2
	bne loc_80C67D4
	mov r0, #0
	b locret_80C67D6
loc_80C67D4:
	b loc_80C67A8
locret_80C67D6:
	pop {r4,r6,r7,pc}
.endfunc // sub_80C67A4

.func
.thumb_func
sub_80C67D8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x10
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C67EC
	bl sub_801155A
locret_80C67EC:
	pop {pc}
	.byte 0, 0
off_80C67F0: .word dword_2009380
off_80C67F4: .word dword_2009AB0
.endfunc // sub_80C67D8

loc_80C67F8:
	push {lr}
	ldr r1, off_80C680C // =off_80C6810 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C680C: .word off_80C6810
off_80C6810: .word sub_80C681C+1
	.word sub_80C6854+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C681C:
	push {lr}
	mov r1, #0x14
	mov r2, #0x12
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C681C

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sub_800E29C // () -> void
	mov r0, #0xbb
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C6854
	pop {pc}
.func
.thumb_func
sub_80C6854:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C689A
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C6866
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C6866:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C68A6
	mov r0, #7
	strh r0, [r5,#0x20]
	ldr r6, [r5,#0x2c]
	ldrh r0, [r5,#0x22]
	ldr r1, off_80C68A8 // =byte_80C68AC 
	ldrb r7, [r1,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80C68D0 // =0xa05ff01 
	bl sub_80C536A
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	cmp r0, #3
	blt locret_80C68A6
	mov r0, #4
	strh r0, [r5,#0xa]
	mov r0, #0x14
	strh r0, [r5,#0x20]
loc_80C689A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C68A6
	mov r0, #8
	str r0, [r5,#8]
locret_80C68A6:
	pop {pc}
off_80C68A8: .word byte_80C68AC
byte_80C68AC: .byte 0x1, 0x1, 0x3, 0x0
.endfunc // sub_80C6854

.func
.thumb_func
sub_80C68B0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x11
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C68CE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
locret_80C68CE:
	pop {pc}
dword_80C68D0: .word 0xA05FF01
dword_80C68D4: .word 0x210002, 0xD00AF, 0xAF0021, 0x210004, 0xF00AF, 0xAF0021
	.word 0x1F0002, 0xD011D, 0x11D001F, 0x1F0004, 0x30F011D, 0x11D001F
	.word 0x220002, 0xD010F, 0x10F0022, 0x220004, 0xF010F, 0x10F0022
	.word 0x200102, 0x3020000, 0x11D001F, 0x3E0102, 0x10F0000, 0xAF0038
	.word 0x6A0102, 0x1020000, 0x1220, 0x10200102
	.byte 0x0, 0x0
.endfunc // sub_80C68B0

loc_80C6946:
	push {lr}
	ldr r1, off_80C6954 // =off_80C6958 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80C6954: .word off_80C6958
off_80C6958: .word sub_80C6964+1
	.word sub_80C69AC+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C6964:
	push {r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	ldrb r0, [r5,#4]
	mov r1, #6
	mul r0, r1
	ldr r7, off_80C6AF0 // =dword_80C68D4 
	add r7, r7, r0
	str r7, [r5,#0x60]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [r5,#0x40]
	bl sub_8019892
	tst r0, r0
	bne loc_80C6992
	bl object_freeMemory
	pop {r7,pc}
loc_80C6992:
	mov r1, #0x3d 
	mov r2, #5
	mov r3, #0
	bl sub_8019FB4
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1,#2]
	bl sub_801A018
.endfunc // sub_80C6964

	mov r0, #4
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80C69AC:
	push {r7,lr}
	bl sub_801A00E
	.hword 0xF753
	.word 0x6D6FFB8F, 0x42006F38, 0xF753D00C, 0x2101FBD2, 0x42080209
	.word 0x1C08D106, 0xFBC1F753, 0x72682004, 0x81682000, 0x7A684908
	.word 0x46FE5809, 0xF7534708, 0xBD80FB19, 0xFB44F753, 0x21027828
	.word 0x70284388, 0x60A82008, 0xBD80
	.word off_80C6A00
off_80C6A00: .word sub_80C6A08+1
	.word sub_80C6A34+1
.endfunc // sub_80C69AC

.func
.thumb_func
sub_80C6A08:
	push {lr}
	ldr r1, [r5,#0x40]
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80C6A32
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80C6A32:
	pop {pc}
.endfunc // sub_80C6A08

.func
.thumb_func
sub_80C6A34:
	push {lr}
	ldr r1, off_80C6A44 // =off_80C6A48 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C6A44: .word off_80C6A48
off_80C6A48: .word sub_80C6A50+1
	.word sub_80C6AAC+1
.endfunc // sub_80C6A34

.func
.thumb_func
sub_80C6A50:
	push {r4,r7,lr}
	ldr r7, [r5,#0x54]
	bl sub_80C6AB8
	ldr r0, [r5,#0x60]
	ldrb r3, [r0]
	strb r3, [r7,#1]
	ldrb r1, [r5,#4]
	cmp r1, #0xc
	beq loc_80C6A84
	cmp r1, #0x10
	beq loc_80C6A84
	cmp r1, #0xe
	beq loc_80C6A84
	cmp r1, #0x11
	beq loc_80C6A84
	cmp r1, #0x12
	beq loc_80C6A84
	ldrb r2, [r0,#2]
	ldrb r0, [r7,#0xa]
	ldrb r1, [r7,#0xb]
	ldrb r4, [r5,#0x16]
	ldr r7, [r5,#0x3c]
	bl sub_801BD3C
	b loc_80C6A9A
loc_80C6A84:
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	ldr r0, [r5,#0x60]
	ldrb r1, [r0,#2]
	add r4, r4, r1
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	bl sub_80E05F6
loc_80C6A9A:
	ldr r0, [r5,#0x60]
	ldrh r0, [r0,#4]
	tst r0, r0
	beq loc_80C6AA6
	bl sound_play // () -> void
loc_80C6AA6:
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {r4,r7,pc}
.endfunc // sub_80C6A50

.func
.thumb_func
sub_80C6AAC:
	push {lr}
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80C6AAC

.func
.thumb_func
sub_80C6AB8:
	push {lr}
	ldr r3, [r5,#0x60]
	ldrb r3, [r3,#1]
	mov r1, #4
	mov r2, #5
	bl sub_801A082
	ldrb r0, [r5,#0xe]
	bl sub_8019F8C
	ldr r3, [r5,#0x60]
	ldrb r0, [r3,#3]
	cmp r0, #0
	beq locret_80C6AD8
	bl sub_801A258
locret_80C6AD8:
	pop {pc}
.endfunc // sub_80C6AB8

.func
.thumb_func
sub_80C6ADA:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x12
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C6AEE
	bl sub_801155A
locret_80C6AEE:
	pop {pc}
off_80C6AF0: .word dword_80C68D4
	.word 0, 0
	.byte 0, 0, 0, 0
dword_80C6B00: .word 0xFF160003, 0xFF100103, 0xFF0B0103, 0xFF060203, 0x3100103
	.word 0x4060203, 0xFF180003, 0xFF100103, 0xFF0B0103, 0xFF060203
	.word 0xFF100103, 0xFF060203, 0xFF060103, 0xFF060103, 0xFF060103
	.word 0xFF060103
.endfunc // sub_80C6ADA

loc_80C6B40:
	push {lr}
	ldr r1, off_80C6B54 // =off_80C6B58 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C6B54: .word off_80C6B58
off_80C6B58: .word sub_80C6B64+1
	.word sub_80C6C14+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C6B64:
	push {r4,r7,lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80C6C0A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r3, #0x10
	tst r0, r3
	beq loc_80C6C0A
	ldrb r4, [r5,#4]
	mov r0, #4
	mul r4, r0
	ldr r0, off_80C6C10 // =dword_80C6B00 
	add r4, r4, r0
	str r4, [r5,#0x60]
	mov r1, #0x10
	ldrb r2, [r4]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r4,#1]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	ldrb r0, [r4,#2]
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0x22]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r4,#3]
	bl sub_80C6CFC
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	beq loc_80C6C0A
	mov r1, #4
	mov r2, #5
	ldrb r0, [r4,#3]
	cmp r0, #0xff
	beq loc_80C6BE8
	mov r1, #0xa
	mov r2, #5
loc_80C6BE8:
	mov r3, #3
	add r0, r7, #0
	bl sub_8019FB4
	mov r1, #1
	strb r1, [r7,#1]
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #0xa6
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,r7,pc}
loc_80C6C0A:
	bl object_freeMemory
	pop {r4,r7,pc}
off_80C6C10: .word dword_80C6B00
.endfunc // sub_80C6B64

.func
.thumb_func
sub_80C6C14:
	push {r7,lr}
	bl sub_801A00E
	.byte 0x53 
	.byte 0xF7
	.byte 0x5B 
	.byte 0xFA
	.byte 0x43 
	.byte 0xF7
	.byte 0xB6
	.byte 0xFA
	.byte  0
	.byte 0x42 
	.byte 0x1C
	.byte 0xD1
	.byte 0xA8
	.byte 0x7C 
	.byte 0xE9
	.byte 0x7C 
	.byte 0x45 
	.byte 0xF7
	.byte 0x65 
	.byte 0xFE
	.hword 0x2310
	.word 0xD0154218, 0x6F386D6F, 0xD0014200, 0xFA1AF753, 0x7A684904
	.word 0x46FE5809, 0xF7534708, 0xF746F9E5, 0xBD80F836
	.word off_80C6C58
off_80C6C58: .word sub_80C6C6A+1
	.word sub_80C6CBA+1
.endfunc // sub_80C6C14

	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80C6C6A:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80C6C76
	mov r0, #1
	strb r0, [r5,#0xa]
loc_80C6C76:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80C6CA6
	ldrb r0, [r5,#4]
	cmp r0, #0xc
	blt loc_80C6C8E
	cmp r0, #0xe
	bgt loc_80C6C8E
	bl sub_80C6D1E
	b loc_80C6C98
loc_80C6C8E:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
loc_80C6C98:
	mov r3, #0
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	bl sub_80C6CE4
	mov r0, #4
	strb r0, [r5,#9]
loc_80C6CA6:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C6CB8
	mov r0, #0xf0
	strh r0, [r5,#0x36]
	bl sub_801A074 // () -> void
locret_80C6CB8:
	pop {r4,r6,pc}
.endfunc // sub_80C6C6A

.func
.thumb_func
sub_80C6CBA:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #0xc
	bge loc_80C6CCE
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C6CE2
	b loc_80C6CD6
loc_80C6CCE:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80C6CE2
loc_80C6CD6:
	mov r0, #0xf0
	strh r0, [r5,#0x36]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C6CE2:
	pop {pc}
.endfunc // sub_80C6CBA

.func
.thumb_func
sub_80C6CE4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x16
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C6CFA
	mov r3, #0
	bl sub_801155A
locret_80C6CFA:
	pop {pc}
.endfunc // sub_80C6CE4

.func
.thumb_func
sub_80C6CFC:
	push {lr}
	cmp r2, #0xff
	bne loc_80C6D04
	pop {pc}
loc_80C6D04:
	cmp r2, #3
	bne loc_80C6D0E
	bl object_crackPanel
	pop {pc}
loc_80C6D0E:
	cmp r2, #1
	bne loc_80C6D18
	bl object_breakPanel_dup1
	pop {pc}
loc_80C6D18:
	bl object_setPanelType
.endfunc // sub_80C6CFC

	pop {pc}
.func
.thumb_func
sub_80C6D1E:
	push {lr}
	ldrb r2, [r5,#5]
	cmp r2, #0
	beq loc_80C6D42
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, off_80C6DB4 // =dword_80C6DC8 
	sub r2, #1
	ldrsb r2, [r3,r2]
	add r2, r2, r1
	beq locret_80C6DAE
	cmp r2, #3
	bgt locret_80C6DAE
	add r1, r2, #0
	b locret_80C6DAE
loc_80C6D42:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r3, [r5,#0x16]
	ldrb r2, [r5,#0x17]
	eor r3, r2
	mov r2, #8
	mul r3, r2
	ldrb r2, [r5,#0x12]
	add r3, r3, r2
	ldr r2, off_80C6DB0 // =dword_80C6DB8 
	ldrb r2, [r2,r3]
	bl sub_8109708
	cmp r0, #0
	bne loc_80C6DA4
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	sub r1, #1
	beq loc_80C6D88
	mov r2, #0x16
	push {r0,r1}
	bl sub_8109708
	cmp r0, #0
	pop {r0,r1}
	beq loc_80C6D88
	mov r2, #1
	strb r2, [r5,#5]
	b locret_80C6DAE
loc_80C6D88:
	mov r2, #0x17
	ldrb r1, [r5,#0x13]
	add r1, #1
	cmp r1, #3
	bgt loc_80C6DA4
	push {r0,r1}
	bl sub_8109708
	cmp r0, #0
	pop {r0,r1}
	beq loc_80C6DA4
	mov r2, #2
	strb r2, [r5,#5]
	b locret_80C6DAE
loc_80C6DA4:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
locret_80C6DAE:
	pop {pc}
off_80C6DB0: .word dword_80C6DB8
off_80C6DB4: .word dword_80C6DC8
dword_80C6DB8: .word 0x6072008, 0x1010102, 0x2010101, 0x8200706
dword_80C6DC8: .word 0x1FF
.endfunc // sub_80C6D1E

loc_80C6DCC:
	push {lr}
	ldr r1, off_80C6DEC // =off_80C6DF0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80C6DE4
	bl sub_801BCA6
	b locret_80C6DE8
loc_80C6DE4:
	bl sub_801BBF4
locret_80C6DE8:
	pop {pc}
	.balign 4, 0x00
off_80C6DEC: .word off_80C6DF0
off_80C6DF0: .word sub_80C6DFC+1
	.word loc_80C6E50+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C6DFC:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #1
	ldrh r1, [r5,#0x3e]
	add r1, r1, r0
	strh r1, [r5,#0x3e]
	ldrh r1, [r5,#0x3a]
	add r1, r1, r0
	strh r1, [r5,#0x3a]
	mov r1, #0x10
	mov r2, #0x20 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C6DFC

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C6E50
	pop {pc}
loc_80C6E50:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C6E82
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80C6E6A
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	bne loc_80C6E82
loc_80C6E6A:
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80C6E76
	bl battle_isTimeStop
	bne locret_80C6E86
loc_80C6E76:
	ldr r1, off_80C6E88 // =off_80C6E8C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80C6E86
loc_80C6E82:
	mov r0, #8
	str r0, [r5,#8]
locret_80C6E86:
	pop {pc}
off_80C6E88: .word off_80C6E8C
off_80C6E8C: .word sub_80C6E90+1
.func
.thumb_func
sub_80C6E90:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C6EB4
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#6]
	bl sub_80C6F08
	strb r0, [r5,#7]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	mov r0, #1
	strh r0, [r5,#0x22]
	ldrh r0, [r5,#0x20]
	ldrb r1, [r5,#7]
	bl sub_80C6FC8
loc_80C6EB4:
	ldrb r0, [r5,#7]
	bl sub_80C7030
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80C6EDA
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	tst r0, r0
	bne locret_80C6EDE
	mov r0, #0x1e
	strh r0, [r5,#0x22]
	mov r0, #0x1e
	ldrb r1, [r5,#7]
	bl sub_80C6F50
	b locret_80C6EDE
loc_80C6EDA:
	mov r0, #8
	str r0, [r5,#8]
locret_80C6EDE:
	pop {pc}
.endfunc // sub_80C6E90

.func
.thumb_func
sub_80C6EE0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x17
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C6F06
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C6F06:
	pop {pc}
.endfunc // sub_80C6EE0

.func
.thumb_func
sub_80C6F08:
	push {r4,r6,r7,lr}
	add r7, r0, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80C6F44 // =dword_80C6F48 
	ldr r4, [r1,r0]
	mov r6, #1
loc_80C6F16:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r6
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_80C6F08

	tst r0, r4
	pop {r0,r1}
	bne locret_80C6F40
	cmp r0, r7
	beq locret_80C6F40
	cmp r0, #1
	ble locret_80C6F40
	cmp r0, #6
	bge locret_80C6F40
	add r6, #1
	cmp r6, #5
	ble loc_80C6F16
locret_80C6F40:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C6F44: .word dword_80C6F48
dword_80C6F48: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80C6F50:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	str r0, [sp]
	str r1, [sp,#4]
	mov r6, #0
loc_80C6F5A:
	ldr r0, [sp,#4]
	add r1, r6, #0
	sub r1, #1
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80C6F86
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80C6FC0 // =0x4050201 
	push {r6}
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80C6FC4 // =0x3 
	bl sub_80C53A6
	pop {r6}
	ldr r1, [sp]
	strh r1, [r0,#0x20]
loc_80C6F86:
	add r6, #1
	cmp r6, #2
	ble loc_80C6F5A
	mov r6, #1
loc_80C6F8E:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r6
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r2, [sp,#4]
	cmp r0, r2
	beq loc_80C6FBC
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80C6FC0 // =0x4050201 
	push {r6}
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80C6FC4 // =0x3 
	bl sub_80C53A6
	pop {r6}
	ldr r1, [sp]
	strh r1, [r0,#0x20]
	add r6, #1
	cmp r6, #4
	ble loc_80C6F8E
loc_80C6FBC:
	add sp, sp, #8
	pop {r4,r6,r7,pc}
dword_80C6FC0: .word 0x4050201
dword_80C6FC4: .word 0x3
.endfunc // sub_80C6F50

.func
.thumb_func
sub_80C6FC8:
	push {r4,r6,r7,lr}
	sub sp, sp, #0xc
	str r0, [sp]
	str r1, [sp,#4]
	ldrb r0, [r5,#4]
	ldr r1, off_80C7024 // =dword_80C7028 
	ldrb r0, [r1,r0]
	str r0, [sp,#8]
	ldr r0, [sp,#4]
	ldrb r1, [r5,#0x13]
	ldr r3, [sp,#8]
	lsl r3, r3, #0x10
	ldr r4, [sp]
	lsl r4, r4, #8
	orr r4, r3
	mov r3, #1
	orr r4, r3
	ldr r7, [r5,#0x4c]
	bl sub_80E3A92
	mov r6, #1
loc_80C6FF2:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r6
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r2, [sp,#4]
	cmp r0, r2
	beq loc_80C701E
	ldr r3, [sp,#8]
	lsl r3, r3, #0x10
	ldr r4, [sp]
	lsl r4, r4, #8
	orr r4, r3
	mov r3, #0
	orr r4, r3
	ldr r7, [r5,#0x4c]
	bl sub_80E3A92
	add r6, #1
	cmp r6, #4
	ble loc_80C6FF2
loc_80C701E:
	add sp, sp, #0xc
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C7024: .word dword_80C7028
dword_80C7028: .word 0x0
	.word 0x1
.endfunc // sub_80C6FC8

.func
.thumb_func
sub_80C7030:
	push {r4,r6,lr}
	add r4, r0, #0
	mov r6, #0
loc_80C7036:
	add r0, r4, #0
	add r1, r6, #0
	sub r1, #1
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80C7050
	bl object_highlightPanel
loc_80C7050:
	add r6, #1
	cmp r6, #2
	ble loc_80C7036
	mov r6, #1
loc_80C7058:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r6
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	cmp r0, r4
	beq locret_80C7072
	bl object_highlightPanel
	add r6, #1
	cmp r6, #4
	ble loc_80C7058
locret_80C7072:
	pop {r4,r6,pc}
.endfunc // sub_80C7030

loc_80C7074:
	push {lr}
	ldr r1, off_80C7088 // =off_80C708C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C7088: .word off_80C708C
off_80C708C: .word sub_80C7098+1
	.word sub_80C70D8+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C7098:
	push {lr}
	mov r1, #0x14
	mov r2, #0xe
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C7098

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sub_800E29C // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0xd8
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C70D8
	pop {pc}
.func
.thumb_func
sub_80C70D8:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C7100
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r6, [r5,#0x2c]
	mov r3, #0
	ldr r4, dword_80C7110 // =0xa05ff01 
	mov r7, #0
	bl sub_80C536A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_breakPanelLoud
	mov r0, #0x12
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C7100:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C710C
	mov r0, #8
	str r0, [r5,#8]
locret_80C710C:
	pop {pc}
	.byte 0, 0
dword_80C7110: .word 0xA05FF01
.endfunc // sub_80C70D8

.func
.thumb_func
sub_80C7114:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x18
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C7130
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
locret_80C7130:
	pop {pc}
.endfunc // sub_80C7114

	push {r4,r6,r7,lr}
	sub sp, sp, #0x1c
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	str r6, [sp,#0x14]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp,#0x18]
	lsl r7, r4, #2
	ldr r0, off_80C7184 // =off_80C7188 
	ldr r7, [r0,r7]
loc_80C714C:
	mov r0, #0
	ldrsb r0, [r7,r0]
	cmp r0, #0x7f
	beq loc_80C717E
	ldr r2, [sp,#0x18]
	mul r0, r2
	ldr r2, [sp]
	add r0, r0, r2
	mov r1, #1
	ldrsb r1, [r7,r1]
	ldr r2, [sp,#4]
	add r1, r1, r2
	push {r0,r1}
	bl object_isValidPanel
	pop {r0,r1}
	beq loc_80C717A
	ldr r6, [sp,#0x14]
	mov r4, #0
	ldr r3, [sp,#0xc]
	ldr r2, [sp,#8]
	bl sub_80C7114
loc_80C717A:
	add r7, #2
	b loc_80C714C
loc_80C717E:
	add sp, sp, #0x1c
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C7184: .word off_80C7188
off_80C7188: .word dword_80C7194
	.word 0x80C7197, 0x80C719C
dword_80C7194: .word 0x7F0000, 0x7F000100, 0xFF000000, 0x7F0100
loc_80C71A4:
	push {lr}
	ldr r1, off_80C71B4 // =off_80C71B8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C71B4: .word off_80C71B8
off_80C71B8: .word sub_80C71C4+1
	.word sub_80C7250+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C71C4:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x13
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
.endfunc // sub_80C71C4

	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, off_80C7244 // =byte_80C7248 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	bl sub_8019892
	tst r0, r0
	bne loc_80C7222
	bl object_freeMemory
	b locret_80C7240
loc_80C7222:
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A018
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	str r0, [r5,#8]
locret_80C7240:
	pop {pc}
	.balign 4, 0x00
off_80C7244: .word byte_80C7248
byte_80C7248: .byte 0xF, 0x0, 0x14, 0x0, 0x28, 0x0, 0x28, 0x0
.func
.thumb_func
sub_80C7250:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C7260
	ldrb r0, [r5,#0xb]
	cmp r0, #1
	bne loc_80C7268
loc_80C7260:
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80C7268:
	bl sub_8002DD8
	bl sub_801AD9E
	ldr r0, off_80C7280 // =off_80C7284 
	bl sub_801B394
	bl sub_801A018
.endfunc // sub_80C7250

	bl sub_801BCA6
	pop {pc}
off_80C7280: .word off_80C7284
off_80C7284: .word sub_80C72B0+1
	.word sub_80165B8+1
	.word sub_80C734E+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word loc_8017E26+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80C72BC+1
	.word sub_80C72DC+1
	.word sub_80C7306+1
.func
.thumb_func
sub_80C72B0:
	push {lr}
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80C72B0

.func
.thumb_func
sub_80C72BC:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #3
	beq loc_80C72D2
	cmp r0, #4
	bne locret_80C72DA
	mov r0, #0xa
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C72DA
loc_80C72D2:
	mov r0, #9
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C72DA:
	pop {pc}
.endfunc // sub_80C72BC

.func
.thumb_func
sub_80C72DC:
	push {lr}
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80C72DC

.func
.thumb_func
sub_80C7306:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C7330
	mov r1, #4
	strb r1, [r5,#0xa]
	push {r7}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80E1E20
	pop {r7}
	mov r0, #0xc6
	bl sound_play // () -> void
	bl sub_80C73BE
	mov r0, #1
	strb r0, [r5,#0x10]
loc_80C7330:
	ldrb r0, [r5,#0xb]
	cmp r0, #5
	bne locret_80C734C
	mov r0, #0
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq loc_80C7344
	bl sub_80E1E3E
loc_80C7344:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C734C:
	pop {pc}
.endfunc // sub_80C7306

.func
.thumb_func
sub_80C734E:
	push {lr}
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	bl sub_80E05F6
	mov r0, #0x70 
	bl sound_play // () -> void
	bl sub_801A074 // () -> void
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq loc_80C7370
	bl sub_80E1E3E
loc_80C7370:
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne loc_80C737C
	mov r0, #0
	str r0, [r1]
loc_80C737C:
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80C734E

.func
.thumb_func
sub_80C7382:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x19
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C73BC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r1, [r0,#0x14]
	strb r2, [r0,#0x15]
	push {r0-r3,r5}
	add r5, r0, #0
	add r0, r1, #0
	add r1, r2, #0
	bl sub_801BB1C
	pop {r0-r3,r5}
	strb r3, [r0,#0xe]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C73BC:
	pop {pc}
.endfunc // sub_80C7382

.func
.thumb_func
sub_80C73BE:
	push {r4,r6,r7,lr}
	mov r4, #1
loc_80C73C2:
	push {r4}
	ldrb r0, [r5,#0x12]
	add r1, r4, #0
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80C73F0 // =0x405ff01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80C73F4 // =0x3 
	bl sub_80C536A
	pop {r4}
	tst r0, r0
	beq loc_80C73E6
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80C73F8 // =off_80C73FC 
	ldr r1, [r2,r1]
	strh r1, [r0,#0x20]
loc_80C73E6:
	add r4, #1
	cmp r4, #3
	ble loc_80C73C2
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80C73F0: .word 0x405FF01
dword_80C73F4: .word 0x3
off_80C73F8: .word off_80C73FC
off_80C73FC: .word 0x48
	.word 0x48
	.word 0x48
	.word 0x48
.endfunc // sub_80C73BE

loc_80C740C:
	push {lr}
	ldr r1, off_80C741C // =off_80C7420 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C741C: .word off_80C7420
off_80C7420: .word sub_80C742C+1
	.word loc_80C7450+1
	.word sub_80C7530+1
.func
.thumb_func
sub_80C742C:
	push {lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, off_80C7444 // =byte_80C7448 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x20]
	strh r0, [r5,#0x22]
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
off_80C7444: .word byte_80C7448
byte_80C7448: .byte 0x5A
	.byte  0
	.byte 0x50 
	.byte  0
	.byte 0x3C 
	.byte  0
	.byte 0x32 
	.byte  0
.endfunc // sub_80C742C

loc_80C7450:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C7472
	bl sub_80C7572
	strb r0, [r5,#5]
	bl battle_isTimeStop
	bne locret_80C7476
	ldr r1, off_80C7478 // =off_80C747C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80C7476
loc_80C7472:
	mov r0, #8
	str r0, [r5,#8]
locret_80C7476:
	pop {pc}
off_80C7478: .word off_80C747C
off_80C747C: .word sub_80C7484+1
	.word sub_80C7524+1
.func
.thumb_func
sub_80C7484:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #1
	beq loc_80C74AA
	cmp r0, #2
	beq loc_80C74B0
	cmp r0, #4
	beq loc_80C74BA
	cmp r0, #5
	beq loc_80C74C4
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80C74D0
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	bne loc_80C74C4
	b loc_80C74D0
loc_80C74AA:
	bl sub_80C78DC
	b loc_80C74CC
loc_80C74B0:
	bl sub_80C758E
	ldrh r0, [r5,#0x20]
	strh r0, [r5,#0x22]
	b loc_80C74CC
loc_80C74BA:
	bl sub_80C78F8
	mov r0, #1
	strb r0, [r5,#6]
	b loc_80C74CC
loc_80C74C4:
	bl sub_80C791E
	mov r0, #0
	strb r0, [r5,#6]
loc_80C74CC:
	mov r0, #0
	strb r0, [r5,#0xb]
loc_80C74D0:
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #9
	cmp r0, r1
	bne locret_80C7514
	ldrb r0, [r5,#5]
	tst r0, r0
	beq locret_80C7514
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80C7514
	ldrh r0, [r5,#0x20]
	strh r0, [r5,#0x22]
	ldr r0, off_80C7518 // =dword_80C751C 
	ldr r2, [r0]
	ldr r3, [r0,#0x4] // (dword_80C7520 - 0x80c751c)
	bl sub_80C776C
	tst r0, r0
	beq locret_80C7514
	push {r0,r1}
	bl sub_801BB1C
	pop {r0,r1}
	ldr r3, off_80C7518 // =dword_80C751C 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80C7520 - 0x80c751c)
	push {r0,r1}
	bl sub_80C780C
	pop {r0,r1}
	bl sub_801BB46
locret_80C7514:
	pop {pc}
	.balign 4, 0x00
off_80C7518: .word dword_80C751C
dword_80C751C: .word 0x10
dword_80C7520: .word 0xF880080
.endfunc // sub_80C7484

.func
.thumb_func
sub_80C7524:
	push {lr}
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80C7524

.func
.thumb_func
sub_80C7530:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne loc_80C753E
	mov r0, #0
	str r0, [r1]
loc_80C753E:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80C7530

.func
.thumb_func
sub_80C7544:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1a
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C7570
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r1, [r0,#0x60]
	str r0, [r1]
	mov r1, #0x64 
	add r1, r1, r0
	str r1, [r7]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C7570:
	pop {pc}
.endfunc // sub_80C7544

.func
.thumb_func
sub_80C7572:
	push {lr}
	mov r0, #0
	mov r3, #0
loc_80C7578:
	add r1, r3, #0
	lsl r1, r1, #2
	add r1, #0x64 
	ldr r1, [r5,r1]
	tst r1, r1
	beq loc_80C7586
	add r0, #1
loc_80C7586:
	add r3, #1
	cmp r3, #3
	blt loc_80C7578
	pop {pc}
.endfunc // sub_80C7572

.func
.thumb_func
sub_80C758E:
	push {r6,r7,lr}
	sub sp, sp, #0x20
	push {r5}
	ldr r5, [r5,#0x4c]
	bl object_getFlag // () -> int
	pop {r5}
	ldr r1, dword_80C75F8 // =0xa000 
	tst r0, r1
	bne loc_80C75BC
	ldr r0, off_80C75FC // =dword_80C7600 
	ldr r2, [r0]
	ldr r3, [r0,#0x4] // (dword_80C7604 - 0x80c7600)
	bl sub_80C7632
	tst r0, r0
	beq loc_80C75F0
	ldr r3, off_80C75FC // =dword_80C7600 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80C7604 - 0x80c7600)
	bl sub_80C76B8
	b loc_80C75F2
loc_80C75BC:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80C7608 // =off_80C760C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80C758E

	add r6, r0, #0
	tst r6, r6
	beq loc_80C75F0
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r2, #0
	bl sub_80C761C
	mov r0, #1
	b loc_80C75F2
loc_80C75F0:
	mov r0, #0
loc_80C75F2:
	add sp, sp, #0x20
	pop {r6,r7,pc}
	.balign 4, 0x00
dword_80C75F8: .word 0xA000
off_80C75FC: .word dword_80C7600
dword_80C7600: .word 0x10
dword_80C7604: .word 0xF880080
off_80C7608: .word off_80C760C
off_80C760C: .word 0x30
	.word 0xF880080, 0x10, 0xF8800A0
.func
.thumb_func
sub_80C761C:
	push {r0,r1,r4,r6,r7,lr}
	mov r7, #0x64 
	lsl r2, r2, #2
	add r7, r7, r2
	add r7, r7, r5
	ldrb r2, [r5,#0xe]
	ldrb r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	bl sub_80C7382
	pop {r0,r1,r4,r6,r7,pc}
.endfunc // sub_80C761C

.func
.thumb_func
sub_80C7632:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #4
	ldr r3, [r5,#0x4c]
	ldrh r1, [r3,#0x26]
	lsr r1, r1, #2
	ldrh r2, [r3,#0x24]
	cmp r1, r2
	blt loc_80C764C
	add r0, #8
loc_80C764C:
	ldr r7, off_80C7694 // =byte_80C7698 
	add r7, r7, r0
	mov r4, #0
	mov r6, #0
loc_80C7654:
	ldrb r0, [r7,r4]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r1, sp, #8
	push {r7}
	add r7, r1, r6
	bl sub_800CFDC
.endfunc // sub_80C7632

	pop {r7}
	add r6, r6, r0
	add r4, #1
	cmp r4, #8
	blt loc_80C7654
	tst r6, r6
	beq loc_80C768C
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r2, #0
	bl sub_80C761C
	b loc_80C768E
loc_80C768C:
	mov r0, #0
loc_80C768E:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C7694: .word byte_80C7698
byte_80C7698: .byte 0x4, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x5, 0x4, 0x4, 0x4, 0x5, 0x5, 0x5, 0x5, 0x5, 0x3
	.byte 0x3, 0x3, 0x3, 0x3, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2
.func
.thumb_func
sub_80C76B8:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	str r0, [sp,#8]
	str r1, [sp,#0xc]
	str r2, [sp]
	str r3, [sp,#4]
	mov r6, #0
	mov r4, #3
	ldr r3, [r5,#0x4c]
	ldrh r1, [r3,#0x26]
	lsr r1, r1, #2
	ldrh r2, [r3,#0x24]
	cmp r1, r2
	blt loc_80C76D6
	mov r4, #1
loc_80C76D6:
	bl sub_8001532
	mov r1, #3
	and r0, r1
	cmp r0, r4
	bge loc_80C7716
	mov r4, #0
loc_80C76E4:
	ldrb r0, [r5,#0x16]
	mov r1, #3
	mul r0, r1
	ldr r1, off_80C7760 // =dword_80C7764 
	add r1, r1, r0
	ldrb r0, [r1,r4]
	ldr r1, [sp,#0xc]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80C770C
	lsl r1, r1, #4
	orr r0, r1
	add r7, sp, #0x10
	strb r0, [r7,r6]
	add r6, #1
loc_80C770C:
	add r4, #1
	cmp r4, #3
	blt loc_80C76E4
	tst r6, r6
	bne loc_80C7744
loc_80C7716:
	mov r4, #0
loc_80C7718:
	ldrb r0, [r5,#0x16]
	mov r1, #3
	mul r0, r1
	ldr r1, off_80C7760 // =dword_80C7764 
	add r1, r1, r0
	ldrb r0, [r1,r4]
	ldr r1, [sp,#8]
	cmp r0, r1
	beq loc_80C773A
	ldr r1, [sp,#0xc]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #0x10
	add r7, r7, r6
	bl sub_800CF14
	add r6, r6, r0
loc_80C773A:
	add r4, #1
	cmp r4, #3
	blt loc_80C7718
	tst r6, r6
	beq loc_80C775C
loc_80C7744:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r2, #1
	bl sub_80C761C
loc_80C775C:
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
off_80C7760: .word dword_80C7764
dword_80C7764: .word 0x3060504, 0x102
.endfunc // sub_80C76B8

.func
.thumb_func
sub_80C776C:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #4
	ldr r3, [r5,#0x4c]
	ldrh r1, [r3,#0x26]
	lsr r1, r1, #2
	ldrh r2, [r3,#0x24]
	cmp r1, r2
	blt loc_80C7786
	add r0, #8
loc_80C7786:
	ldr r7, off_80C77E8 // =byte_80C77EC 
	add r7, r7, r0
	mov r4, #0
	mov r6, #0
loc_80C778E:
	ldrb r0, [r7,r4]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r1, sp, #8
	push {r7}
	add r7, r1, r6
	bl sub_800CFDC
.endfunc // sub_80C776C

	pop {r7}
	add r6, r6, r0
	add r4, #1
	cmp r4, #8
	blt loc_80C778E
	tst r6, r6
	beq loc_80C77E0
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r3, #0
loc_80C77C0:
	add r2, r3, #0
	lsl r2, r2, #2
	add r2, #0x64 
	ldr r2, [r5,r2]
	tst r2, r2
	beq loc_80C77DA
	strb r0, [r2,#0x14]
	strb r1, [r2,#0x15]
	push {r0,r1}
	mov r0, #3
	strb r0, [r2,#0xb]
	pop {r0,r1}
	b loc_80C77E2
loc_80C77DA:
	add r3, #1
	cmp r3, #3
	blt loc_80C77C0
loc_80C77E0:
	mov r0, #0
loc_80C77E2:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C77E8: .word byte_80C77EC
byte_80C77EC: .byte 0x4, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x5, 0x4, 0x4, 0x4, 0x5, 0x5, 0x5, 0x5, 0x5, 0x3
	.byte 0x3, 0x3, 0x3, 0x3, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2
.func
.thumb_func
sub_80C780C:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	str r0, [sp,#8]
	str r1, [sp,#0xc]
	str r2, [sp]
	str r3, [sp,#4]
	mov r6, #0
	mov r4, #3
	ldr r3, [r5,#0x4c]
	ldrh r1, [r3,#0x26]
	lsr r1, r1, #2
	ldrh r2, [r3,#0x24]
	cmp r1, r2
	blt loc_80C782A
	mov r4, #1
loc_80C782A:
	bl sub_8001532
	mov r1, #3
	and r0, r1
	cmp r0, r4
	bge loc_80C786A
	mov r4, #0
loc_80C7838:
	ldrb r0, [r5,#0x16]
	mov r1, #3
	mul r0, r1
	ldr r1, off_80C78D0 // =dword_80C78D4 
	add r1, r1, r0
	ldrb r0, [r1,r4]
	ldr r1, [sp,#0xc]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80C7860
	lsl r1, r1, #4
	orr r0, r1
	add r7, sp, #0x10
	strb r0, [r7,r6]
	add r6, #1
loc_80C7860:
	add r4, #1
	cmp r4, #3
	blt loc_80C7838
	tst r6, r6
	bne loc_80C7898
loc_80C786A:
	mov r4, #0
loc_80C786C:
	ldrb r0, [r5,#0x16]
	mov r1, #3
	mul r0, r1
	ldr r1, off_80C78D0 // =dword_80C78D4 
	add r1, r1, r0
	ldrb r0, [r1,r4]
	ldr r1, [sp,#8]
	cmp r0, r1
	beq loc_80C788E
	ldr r1, [sp,#0xc]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #0x10
	add r7, r7, r6
	bl sub_800CF14
	add r6, r6, r0
loc_80C788E:
	add r4, #1
	cmp r4, #3
	blt loc_80C786C
	tst r6, r6
	beq loc_80C78CC
loc_80C7898:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r3, #1
loc_80C78AC:
	add r2, r3, #0
	lsl r2, r2, #2
	add r2, #0x64 
	ldr r2, [r5,r2]
	tst r2, r2
	beq loc_80C78C6
	strb r0, [r2,#0x14]
	strb r1, [r2,#0x15]
	push {r0,r1}
	mov r0, #3
	strb r0, [r2,#0xb]
	pop {r0,r1}
	b loc_80C78CC
loc_80C78C6:
	add r3, #1
	cmp r3, #3
	blt loc_80C78AC
loc_80C78CC:
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
off_80C78D0: .word dword_80C78D4
dword_80C78D4: .word 0x3060504, 0x102
.endfunc // sub_80C780C

.func
.thumb_func
sub_80C78DC:
	push {lr}
	mov r3, #0
loc_80C78E0:
	add r1, r3, #0
	lsl r1, r1, #2
	add r1, #0x64 
	ldr r1, [r5,r1]
	tst r1, r1
	beq loc_80C78F0
	mov r0, #1
	strb r0, [r1,#0xb]
loc_80C78F0:
	add r3, #1
	cmp r3, #3
	blt loc_80C78E0
	pop {pc}
.endfunc // sub_80C78DC

.func
.thumb_func
sub_80C78F8:
	push {lr}
	mov r3, #0
loc_80C78FC:
	add r1, r3, #0
	lsl r1, r1, #2
	add r1, #0x64 
	ldr r1, [r5,r1]
	tst r1, r1
	beq loc_80C7916
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#0x13]
	ldrb r2, [r1,#0x13]
	cmp r0, r2
	bne loc_80C7916
	mov r0, #4
	strb r0, [r1,#0xb]
loc_80C7916:
	add r3, #1
	cmp r3, #3
	blt loc_80C78FC
	pop {pc}
.endfunc // sub_80C78F8

.func
.thumb_func
sub_80C791E:
	push {lr}
	mov r3, #0
loc_80C7922:
	add r1, r3, #0
	lsl r1, r1, #2
	add r1, #0x64 
	ldr r1, [r5,r1]
	tst r1, r1
	beq loc_80C7932
	mov r0, #5
	strb r0, [r1,#0xb]
loc_80C7932:
	add r3, #1
	cmp r3, #3
	blt loc_80C7922
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80C791E

loc_80C793C:
	push {lr}
	ldr r1, off_80C794C // =off_80C7950 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C794C: .word off_80C7950
off_80C7950: .word sub_80C795C+1
	.word sub_80C7980+1
	.word sub_80C7A58+1
.func
.thumb_func
sub_80C795C:
	push {lr}
	mov r0, #0
	strh r0, [r5,#6]
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, off_80C7974 // =dword_80C7978 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x22]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
	.balign 4, 0x00
off_80C7974: .word dword_80C7978
dword_80C7978: .word 0x120018
	.word 0xC000C
.endfunc // sub_80C795C

.func
.thumb_func
sub_80C7980:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C79A6
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xc
	cmp r0, r1
	bne loc_80C79A6
	bl battle_isTimeStop
	bne locret_80C79AA
	ldr r1, off_80C79AC // =off_80C79B0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80C79AA
loc_80C79A6:
	mov r0, #8
	str r0, [r5,#8]
locret_80C79AA:
	pop {pc}
off_80C79AC: .word off_80C79B0
off_80C79B0: .word sub_80C79BC+1
	.word sub_80C7A06+1
	.word sub_80C7A20+1
.endfunc // sub_80C7980

.func
.thumb_func
sub_80C79BC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C79CA
	mov r1, #4
	strb r1, [r5,#0xa]
	b loc_80C79E0
loc_80C79CA:
	ldrh r1, [r5,#0x22]
	lsr r1, r1, #1
	ldrh r0, [r5,#0x20]
	cmp r0, r1
	blt loc_80C79D8
	bl sub_80C7B88
loc_80C79D8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C7A04
loc_80C79E0:
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#5]
	cmp r0, r1
	bge loc_80C79F8
	bl sub_80C7A94
	ldrb r0, [r5,#6]
	add r0, #1
	strb r0, [r5,#6]
	ldrh r0, [r5,#0x22]
	strh r0, [r5,#0x20]
	b locret_80C7A04
loc_80C79F8:
	mov r0, #0
	strh r0, [r5,#6]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C7A04:
	pop {pc}
.endfunc // sub_80C79BC

.func
.thumb_func
sub_80C7A06:
	push {lr}
	ldr r1, [r5,#0x4c]
	ldr r0, [r1,#0x58]
	mov r2, #0xa0
	add r2, r2, r0
	ldrb r0, [r2]
	cmp r0, #0x14
	bne locret_80C7A1E
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C7A1E:
	pop {pc}
.endfunc // sub_80C7A06

.func
.thumb_func
sub_80C7A20:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C7A32
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x12
	strh r0, [r5,#0x20]
	b locret_80C7A56
loc_80C7A32:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C7A56
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#5]
	cmp r0, r1
	bge loc_80C7A52
	bl sub_80C7BCC
	ldrb r0, [r5,#6]
	add r0, #1
	strb r0, [r5,#6]
	mov r0, #0x12
	strh r0, [r5,#0x20]
	b locret_80C7A56
loc_80C7A52:
	mov r0, #8
	str r0, [r5,#8]
locret_80C7A56:
	pop {pc}
.endfunc // sub_80C7A20

.func
.thumb_func
sub_80C7A58:
	push {lr}
	ldr r1, [r5,#0x50]
	ldr r0, [r1]
	cmp r0, r5
	bne loc_80C7A66
	mov r0, #0
	str r0, [r1]
loc_80C7A66:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80C7A58

.func
.thumb_func
sub_80C7A6C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1b
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C7A92
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r7, [r0,#0x50]
	str r0, [r7]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C7A92:
	pop {pc}
.endfunc // sub_80C7A6C

.func
.thumb_func
sub_80C7A94:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	mov r4, #0
	ldrb r0, [r5,#5]
	cmp r0, #1
	beq loc_80C7B04
	cmp r0, #3
	beq loc_80C7AA6
	mov r4, #8
loc_80C7AA6:
	bl sub_8001532
	mov r1, #7
	and r0, r1
	add r0, r0, r4
	ldr r1, off_80C7B4C // =dword_80C7B50 
	ldrb r4, [r1,r0]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80C7B60 // =dword_80C7B64 
	add r1, r1, r0
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_80C7B48
	add r0, sp, #0
	add r1, r6, #0
	add r2, r6, #0
	bl sub_8000C72
	mov r7, #0
loc_80C7AD8:
	add r0, sp, #0
	ldrb r0, [r0,r7]
	mov r1, #0x79 
	add r1, r1, r5
	ldrb r2, [r1]
	mov r3, #0x60 
	add r3, r3, r5
	add r3, r3, r2
	strb r0, [r3]
	add r2, #1
	strb r2, [r1]
	add r7, #1
	cmp r7, r4
	bge loc_80C7AF8
	cmp r7, r6
	blt loc_80C7AD8
loc_80C7AF8:
	ldrb r0, [r5,#6]
	mov r1, #0x74 
	add r0, r0, r1
	add r0, r0, r5
	strb r7, [r0]
	b loc_80C7B48
loc_80C7B04:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80C7B74 // =dword_80C7B78 
	add r1, r1, r0
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80C7A94

	add r6, r0, #0
	tst r6, r6
	beq loc_80C7B48
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	mov r1, #0x79 
	add r1, r1, r5
	ldrb r2, [r1]
	mov r3, #0x60 
	add r3, r3, r5
	add r3, r3, r2
	strb r0, [r3]
	add r2, #1
	strb r2, [r1]
	ldrb r0, [r5,#6]
	mov r1, #0x74 
	add r0, r0, r1
	add r0, r0, r5
	mov r7, #1
	strb r7, [r0]
	b loc_80C7B48
loc_80C7B48:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
off_80C7B4C: .word dword_80C7B50
dword_80C7B50: .word 0x2020201, 0x3030303, 0x3030302, 0x4040303
off_80C7B60: .word dword_80C7B64
dword_80C7B64: .word 0x20, 0x2800000, 0x0
	.word 0x1800020
off_80C7B74: .word dword_80C7B78
dword_80C7B78: .word 0x20, 0x6800000, 0x0
	.byte 0x20
	.byte  0
	.byte 0x80
	.byte  9
.func
.thumb_func
sub_80C7B88:
	push {r4,r6,r7,lr}
	mov r0, #0x74 
	ldrb r1, [r5,#6]
	sub r1, #1
	add r0, r0, r1
	add r0, r0, r5
	ldrb r6, [r0]
	mov r4, #0
	mov r7, #0
loc_80C7B9A:
	ldrb r0, [r5,#6]
	sub r0, #1
	cmp r4, r0
	bge loc_80C7BB0
	mov r0, #0x74 
	add r0, r0, r4
	add r0, r0, r5
	ldrb r1, [r0]
	add r7, r7, r1
	add r4, #1
	b loc_80C7B9A
loc_80C7BB0:
	mov r4, #0
loc_80C7BB2:
	mov r0, #0x60 
	add r0, r0, r7
	add r0, r0, r5
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl object_highlightPanel
	add r4, #1
	cmp r4, r6
	blt loc_80C7BB2
	pop {r4,r6,r7,pc}
.endfunc // sub_80C7B88

.func
.thumb_func
sub_80C7BCC:
	push {r4,r6,r7,lr}
	mov r0, #0x74 
	ldrb r1, [r5,#6]
	add r0, r0, r1
	add r0, r0, r5
	ldrb r6, [r0]
	mov r4, #0
	mov r7, #0
loc_80C7BDC:
	ldrb r0, [r5,#6]
	cmp r4, r0
	bge loc_80C7BF0
	mov r0, #0x74 
	add r0, r0, r4
	add r0, r0, r5
	ldrb r1, [r0]
	add r7, r7, r1
	add r4, #1
	b loc_80C7BDC
loc_80C7BF0:
	mov r4, #0
loc_80C7BF2:
	mov r0, #0x60 
	add r0, r0, r7
	add r0, r0, r5
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	push {r4,r6}
	ldrb r2, [r5,#0xe]
	mov r4, #0
	ldr r6, [r5,#0x2c]
	bl sub_80C7D50
	pop {r4,r6}
	add r4, #1
	cmp r4, r6
	blt loc_80C7BF2
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
.endfunc // sub_80C7BCC

loc_80C7C18:
	push {lr}
	ldr r1, off_80C7C2C // =off_80C7C30 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80C7C2C: .word off_80C7C30
off_80C7C30: .word sub_80C7C3C+1
	.word sub_80C7CC0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C7C3C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x14
	mov r2, #0x14
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C7C3C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80C7C86
	bl object_freeMemory
	b locret_80C7CBE
loc_80C7C86:
	ldrb r1, [r5,#4]
	cmp r1, #1
	beq loc_80C7C98
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	b loc_80C7CA8
loc_80C7C98:
	mov r1, #0xa
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0x10
	bl sub_801A258
loc_80C7CA8:
	mov r0, #3
	bl sub_801A140
	bl sub_801A018
	mov r0, #0x2f 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
locret_80C7CBE:
	pop {pc}
.func
.thumb_func
sub_80C7CC0:
	push {lr}
	bl sub_801A00E
	.hword 0xF752
	.word 0xF742FA05, 0x4200FA60, 0x6D68D110, 0x42006F00, 0xF752D001
	.word 0xF742F9CB, 0xD104F9DB, 0x7A684906, 0x46FE5809, 0xF7524708
	.word 0xE003F993, 0xF9BEF752, 0x60A82008, 0xBD00
	.word off_80C7D04
off_80C7D04: .word sub_80C7D08+1
.endfunc // sub_80C7CC0

.func
.thumb_func
sub_80C7D08:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C7D1E
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xf
	strh r0, [r5,#0x20]
	mov r0, #0xa
	strh r0, [r5,#0x22]
	b locret_80C7D4E
loc_80C7D1E:
	ldr r1, [r5,#0x54]
	ldr r0, [r1,#0x70]
	tst r0, r0
	beq loc_80C7D2A
	bl sub_801A074 // () -> void
loc_80C7D2A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80C7D3E
	bl sub_801A074 // () -> void
loc_80C7D3E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C7D4E
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C7D4E:
	pop {pc}
.endfunc // sub_80C7D08

.func
.thumb_func
sub_80C7D50:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1c
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C7D74
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C7D74:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80C7D50

loc_80C7D78:
	push {lr}
	ldr r1, off_80C7D88 // =off_80C7D8C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C7D88: .word off_80C7D8C
off_80C7D8C: .word sub_80C7D98+1
	.word sub_80C7E24+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C7D98:
	push {lr}
	bl battle_isBattleOver
	bne loc_80C7DF0
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80C7DF0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	mov r0, #0x68 
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	ldrb r0, [r5]
	mov r1, #3
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #5
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0
	str r0, [r5,#0x48]
	bl sub_8019892
	tst r0, r0
	bne loc_80C7DF6
loc_80C7DF0:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80C7D98

loc_80C7DF6:
	mov r1, #0x15
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #0
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80C7E1A
	ldr r1, [r0]
	add r1, #1
	str r1, [r0]
loc_80C7E1A:
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C7E24
	pop {pc}
.func
.thumb_func
sub_80C7E24:
	push {lr}
	bl sub_801A00E
	.hword 0xF752
	.word 0x6D69F953, 0x42006F08, 0xF000D00C, 0xF752F847, 0x6E28F91B
	.word 0xD0024200, 0x39016801, 0x20086001, 0xE00860A8, 0x7A684904
	.word 0x46FE5809, 0xF7534708, 0xF752FEA7, 0xBD00F8DB
	.word off_80C7E68
off_80C7E68: .word sub_80C7E6C+1
.endfunc // sub_80C7E24

.func
.thumb_func
sub_80C7E6C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C7E86
	ldrh r0, [r5,#0x3e]
	cmp r0, #0x1e
	bge loc_80C7E86
	mov r0, #1
	bl sub_801A07C
	mov r0, #4
	strh r0, [r5,#0xa]
	b locret_80C7EC2
loc_80C7E86:
	ldr r1, [r5,#0x48]
	ldr r2, dword_80C7EC4 // =0x2000 
	add r1, r1, r2
	str r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	bgt locret_80C7EC2
	bl object_isCurrentPanelSolid
	beq loc_80C7EA2
	bl sub_80C7EC8
	b loc_80C7EAE
loc_80C7EA2:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
loc_80C7EAE:
	bl sub_801A074 // () -> void
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80C7EBE
	ldr r1, [r0]
	sub r1, #1
	str r1, [r0]
loc_80C7EBE:
	mov r0, #8
	str r0, [r5,#8]
locret_80C7EC2:
	pop {pc}
dword_80C7EC4: .word 0x2000
.endfunc // sub_80C7E6C

.func
.thumb_func
sub_80C7EC8:
	push {lr}
	mov r3, #0
	ldr r6, off_80C7EFC // =dword_80C7F00 
loc_80C7ECE:
	push {r3,r6}
	bl change_20013F0_800151C // () -> int
	mov r4, #3
	and r4, r0
	add r4, #1
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0
	ldr r7, [r6,#4]
	ldr r6, [r6]
	mov r0, #2
	bl sub_80E1084
	pop {r3,r6}
	add r6, #8
	add r3, #1
	cmp r3, #2
	bmi loc_80C7ECE
	mov r0, #0xd9
	bl sound_play // () -> void
	pop {pc}
off_80C7EFC: .word dword_80C7F00
dword_80C7F00: .word 0x8000
dword_80C7F04: .word 0x28000
	.word 0xFFFF8000, 0x30000, 0x10000, 0x28000, 0xFFFF8000
	.word 0x18000
.endfunc // sub_80C7EC8

.func
.thumb_func
sub_80C7F20:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1d
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C7F3E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x60]
locret_80C7F3E:
	pop {pc}
.endfunc // sub_80C7F20

loc_80C7F40:
	push {lr}
	ldr r1, off_80C7F54 // =off_80C7F58 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80C7F54: .word off_80C7F58
off_80C7F58: .word sub_80C7F64+1
	.word sub_80C7FDC+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C7F64:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x88
	mul r0, r1
	ldrh r1, [r5,#0x36]
	add r0, r0, r1
	strh r0, [r5,#0x36]
	mov r1, #0x10
	mov r2, #0x12
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C7F64

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80C7FBC
	bl object_freeMemory
	b locret_80C7FDA
loc_80C7FBC:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #8
	bl sub_801A07C
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80C7FDA:
	pop {pc}
.func
.thumb_func
sub_80C7FDC:
	push {lr}
	bl sub_801A00E
	.hword 0xF752
	.word 0xF742F877, 0x4200F8D2, 0x6D68D115, 0x42006F00, 0xF752D001
	.word 0x6CE8F83D, 0x210B7A40, 0xD10A4288, 0xF848F742, 0x4906D10B
	.word 0x58097A68, 0x470846FE, 0xF800F752, 0xF752E003, 0x2008F82B
	.word 0xBD0060A8
	.word off_80C8028
off_80C8028: .word sub_80C802C+1
.endfunc // sub_80C7FDC

.func
.thumb_func
sub_80C802C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C8044
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, off_80C8064 // =aH_0 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x20]
	b locret_80C8060
loc_80C8044:
	ldr r1, [r5,#0x54]
	ldr r0, [r1,#0x70]
	tst r0, r0
	beq loc_80C8050
	bl sub_801A074 // () -> void
loc_80C8050:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C8060
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C8060:
	pop {pc}
	.balign 4, 0x00
off_80C8064: .word aH_0
aH_0: .asciz "H"
	.byte 0x48 
	.byte  0
	.byte 0x48 
	.byte  0
	.byte 0x48 
	.byte  0
.endfunc // sub_80C802C

.func
.thumb_func
sub_80C8070:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1e
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C8096
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C8096:
	pop {pc}
.endfunc // sub_80C8070

loc_80C8098:
	push {lr}
	ldr r1, off_80C80A8 // =off_80C80AC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80C80A8: .word off_80C80AC
off_80C80AC: .word sub_80C80B8+1
	.word sub_80C8100+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C80B8:
	push {r4,lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_8019892
	tst r0, r0
	bne loc_80C80D0
	bl object_freeMemory
	b locret_80C80FE
loc_80C80D0:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #1
	bl sub_801A140
	bl sub_801A018
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0x20 
	lsl r3, r3, #0x10
	mov r4, #0
	bl sub_80E05F6
	mov r0, #7
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
locret_80C80FE:
	pop {r4,pc}
.endfunc // sub_80C80B8

.func
.thumb_func
sub_80C8100:
	push {lr}
	bl sub_801A00E
	.hword 0xF751
	.word 0xF742FFE5, 0x4200F840, 0x6D69D10E, 0x42006F08, 0xF741D10A
	.word 0xD10BFFBD, 0x7A684906, 0x46FE5809, 0xF7514708, 0xE003FF75
	.word 0xFFA0F751, 0x60A82008, 0xBD00
	.word off_80C8140
off_80C8140: .word sub_80C8144+1
.endfunc // sub_80C8100

.func
.thumb_func
sub_80C8144:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C8154
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
loc_80C8154:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80C8192
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80C819C
	bl sub_800E29C // () -> void
	bl sub_801A04C
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0x20 
	lsl r3, r3, #0x10
	mov r4, #0
	bl sub_80E05F6
	mov r0, #7
	add r0, #0xff
	bl sound_play // () -> void
loc_80C8192:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	b locret_80C81A4
loc_80C819C:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C81A4:
	pop {r4,pc}
.endfunc // sub_80C8144

.func
.thumb_func
sub_80C81A6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1f
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C81CA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C81CA:
	pop {pc}
.endfunc // sub_80C81A6

loc_80C81CC:
	push {lr}
	ldr r1, off_80C81E0 // =off_80C81E4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80C81E0: .word off_80C81E4
off_80C81E4: .word sub_80C81F0+1
	.word loc_80C8232+1
	.word sub_80C829C+1
.func
.thumb_func
sub_80C81F0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0xc
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0xd
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C81F0

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80C8232:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C8258
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	bne loc_80C8258
	bl battle_isTimeStop
	bne locret_80C825C
	ldr r1, off_80C8260 // =off_80C8264 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80C825C
loc_80C8258:
	mov r0, #8
	str r0, [r5,#8]
locret_80C825C:
	pop {pc}
	.byte 0, 0
off_80C8260: .word off_80C8264
off_80C8264: .word sub_80C8268+1
.func
.thumb_func
sub_80C8268:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C8286
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#6]
	bl sub_80C832E
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	mov r0, #1
	strh r0, [r5,#0x22]
	bl sub_80C82D0
loc_80C8286:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80C8296
	ldrb r0, [r5,#6]
	bl sub_80C8310
	b locret_80C829A
loc_80C8296:
	mov r0, #8
	str r0, [r5,#8]
locret_80C829A:
	pop {pc}
.endfunc // sub_80C8268

.func
.thumb_func
sub_80C829C:
	push {r4,lr}
	bl sub_80C8368
	bl sub_8016C8A
	pop {r4,pc}
.endfunc // sub_80C829C

.func
.thumb_func
sub_80C82A8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x20 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C82CE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C82CE:
	pop {pc}
.endfunc // sub_80C82A8

.func
.thumb_func
sub_80C82D0:
	push {r4,r6,r7,lr}
	mov r4, #1
loc_80C82D4:
	push {r4,r5}
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80C830C // =0x3 
	ldrb r4, [r5,#5]
	lsl r4, r4, #0x10
	orr r7, r4
	mov r4, #0xb
	lsl r4, r4, #0x18
	orr r7, r4
	ldr r4, dword_80C8308 // =0x4050101 
	ldr r5, [r5,#0x4c]
	bl sub_80CC9FC
	pop {r4,r5}
	add r4, #1
	ldrb r0, [r5,#6]
	cmp r4, r0
	ble loc_80C82D4
	pop {r4,r6,r7,pc}
dword_80C8308: .word 0x4050101
dword_80C830C: .word 0x3
.endfunc // sub_80C82D0

.func
.thumb_func
sub_80C8310:
	push {r4,r6,lr}
	mov r4, #1
	add r6, r0, #0
loc_80C8316:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	add r4, #1
	cmp r4, r6
	ble loc_80C8316
	pop {r4,r6,pc}
.endfunc // sub_80C8310

.func
.thumb_func
sub_80C832E:
	push {r4,r6,lr}
	mov r4, #1
	add r6, r0, #0
loc_80C8334:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq locret_80C8366
	push {r7}
	add r2, r4, #0
	sub r2, #1
	lsl r2, r2, #2
	mov r7, #0x60 
	add r7, r7, r2
	add r7, r7, r5
	bl sub_80E1B1E
	pop {r7}
	add r4, #1
	cmp r4, r6
	ble loc_80C8334
locret_80C8366:
	pop {r4,r6,pc}
.endfunc // sub_80C832E

.func
.thumb_func
sub_80C8368:
	push {r4,lr}
	mov r4, #0
loc_80C836C:
	add r0, r4, #0
	lsl r0, r0, #2
	mov r1, #0x60 
	add r0, r0, r1
	ldr r0, [r5,r0]
	tst r0, r0
	beq loc_80C837E
	bl sub_80E1B3C
loc_80C837E:
	add r4, #1
	cmp r4, #5
	blt loc_80C836C
	pop {r4,pc}
	.balign 4, 0x00
.endfunc // sub_80C8368

loc_80C8388:
	push {lr}
	ldr r1, off_80C83A8 // =off_80C83AC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80C83A0
	bl sub_801BCA6
	b locret_80C83A4
loc_80C83A0:
	bl sub_801BBF4
locret_80C83A4:
	pop {pc}
	.balign 4, 0x00
off_80C83A8: .word off_80C83AC
off_80C83AC: .word sub_80C83B8+1
	.word sub_80C8498+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C83B8:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80C8450 // =dword_80C8454 
	ldr r0, [r1,r0]
	ldrb r2, [r5,#5]
	lsl r2, r2, #1
	ldr r3, off_80C8468 // =dword_80C846C 
	add r3, r3, r2
	mov r1, #0
	ldrsb r2, [r3,r1]
	mov r1, #1
	ldrsb r3, [r3,r1]
	mul r2, r0
	mul r3, r0
	str r2, [r5,#0x40]
	str r3, [r5,#0x44]
	add r1, r0, #0
	ldrb r0, [r5,#5]
	lsl r0, r0, #2
	ldr r2, off_80C8484 // =dword_80C8488 
	ldr r0, [r2,r0]
	svc 6
	strh r0, [r5,#0x20]
	mov r1, #8
	mov r2, #0xc
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#5]
	ldr r1, off_80C847C // =dword_80C8480 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C83B8

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#5]
	ldr r1, off_80C8474 // =dword_80C8478 
	ldrb r0, [r1,r0]
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80C8436
	bl object_freeMemory
	b locret_80C844E
loc_80C8436:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #1
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80C844E:
	pop {pc}
off_80C8450: .word dword_80C8454
dword_80C8454: .word 0x80000, 0xA0000, 0xA0000, 0xC0000, 0x60000
off_80C8468: .word dword_80C846C
dword_80C846C: .word 0x100FF, 0x100FF00
off_80C8474: .word dword_80C8478
dword_80C8478: .word 0x20001
off_80C847C: .word dword_80C8480
dword_80C8480: .word 0x12121111
off_80C8484: .word dword_80C8488
dword_80C8488: .word 0x1180000, 0x1180000, 0x780000, 0x780000
.func
.thumb_func
sub_80C8498:
	push {lr}
	bl sub_801A00E
	.hword 0xF751
	.word 0xF741FE19, 0x4200FE74, 0x6D69D111, 0x42006F08, 0x7928D10D
	.word 0xD0022804, 0xFDEEF741, 0x4906D104, 0x58097A68, 0x470846FE
	.word 0xFDA6F751, 0xF751E003, 0x2008FDD1, 0xBD0060A8
	.word off_80C84DC
off_80C84DC: .word sub_80C84E0+1
.endfunc // sub_80C8498

.func
.thumb_func
sub_80C84E0:
	push {r4,r6,lr}
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C8512
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C8512:
	pop {r4,r6,pc}
.endfunc // sub_80C84E0

.func
.thumb_func
sub_80C8514:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x21 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C8538
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C8538:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80C8514

loc_80C853C:
	push {lr}
	ldr r1, off_80C855C // =off_80C8560 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80C8554
	bl sub_801BCA6
	b locret_80C8558
loc_80C8554:
	bl sub_801BBF4
locret_80C8558:
	pop {pc}
	.balign 4, 0x00
off_80C855C: .word off_80C8560
off_80C8560: .word sub_80C856C+1
	.word loc_80C85C0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C856C:
	push {lr}
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x18
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	mov r0, #0x10
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r1, #0x10
	mov r2, #0x23 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #1
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C856C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80C85C0:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C85E2
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80C85D6
	bl battle_isTimeStop
	bne locret_80C85E6
loc_80C85D6:
	ldr r1, off_80C85E8 // =off_80C85EC 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80C85E6
loc_80C85E2:
	mov r0, #8
	str r0, [r5,#8]
locret_80C85E6:
	pop {pc}
off_80C85E8: .word off_80C85EC
off_80C85EC: .word sub_80C85F4+1
	.word sub_80C8660+1
.func
.thumb_func
sub_80C85F4:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C8626
	mov r1, #4
	strb r1, [r5,#0xa]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #4
	lsl r1, r1, #0x10
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0x28 
	lsl r0, r0, #0x11
	mov r2, #0x18
	lsl r2, r2, #0x10
	sub r0, r0, r2
	svc 6
	strh r0, [r5,#0x20]
	mov r0, #0x10
	lsl r0, r0, #0x10
	ldrh r1, [r5,#0x20]
	svc 6
	str r0, [r5,#0x48]
	b locret_80C865E
loc_80C8626:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, [r5,#0x48]
	ldr r1, [r5,#0x3c]
	sub r1, r1, r0
	str r1, [r5,#0x3c]
	bl sub_800E2AC
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C865E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	beq loc_80C865A
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C865E
loc_80C865A:
	mov r0, #8
	str r0, [r5,#8]
locret_80C865E:
	pop {pc}
.endfunc // sub_80C85F4

.func
.thumb_func
sub_80C8660:
	push {r4,r6,lr}
	mov r0, #0x1e
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldrb r4, [r5,#4]
	mov r3, #1
	lsl r3, r3, #8
	orr r4, r3
	ldr r6, [r5,#0x2c]
	push {r0,r1}
	bl sub_80C8806
	pop {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_80C8660

	mov r1, #0x10
	tst r0, r1
	pop {r0,r1}
	beq loc_80C86AA
	ldrb r2, [r5,#0xe]
	ldrb r4, [r5,#4]
	mov r3, #0
	lsl r3, r3, #8
	orr r4, r3
	ldr r6, [r5,#0x2c]
	bl sub_80C8806
loc_80C86AA:
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,pc}
.func
.thumb_func
sub_80C86B0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x22 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C86D4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C86D4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80C86B0

loc_80C86D8:
	push {lr}
	ldr r1, off_80C86F8 // =off_80C86FC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80C86F0
	bl sub_801BCA6
	b locret_80C86F4
loc_80C86F0:
	bl sub_801BBF4
locret_80C86F4:
	pop {pc}
	.balign 4, 0x00
off_80C86F8: .word off_80C86FC
off_80C86FC: .word sub_80C8708+1
	.word sub_80C876C+1
	.word sub_80C87DC+1
.func
.thumb_func
sub_80C8708:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0xc
	mov r2, #0x1a
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C8708

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80C8752
	bl object_freeMemory
	b locret_80C876A
loc_80C8752:
	mov r1, #0xa
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #2
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80C876A:
	pop {pc}
.func
.thumb_func
sub_80C876C:
	push {lr}
	bl sub_801A00E
	.hword 0xF751
	.word 0xF741FCAF, 0x4200FD0A, 0x6D68D113, 0x42006F00, 0xF751D001
	.word 0x7928FC75, 0xD0022804, 0xFC82F741, 0x4906D104, 0x58097A68
	.word 0x470846FE, 0xFC3AF751, 0xF751E003, 0x2008FC65, 0xBD0060A8
	.word off_80C87B4
off_80C87B4: .word sub_80C87B8+1
.endfunc // sub_80C876C

.func
.thumb_func
sub_80C87B8:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C87CA
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80C87DA
loc_80C87CA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C87DA
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C87DA:
	pop {pc}
.endfunc // sub_80C87B8

.func
.thumb_func
sub_80C87DC:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80C87DC

	mov r1, #0x10
	tst r0, r1
	beq loc_80C8800
	ldrb r0, [r5,#4]
	cmp r0, #2
	blt loc_80C8800
	ldrb r0, [r5,#5]
	tst r0, r0
	beq loc_80C8800
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
loc_80C8800:
	bl sub_8016C8A
	pop {pc}
.func
.thumb_func
sub_80C8806:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x23 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C882A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C882A:
	pop {pc}
.endfunc // sub_80C8806

loc_80C882C:
	push {lr}
	ldr r1, off_80C8840 // =off_80C8844 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80C8840: .word off_80C8844
off_80C8844: .word sub_80C8850+1
	.word loc_80C8892+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C8850:
	push {lr}
	mov r1, #0xc
	mov r2, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #7
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C8850

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E2AC
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C8892
	pop {pc}
loc_80C8892:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C88A8
	ldr r1, off_80C88BC // =off_80C88C0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
loc_80C88A8:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
	.balign 4, 0x00
off_80C88BC: .word off_80C88C0
off_80C88C0: .word sub_80C88C8+1
	.word sub_80C89A4+1
.func
.thumb_func
sub_80C88C8:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C88F8
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r4, [r5,#5]
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80C8A9C // =0xffffd000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C88F8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80C8950
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl object_isCurrentPanelSolid
	bne loc_80C8920
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
loc_80C8920:
	bl object_isCurrentPanelSolid
	bne loc_80C8934
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80C8946
loc_80C8934:
	bl sub_80C89C8
	ldr r0, [r5,#4]
	mov r1, #3
	and r0, r1
	ldr r1, off_80C899C // =byte_80C89A0 
	ldrb r0, [r1,r0]
	bl sound_play // () -> void
loc_80C8946:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80C899A
loc_80C8950:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80C8A9C // =0xffffd000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #3
	bcc locret_80C899A
	ldrb r0, [r5,#4]
	cmp r0, #4
	blt locret_80C899A
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl object_highlightPanel
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	sub r1, #1
	bl object_highlightPanel
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	add r1, #1
	bl object_highlightPanel
locret_80C899A:
	pop {r4,r6,r7,pc}
off_80C899C: .word byte_80C89A0
byte_80C89A0: .byte 0x70, 0x97, 0x90, 0x90
.endfunc // sub_80C88C8

.func
.thumb_func
sub_80C89A4:
	push {r4,r6,r7,lr}
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
.endfunc // sub_80C89A4

.func
.thumb_func
sub_80C89AC:
	push {lr}
	push {r5}
	mov r0, #0x24 
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80C89C6
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r1, #0
	strb r1, [r0,#0xe]
	str r6, [r0,#0x2c]
locret_80C89C6:
	pop {pc}
.endfunc // sub_80C89AC

.func
.thumb_func
sub_80C89C8:
	push {r4,r6,r7,lr}
	push {r7}
	ldrb r0, [r5,#4]
	mov r1, #3
	and r0, r1
	ldr r1, off_80C8A34 // =byte_80C8A5C 
	ldrb r2, [r1,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r3, #4
	ldrb r4, [r5,#0x16]
	mov r7, #0
	bl sub_801BD3C
	pop {r7}
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80C8A38 // =dword_80C8A3C 
	ldr r7, [r1,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80C8AA0 // =0xa05ff04 
	ldr r6, [r5,#0x2c]
	bl sub_80C536A
	ldrb r0, [r5,#4]
	cmp r0, #5
	beq loc_80C8A28
	cmp r0, #1
	bne locret_80C8A32
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #1
	push {r0,r1}
	bl sub_80C8A60
	pop {r0,r1}
	push {r0,r1}
	add r1, #1
	bl sub_80C8A60
	pop {r0,r1}
	sub r1, #1
	bl sub_80C8A60
	b locret_80C8A32
loc_80C8A28:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #1
	bl sub_80C8A60
locret_80C8A32:
	pop {r4,r6,r7,pc}
off_80C8A34: .word byte_80C8A5C
off_80C8A38: .word dword_80C8A3C
dword_80C8A3C: .word 0x3, 0x3, 0x1000, 0xFB0003, 0x3, 0x3, 0x1000, 0xFB0003
byte_80C8A5C: .byte 0x50, 0x51, 0x52, 0x53
.endfunc // sub_80C89C8

.func
.thumb_func
sub_80C8A60:
	push {r0-r2,lr}
	cmp r2, #0
	bne loc_80C8A70
	bl object_getPanelParameters
	mov r1, #0x40 
	tst r0, r1
	bne locret_80C8A78
loc_80C8A70:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl object_crackPanel
.endfunc // sub_80C8A60

locret_80C8A78:
	pop {r0-r2,pc}
	push {r7,lr}
	bl sub_80C89AC
	add r7, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r1, r0
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r7,#6]
	ldrb r0, [r5,#0x13]
	strb r0, [r7,#7]
	mov r0, #0x23 
	strb r0, [r7,#5]
	pop {r7,pc}
	.balign 4, 0x00
dword_80C8A9C: .word 0xFFFFD000
dword_80C8AA0: .word 0xA05FF04
loc_80C8AA4:
	push {lr}
	ldr r1, off_80C8AB8 // =off_80C8ABC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80C8AB8: .word off_80C8ABC
off_80C8ABC: .word sub_80C8AC8+1
	.word sub_80C8B3E+1
	.word sub_80C8C44+1
.func
.thumb_func
sub_80C8AC8:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x1a
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C8AC8

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80C8B12
	bl object_freeMemory
	b locret_80C8B3C
loc_80C8B12:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #1
	bl sub_801A140
	bl sub_801A018
	mov r0, #0
	strb r0, [r5,#0xb]
	bl object_getFlipDirection_800E2CA // () -> int
	strb r0, [r5,#7]
	mov r0, #7
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r5,#8]
locret_80C8B3C:
	pop {pc}
.func
.thumb_func
sub_80C8B3E:
	push {lr}
	bl sub_801A00E
	.word 0xFAC6F751, 0xFB21F741, 0xD10E4200, 0x6F006D68, 0xD10A4200
	.word 0xFA9EF741, 0x4906D10B, 0x58097A68, 0x470846FE, 0xFA56F751
	.word 0xF751E003, 0x2008FA81, 0xBD0060A8
	.word off_80C8B7C
off_80C8B7C: .word sub_80C8B80+1
.endfunc // sub_80C8B3E

.func
.thumb_func
sub_80C8B80:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C8B96
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#5]
	ldrb r1, [r5,#6]
	add r0, r0, r1
	strh r0, [r5,#0x20]
	b locret_80C8C34
loc_80C8B96:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ldrb r1, [r5,#6]
	cmp r0, r1
	beq loc_80C8C22
	tst r0, r0
	bgt locret_80C8C34
	mov r1, #7
	ldrsb r0, [r5,r1]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80C8BDE
	strb r0, [r5,#0x12]
	bl object_getPanelParameters
	add r4, r0, #0
	mov r1, #0x10
	tst r0, r1
	beq loc_80C8C2C
	ldrb r0, [r5,#0xb]
	tst r0, r0
	beq loc_80C8BFE
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80C8C38 // =dword_80C8C3C 
	ldr r0, [r1,r0]
	tst r0, r4
	bne loc_80C8C2C
	b loc_80C8BFE
loc_80C8BDE:
	ldrb r0, [r5,#4]
	tst r0, r0
	beq loc_80C8C2C
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r1, #7
	ldrsb r0, [r5,r1]
	neg r0, r0
	strb r0, [r5,#7]
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	mov r1, #1
	eor r0, r1
	bl sub_8002F5C
loc_80C8BFE:
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #7
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#5]
	ldrb r1, [r5,#6]
	add r0, r0, r1
	strh r0, [r5,#0x20]
	b locret_80C8C34
loc_80C8C22:
	bl sub_801A074 // () -> void
	mov r0, #0xf0
	strh r0, [r5,#0x3e]
	b locret_80C8C34
loc_80C8C2C:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C8C34:
	pop {r4,pc}
	.balign 4, 0x00
off_80C8C38: .word dword_80C8C3C
dword_80C8C3C: .word 0x0
	.word 0x20
.endfunc // sub_80C8B80

.func
.thumb_func
sub_80C8C44:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80C8C44

.func
.thumb_func
sub_80C8C4C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x25 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C8C70
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C8C70:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80C8C4C

loc_80C8C74:
	push {lr}
	ldr r1, off_80C8C94 // =off_80C8C98 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80C8C8C
	bl sub_801BCA6
	b locret_80C8C90
loc_80C8C8C:
	bl sub_801BBF4
locret_80C8C90:
	pop {pc}
	.balign 4, 0x00
off_80C8C94: .word off_80C8C98
off_80C8C98: .word sub_80C8CA4+1
	.word sub_80C8D10+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C8CA4:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #2
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C8CA4

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80C8CEE
	bl object_freeMemory
	b locret_80C8D0E
loc_80C8CEE:
	mov r1, #4
	ldrb r2, [r5,#6]
	tst r2, r2
	beq loc_80C8CF8
	mov r1, #0xa
loc_80C8CF8:
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #1
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80C8D0E:
	pop {pc}
.func
.thumb_func
sub_80C8D10:
	push {lr}
	bl sub_801A00E
	.hword 0xF751
	.word 0xF741F9DD, 0x4200FA38, 0x6D68D113, 0x42006F00, 0xF751D001
	.word 0x7928F9A3, 0xD0022804, 0xF9B0F741, 0x4906D104, 0x58097A68
	.word 0x470846FE, 0xF968F751, 0xF751E003, 0x2008F993, 0xBD0060A8
	.word off_80C8D58
off_80C8D58: .word sub_80C8D64+1
	.word sub_80C8D8E+1
	.word sub_80C8DBC+1
.endfunc // sub_80C8D10

.func
.thumb_func
sub_80C8D64:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C8D7C
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xf7
	bl sound_play // () -> void
	mov r0, #5
	strh r0, [r5,#0x20]
	b locret_80C8D8C
loc_80C8D7C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C8D8C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C8D8C:
	pop {pc}
.endfunc // sub_80C8D64

.func
.thumb_func
sub_80C8D8E:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C8DA6
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#5]
	sub r0, #5
	strh r0, [r5,#0x20]
	b locret_80C8DBA
loc_80C8DA6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C8DBA
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C8DBA:
	pop {pc}
.endfunc // sub_80C8D8E

.func
.thumb_func
sub_80C8DBC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C8DD2
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #2
	strh r0, [r5,#0x20]
	b locret_80C8DDE
loc_80C8DD2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C8DDE
	mov r0, #8
	str r0, [r5,#8]
locret_80C8DDE:
	pop {pc}
.endfunc // sub_80C8DBC

.func
.thumb_func
sub_80C8DE0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x26 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C8E04
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C8E04:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80C8DE0

loc_80C8E08:
	push {lr}
	ldr r1, off_80C8E1C // =off_80C8E20 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80C8E1C: .word off_80C8E20
off_80C8E20: .word sub_80C8E2C+1
	.word loc_80C8E6E+1
	.word sub_80C8F60+1
.func
.thumb_func
sub_80C8E2C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x1b
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C8E2C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80C8E6E:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C8E94
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xc
	cmp r0, r1
	bne loc_80C8E94
	bl battle_isTimeStop
	bne locret_80C8E98
	ldr r1, off_80C8E9C // =off_80C8EA0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80C8E98
loc_80C8E94:
	mov r0, #8
	str r0, [r5,#8]
locret_80C8E98:
	pop {pc}
	.balign 4, 0x00
off_80C8E9C: .word off_80C8EA0
off_80C8EA0: .word sub_80C8EAC+1
	.word sub_80C8F14+1
	.word sub_80C8ED0+1
.func
.thumb_func
sub_80C8EAC:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #1
	beq loc_80C8EC6
	cmp r0, #2
	bne locret_80C8ECE
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	bl sub_80C8FDC
	b locret_80C8ECE
loc_80C8EC6:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C8ECE:
	pop {pc}
.endfunc // sub_80C8EAC

.func
.thumb_func
sub_80C8ED0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C8EE8
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80C8FA0
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r5,#0x22]
loc_80C8EE8:
	bl sub_80C8FDC
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80C8F00
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r5,#0x22]
loc_80C8F00:
	ldrb r0, [r5,#0xb]
	cmp r0, #3
	bne locret_80C8F12
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C8F12:
	pop {pc}
.endfunc // sub_80C8ED0

.func
.thumb_func
sub_80C8F14:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C8F3E
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r3, [r5,#0x13]
	ldrb r1, [r5,#7]
	sub r1, r1, r3
	mov r2, #4
	lsl r2, r2, #0x10
	mul r2, r1
	str r2, [r5,#0x44]
	mov r3, #0x18
	lsl r3, r3, #0x10
	mul r3, r1
	add r0, r3, #0
	add r1, r2, #0
	svc 6
	strh r0, [r5,#0x20]
	b locret_80C8F5E
loc_80C8F3E:
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C8F5E
	bl sub_800E29C // () -> void
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C8F5E:
	pop {pc}
.endfunc // sub_80C8F14

.func
.thumb_func
sub_80C8F60:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne loc_80C8F6E
	mov r0, #0
	str r0, [r1]
loc_80C8F6E:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80C8F60

.func
.thumb_func
sub_80C8F74:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x27 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C8F9E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C8F9E:
	pop {pc}
.endfunc // sub_80C8F74

.func
.thumb_func
sub_80C8FA0:
	push {r4,r6,r7,lr}
	mov r4, #0
loc_80C8FA4:
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	push {r4}
	ldr r4, dword_80C8FD4 // =0x4050101 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80C8FD8 // =0x3 
	bl sub_80C536A
	pop {r4}
	tst r0, r0
	beq loc_80C8FCC
	ldrb r1, [r5,#5]
	strh r1, [r0,#0x20]
loc_80C8FCC:
	add r4, #1
	cmp r4, #3
	blt loc_80C8FA4
	pop {r4,r6,r7,pc}
dword_80C8FD4: .word 0x4050101
dword_80C8FD8: .word 0x3
.endfunc // sub_80C8FA0

.func
.thumb_func
sub_80C8FDC:
	push {r4,lr}
	mov r4, #0
loc_80C8FE0:
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	add r4, #1
	cmp r4, #3
	blt loc_80C8FE0
	pop {r4,pc}
	.balign 4, 0x00
.endfunc // sub_80C8FDC

loc_80C8FFC:
	push {lr}
	ldr r1, off_80C9010 // =off_80C9014 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80C9010: .word off_80C9014
off_80C9014: .word sub_80C9024+1
	.word sub_80C9074+1
	.word sub_80C90DC+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C9024:
	push {lr}
	mov r0, #0x80
	mov r1, #0x14
	mov r2, #5
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #0xb
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C9024

	bl sub_8002F90 // () -> void
	bl sprite_update
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [r5,#0x40]
	mov r0, #5
	strb r0, [r5,#0xe]
	bl sub_8019892
	tst r0, r0
	bne loc_80C9060
	bl object_freeMemory
	pop {pc}
loc_80C9060:
	mov r1, #4
	mov r2, #5
	mov r3, #0
	bl sub_8019FB4
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80C9074:
	push {r4,r6,r7,lr}
	bl sub_801A00E
.endfunc // sub_80C9074

	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	tst r0, r0
	bne loc_80C90A6
	bl battle_isBattleOver
	bne loc_80C90CA
	ldr r1, [r5,#0x40]
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80C90CA
	bl sub_801A018
	pop {r4,r6,r7,pc}
loc_80C90A6:
	mov r0, #0xbd
	bl sound_play // () -> void
	bl sub_801A074 // () -> void
	bl sub_80C913C
	tst r0, r0
	beq loc_80C90CA
	mov r0, #0xb
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0xb4
	strh r0, [r5,#0x20]
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
loc_80C90CA:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0xc
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
	// <mkdata>
	.hword 0x1 // mov r1, r0
	lsl r5, r0, #0x10
.func
.thumb_func
sub_80C90DC:
	push {r4,r6,r7,lr}
	ldr r4, [r5,#0x4c]
	ldrb r0, [r4]
	ldrb r1, [r5]
	mov r2, #2
	bic r1, r2
	and r0, r2
	orr r1, r0
	strb r1, [r5]
	bl sub_802CE30
	beq loc_80C9124
	ldrh r0, [r4,#0x28]
	bl sub_800F26C
	mov r2, #0x1b
	bl sub_8018842
	lsl r6, r0, #0x10
	lsl r7, r1, #0x10
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mul r6, r0
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	add r1, r1, r6
	add r3, r3, r7
	add r0, r5, #0
	add r0, #0x34 
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C9134
loc_80C9124:
	bl sub_802CDE6
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0xc
	str r0, [r5,#8]
locret_80C9134:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
	.byte  1
	.byte  0
	.byte  5
	.byte  4
.endfunc // sub_80C90DC

.func
.thumb_func
sub_80C913C:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_80C913C

	add r3, r0, #0
	pop {r0,r1}
	ldr r2, dword_80C917C // =0x600000 
	tst r3, r2
	beq loc_80C9176
	ldrb r2, [r5,#0x16]
	neg r2, r2
	add r2, #1
	bl sub_800AE54
	tst r0, r0
	beq loc_80C9176
	str r0, [r5,#0x4c]
	ldr r1, off_80C9180 // =dword_203CFB0 
	ldrb r2, [r5,#0x16]
	tst r2, r2
	bne loc_80C916C
	add r1, #0xc
loc_80C916C:
	str r0, [r1,#8]
	str r5, [r1,#4]
	mov r2, #0
	str r2, [r1]
	pop {pc}
loc_80C9176:
	mov r0, #0
	pop {pc}
	.balign 4, 0x00
dword_80C917C: .word 0x600000
off_80C9180: .word dword_203CFB0
.func
.thumb_func
sub_80C9184:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x28 
	bl sub_8003374
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80C919E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80C919E:
	pop {pc}
.endfunc // sub_80C9184

loc_80C91A0:
	push {lr}
	ldr r1, off_80C91B4 // =off_80C91B8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80C91B4: .word off_80C91B8
off_80C91B8: .word sub_80C91C4+1
	.word loc_80C91FE+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C91C4:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x22 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C91C4

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80C91FE:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80C922A
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80C9218
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xc
	cmp r0, r1
	bne loc_80C922A
loc_80C9218:
	bl battle_isTimeStop
	bne locret_80C922E
	ldr r1, off_80C9230 // =off_80C9234 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80C922E
loc_80C922A:
	mov r0, #8
	str r0, [r5,#8]
locret_80C922E:
	pop {pc}
off_80C9230: .word off_80C9234
off_80C9234: .word sub_80C9238+1
.func
.thumb_func
sub_80C9238:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80C9268
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	str r0, [r5,#0x60]
	ldrb r0, [r5,#6]
	mov r1, #4
	mul r0, r1
	ldrb r1, [r5,#5]
	mul r0, r1
	ldrb r1, [r5,#6]
	add r0, r0, r1
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#6]
	strh r0, [r5,#0x22]
	ldr r0, [r5,#0x60]
	ldrb r1, [r5,#6]
	bl sub_80C92F4
	mov r0, #0
	str r0, [r5,#0x64]
loc_80C9268:
	ldr r0, [r5,#0x64]
	sub r0, #1
	str r0, [r5,#0x64]
	cmp r0, #0
	bgt loc_80C927E
	mov r0, #0x29 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x10
	str r0, [r5,#0x64]
loc_80C927E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80C92B8
	ldr r0, [r5,#0x60]
	bl sub_80C9360
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80C92BC
	ldr r0, [r5,#0x60]
	add r0, #1
	mov r1, #3
	and r0, r1
	str r0, [r5,#0x60]
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80C92C0 // =byte_80C92C4 
	add r1, r1, r2
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#6]
	strh r0, [r5,#0x22]
	ldr r0, [r5,#0x60]
	ldrb r1, [r5,#6]
	bl sub_80C92F4
	b locret_80C92BC
loc_80C92B8:
	mov r0, #8
	str r0, [r5,#8]
locret_80C92BC:
	pop {pc}
	.byte 0, 0
off_80C92C0: .word byte_80C92C4
byte_80C92C4: .byte 0x0, 0x1, 0x2, 0x3, 0x0, 0x3, 0x2, 0x1
.endfunc // sub_80C9238

.func
.thumb_func
sub_80C92CC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x29 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C92F2
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80C92F2:
	pop {pc}
.endfunc // sub_80C92CC

.func
.thumb_func
sub_80C92F4:
	push {r4,r6,r7,lr}
	sub sp, sp, #4
	str r1, [sp,#4]
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80C93C0 // =loc_80C93C4 
	add r1, r1, r2
	ldrb r4, [r1,r0]
	lsl r4, r4, #2
	ldr r1, off_80C93AC // =dword_80C93B0 
	add r4, r4, r1
	mov r6, #0
loc_80C930C:
	add r2, r6, #0
	lsl r2, r2, #1
	add r2, r2, r4
	mov r3, #0
	ldrsb r0, [r2,r3]
	mov r3, #1
	ldrsb r1, [r2,r3]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80C934C
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	ldrb r2, [r5,#0xe]
	mov r3, #0
	push {r4,r6}
	ldr r4, dword_80C9358 // =0x4050201 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80C935C // =0x3 
	bl sub_80C536A
	pop {r4,r6}
	ldr r1, [sp,#4]
	strh r1, [r0,#0x20]
loc_80C934C:
	add r6, #1
	cmp r6, #1
	ble loc_80C930C
	add sp, sp, #4
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80C9358: .word 0x4050201
dword_80C935C: .word 0x3
.endfunc // sub_80C92F4

.func
.thumb_func
sub_80C9360:
	push {r4,r6,r7,lr}
	sub sp, sp, #4
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80C93C0 // =loc_80C93C4 
	add r1, r1, r2
	ldrb r4, [r1,r0]
	lsl r4, r4, #2
	ldr r1, off_80C93AC // =dword_80C93B0 
	add r4, r4, r1
	mov r6, #0
loc_80C9376:
	add r2, r6, #0
	lsl r2, r2, #1
	add r2, r2, r4
	mov r3, #0
	ldrsb r0, [r2,r3]
	mov r3, #1
	ldrsb r1, [r2,r3]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80C93A0
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
loc_80C93A0:
	add r6, #1
	cmp r6, #1
	ble loc_80C9376
	add sp, sp, #4
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80C93AC: .word dword_80C93B0
dword_80C93B0: .word 0x100FF, 0x101FFFF, 0x100FF00, 0x1FFFF01
off_80C93C0: .word loc_80C93C4
.endfunc // sub_80C9360

loc_80C93C4:
	lsl r0, r0, #0xc
	lsl r2, r0, #4
	lsl r0, r0, #4
	lsl r2, r0, #0xc
loc_80C93CC:
	push {lr}
	ldr r1, off_80C93E0 // =off_80C93E4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80C93E0: .word off_80C93E4
off_80C93E4: .word sub_80C940C+1
	.word sub_80C94BC+1
	.word sub_80C93F0+1
.func
.thumb_func
sub_80C93F0:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C940A
	ldr r0, [r5,#0x4c]
	cmp r0, #0
	beq loc_80C9406
	mov r1, #0
	str r1, [r0]
loc_80C9406:
	bl sub_8016C8A
locret_80C940A:
	pop {pc}
.endfunc // sub_80C93F0

.func
.thumb_func
sub_80C940C:
	push {lr}
	mov r1, #0x10
	mov r2, #0x16
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	ldrb r1, [r5,#4]
	cmp r1, #2
	beq loc_80C9432
	ldrb r1, [r5,#5]
	cmp r1, #0xc
	bne loc_80C9434
loc_80C9432:
	mov r0, #2
loc_80C9434:
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C940C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80C9462
	bl object_freeMemory
	pop {pc}
loc_80C9462:
	mov r1, #4
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r1, #1
	strb r1, [r7,#1]
	mov r0, #3
	bl sub_801A140
	ldrb r0, [r5,#6]
	cmp r0, #0
	beq loc_80C9480
	bl sub_801A258
loc_80C9480:
	ldrb r0, [r5,#7]
	cmp r0, #0
	beq loc_80C948C
	mov r1, #1
	bl sub_801A4D0
loc_80C948C:
	bl sub_801A018
	bl sub_80C956C
	ldrb r1, [r5,#5]
	cmp r1, #0xc
	bne loc_80C94A2
	mov r0, #0xc6
	bl sound_play // () -> void
	b loc_80C94A8
loc_80C94A2:
	mov r0, #0xba
	bl sound_play // () -> void
loc_80C94A8:
	ldr r0, [r5,#0x4c]
	cmp r0, #0
	beq loc_80C94B2
	mov r1, #1
	str r1, [r0]
loc_80C94B2:
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C94BC
	pop {pc}
.func
.thumb_func
sub_80C94BC:
	push {r4,r7,lr}
	bl sub_801A00E
	.hword 0xF750
	.word 0xF740FE07, 0x4200FE62, 0x490ED112, 0x6F386D6F, 0xD10D4208
	.word 0x7A684909, 0x46FE5809, 0xF7434708, 0x4200FBC0, 0xF750D004
	.word 0xF743FD95, 0xBD90FBE6, 0xFDBEF750, 0x60A82008, 0xBD90
	.word off_80C9504
off_80C9504: .word sub_80C950C+1
	.word 0xFF800000
.endfunc // sub_80C94BC

.func
.thumb_func
sub_80C950C:
	push {r4,lr}
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C954A
	ldrb r0, [r5,#5]
	sub r0, #1
	strb r0, [r5,#5]
	bne loc_80C9546
	ldrb r0, [r5,#0x10]
	add r0, #1
	strb r0, [r5,#0x10]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	b locret_80C954A
loc_80C9546:
	bl sub_80C956C
locret_80C954A:
	pop {r4,pc}
.endfunc // sub_80C950C

.func
.thumb_func
sub_80C954C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x2a 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C956A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r7, [r0,#0x4c]
locret_80C956A:
	pop {pc}
.endfunc // sub_80C954C

.func
.thumb_func
sub_80C956C:
	push {lr}
	bl sub_80C95EC
.endfunc // sub_80C956C

	cmp r0, #0
	bne loc_80C957C
	bl object_getFlipDirection_800E2CA // () -> int
	b loc_80C95BA
loc_80C957C:
	ldrb r3, [r5,#0x13]
	cmp r1, r3
	beq loc_80C9588
	ldrb r2, [r5,#0x12]
	cmp r0, r2
	beq loc_80C9598
loc_80C9588:
	ldrb r2, [r5,#0x12]
	cmp r0, r2
	blt loc_80C9592
	mov r0, #1
	b loc_80C95BA
loc_80C9592:
	mov r0, #0
	sub r0, #1
	b loc_80C95BA
loc_80C9598:
	ldrb r2, [r5,#0x13]
	cmp r1, r2
	blt loc_80C95A2
	mov r0, #1
	b loc_80C95A6
loc_80C95A2:
	mov r0, #0
	sub r0, #1
loc_80C95A6:
	ldr r1, dword_80C95E4 // =0x6666 
	ldrb r2, [r5,#4]
	cmp r2, #2
	bne loc_80C95B0
	ldr r1, dword_80C95E8 // =0x999a 
loc_80C95B0:
	mul r0, r1
	str r0, [r5,#0x44]
	mov r0, #0
	str r0, [r5,#0x40]
	b loc_80C95CC
loc_80C95BA:
	ldr r1, dword_80C95DC // =0xaaab 
	ldrb r2, [r5,#4]
	cmp r2, #2
	bne loc_80C95C4
	ldr r1, dword_80C95E0 // =0x10000 
loc_80C95C4:
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0
	str r0, [r5,#0x44]
loc_80C95CC:
	mov r0, #0x3c 
	ldrb r2, [r5,#4]
	cmp r2, #2
	bne loc_80C95D6
	mov r0, #0x28 
loc_80C95D6:
	strh r0, [r5,#0x20]
	pop {pc}
	.balign 4, 0x00
dword_80C95DC: .word 0xAAAB
dword_80C95E0: .word 0x10000
dword_80C95E4: .word 0x6666
dword_80C95E8: .word 0x999A
.func
.thumb_func
sub_80C95EC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x16]
	ldr r4, off_80C965C // =LCDControl 
	cmp r0, #0
	beq loc_80C95F8
	ldr r4, off_80C9660 // =start_ 
loc_80C95F8:
	ldrb r1, [r5,#0x17]
	eor r0, r1
	cmp r0, #0
	bne loc_80C960E
	bl sub_80C9620
	cmp r6, #0
	bne loc_80C961A
	bl sub_80C9640
	b loc_80C961A
loc_80C960E:
	bl sub_80C9640
.endfunc // sub_80C95EC

	cmp r6, #0
	bne loc_80C961A
	bl sub_80C9620
loc_80C961A:
	add r0, r6, #0
	add r1, r7, #0
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80C9620:
	push {r4,lr}
	ldrb r6, [r5,#0x12]
loc_80C9624:
	mov r7, #3
loc_80C9626:
	add r0, r6, #0
	add r1, r7, #0
	bl object_getPanelParameters
.endfunc // sub_80C9620

	tst r0, r4
	bne locret_80C963E
	sub r7, #1
	bne loc_80C9626
	add r6, #1
	cmp r6, #7
	bne loc_80C9624
	mov r6, #0
locret_80C963E:
	pop {r4,pc}
.func
.thumb_func
sub_80C9640:
	push {lr}
	ldrb r6, [r5,#0x12]
loc_80C9644:
	mov r7, #3
loc_80C9646:
	add r0, r6, #0
	add r1, r7, #0
	bl object_getPanelParameters
	tst r0, r4
	bne locret_80C965A
	sub r7, #1
	bne loc_80C9646
	sub r6, #1
	bne loc_80C9644
locret_80C965A:
	pop {pc}
off_80C965C: .word LCDControl
off_80C9660: .word start_
	.word 0x1001B0C
	.word 0x1B0C000E
	.word 0xE0302
	.word 0x5041B0C
	.word 0x8000E
	.word 0x7040403
	.word 0x4030004
	.word 0x40001
	.word 0x2010403
	.word 0x4030004
	.word 0x1B0C0401
	.word 0xE0706
	.word 0x9081B0C
	.word 0xC000E
	.word 0xE0B0A
.endfunc // sub_80C9640

.func
.thumb_func
sub_80C96A0:
	push {lr}
	ldr r1, off_80C96B8 // =off_80C96BC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl battle_isTimeStop
	bne locret_80C96B6
	bl sub_801BBAC
locret_80C96B6:
	pop {pc}
off_80C96B8: .word off_80C96BC
off_80C96BC: .word sub_80C96C8+1
	.word loc_80C9726+1
	.word object_freeMemory+1
.endfunc // sub_80C96A0

.func
.thumb_func
sub_80C96C8:
	push {r7,lr}
	ldrb r0, [r5,#5]
	mov r1, #6
	mul r0, r1
	ldr r7, dword_80C9804 // = 
	add r7, r7, r0
	str r7, [r5,#0x64]
	ldrb r1, [r7]
	ldrb r2, [r7,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C96C8

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r7,#2]
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r7,#5]
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E2AC
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0xa0
	bl sound_play // () -> void
	ldr r0, [r5,#0x34]
	str r0, [r5,#0x40]
	ldr r0, [r5,#0x38]
	str r0, [r5,#0x44]
	ldr r0, [r5,#0x3c]
	str r0, [r5,#0x48]
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80C9726
	pop {r7,pc}
loc_80C9726:
	push {lr}
	ldr r1, off_80C9768 // =off_80C976C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80C974C
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80C974C:
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_801032C
	ldr r1, dword_80C9808 // =0x100000 
	tst r0, r1
	pop {r5}
	beq locret_80C9764
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
locret_80C9764:
	pop {pc}
	.balign 4, 0x00
off_80C9768: .word off_80C976C
off_80C976C: .word sub_80C9774+1
	.word sub_80C97B4+1
.func
.thumb_func
sub_80C9774:
	push {lr}
	ldr r3, [r5,#0x4c]
	ldr r0, [r3,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r3,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r3,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r3]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	tst r0, r0
	bne locret_80C97B2
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C97B2:
	pop {pc}
.endfunc // sub_80C9774

.func
.thumb_func
sub_80C97B4:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C97D2
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r1, [r5,#0x64]
	ldrb r0, [r1,#3]
	strb r0, [r5,#0x10]
	ldrb r0, [r1,#4]
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C97D2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80C97DE
	mov r0, #8
	str r0, [r5,#8]
locret_80C97DE:
	pop {pc}
.endfunc // sub_80C97B4

.func
.thumb_func
sub_80C97E0:
	push {lr}
	push {r5}
	mov r0, #0x2b 
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80C9802
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80C9802:
	pop {pc}
dword_80C9804: .word 0x80C9664
dword_80C9808: .word 0x100000
.endfunc // sub_80C97E0

locret_80C980C:
	mov pc, lr
	mov pc, lr
	mov pc, lr
	.balign 4, 0x00
locret_80C9814:
	mov pc, lr
	mov pc, lr
	lsl r6, r0, #4
	lsr r6, r0, #8
	lsl r1, r0, #0x18
	lsl r2, r1, #4
	asr r6, r0, #8
	lsl r1, r0, #0x18
loc_80C9824:
	push {lr}
	ldr r1, off_80C9838 // =off_80C983C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C9838: .word off_80C983C
off_80C983C: .word sub_80C9848+1
	.word sub_80C98DC+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C9848:
	push {r7,lr}
	mov r1, #0x10
	mov r2, #6
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80C9848

	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	str r0, [r5,#0x64]
	ldrb r0, [r5,#0x13]
	str r0, [r5,#0x68]
	ldrb r0, [r5,#4]
	mov r1, #3
	mul r0, r1
	ldr r7, dword_80C98D8 // = 
	add r7, r7, r0
	str r7, [r5,#0x60]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [r5,#0x40]
	ldrb r1, [r5,#5]
	add r1, r1, r1
	sub r1, #1
	str r1, [r5,#0x44]
	mov r0, #0
	strb r0, [r5,#7]
	strb r0, [r5,#6]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80C98B2
	bl object_freeMemory
	pop {r7,pc}
loc_80C98B2:
	mov r3, #1
	mov r1, #6
	mov r2, #5
	bl sub_8019FB4
	mov r0, #0xa
	bl sub_801A140
	bl sub_801A018
	mov r0, #0xb4
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C98DC
	pop {r7,pc}
	.balign 4, 0x00
dword_80C98D8: .word 0x80C9818
.func
.thumb_func
sub_80C98DC:
	push {r4,lr}
	bl sub_801A00E
	.hword 0xF750
	.word 0xF740FBF7, 0x4200FC52, 0x6D6CD12B, 0x42006F20, 0xF750D001
	.word 0x8964FBBD, 0x7A684917, 0x46FE5809, 0x79E84708, 0xD10A4200
	.word 0x7A906D6A, 0xF7427AD1, 0x78C1FFFA, 0x40517DAA, 0x2101D001
	.word 0x7A2871E9, 0xD0062808, 0x89406D68, 0xD00242A0, 0xF7502001
	.word 0xF750FBA3, 0x6D6AFB6F, 0x7AD17A90, 0xF94AF743, 0x2034BD10
	.word 0xC80E1940, 0xF0162414, 0xF750FE52, 0x2008FB8F, 0xBD1060A8
	.word off_80C9960
off_80C9960: .word sub_80C9964+1
.endfunc // sub_80C98DC

.func
.thumb_func
sub_80C9964:
	push {r4,r6,r7,lr}
	bl sub_80C9B64
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80C99A2
	ldr r0, [r5,#0x64]
	ldr r1, [r5,#0x68]
	ldr r2, [r5,#0x40]
	ldr r3, [r5,#0x44]
	ldr r7, [r5,#0x60]
	ldrb r7, [r7,#1]
	tst r7, r7
	bne loc_80C9986
	bl sub_80C9A58
	b loc_80C998E
loc_80C9986:
	bl sub_80C9AAA
	tst r2, r2
	beq loc_80C9A42
loc_80C998E:
	str r0, [r5,#0x6c]
	str r1, [r5,#0x70]
	str r2, [r5,#0x40]
	str r3, [r5,#0x44]
	bl sub_801A04C
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80C99A2:
	ldr r7, [r5,#0x60]
	ldrb r7, [r7,#2]
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	lsr r1, r7, #1
	cmp r0, r1
	bne loc_80C99C4
	push {r0}
	ldr r0, [r5,#0x6c]
	ldr r1, [r5,#0x70]
	bl sub_800E258
	ldr r2, [r5,#0x54]
	strb r0, [r2,#0xa]
	strb r1, [r2,#0xb]
	pop {r0}
loc_80C99C4:
	cmp r0, r7
	bne loc_80C9A10
	ldr r1, [r5,#0x60]
	ldrb r1, [r1]
	tst r1, r1
	beq loc_80C99DA
	ldrb r0, [r5,#6]
	add r0, #1
	strb r0, [r5,#6]
	cmp r0, r1
	bge loc_80C9A42
loc_80C99DA:
	ldrb r0, [r5,#0x12]
	str r0, [r5,#0x64]
	ldrb r1, [r5,#0x13]
	str r1, [r5,#0x68]
	ldr r0, [r5,#0x64]
	ldr r1, [r5,#0x68]
	ldr r2, [r5,#0x40]
	ldr r3, [r5,#0x44]
	ldr r7, [r5,#0x60]
	ldrb r7, [r7,#1]
	tst r7, r7
	bne loc_80C99F8
	bl sub_80C9A58
	b loc_80C9A00
loc_80C99F8:
	bl sub_80C9AAA
	tst r2, r2
	beq loc_80C9A42
loc_80C9A00:
	str r0, [r5,#0x6c]
	str r1, [r5,#0x70]
	str r2, [r5,#0x40]
	str r3, [r5,#0x44]
	bl sub_801A04C
	mov r0, #0
	strh r0, [r5,#0x20]
loc_80C9A10:
	ldr r0, [r5,#0x64]
	ldr r1, [r5,#0x68]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r2, [r5,#0x6c]
	ldr r3, [r5,#0x70]
	ldrh r6, [r5,#0x20]
	bl sub_80C9B36
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	bl sub_800E2AC
	ldr r2, [r5,#0x54]
	ldrb r0, [r2,#0xa]
	ldrb r1, [r2,#0xb]
	bl object_isPanelSolid
	beq loc_80C9A42
	ldr r2, [r5,#0x54]
	ldrb r0, [r2,#0xa]
	ldrb r1, [r2,#0xb]
	bl object_isValidPanel
	bne locret_80C9A56
loc_80C9A42:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C9A56:
	pop {r4,r6,r7,pc}
.endfunc // sub_80C9964

.func
.thumb_func
sub_80C9A58:
	push {r4,lr}
	push {r0,r1}
	add r1, r1, r3
	sub r4, r1, #1
	cmp r4, #2
	bls loc_80C9A70
	neg r3, r3
	push {r0-r3}
	mov r0, #0xb6
	bl sound_play // () -> void
	pop {r0-r3}
loc_80C9A70:
	add r0, r0, r2
	ldrb r1, [r5,#0x16]
	tst r1, r1
	bne loc_80C9A8A
	cmp r0, #6
	ble loc_80C9A9A
	neg r2, r2
	push {r0-r3}
	mov r0, #0xb6
	bl sound_play // () -> void
	pop {r0-r3}
	b loc_80C9A9A
loc_80C9A8A:
	cmp r0, #1
	bge loc_80C9A9A
	neg r2, r2
	push {r0-r3}
	mov r0, #0xb6
	bl sound_play // () -> void
	pop {r0-r3}
loc_80C9A9A:
	pop {r0,r1}
	push {r2,r3}
	add r0, r0, r2
	add r1, r1, r3
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	pop {r2,r3}
	pop {r4,pc}
.endfunc // sub_80C9A58

.func
.thumb_func
sub_80C9AAA:
	push {r4,lr}
	push {r0,r1}
	add r1, r1, r3
	sub r4, r1, #1
	cmp r4, #2
	bls loc_80C9AC2
	neg r3, r3
	push {r0-r3}
	mov r0, #0xb6
	bl sound_play // () -> void
	pop {r0-r3}
loc_80C9AC2:
	add r0, r0, r2
	sub r4, r0, #1
	cmp r4, #5
	bls loc_80C9AD6
	neg r2, r2
	push {r0-r3}
	mov r0, #0xb6
	bl sound_play // () -> void
	pop {r0-r3}
loc_80C9AD6:
	pop {r0,r1}
	ldrb r4, [r5,#7]
	tst r4, r4
	beq loc_80C9B28
	push {r0-r3}
	add r0, r0, r2
	add r1, r1, r3
	bl sub_800C90A
	add r4, r0, #0
	pop {r0-r3}
	beq loc_80C9AFA
	push {r0-r3}
	ldrb r1, [r4,#3]
	ldrb r2, [r5,#0x16]
	eor r1, r2
	pop {r0-r3}
	bne loc_80C9B28
loc_80C9AFA:
	neg r2, r2
	push {r0-r3}
	add r0, r0, r2
	add r1, r1, r3
	bl sub_800C90A
	add r4, r0, #0
	pop {r0-r3}
	beq loc_80C9B24
	push {r0-r3}
	ldrb r1, [r4,#3]
	ldrb r2, [r5,#0x16]
	eor r1, r2
	pop {r0-r3}
	beq loc_80C9B24
	push {r0-r3}
	mov r0, #0xb6
	bl sound_play // () -> void
	pop {r0-r3}
	b loc_80C9B28
loc_80C9B24:
	mov r2, #0
	pop {r4,pc}
loc_80C9B28:
	push {r2,r3}
	add r0, r0, r2
	add r1, r1, r3
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	pop {r2,r3}
	pop {r4,pc}
.endfunc // sub_80C9AAA

.func
.thumb_func
sub_80C9B36:
	push {lr}
	push {r0,r1}
	sub r2, r2, r0
	sub r3, r3, r1
	mul r2, r6
	mul r3, r6
	push {r3}
	add r0, r2, #0
	add r1, r7, #0
	svc 6
	pop {r3}
	push {r0}
	add r0, r3, #0
	add r1, r7, #0
	svc 6
	add r1, r0, #0
	pop {r0}
	add r2, r0, #0
	add r3, r1, #0
	pop {r0,r1}
	add r0, r0, r2
	add r1, r1, r3
	pop {pc}
.endfunc // sub_80C9B36

.func
.thumb_func
sub_80C9B64:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#4]
	cmp r0, #3
	bne locret_80C9B94
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	mov r1, #3
	and r0, r1
	cmp r0, #3
	bne locret_80C9B94
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #0x18
	ldr r0, off_80C9BA0 // =0x610 
	add r4, r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80C9B98 // =0x8318 
	ldr r7, dword_80C9B9C // =0x8 
	bl sub_80E33FA
locret_80C9B94:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80C9B98: .word 0x8318
dword_80C9B9C: .word 0x8
off_80C9BA0: .word 0x610
.endfunc // sub_80C9B64

.func
.thumb_func
sub_80C9BA4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x2e 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C9BC0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
locret_80C9BC0:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80C9BA4

loc_80C9BC4:
	push {lr}
	ldr r1, off_80C9BD8 // =off_80C9BDC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80C9BD8: .word off_80C9BDC
off_80C9BDC: .word sub_80C9BE8+1
	.word sub_80C9C5C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C9BE8:
	push {r4,r7,lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80C9C56
	mov r1, #0x14
	mov r2, #4
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #2
	str r0, [r5,#0x20]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	beq loc_80C9C56
	mov r1, #4
	mov r2, #5
	mov r3, #0
	bl sub_8019FB4
	mov r0, #1
	bl sub_801A07C
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,r7,pc}
loc_80C9C56:
	bl object_freeMemory
	pop {r4,r7,pc}
.endfunc // sub_80C9BE8

.func
.thumb_func
sub_80C9C5C:
	push {r7,lr}
	bl sub_801A00E
	.hword 0xF750
	.word 0xF740FA37, 0x4200FA92, 0x6D6FD114, 0x42006F38, 0xF750D001
	.word 0x4904F9FD, 0x58097A68, 0x470846FE, 0xF9C8F750, 0xBD80
	.word off_80C9C90
off_80C9C90: .word sub_80C9CA2+1
	.word sub_80C9CC4+1
.endfunc // sub_80C9C5C

	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80C9CA2:
	push {r4,r6,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80C9CC2
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, [r5,#0x3c]
	ldr r6, [r5,#0x2c]
	bl sub_80C9CDA
	mov r0, #4
	strb r0, [r5,#9]
locret_80C9CC2:
	pop {r4,r6,pc}
.endfunc // sub_80C9CA2

.func
.thumb_func
sub_80C9CC4:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C9CD8
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C9CD8:
	pop {pc}
.endfunc // sub_80C9CC4

.func
.thumb_func
sub_80C9CDA:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x2f 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C9CF0
	mov r3, #0
	bl sub_801155A
locret_80C9CF0:
	pop {pc}
	.word 0, 0, 0
	.byte 0, 0
.endfunc // sub_80C9CDA

loc_80C9D00:
	push {lr}
	ldr r1, off_80C9D14 // =off_80C9D18 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80C9D14: .word off_80C9D18
off_80C9D18: .word sub_80C9D24+1
	.word sub_80C9D9E+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80C9D24:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80C9D6A
	mov r1, #0x10
	mov r2, #0x1d
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	bl sub_80C9F18
	bl sub_8002F5C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0x30 
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80C9D70
loc_80C9D6A:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80C9D24

loc_80C9D70:
	mov r1, #0xc
	mov r2, #0xd
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80C9D9E
	pop {pc}
.func
.thumb_func
sub_80C9D9E:
	push {r7,lr}
	bl sub_801A00E
	.word 0xF996F750, 0xF976F740, 0x4908D104, 0x58097A68, 0x470846FE
	.word 0xF92EF750, 0xF750BD80, 0x2008F959, 0xBD8060A8, 0x0
	.word 0x0
	.word off_80C9DD4
off_80C9DD4: .word sub_80C9DE0+1
	.word sub_80C9E20+1
	.word sub_80C9E88+1
.endfunc // sub_80C9D9E

.func
.thumb_func
sub_80C9DE0:
	push {lr}
	ldrh r0, [r5,#0x20]
	cmp r0, #0x1e
	bne loc_80C9E06
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #1
	bl sub_801A074 // () -> void
	mov r0, #0x45 
	add r0, #0xff
	bl sound_play // () -> void
loc_80C9E06:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C9E1E
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r5,#0x22]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C9E1E:
	pop {pc}
.endfunc // sub_80C9DE0

.func
.thumb_func
sub_80C9E20:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80C9E5C
	mov r0, #1
	strb r0, [r5,#0xa]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	bl sub_8001532
	mov r1, #3
	and r0, r1
	ldr r1, off_80C9E80 // =byte_80C9E84 
	ldrb r3, [r1,r0]
	lsl r3, r3, #0x10
	push {r3}
	bl object_getFlipDirection_800E2CA // () -> int
	pop {r3}
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r4, #0x11
	ldr r6, [r5,#0x2c]
	bl sub_80C6ADA
	mov r0, #0xb9
	bl sound_play // () -> void
loc_80C9E5C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80C9E7E
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	ble loc_80C9E72
	mov r0, #0
	strb r0, [r5,#0xa]
	b locret_80C9E7E
loc_80C9E72:
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80C9E7E:
	pop {r4,r6,pc}
off_80C9E80: .word byte_80C9E84
byte_80C9E84: .byte 0x8, 0x10, 0x18, 0x20
.endfunc // sub_80C9E20

.func
.thumb_func
sub_80C9E88:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80C9EA4
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80C9EA4:
	pop {pc}
.endfunc // sub_80C9E88

.func
.thumb_func
sub_80C9EA6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x30 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80C9ECC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80C9ECC:
	pop {pc}
.endfunc // sub_80C9EA6

	push {r7,lr}
	add r7, r2, #0
	mov r0, r10
	ldr r0, [r0,#0x18]
	add r0, #0xa0
	mov r3, #8
loc_80C9EDA:
	bl sub_80C9EE6
	add r0, #4
	sub r3, #1
	bne loc_80C9EDA
	pop {r7,pc}
.func
.thumb_func
sub_80C9EE6:
	push {r0,r3,lr}
	ldr r0, [r0]
	cmp r0, #0
	beq locret_80C9F16
	ldrh r1, [r0,#0x28]
	cmp r1, #0xda
	beq locret_80C9F16
	ldr r1, [r0,#0x54]
	tst r1, r1
	beq locret_80C9F16
	ldr r1, [r1,#0x40]
	ldr r2, dword_80C9F74 // =0x348000 
	tst r1, r2
	bne locret_80C9F16
	push {r0}
	bl sub_800F898
	pop {r0}
	ldrb r1, [r0,#0x13]
	ldrb r0, [r0,#0x12]
	add r2, r7, #0
	mov r3, #0
	bl sub_80C9EA6
locret_80C9F16:
	pop {r0,r3,pc}
.endfunc // sub_80C9EE6

.func
.thumb_func
sub_80C9F18:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r3, off_80C9F60 // =off_80C9F64 
	bl sub_81096FA
	bl sub_800D120
.endfunc // sub_80C9F18

	cmp r0, #0
	beq loc_80C9F36
	mov r0, #0
	b loc_80C9F54
loc_80C9F36:
	ldrb r0, [r5,#0x13]
	bl sub_810971A
	cmp r0, #0
	bne loc_80C9F52
	ldrb r1, [r5,#0x16]
	mov r2, #1
	eor r1, r2
	mov r2, #5
	mul r1, r2
	add r1, #1
	ldrb r2, [r5,#0x12]
	cmp r1, r2
	bne loc_80C9F54
loc_80C9F52:
	mov r0, #1
loc_80C9F54:
	strb r0, [r5,#0x17]
	ldrb r1, [r5,#0x16]
	eor r0, r1
	pop {r4,r6,r7,pc}
	.byte 0, 0, 0, 0
off_80C9F60: .word off_80C9F64
off_80C9F64: .word LCDControl
	.word 0x0
	.word start_
	.word 0x0
dword_80C9F74: .word 0x348000
loc_80C9F78:
	push {lr}
	ldr r1, dword_80C9F94 // = 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
	.byte 0x99
	.byte 0x9F
	.byte 0xC
	.byte  8
	.byte 0x75 
	.byte 0xA0
	.byte 0xC
	.byte  8
	.byte 0x8B
	.byte 0x6C 
	.byte  1
	.byte  8
dword_80C9F94: .word 0x80C9F88
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #1
	bne loc_80C9FC4
	bl sub_80CA234
	strb r0, [r5,#4]
	cmp r0, #1
	beq loc_80C9FC4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #2
	bl object_setPanelType
	ldrh r0, [r5,#0x2c]
	ldr r1, dword_80CA268 // =0xf800 
	add r2, r1, #0
	and r2, r0
	bic r0, r1
	lsl r0, r0, #1
	orr r0, r2
	strh r0, [r5,#0x2c]
loc_80C9FC4:
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80CA05A
	ldrb r0, [r5]
	mov r1, #3
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x17
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #1
	str r0, [r5,#0x60]
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#4]
	add r0, r0, r0
	ldr r4, off_80CA060 // =dword_80CA064 
	add r4, r4, r0
	ldrb r0, [r4,#1]
	str r0, [r5,#0x64]
	strh r0, [r5,#0x22]
	ldrb r0, [r4]
	bl sprite_setPallete // (int pallete) -> void
	bl sub_8019892
	tst r0, r0
	beq loc_80CA05A
	mov r1, #0x12
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	bl sub_801A146
	ldrb r0, [r5,#5]
	tst r0, r0
	beq loc_80CA038
	bl sub_801A258
loc_80CA038:
	ldrb r0, [r5,#4]
	cmp r0, #3
	bne loc_80CA046
	mov r0, #0x54 
	mov r1, #5
	bl sub_801A4D0
loc_80CA046:
	bl sub_801A018
	mov r0, #0xb8
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CA074
	pop {pc}
loc_80CA05A:
	bl object_freeMemory
	pop {pc}
off_80CA060: .word dword_80CA064
dword_80CA064: .word 0x4000401, 0x4030403, 0x4020404, 0x405
.func
.thumb_func
sub_80CA074:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80CA074

	bl sub_801A0D4
	bl battle_isBattleOver
	bne loc_80CA09E
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	tst r0, r0
	beq loc_80CA090
	bl sub_801A074 // () -> void
loc_80CA090:
	bl sub_80CA0B0
	bl sub_801BBAC
	bl sub_801A018
	pop {pc}
loc_80CA09E:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80CA0B0:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	beq loc_80CA0D0
	ldrh r0, [r5,#0x22]
	ldr r1, [r5,#0x60]
	sub r0, r0, r1
	strh r0, [r5,#0x22]
	bgt locret_80CA0CE
	ldr r0, [r5,#0x64]
	strh r0, [r5,#0x22]
	mov r0, #1
	bl sub_801A07C
locret_80CA0CE:
	pop {pc}
loc_80CA0D0:
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80CA0B0

.func
.thumb_func
sub_80CA0E2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x31 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CA102
	strb r3, [r0,#0xe]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrh r1, [r0,#6]
	strh r1, [r0,#0x20]
	str r6, [r0,#0x2c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
locret_80CA102:
	pop {pc}
.endfunc // sub_80CA0E2

.func
.thumb_func
sub_80CA104:
	push {r4,r7,lr}
	sub sp, sp, #0x1c
	cmp r7, #3
	ble loc_80CA10E
	mov r7, #3
loc_80CA10E:
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	str r6, [sp,#0x14]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp,#0x18]
	lsl r7, r7, #2
	ldr r4, off_80CA158 // =dword_80CA170 
	ldr r4, [r7,r4]
	str r4, [sp,#0x10]
	ldr r4, off_80CA15C // =off_80CA160 
	ldr r7, [r7,r4]
loc_80CA12A:
	mov r0, #0
	ldrsb r0, [r7,r0]
	cmp r0, #0x7f
	beq loc_80CA152
	ldr r2, [sp,#0x18]
	mul r0, r2
	ldr r2, [sp]
	add r0, r0, r2
	mov r1, #1
	ldrsb r1, [r7,r1]
	ldr r2, [sp,#4]
	add r1, r1, r2
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	ldr r4, [sp,#0x10]
	ldr r6, [sp,#0x14]
	bl sub_80CA0E2
	add r7, #2
	b loc_80CA12A
loc_80CA152:
	add sp, sp, #0x1c
	pop {r4,r7,pc}
	.balign 4, 0x00
off_80CA158: .word dword_80CA170
off_80CA15C: .word off_80CA160
off_80CA160: .word dword_80CA180
	.word 0x80CA183, 0x80CA188
	.word byte_80CA191
dword_80CA170: .word 0x200002, 0x200002, 0x200002, 0x200002
dword_80CA180: .word 0x7F0000, 0x7F000100, 0x10000, 0x100FF00
	.byte 0x7F
byte_80CA191: .byte 0x0
byte_80CA192: .byte 0x0
	.byte 0x1
	.byte  0
	.byte  0
	.byte 0xFF
	.byte  0
	.byte  1
	.byte  1
	.byte 0xFF
	.byte  1
	.byte  1
	.byte 0x7F 
.endfunc // sub_80CA104

.func
.thumb_func
sub_80CA19E:
	push {r4,r7,lr}
	sub sp, sp, #0x1c
	cmp r7, #3
	ble loc_80CA1A8
	mov r7, #3
loc_80CA1A8:
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	str r6, [sp,#0x14]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp,#0x18]
	lsl r7, r7, #2
	ldr r4, off_80CA1F0 // =byte_80CA208 
	ldr r4, [r7,r4]
	str r4, [sp,#0x10]
	ldr r4, off_80CA1F4 // =unk_80CA1F8 
	ldr r7, [r7,r4]
loc_80CA1C4:
	mov r0, #0
	ldrsb r0, [r7,r0]
	cmp r0, #0x7f
	beq loc_80CA1EC
	ldr r2, [sp,#0x18]
	mul r0, r2
	ldr r2, [sp]
	add r0, r0, r2
	mov r1, #1
	ldrsb r1, [r7,r1]
	ldr r2, [sp,#4]
	add r1, r1, r2
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	ldr r4, [sp,#0x10]
	ldr r6, [sp,#0x14]
	bl sub_80CA0E2
	add r7, #2
	b loc_80CA1C4
loc_80CA1EC:
	add sp, sp, #0x1c
	pop {r4,r7,pc}
off_80CA1F0: .word byte_80CA208
off_80CA1F4: .word unk_80CA1F8
unk_80CA1F8: .byte 0x18
	.byte 0xA2
	.byte 0xC
	.byte  8
	.byte 0x1B
	.byte 0xA2
	.byte 0xC
	.byte  8
	.byte 0x20
	.byte 0xA2
	.byte 0xC
	.byte  8
	.word byte_80CA229
byte_80CA208: .byte 0x3, 0x0, 0x20, 0x0, 0x3, 0x0, 0x20, 0x0, 0x3, 0x0, 0x20, 0x0, 0x3, 0x0
	.byte 0x20, 0x0, 0x0, 0x0, 0x7F, 0x0, 0x0, 0xFF, 0x0, 0x7F, 0x0, 0x0, 0xFF, 0x0
	.byte 0x0, 0xFF, 0x0, 0x1, 0x7F
byte_80CA229: .byte 0x0
byte_80CA22A: .byte 0x0
	.byte 0xFF
	.byte  0
	.byte  0
	.byte 0xFF
	.byte  0
	.byte  1
	.byte  1
	.byte  0
	.byte 0x7F 
.endfunc // sub_80CA19E

.func
.thumb_func
sub_80CA234:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800C90A
.endfunc // sub_80CA234

	ldrb r3, [r0,#2]
	ldr r1, off_80CA258 // =byte_80CA25C 
loc_80CA242:
	ldrb r2, [r1]
	cmp r2, #0xff
	beq loc_80CA250
	cmp r2, r3
	beq loc_80CA250
	add r1, #3
	b loc_80CA242
loc_80CA250:
	ldrb r0, [r1,#2]
	ldrb r1, [r1,#1]
	pop {pc}
	.balign 4, 0x00
off_80CA258: .word byte_80CA25C
byte_80CA25C: .byte 0x8
byte_80CA25D: .byte 0x21
byte_80CA25E: .byte 0x4
	.byte 0x6
	.word 0x22070024, 0x120FF06
dword_80CA268: .word 0xF800
dword_80CA26C: .word 0x11E1E00, 0x80000, 0x4CCCD, 0x11E1E00, 0x90000, 0x56666
	.word 0x11E1E00, 0xA0000, 0x60000, 0x1E1E00, 0xA0000, 0x60000
	.word 0x1E1E00, 0x80000, 0x4CCCD
loc_80CA2A8:
	push {lr}
	ldr r1, off_80CA2BC // =off_80CA2C0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CA2BC: .word off_80CA2C0
off_80CA2C0: .word sub_80CA2D4+1
	.word sub_80CA3A0+1
	.word sub_80CA2CC+1
.func
.thumb_func
sub_80CA2CC:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80CA2CC

.func
.thumb_func
sub_80CA2D4:
	push {lr}
	mov r1, #0x10
	mov r2, #7
	ldrb r0, [r5,#4]
	cmp r0, #4
	bne loc_80CA2E2
	mov r2, #0x57 
loc_80CA2E2:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	ldrb r1, [r5,#4]
	cmp r1, #4
	bne loc_80CA2F4
	bl sub_8002F90 // () -> void
	b loc_80CA2F8
loc_80CA2F4:
	bl sub_8002E3C
loc_80CA2F8:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	ldrb r1, [r5,#4]
	cmp r1, #4
	bne loc_80CA310
	ldrb r1, [r5,#0x13]
	cmp r1, #1
	beq loc_80CA310
	mov r0, #1
loc_80CA310:
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CA2D4

	ldrb r0, [r5,#4]
	mov r1, #0xc
	mul r0, r1
	ldr r1, off_80CA39C // =dword_80CA26C 
	add r1, r1, r0
	add r2, r1, #0
	ldr r0, [r1,#4]
	str r0, [r5,#0x40]
	ldrb r0, [r5,#5]
	cmp r0, #3
	beq loc_80CA342
	ldr r0, [r1,#8]
	ldrb r1, [r5,#0x13]
	cmp r1, #3
	bne loc_80CA340
	mov r1, #0
	sub r1, #1
	mul r0, r1
loc_80CA340:
	str r0, [r5,#0x44]
loc_80CA342:
	str r2, [r5,#0x4c]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80CA36A
	bl object_freeMemory
	pop {pc}
loc_80CA36A:
	mov r3, #1
	ldrb r1, [r5,#7]
	tst r1, r1
	beq loc_80CA374
	mov r3, #3
loc_80CA374:
	mov r1, #4
	mov r2, #5
	bl sub_8019FB4
	mov r1, #1
	strb r1, [r7,#1]
	mov r0, #4
	bl sub_801A140
	bl sub_801A018
	bl sub_80CA510
	mov r0, #0xb7
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
	.balign 4, 0x00
off_80CA39C: .word dword_80CA26C
.func
.thumb_func
sub_80CA3A0:
	push {r7,lr}
	bl sub_801A00E
	.hword 0xF74F
	.word 0xF73FFE95, 0x4200FEF0, 0x6D6FD121, 0x49626F38, 0xD0034208
	.word 0xFE5AF74F, 0x66288A68, 0x7A68490E, 0x46FE5809, 0x6D684708
	.word 0x29007841, 0x8A68D106, 0x42886E29, 0x2001D002, 0xFE4CF74F
	.word 0xFC3FF742, 0xD0044200, 0xFE14F74F, 0xFC65F742, 0xF74FBD80
	.word 0x2008FE3D, 0xBD8060A8
	.word off_80CA404
off_80CA404: .word sub_80CA408+1
.endfunc // sub_80CA3A0

.func
.thumb_func
sub_80CA408:
	push {r4,lr}
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#6]
	cmp r0, #2
	beq loc_80CA47C
	cmp r0, #1
	beq loc_80CA456
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x40]
	mul r1, r0
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r2, [r5,#0x44]
	cmp r2, #0
	beq loc_80CA49A
	cmp r1, #0
	bpl loc_80CA444
	ldr r1, off_80CA4B0 // =dword_80CA4B4 
	ldrb r2, [r5,#5]
	lsl r2, r2, #2
	ldr r1, [r1,r2]
	cmp r0, r1
	bgt loc_80CA49A
	mov r0, #1
	strb r0, [r5,#6]
	b loc_80CA494
loc_80CA444:
	ldr r1, off_80CA4C0 // =dword_80CA4C4 
	ldrb r2, [r5,#5]
	lsl r2, r2, #2
	ldr r1, [r1,r2]
	cmp r0, r1
	blt loc_80CA49A
	mov r0, #1
	strb r0, [r5,#6]
	b loc_80CA494
loc_80CA456:
	ldr r1, [r5,#0x44]
	mul r1, r0
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	cmp r1, #0
	bpl loc_80CA470
	ldr r1, dword_80CA4D0 // =0x40000 
	cmp r0, r1
	bgt loc_80CA49A
	mov r0, #2
	strb r0, [r5,#6]
	b loc_80CA494
loc_80CA470:
	ldr r1, dword_80CA4D4 // =0x340000 
	cmp r0, r1
	blt loc_80CA49A
	mov r0, #2
	strb r0, [r5,#6]
	b loc_80CA494
loc_80CA47C:
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	ldrb r1, [r5,#0x17]
	bl object_getFlipDirection // (int a1, int a2) -> int
	ldr r1, [r5,#0x40]
	mul r1, r0
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	b loc_80CA49A
loc_80CA494:
	bl sub_800E29C // () -> void
	b loc_80CA49E
loc_80CA49A:
	bl sub_800E2AC
loc_80CA49E:
	bl sub_801A04C
	ldr r0, [r5,#0x54]
	ldrb r0, [r0,#0xc]
	cmp r0, #0
	beq locret_80CA4AE
	bl sub_80CA510
locret_80CA4AE:
	pop {r4,pc}
off_80CA4B0: .word dword_80CA4B4
dword_80CA4B4: .word 0xFF9C0000, 0xFFC40000, 0xFFEC0000
off_80CA4C0: .word dword_80CA4C4
dword_80CA4C4: .word 0x640000, 0x3C0000, 0x140000
dword_80CA4D0: .word 0x40000
dword_80CA4D4: .word 0x340000
.endfunc // sub_80CA408

.func
.thumb_func
sub_80CA4D8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x32 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CA4F4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80CA4F4:
	pop {pc}
.endfunc // sub_80CA4D8

.func
.thumb_func
sub_80CA4F6:
	push {lr}
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	mov r1, #5
	mul r0, r1
	add r0, #1
	mov r1, #3
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80CA4D8
	pop {pc}
.endfunc // sub_80CA4F6

.func
.thumb_func
sub_80CA510:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#3]
	cmp r0, #0
	beq locret_80CA53E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	beq locret_80CA53E
	ldrb r1, [r5,#0x16]
	mov r2, #0x20 
	mul r1, r2
	and r2, r0
	cmp r2, r1
	beq locret_80CA53E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #6
	bl object_setPanelType
locret_80CA53E:
	pop {pc}
	.word 0xFF800000
.endfunc // sub_80CA510

loc_80CA544:
	push {lr}
	ldr r1, off_80CA558 // =off_80CA55C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CA558: .word off_80CA55C
off_80CA55C: .word sub_80CA568+1
	.word sub_80CA61A+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CA568:
	push {r4,r7,lr}
	bl sub_800E29C // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x30 
	bl sub_80E05F6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80CA568

	mov r1, #0x10
	tst r0, r1
	beq loc_80CA594
	ldr r1, dword_80CA6B0 // =0xf880080 
	tst r0, r1
	beq loc_80CA59E
loc_80CA594:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_8109794
	b loc_80CA5F6
loc_80CA59E:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_breakPanel
	mov r0, #0xda
	bl sound_play // () -> void
	mov r1, #0xc
	mov r2, #0x33 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80CA6B4 // =0x80000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #2
	strh r0, [r5,#0x20]
	ldr r0, dword_80CA6B4 // =0x80000 
	str r0, [r5,#0x48]
	bl sub_8019892
	tst r0, r0
	bne loc_80CA5FC
loc_80CA5F6:
	bl object_freeMemory
	pop {r4,r7,pc}
loc_80CA5FC:
	mov r1, #4
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #5
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CA61A
	pop {r4,r7,pc}
.func
.thumb_func
sub_80CA61A:
	push {r4,r6,lr}
	bl sub_801A00E
.endfunc // sub_80CA61A

	bl sub_801A0D4
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x70]
	tst r1, r1
	bne loc_80CA670
	ldr r1, [r5,#0x3c]
	lsr r0, r1, #0x10
	cmp r0, #0x14
	bge loc_80CA63C
	ldr r0, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	b loc_80CA680
loc_80CA63C:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r0, #0
	ldr r1, [r5,#0x34]
	ldr r0, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E6E8
	tst r0, r0
	beq loc_80CA660
	ldrb r0, [r5,#4]
	sub r0, #1
	strb r0, [r5,#4]
	bgt loc_80CA660
	b loc_80CA670
loc_80CA660:
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80CA680
loc_80CA670:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
loc_80CA680:
	bl sub_801A018
	pop {r4,r6,pc}
.func
.thumb_func
sub_80CA686:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x33 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CA69A
	bl sub_801155A
locret_80CA69A:
	pop {pc}
.endfunc // sub_80CA686

	push {lr}
	bl sub_80CA686
	cmp r0, #0
	beq locret_80CA6AE
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80CA6AE:
	pop {pc}
dword_80CA6B0: .word 0xF880080
dword_80CA6B4: .word 0x80000
loc_80CA6B8:
	push {lr}
	ldr r1, off_80CA6C8 // =off_80CA6CC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CA6C8: .word off_80CA6CC
off_80CA6CC: .word sub_80CA6D8+1
	.word sub_80CA7AC+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CA6D8:
	push {r4,lr}
	bl sub_800E29C // () -> void
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80CA712
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	beq loc_80CA712
	ldr r0, dword_80CA924 // =0x103041b 
	ldr r1, dword_80CA928 // =0x6050300 
	ldrb r2, [r5,#6]
	cmp r2, #0
	bne loc_80CA708
	ldrb r2, [r5,#0x12]
	cmp r2, #1
	beq loc_80CA708
	cmp r2, #6
	blt loc_80CA70A
loc_80CA708:
	ldr r1, dword_80CA92C // =0x6050100 
loc_80CA70A:
	bl sub_8011504
	tst r0, r0
	bne loc_80CA72A
loc_80CA712:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl object_freeMemory
	pop {r4,pc}
.endfunc // sub_80CA6D8

loc_80CA72A:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, off_80CA79C // =dword_80CA7A0 
	mov r2, #2
	ldrb r3, [r5,#6]
	cmp r3, #1
	beq loc_80CA750
	ldrb r2, [r5,#4]
loc_80CA750:
	lsl r2, r2, #2
	ldr r1, [r1,r2]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0xa
	bl sub_801A140
	ldrb r0, [r5,#6]
	cmp r0, #0
	beq loc_80CA768
	mov r2, #4
	b loc_80CA77C
loc_80CA768:
	ldrb r2, [r5,#0x16]
	mov r3, #1
	eor r2, r3
	mov r3, #5
	mul r2, r3
	add r2, #1
	ldrb r3, [r5,#0x12]
	sub r2, r2, r3
	bpl loc_80CA77C
	neg r2, r2
loc_80CA77C:
	ldr r0, dword_80CA930 // =0x280000 
	mul r0, r2
	svc 6
	add r0, #1
	strh r0, [r5,#0x20]
	bl sub_801A018
	mov r0, #0x88
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80CA7AC
	pop {r4,pc}
off_80CA79C: .word dword_80CA7A0
dword_80CA7A0: .word 0x60000, 0x70000, 0x80000
.func
.thumb_func
sub_80CA7AC:
	push {r4,r7,lr}
	bl sub_801A00E
	.hword 0xF74F
	.word 0x6D6FFC8F, 0x42006F38, 0x8A68D003, 0xF74F6628, 0x4917FC57
	.word 0x58097A68, 0x470846FE, 0x7CE97CA8, 0xF890F742, 0x42082110
	.word 0x6D6FD013, 0x28007878, 0x8A68D106, 0x42886E29, 0x2001D006
	.word 0xFC44F74F, 0x7CE97CA8, 0xF9EEF742, 0xF9D6F751, 0xFC0AF74F
	.word 0x2034BD90, 0xC80E1940, 0x4242410, 0x2414191B, 0xFEEFF015
	.word 0xFC2CF74F, 0x60A82008, 0xBD90
	.word off_80CA828
off_80CA828: .word sub_80CA834+1
	.word sub_80CA88E+1
	.word sub_80CA8E2+1
.endfunc // sub_80CA7AC

.func
.thumb_func
sub_80CA834:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldr r0, [r5,#0x64]
	cmp r0, #0
	bne loc_80CA86C
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #5
	mul r0, r1
	add r0, #1
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	bne loc_80CA86C
	mov r0, #1
	str r0, [r5,#0x64]
	mov r1, #6
	mov r2, #5
	mov r3, #1
	bl sub_801A082
loc_80CA86C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CA88C
	bl sub_800E29C // () -> void
	mov r0, #8
	ldrb r1, [r5,#6]
	cmp r1, #0
	beq loc_80CA882
	mov r0, #0x10
loc_80CA882:
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CA88C:
	pop {pc}
.endfunc // sub_80CA834

.func
.thumb_func
sub_80CA88E:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CA8E0
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#5]
	sub r0, #1
	strb r0, [r5,#5]
	beq loc_80CA8AC
	mov r0, #8
	strh r0, [r5,#0x20]
	b locret_80CA8E0
loc_80CA8AC:
	ldrb r0, [r5,#6]
	cmp r0, #0
	beq loc_80CA8CA
	ldr r0, [r5,#0x40]
	neg r0, r0
	str r0, [r5,#0x40]
	ldrb r0, [r5,#0x17]
	mov r1, #1
	eor r0, r1
	strb r0, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	b loc_80CA8CE
loc_80CA8CA:
	ldr r0, dword_80CA934 // =0x40000 
	str r0, [r5,#0x48]
loc_80CA8CE:
	mov r1, #6
	mov r2, #5
	mov r3, #3
	bl sub_801A082
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CA8E0:
	pop {pc}
.endfunc // sub_80CA88E

.func
.thumb_func
sub_80CA8E2:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80CA90C
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80CA90C:
	pop {pc}
.endfunc // sub_80CA8E2

.func
.thumb_func
sub_80CA90E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x34 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CA922
	bl sub_801155A
locret_80CA922:
	pop {pc}
dword_80CA924: .word 0x103041B
dword_80CA928: .word 0x6050300
dword_80CA92C: .word 0x6050100
dword_80CA930: .word 0x280000
dword_80CA934: .word 0x40000
.endfunc // sub_80CA90E

loc_80CA938:
	push {lr}
	ldr r1, off_80CA94C // =off_80CA950 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CA94C: .word off_80CA950
off_80CA950: .word sub_80CA95C+1
	.word sub_80CA9CA+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CA95C:
	push {lr}
	mov r1, #0xc
	mov r2, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #1
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CA95C

	ldrb r0, [r5,#4]
	cmp r0, #2
	beq loc_80CA98E
	mov r0, #4
	bl sprite_setPallete // (int pallete) -> void
loc_80CA98E:
	bl sub_800E2AC
	bl sub_8019892
	tst r0, r0
	bne loc_80CA9A0
	bl object_freeMemory
	pop {pc}
loc_80CA9A0:
	mov r1, #4
	ldrb r2, [r5,#4]
	cmp r2, #2
	beq loc_80CA9AA
	mov r1, #0x15
loc_80CA9AA:
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CA9CA
	pop {pc}
.func
.thumb_func
sub_80CA9CA:
	push {lr}
	bl sub_801A00E
	.word 0xFB80F74F, 0xFBDBF73F, 0xD10B4200, 0x6F086D69, 0xD10E4200
	.word 0x7A68490E, 0x46FE5809, 0xF74F4708, 0xBD00FB13, 0x19402034
	.word 0x2414C80E, 0xFDFBF015, 0x7928E008, 0xE0052802, 0x19402034
	.word 0x2411C80E, 0xFDF1F015, 0xFB2EF74F, 0x60A82008, 0xBD00
	.word off_80CAA24
off_80CAA24: .word sub_80CAA2C+1
	.word sub_80CAB14+1
.endfunc // sub_80CA9CA

.func
.thumb_func
sub_80CAA2C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CAA5C
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x32 
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80CAB64 // =0xffffd000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	mov r0, #0x32 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80CAA5C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80CAAE2
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl object_isCurrentPanelSolid
	bne loc_80CAA84
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
loc_80CAA84:
	ldrb r0, [r5,#4]
	ldr r1, off_80CAB0C // =byte_80CAB10 
	ldrb r0, [r1,r0]
	bl sub_801A07C
	bl object_isCurrentPanelSolid
	bne loc_80CAAA0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
loc_80CAAA0:
	ldrb r0, [r5,#4]
	cmp r0, #2
	bne loc_80CAABE
	mov r2, #0
	mov r3, #4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r4, [r5,#0x16]
	mov r7, #0
	bl sub_801BD3C
	mov r0, #0x70 
	bl sound_play // () -> void
	b loc_80CAAD8
loc_80CAABE:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_breakPanel_dup2
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x11
	bl sub_80E05F6
	mov r0, #0x97
	bl sound_play // () -> void
loc_80CAAD8:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80CAB08
loc_80CAAE2:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80CAB64 // =0xffffd000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
	bl sub_801A04C
locret_80CAB08:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80CAB0C: .word byte_80CAB10
byte_80CAB10: .byte 0x1, 0x1, 0x4, 0x0
.endfunc // sub_80CAA2C

.func
.thumb_func
sub_80CAB14:
	push {r4,r7,lr}
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r7,pc}
.endfunc // sub_80CAB14

.func
.thumb_func
sub_80CAB28:
	push {lr}
	push {r5}
	mov r0, #0x35 
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80CAB42
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	mov r1, #0
	strb r1, [r0,#0xe]
	str r6, [r0,#0x2c]
locret_80CAB42:
	pop {pc}
.endfunc // sub_80CAB28

	push {lr}
	push {r1-r3}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r4, [r5,#0x13]
	lsl r4, r4, #8
	add r4, r4, r0
	lsl r4, r4, #0x10
	pop {r1-r3}
	bl sub_80CAB28
	pop {pc}
dword_80CAB64: .word 0xFFFFD000
loc_80CAB68:
	push {lr}
	ldr r1, off_80CAB78 // =off_80CAB7C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CAB78: .word off_80CAB7C
off_80CAB7C: .word sub_80CAB88+1
	.word loc_80CAB90+1
	.word sub_80CAC44+1
.func
.thumb_func
sub_80CAB88:
	push {lr}
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80CAB88

loc_80CAB90:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CABBC
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	beq locret_80CABC0
	mov r1, #0xa
	cmp r0, r1
	beq locret_80CABC0
	bl battle_isTimeStop
	bne locret_80CABC0
	ldr r1, off_80CABC4 // =off_80CABC8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80CABC0
loc_80CABBC:
	mov r0, #8
	str r0, [r5,#8]
locret_80CABC0:
	pop {pc}
	.balign 4, 0x00
off_80CABC4: .word off_80CABC8
off_80CABC8: .word sub_80CABD0+1
	.word byte_80CAC01
.func
.thumb_func
sub_80CABD0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CABE6
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#4]
	ldr r1, off_80CABF8 // =aP00 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x20]
	b locret_80CABF6
loc_80CABE6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CABF6
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CABF6:
	pop {pc}
off_80CABF8: .word aP00
aP00: .asciz "P<00"
byte_80CAC01: .byte 0xB5, 0xA8, 0x7A
.endfunc // sub_80CABD0

	tst r0, r0
	bne loc_80CAC22
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80CAC82
	strb r2, [r5,#6]
	strb r3, [r5,#7]
	bl sub_80CAD14
	ldrb r0, [r5,#4]
	ldr r1, off_80CAC3C // =byte_80CAC40 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x20]
	b locret_80CAC3A
loc_80CAC22:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CAC3A
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_80CAD14
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CAC3A:
	pop {pc}
off_80CAC3C: .word byte_80CAC40
byte_80CAC40: .byte 0xC, 0xC, 0x6, 0x6
.func
.thumb_func
sub_80CAC44:
	push {lr}
	ldr r1, [r5,#0x50]
	ldr r0, [r1]
	cmp r0, r5
	bne loc_80CAC52
	mov r0, #0
	str r0, [r1]
loc_80CAC52:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80CAC44

.func
.thumb_func
sub_80CAC58:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x36 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CAC80
	str r1, [r0,#0x60]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r7, [r0,#0x50]
	str r0, [r7]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CAC80:
	pop {pc}
.endfunc // sub_80CAC58

.func
.thumb_func
sub_80CAC82:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x1c
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#0x13]
	str r0, [sp]
	mov r4, #0
	mov r6, #0
	ldr r0, [sp]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80CAD00 // =dword_80CAD04 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	add r7, sp, #4
	bl sub_800D012
.endfunc // sub_80CAC82

	add r7, r0, #0
	tst r7, r7
	beq loc_80CACC0
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #4
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	add r4, r0, #0
	add r6, r1, #0
loc_80CACC0:
	ldr r0, [sp]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80CAD00 // =dword_80CAD04 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	add r7, sp, #4
	bl sub_800CFA6
	add r7, r0, #0
	tst r7, r7
	bne loc_80CACE0
	mov r2, #0
	mov r3, #0
	b loc_80CACF6
loc_80CACE0:
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #4
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	add r2, r0, #0
	add r3, r1, #0
loc_80CACF6:
	add r0, r4, #0
	add r1, r6, #0
	add sp, sp, #0x1c
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80CAD00: .word dword_80CAD04
dword_80CAD04: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80CAD14:
	push {r4,r6,lr}
	tst r0, r0
	beq locret_80CAD24
	ldrb r2, [r5,#0xe]
	ldrb r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	bl sub_80CAEC8
locret_80CAD24:
	pop {r4,r6,pc}
	.balign 4, 0x00
.endfunc // sub_80CAD14

loc_80CAD28:
	push {lr}
	ldr r1, off_80CAD3C // =off_80CAD40 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80CAD3C: .word off_80CAD40
off_80CAD40: .word sub_80CAD4C+1
	.word sub_80CADE0+1
	.word sub_80CAEC0+1
.func
.thumb_func
sub_80CAD4C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	bl sub_800E2C0
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80CADC8 // =dword_80CADCC 
	ldr r1, [r2,r1]
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80CADDC // =0x10000 
	str r0, [r5,#0x48]
	mov r1, #8
	mov r2, #0xd
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x17
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CAD4C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80CADAA
	bl object_freeMemory
	b locret_80CADC6
loc_80CADAA:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #2
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80CADC6:
	pop {pc}
off_80CADC8: .word dword_80CADCC
dword_80CADCC: .word 0x5A000, 0x6A000, 0x75000, 0x90000
dword_80CADDC: .word 0x10000
.func
.thumb_func
sub_80CADE0:
	push {lr}
	bl sub_801A00E
	.hword 0xF74F
	.word 0xF73FF975, 0x4200F9D0, 0x6D68D10E, 0x42006F00, 0xF73FD10A
	.word 0xD104F94D, 0x7A684906, 0x46FE5809, 0xF74F4708, 0xE003F905
	.word 0xF930F74F, 0x60A82008, 0xBD00
	.word off_80CAE20
off_80CAE20: .word sub_80CAE28+1
	.word sub_80CAE94+1
.endfunc // sub_80CADE0

.func
.thumb_func
sub_80CAE28:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CAE54
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	mov r4, #0x2c 
	orr r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0
	bl sub_80E05F6
	mov r0, #0xeb
	bl sound_play // () -> void
	mov r0, #0x2a 
	strh r0, [r5,#0x20]
	b locret_80CAE92
loc_80CAE54:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x24 
	beq loc_80CAE74
	cmp r0, #0
	ble loc_80CAE80
	cmp r0, #0x24 
	bge locret_80CAE92
	cmp r0, #0x1e
	blt locret_80CAE92
	ldr r0, [r5,#0x48]
	ldr r1, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	b locret_80CAE92
loc_80CAE74:
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x10
	strh r0, [r5,#0x3e]
	b locret_80CAE92
loc_80CAE80:
	mov r0, #0x18
	strb r0, [r5,#0x10]
	mov r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CAE92:
	pop {r4,pc}
.endfunc // sub_80CAE28

.func
.thumb_func
sub_80CAE94:
	push {r4,r6,lr}
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	bne loc_80CAEB6
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80CAEBE
loc_80CAEB6:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80CAEBE:
	pop {r4,r6,pc}
.endfunc // sub_80CAE94

.func
.thumb_func
sub_80CAEC0:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80CAEC0

.func
.thumb_func
sub_80CAEC8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x37 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CAEEC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CAEEC:
	pop {pc}
	.byte 0, 0
.endfunc // sub_80CAEC8

loc_80CAEF0:
	push {lr}
	ldr r1, off_80CAF04 // =off_80CAF08 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80CAF04: .word off_80CAF08
off_80CAF08: .word sub_80CAF14+1
	.word loc_80CAF9C+1
	.word sub_80CB078+1
.func
.thumb_func
sub_80CAF14:
	push {lr}
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80CB0D4 // =0x140000 
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, dword_80CB0D8 // =0x280000 
	str r0, [r5,#0x3c]
	mov r1, #8
	mov r2, #0xd
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CAF14

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80CAF74 // =dword_80CAF78 
	ldr r1, [r1,r0]
	str r1, [r5,#0x60]
	ldr r1, off_80CAF88 // =dword_80CAF8C 
	ldr r1, [r1,r0]
	str r1, [r5,#0x64]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
off_80CAF74: .word dword_80CAF78
dword_80CAF78: .word 0x23, 0x23, 0x23, 0x23
off_80CAF88: .word dword_80CAF8C
dword_80CAF8C: .word 0xFFFF9000, 0xFFFF9000, 0xFFFF9000, 0xFFFF9000
loc_80CAF9C:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CAFB8
	bl battle_isTimeStop
	bne locret_80CAFBC
	ldr r1, off_80CAFC0 // =off_80CAFC4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80CAFBC
loc_80CAFB8:
	mov r0, #8
	str r0, [r5,#8]
locret_80CAFBC:
	pop {pc}
	.byte 0, 0
off_80CAFC0: .word off_80CAFC4
off_80CAFC4: .word sub_80CAFC8+1
.func
.thumb_func
sub_80CAFC8:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CAFFE
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldr r4, [r5,#0x60]
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, [r5,#0x64]
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	ldr r0, [r5,#0x60]
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80CB068
loc_80CAFFE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80CB034
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80CB06C // =byte_80CB070 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80CB02A
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	bl sub_80E05F6
	bl sub_80CB0AE
loc_80CB02A:
	mov r0, #8
	str r0, [r5,#8]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80CB068
loc_80CB034:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80CB046
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl object_highlightPanel
loc_80CB046:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, [r5,#0x64]
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
locret_80CB068:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80CB06C: .word byte_80CB070
byte_80CB070: .byte 0x10, 0x0, 0x80, 0x15, 0x10, 0x0, 0x80, 0x2A
.endfunc // sub_80CAFC8

.func
.thumb_func
sub_80CB078:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80CB078

.func
.thumb_func
sub_80CB080:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x38 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CB0AC
	strb r1, [r0,#0x14]
	strb r2, [r0,#0x15]
	ldrb r1, [r5,#0x12]
	strb r1, [r0,#0x12]
	ldrb r1, [r5,#0x13]
	strb r1, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CB0AC:
	pop {pc}
.endfunc // sub_80CB080

.func
.thumb_func
sub_80CB0AE:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80CB0CC // =0x4050101 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80CB0D0 // =0x3 
	bl sub_80C536A
	tst r0, r0
	beq locret_80CB0CA
	mov r1, #5
	strh r1, [r0,#0x20]
locret_80CB0CA:
	pop {r4,r6,r7,pc}
dword_80CB0CC: .word 0x4050101
dword_80CB0D0: .word 0x3
dword_80CB0D4: .word 0x140000
dword_80CB0D8: .word 0x280000
.endfunc // sub_80CB0AE

loc_80CB0DC:
	push {lr}
	ldr r1, off_80CB0FC // =off_80CB100 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80CB0F4
	bl sub_801BCA6
	b locret_80CB0F8
loc_80CB0F4:
	bl sub_801BBF4
locret_80CB0F8:
	pop {pc}
	.balign 4, 0x00
off_80CB0FC: .word off_80CB100
off_80CB100: .word sub_80CB10C+1
	.word loc_80CB154+1
	.word sub_80CB1DA+1
.func
.thumb_func
sub_80CB10C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0xd
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CB10C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0xa7
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80CB154:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CB176
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80CB16A
	bl battle_isTimeStop
	bne locret_80CB17A
loc_80CB16A:
	ldr r1, off_80CB17C // =off_80CB180 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80CB17A
loc_80CB176:
	mov r0, #8
	str r0, [r5,#8]
locret_80CB17A:
	pop {pc}
off_80CB17C: .word off_80CB180
off_80CB180: .word sub_80CB184+1
.func
.thumb_func
sub_80CB184:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CB19E
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	mov r1, #0x20 
	bl sub_80CB208
	mov r0, #0x20 
	strh r0, [r5,#0x20]
	b locret_80CB1D8
loc_80CB19E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xd
	beq loc_80CB1C0
	cmp r0, #7
	beq loc_80CB1D2
	cmp r0, #0
	bgt locret_80CB1D8
	mov r0, #1
	bl sub_80CB248
	mov r0, #8
	str r0, [r5,#8]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80CB1D8
loc_80CB1C0:
	mov r0, #1
	mov r1, #0xd
	bl sub_80CB208
	mov r0, #2
	mov r1, #0xd
	bl sub_80CB208
	b locret_80CB1D8
loc_80CB1D2:
	mov r0, #2
	bl sub_80CB248
locret_80CB1D8:
	pop {r4,r6,pc}
.endfunc // sub_80CB184

.func
.thumb_func
sub_80CB1DA:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80CB1DA

.func
.thumb_func
sub_80CB1E2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x39 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CB206
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CB206:
	pop {pc}
.endfunc // sub_80CB1E2

.func
.thumb_func
sub_80CB208:
	push {r4,r6,r7,lr}
	add r4, r0, #0
	add r6, r1, #0
	bl sub_800E2C0
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq locret_80CB23E
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80CB240 // =0xa050201 
	push {r6}
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80CB244 // =0x3 
	bl sub_80C53A6
	pop {r6}
	tst r0, r0
	beq locret_80CB23E
	strh r6, [r0,#0x20]
locret_80CB23E:
	pop {r4,r6,r7,pc}
dword_80CB240: .word 0xA050201
dword_80CB244: .word 0x3
.endfunc // sub_80CB208

.func
.thumb_func
sub_80CB248:
	push {r4,r6,lr}
	add r6, r0, #0
	bl sub_800E2C0
	mul r0, r6
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq locret_80CB280
	push {r0,r1}
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	mov r4, #0x2b 
	orr r4, r0
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	bl sub_80E05F6
locret_80CB280:
	pop {r4,r6,pc}
	.balign 4, 0x00
.endfunc // sub_80CB248

loc_80CB284:
	push {lr}
	ldr r1, off_80CB298 // =off_80CB29C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CB298: .word off_80CB29C
off_80CB29C: .word sub_80CB2A8+1
	.word sub_80CB368+1
	.word sub_80CB3FC+1
.func
.thumb_func
sub_80CB2A8:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x2b 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CB2A8

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80CB2F2
	bl object_freeMemory
	b locret_80CB33E
loc_80CB2F2:
	mov r1, #7
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A018
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	ldrb r2, [r5,#5]
	sub r2, r2, r1
	mul r0, r2
	mov r1, #0x28 
	mul r0, r1
	lsr r0, r0, #1
	str r0, [r5,#0x64]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80CB340 // =dword_80CB344 
	ldr r0, [r1,r0]
	str r0, [r5,#0x68]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80CB354 // =off_80CB358 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x20]
	mov r0, #0x40 
	strh r0, [r5,#0x22]
	lsl r0, r0, #0x10
	str r0, [r5,#0x48]
	bl sub_80CB434
	mov r0, #4
	str r0, [r5,#8]
locret_80CB33E:
	pop {pc}
off_80CB340: .word dword_80CB344
dword_80CB344: .word 0x40000, 0x50000, 0x50000, 0x60000
off_80CB354: .word off_80CB358
off_80CB358: .word 0x40
	.word 0x33, 0x33, 0x2A
.func
.thumb_func
sub_80CB368:
	push {lr}
	bl sub_801A00E
	.hword 0xF74E
	.word 0xF73EFEB1, 0x4200FF0C, 0xF73ED10B, 0xD105FE8D, 0x7A684905
	.word 0x46FE5809, 0xE0044708, 0xFE44F74E, 0x2008E001, 0xBD0060A8
	.word off_80CB39C
off_80CB39C: .word sub_80CB3A0+1
.endfunc // sub_80CB368

.func
.thumb_func
sub_80CB3A0:
	push {r4,r6,lr}
	ldr r4, [r5,#0x54]
	ldr r0, [r4,#0x70]
	tst r0, r0
	beq loc_80CB3B2
	bl sub_801A074 // () -> void
	mov r0, #0
	str r0, [r4,#0x70]
loc_80CB3B2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80CB3F2
	ldr r0, [r5,#0x48]
	ldr r1, [r5,#0x68]
	add r1, r1, r0
	str r1, [r5,#0x48]
	lsr r1, r1, #0x10
	strh r1, [r5,#0x22]
	ldrb r4, [r5,#0x12]
	ldrb r6, [r5,#0x13]
	bl sub_80CB45C
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	bne loc_80CB3EA
	ldrb r0, [r5,#0x13]
	cmp r0, r6
	beq locret_80CB3F6
loc_80CB3EA:
	mov r0, #1
	bl sub_801A07C
	b locret_80CB3F6
loc_80CB3F2:
	mov r0, #8
	str r0, [r5,#8]
locret_80CB3F6:
	pop {r4,r6,pc}
	.word 0x1000000
.endfunc // sub_80CB3A0

.func
.thumb_func
sub_80CB3FC:
	push {r4,lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne loc_80CB40A
	mov r0, #0
	str r0, [r1]
loc_80CB40A:
	bl sub_8016C8A
	pop {r4,pc}
.endfunc // sub_80CB3FC

.func
.thumb_func
sub_80CB410:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x3a 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CB432
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80CB432:
	pop {pc}
.endfunc // sub_80CB410

.func
.thumb_func
sub_80CB434:
	push {r6,lr}
	mov r0, #1
	mov r1, #2
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r1, [r5,#0x70]
	ldrb r0, [r5,#0x12]
	mov r1, #2
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r6, r0, #0
	ldrb r0, [r5,#5]
	mov r1, #2
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r0, r0, r6
	mov r1, #2
	svc 6
	str r0, [r5,#0x6c]
	pop {r6,pc}
.endfunc // sub_80CB434

.func
.thumb_func
sub_80CB45C:
	push {r4,r6,r7,lr}
	bl sub_800E2C0
	ldrh r4, [r5,#0x12]
	neg r4, r0
	ldr r6, off_80CB494 // =byte_8006660 
	ldr r7, off_80CB498 // =byte_80065E0 
	ldrh r2, [r5,#0x22]
	mov r0, #0xff
	and r2, r0
	add r2, r2, r2
	ldrsh r0, [r7,r2]
	ldr r1, [r5,#0x64]
	mul r0, r1
	lsl r0, r0, #8
	mul r0, r4
	ldr r1, [r5,#0x6c]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldrsh r0, [r6,r2]
	ldr r1, [r5,#0x64]
	mul r0, r1
	lsl r0, r0, #8
	ldr r1, [r5,#0x70]
	add r1, r1, r0
	str r1, [r5,#0x38]
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80CB494: .word byte_8006660
off_80CB498: .word byte_80065E0
.endfunc // sub_80CB45C

.func
.thumb_func
sub_80CB49C:
	push {lr}
	ldr r1, off_80CB4B0 // =off_80CB4B4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80CB4B0: .word off_80CB4B4
off_80CB4B4: .word sub_80CB4D4+1
	.word sub_80CB5B4+1
	.word sub_80CB4C0+1
.endfunc // sub_80CB49C

.func
.thumb_func
sub_80CB4C0:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #3
	bge loc_80CB4CE
	ldr r3, [r5,#0x4c]
	mov r0, #0
	str r0, [r3]
loc_80CB4CE:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80CB4C0

.func
.thumb_func
sub_80CB4D4:
	push {r7,lr}
	mov r1, #0x10
	mov r2, #0x37 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CB4D4

	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, off_80CB588 // =dword_80CB58C 
	ldrb r2, [r5,#4]
	lsl r2, r2, #2
	ldr r1, [r1,r2]
	mul r0, r1
	str r0, [r5,#0x40]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	sub r1, r1, r0
	strb r1, [r5,#0x12]
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	bne loc_80CB52E
	bl object_freeMemory
	pop {r7,pc}
loc_80CB52E:
	mov r1, #4
	mov r3, #3
	ldrb r2, [r5,#4]
	cmp r2, #6
	blt loc_80CB540
	ldrb r3, [r5,#5]
	cmp r2, #9
	bne loc_80CB540
	mov r1, #0x25 
loc_80CB540:
	mov r2, #5
	bl sub_8019FB4
	mov r1, #0
	strb r1, [r7,#1]
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#4]
	cmp r0, #3
	bge loc_80CB560
	ldr r3, [r5,#0x4c]
	mov r0, #3
	str r0, [r3]
loc_80CB560:
	ldrb r0, [r5,#4]
	cmp r0, #9
	bne loc_80CB574
	mov r0, #0x14
	mov r1, #2
	bl sub_801A4D0
	mov r0, #1
	bl sprite_setPallete // (int pallete) -> void
loc_80CB574:
	mov r0, #0xa
	str r0, [r5,#0x64]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CB5B4
	mov r0, #0xa7
	bl sound_play // () -> void
	pop {r7,pc}
off_80CB588: .word dword_80CB58C
dword_80CB58C: .word 0x30000, 0x38000, 0x40000, 0x60000, 0x68000, 0x70000
	.word 0x60000, 0x68000, 0x70000, 0x70000
.func
.thumb_func
sub_80CB5B4:
	push {lr}
	bl sub_801A00E
	.hword 0xF74E
	.word 0xF73EFD8B, 0x4200FDE6, 0x6D69D126, 0x42006F08, 0x7928D006
	.word 0xDB1F2806, 0xFD4EF74E, 0x66288A68, 0x7A684910, 0x46FE5809
	.word 0xF0004708, 0x7AE8F863, 0xD00A2800, 0x78416D68, 0xD1062900
	.word 0x6E298A68, 0xD0024288, 0xF74E2004, 0xF741FD3B, 0x4200FB2E
	.word 0xF74ED002, 0xBD00FD03, 0xFD2EF74E, 0x60A82008, 0xBD00
	.word off_80CB624
off_80CB624: .word sub_80CB628+1
.endfunc // sub_80CB5B4

.func
.thumb_func
sub_80CB628:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #2
	beq loc_80CB674
	cmp r0, #1
	beq loc_80CB668
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80CB684
	mov r0, #1
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r1, r1, r0
	strb r1, [r5,#0x12]
	bl sub_800E29C // () -> void
	mov r0, #4
	bl sub_801A07C
	mov r0, #2
	ldrb r1, [r5,#4]
	cmp r1, #3
	bge loc_80CB664
	mov r0, #0xf
	strh r0, [r5,#0x20]
	mov r0, #1
loc_80CB664:
	strb r0, [r5,#0xb]
	b loc_80CB680
loc_80CB668:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80CB680
	mov r0, #2
	strb r0, [r5,#0xb]
loc_80CB674:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
loc_80CB680:
	bl sub_801A04C
locret_80CB684:
	pop {r4,r6,r7,pc}
.endfunc // sub_80CB628

.func
.thumb_func
sub_80CB686:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x3b 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CB6AE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrb r3, [r0,#4]
	cmp r3, #3
	bge loc_80CB6AA
	str r7, [r0,#0x4c]
	mov r3, #2
	str r3, [r7]
loc_80CB6AA:
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80CB6AE:
	pop {pc}
.endfunc // sub_80CB686

	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #9
	bne locret_80CB6C8
	ldr r0, [r5,#0x64]
	sub r0, #1
	str r0, [r5,#0x64]
	bgt locret_80CB6C8
	mov r0, #5
	str r0, [r5,#0x64]
	bl sub_80CB6CA
locret_80CB6C8:
	pop {pc}
.func
.thumb_func
sub_80CB6CA:
	push {r4,r6,r7,lr}
	ldr r4, dword_80CB6E8 // =0x10010 
	bl sub_800E456 // () -> int
	lsl r0, r0, #0x18
	add r4, r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80CB6EC // =0xc3ff 
	mov r7, #0x14
	bl sub_80E33FA
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80CB6E8: .word 0x10010
dword_80CB6EC: .word 0xC3FF
dword_80CB6F0: .word 0x44B0504, 0x6305
.endfunc // sub_80CB6CA

loc_80CB6F8:
	push {lr}
	ldr r1, off_80CB70C // =off_80CB710 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CB70C: .word off_80CB710
off_80CB710: .word sub_80CB71C+1
	.word sub_80CB762+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CB71C:
	push {r7,lr}
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	bne loc_80CB730
	bl object_freeMemory
	pop {r7,pc}
loc_80CB730:
	ldrb r3, [r5,#4]
	mov r2, #3
	mul r3, r2
	ldr r2, off_80CB8FC // =dword_80CB6F0 
	add r3, r3, r2
	ldrb r1, [r3]
	ldrb r2, [r3,#1]
	ldrb r3, [r3,#2]
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
.endfunc // sub_80CB71C

	mov r0, #1
	strh r0, [r5,#0x22]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CB762
	mov r0, #0xae
	bl sound_play // () -> void
	pop {r7,pc}
.func
.thumb_func
sub_80CB762:
	push {r4,lr}
	bl sub_801A00E
	.word 0xFCB4F74E, 0x784A6D69, 0xD0062A00, 0x42006F08, 0xF73ED10B
	.word 0x4200FD08, 0x490BD110, 0x58097A68, 0x470846FE, 0xFC44F74E
	.word 0x20C3BD10, 0xFF1AF734, 0x19402034, 0x2422C80E, 0xFF29F014
	.word 0xFC66F74E, 0x60A82008, 0xBD10
	.word off_80CB7B4
off_80CB7B4: .word sub_80CB7BC+1
	.word sub_80CB898+1
.endfunc // sub_80CB762

.func
.thumb_func
sub_80CB7BC:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80CB7CE
	mov r0, #1
	strb r0, [r5,#0xa]
	ldrh r0, [r5,#0x22]
	strh r0, [r5,#0x20]
	b locret_80CB892
loc_80CB7CE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80CB892
	mov r0, #0
	strb r0, [r5,#0xa]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_isValidPanel
	tst r0, r0
	bne locret_80CB892
	bl sub_801A074 // () -> void
	mov r0, #3
	mov r1, #0x28 
	bl sub_80302A8
	mov r0, #0xc3
	bl sound_play // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	sub r0, r1, r0
	ldrb r1, [r5,#0x13]
	ldrb r4, [r5,#0x16]
	ldrb r2, [r5,#0x17]
	eor r4, r2
	lsl r4, r4, #8
	add r4, #0x60 
	push {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	bl sub_80E05F6
	pop {r0,r1}
	ldr r6, [r5,#0x2c]
	ldrb r2, [r5,#6]
	lsr r6, r2
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80CB894 // =0xa05ff04 
	mov r7, #3
	push {r0,r1}
	bl sub_80C536A
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80CB866
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl object_crackPanel
	ldr r0, [sp]
	ldr r1, [sp,#4]
	sub r1, #1
	bl object_crackPanel
	ldr r0, [sp]
	ldr r1, [sp,#4]
	add r1, #1
	bl object_crackPanel
loc_80CB866:
	pop {r0,r1}
	lsl r1, r1, #4
	orr r0, r1
	strb r0, [r5,#5]
	sub r0, #0x10
	strb r0, [r5,#6]
	add r0, #0x20 
	strb r0, [r5,#7]
	mov r0, #5
	add r0, r0, r5
	mov r1, #3
	mov r2, #3
	bl sub_8000C72
	mov r0, #3
	strh r0, [r5,#0x22]
	mov r0, #0xe
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CB892:
	pop {r4,r6,r7,pc}
dword_80CB894: .word 0xA05FF04
.endfunc // sub_80CB7BC

.func
.thumb_func
sub_80CB898:
	push {r4,r6,lr}
	ldrh r0, [r5,#0x20]
	cmp r0, #0
	bne loc_80CB8D8
	mov r0, #4
	strh r0, [r5,#0x20]
	ldrh r0, [r5,#0x22]
	add r0, #4
	ldrb r0, [r5,r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r1, #0
	beq loc_80CB8CA
	cmp r1, #3
	bgt loc_80CB8CA
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #6
	lsl r3, r3, #0x10
	mov r4, #0
	bl sub_80E05F6
loc_80CB8CA:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bge locret_80CB8DC
	mov r0, #8
	str r0, [r5,#8]
	b locret_80CB8DC
loc_80CB8D8:
	sub r0, #1
	strh r0, [r5,#0x20]
locret_80CB8DC:
	pop {r4,r6,pc}
.endfunc // sub_80CB898

.func
.thumb_func
sub_80CB8DE:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x3c 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CB8FA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80CB8FA:
	pop {pc}
off_80CB8FC: .word dword_80CB6F0
.endfunc // sub_80CB8DE

loc_80CB900:
	push {lr}
	ldr r1, off_80CB914 // =off_80CB918 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80CB914: .word off_80CB918
off_80CB918: .word sub_80CB964+1
	.word sub_80CB9E2+1
	.word sub_80CB924+1
.func
.thumb_func
sub_80CB924:
	push {lr}
	ldrb r0, [r5,#9]
	cmp r0, #1
	beq loc_80CB940
	cmp r0, #2
	beq loc_80CB94A
	mov r0, #1
	strb r0, [r5,#9]
	strb r0, [r5,#0x10]
	mov r0, #0x25 
	add r0, #0xff
	bl sound_play // () -> void
	b locret_80CB962
loc_80CB940:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80CB962
loc_80CB94A:
	ldr r0, [r5,#0x68]
	ldr r1, [r0]
	sub r1, #1
	str r1, [r0]
	ldr r0, [r5,#0x6c]
	mov r1, #0
	str r1, [r0]
	ldr r0, [r5,#0x70]
	bl sub_80E5BA2
	bl sub_8016C8A
locret_80CB962:
	pop {pc}
.endfunc // sub_80CB924

.func
.thumb_func
sub_80CB964:
	push {r4,lr}
	bl sub_800E29C // () -> void
	ldr r0, dword_80CBB34 // =0x1021025 
	ldr r1, dword_80CBB38 // =0xc0d0000 
	bl sub_8011504
.endfunc // sub_80CB964

	tst r0, r0
	bne loc_80CB98E
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl object_freeMemory
	pop {r4,pc}
loc_80CB98E:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #2
	bl sub_801A140
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0x60 
	bl sub_801A258
	bl sub_801A018
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x60]
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80CBB3C // =0x280000 
	svc 6
	strh r0, [r5,#0x22]
	mov r0, #0x24 
	add r0, #0xff
	bl sound_play // () -> void
	ldr r0, [r5,#0x70]
	bl sub_80E5B88
	ldr r0, [r5,#0x68]
	ldr r1, [r0]
	add r1, #1
	str r1, [r0]
	ldr r0, [r5,#0x6c]
	str r5, [r0]
	mov r0, #4
	strb r0, [r5,#8]
	pop {r4,pc}
.func
.thumb_func
sub_80CB9E2:
	push {r4,r7,lr}
	bl sub_801A00E
	.word 0xFB74F74E, 0xFBCFF73E, 0xD1144200, 0xF7452000, 0x3001FDB8
	.word 0x6D6FD00F, 0x494F6F38, 0xD10A4208, 0xFB46F73E, 0x4906D104
	.word 0x58097A68, 0x470846FE, 0xFAFEF74E, 0xF74EBD90, 0x2008FB29
	.word 0xBD9060A8
	.word off_80CBA2C
off_80CBA2C: .word sub_80CBA34+1
	.word sub_80CBA52+1
.endfunc // sub_80CB9E2

.func
.thumb_func
sub_80CBA34:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80CBA50
	bl sub_80CBAFA
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CBA50:
	pop {pc}
.endfunc // sub_80CBA34

.func
.thumb_func
sub_80CBA52:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80CBA6A
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	mov r0, #2
	strb r0, [r5,#9]
	b locret_80CBAB6
loc_80CBA6A:
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80CBA8E
	mov r0, #1
	strb r0, [r5,#0xa]
	ldr r0, [r5,#0x64]
	cmp r0, #0
	bne loc_80CBA84
	ldrh r0, [r5,#0x22]
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	b loc_80CBA8E
loc_80CBA84:
	ldr r1, [r5,#0x60]
	mul r0, r1
	str r0, [r5,#0x44]
	mov r0, #0
	str r0, [r5,#0x40]
loc_80CBA8E:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	bl sub_80CBAFA
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80CBAB6
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80CBAB6:
	pop {pc}
.endfunc // sub_80CBA52

.func
.thumb_func
sub_80CBAB8:
	push {lr}
	push {r0-r3,r5}
	mov r0, #0x3d 
	mov r3, #0
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r5}
	beq locret_80CBAF0
	str r3, [r0,#0x60]
	str r2, [r0,#0x70]
	str r4, [r0,#0x6c]
	lsr r2, r1, #4
	lsl r1, r1, #0x1d
	lsr r1, r1, #0x1d
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	mov r3, #2
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x68]
	str r5, [r0,#0x4c]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80CBAF0:
	pop {pc}
.endfunc // sub_80CBAB8

	push {r5,lr}
	mov r1, #0
	strh r1, [r0,#0x24]
	pop {r5,pc}
.func
.thumb_func
sub_80CBAFA:
	push {lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #5
	mul r0, r1
	add r0, #1
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	bne locret_80CBB32
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103F8
	mov r2, #1
	ldrb r1, [r5,#0x13]
	cmp r1, #1
	beq loc_80CBB30
	ldrb r0, [r0,#0x13]
	cmp r0, r1
	bgt loc_80CBB30
	cmp r0, r1
	beq loc_80CBB2E
	sub r2, #2
	b loc_80CBB30
loc_80CBB2E:
	mov r2, #0
loc_80CBB30:
	str r2, [r5,#0x64]
locret_80CBB32:
	pop {pc}
dword_80CBB34: .word 0x1021025
dword_80CBB38: .word 0xC0D0000
dword_80CBB3C: .word 0x280000
	.word 0xF800000
.endfunc // sub_80CBAFA

loc_80CBB44:
	push {lr}
	ldr r1, off_80CBB54 // =off_80CBB58 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CBB54: .word off_80CBB58
off_80CBB58: .word sub_80CBB76+1
	.word sub_80CBC38+1
	.word sub_80CBB64+1
.func
.thumb_func
sub_80CBB64:
	push {lr}
	ldr r3, [r5,#0x4c]
	cmp r3, #0
	beq loc_80CBB70
	mov r0, #0
	str r0, [r3]
loc_80CBB70:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80CBB64

.func
.thumb_func
sub_80CBB76:
	push {r7,lr}
	bl sub_800E29C // () -> void
	mov r1, #0x10
	mov r2, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CBB76

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0xd4
	strh r0, [r5,#0x28]
	mov r0, #0x32 
	ldrb r1, [r5,#4]
	cmp r1, #0
	beq loc_80CBBBC
	mov r0, #0x96
loc_80CBBBC:
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80CBBD0
	bl object_freeMemory
	pop {pc}
loc_80CBBD0:
	mov r1, #0x13
	mov r2, #0x14
	ldrb r3, [r5,#4]
	cmp r3, #0
	beq loc_80CBBDE
	mov r1, #0xe
	mov r2, #0xf
loc_80CBBDE:
	mov r3, #3
	bl sub_8019FB4
	mov r1, #1
	strb r1, [r7,#1]
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80CBC00
	ldr r3, [r5,#0x4c]
	str r5, [r3]
loc_80CBC00:
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0xf
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	bl sub_8002C7A
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #6
	bl sub_80E05F6
	mov r0, #0x13
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	strb r0, [r5,#0x14]
	ldrb r1, [r5,#0x13]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #4
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80CBC38:
	push {lr}
	bl sub_8002DD8
	ldrh r0, [r5,#0x24]
	ldr r1, [r5,#0x64]
	str r0, [r5,#0x64]
	cmp r0, r1
	beq loc_80CBC50
	mov r0, #1
	str r0, [r5,#0x60]
	mov r0, #0x14
	strh r0, [r5,#0x22]
loc_80CBC50:
	bl battle_isTimeStop
	bne loc_80CBC68
	ldrb r0, [r5,#5]
	cmp r0, #1
	beq loc_80CBC64
	bl battle_isBattleOver
	tst r0, r0
	beq loc_80CBC68
loc_80CBC64:
	mov r0, #0
	strh r0, [r5,#0x24]
loc_80CBC68:
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80CBC74
	bl sub_801AD12
	b loc_80CBC78
loc_80CBC74:
	bl sub_801ADFA
loc_80CBC78:
	ldr r0, off_80CBC88 // =off_80CBC8C 
	bl sub_801B394
	bl sub_801BBAC
	bl sub_801A018
.endfunc // sub_80CBC38

	pop {pc}
off_80CBC88: .word off_80CBC8C
off_80CBC8C: .word sub_80CBCB0+1
	.word sub_80165B8+1
	.word sub_80CBDE6+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word loc_80CBCF4+1
.func
.thumb_func
sub_80CBCB0:
	push {lr}
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	bl sub_8002C7A
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CBCF0
	bl sub_8002CCE
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r0,#0xa] // (dword_8+2)
	bl sub_80CC006
	cmp r0, #0
	beq locret_80CBCF0
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq locret_80CBCF0
	bl sub_80CBF8C
locret_80CBCF0:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80CBCB0

loc_80CBCF4:
	push {lr}
	ldr r1, off_80CBD04 // =off_80CBD08 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CBD04: .word off_80CBD08
off_80CBD08: .word sub_80CBD10+1
	.word sub_80CBD32+1
.func
.thumb_func
sub_80CBD10:
	push {lr}
	ldr r0, [r5,#0x60]
	cmp r0, #0
	beq loc_80CBD24
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne loc_80CBD24
	mov r0, #0
	str r0, [r5,#0x60]
loc_80CBD24:
	bl sub_800E2AC
	bl sub_801A04C
	bl sub_80CC006
.endfunc // sub_80CBD10

	pop {pc}
.func
.thumb_func
sub_80CBD32:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	mov r1, #4
	and r0, r1
	lsr r0, r0, #2
	ldr r1, off_80CBDE0 // =byte_80CBDE4 
	ldrb r0, [r1,r0]
	bl sub_8002ED0
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CBE48
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80CBD98
	mov r0, #0xc3
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800C90A
	ldrb r0, [r0,#3]
	mov r1, #1
	eor r0, r1
	strb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r4, off_80CBDD4 // =dword_80CBDD8 
	ldr r4, [r4,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	ldr r3, [r5,#0x3c]
	ldr r6, [r5,#0x2c]
	mov r7, #3
	push {r4}
	bl sub_80C536A
	pop {r4}
	add r0, r4, #0
	mov r1, #2
	mov r3, #0
	mov r4, #1
	bl sub_80E2FE8
	mov r0, #1
	mov r1, #0x1e
	bl sub_80302A8
	b loc_80CBDC2
loc_80CBD98:
	ldr r4, dword_80CC038 // =0x405ff0f 
	ldr r6, [r5,#0x2c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	mov r7, #3
	bl sub_80C536A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0xf
	ldrb r4, [r5,#0x16]
	mov r7, #0
	bl sub_801BD3C
	mov r0, #0x10
	add r0, #0xff
	bl sound_play // () -> void
loc_80CBDC2:
	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
off_80CBDD4: .word dword_80CBDD8
dword_80CBDD8: .word 0x405FF82, 0x405FF81
off_80CBDE0: .word byte_80CBDE4
byte_80CBDE4: .byte 0x0, 0x12
.endfunc // sub_80CBD32

.func
.thumb_func
sub_80CBDE6:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
.endfunc // sub_80CBDE6

	bl sub_801A180
	ldr r1, dword_80CC03C // =0x8000 
	tst r0, r1
	beq loc_80CBE20
	ldr r1, dword_80CC040 // =0x300000 
	tst r0, r1
	bne loc_80CBE38
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80CBE48
	cmp r0, #1
	beq loc_80CBE38
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80CBE38
loc_80CBE20:
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #8
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0xe
	bl sub_80E05F6
loc_80CBE38:
	bl sub_801A074 // () -> void
	bl sub_800F656
	bl sub_802EF5C
	mov r0, #8
	str r0, [r5,#8]
locret_80CBE48:
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80CBE4A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x3e 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CBE80
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r1, [r0,#4]
	cmp r1, #0
	bne loc_80CBE6E
	str r7, [r0,#0x4c]
loc_80CBE6E:
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	mov r1, #0xff
	and r1, r3
	mov r2, #0
	bl sub_800F614
locret_80CBE80:
	pop {pc}
.endfunc // sub_80CBE4A

	push {r4,r6,lr}
	add r4, r1, #0
	ldr r2, [r4,#0x4c]
	sub r2, #0x60 
	cmp r2, r5
	bne loc_80CBF00
	ldr r2, [r4,#0x60]
	cmp r2, #0
	bne loc_80CBF00
	push {r0}
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	pop {r0}
	ldr r3, [r4,#0x34]
	asr r1, r0, #0x10
	asr r3, r3, #0x10
	sub r3, r3, r1
	add r3, #2
	asr r3, r3, #0x1f
	cmp r2, r3
	bne loc_80CBEB2
	add r1, r0, #0
	b loc_80CBF00
loc_80CBEB2:
	push {r0}
	ldr r1, [r4,#0x38]
	bl sub_800E258
	ldr r2, dword_80CC02C // =0x10 
	ldr r3, dword_80CC030 // =0x6800000 
	bl object_checkPanelParameters
	pop {r1}
	cmp r0, #0
	beq loc_80CBF00
	push {r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	ldrb r0, [r4,#0x12]
	ldrb r1, [r4,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r1, [r4,#0x34]
	sub r0, r0, r1
	mul r0, r6
	cmp r0, #0
	ble loc_80CBEE6
	pop {r1}
	b loc_80CBEFA
loc_80CBEE6:
	ldrb r0, [r4,#0x12]
	add r0, r0, r6
	ldrb r1, [r4,#0x13]
	ldr r2, dword_80CC02C // =0x10 
	ldr r3, dword_80CC034 // =0x6880080 
	bl object_checkPanelParameters
	pop {r1}
	cmp r0, #0
	beq loc_80CBF00
loc_80CBEFA:
	str r1, [r4,#0x34]
	mov r0, #1
	pop {r4,r6,pc}
loc_80CBF00:
	mov r0, #0
	pop {r4,r6,pc}
	push {r4,lr}
	add r4, r1, #0
	ldr r2, [r4,#0x4c]
	sub r2, #0x60 
	cmp r2, r5
	bne loc_80CBF4E
	ldr r2, [r4,#0x60]
	cmp r2, #0
	bne loc_80CBF4E
	push {r0}
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	pop {r0}
	ldr r3, [r4,#0x34]
	asr r1, r0, #0x10
	asr r3, r3, #0x10
	sub r3, r3, r1
	sub r3, r3, r0
	asr r3, r3, #0x1f
	cmp r2, r3
	bne loc_80CBF34
	add r1, r0, #0
	b loc_80CBF4E
loc_80CBF34:
	push {r0}
	ldr r1, [r4,#0x38]
	bl sub_800E258
	ldr r2, dword_80CC02C // =0x10 
	ldr r3, dword_80CC030 // =0x6800000 
	bl object_checkPanelParameters
	pop {r1}
	cmp r0, #0
	bne loc_80CBF4E
	mov r0, #1
	strb r0, [r5,#5]
loc_80CBF4E:
	str r1, [r4,#0x34]
	mov r0, #1
	pop {r4,pc}
	push {r5,lr}
	ldr r2, [r0,#0x4c]
	sub r2, #0x60 
	cmp r2, r5
	bne loc_80CBF88
	mov r1, #0x3c 
	strh r1, [r0,#0x20]
	mov r1, #4
	strh r1, [r0,#0xa]
	mov r1, #0
	str r1, [r0,#0x4c]
	str r1, [r2,#0x60]
	add r5, r0, #0
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	mov r0, #1
	pop {r5,pc}
loc_80CBF88:
	mov r0, #0
	pop {r5,pc}
.func
.thumb_func
sub_80CBF8C:
	push {lr}
	mov r1, #0x3c 
	strh r1, [r5,#0x20]
	mov r1, #4
	strh r1, [r5,#0xa]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	pop {pc}
.endfunc // sub_80CBF8C

	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	mov r0, #0x81
	mov r1, #2
	mov r3, #0
	mov r4, #1
	bl sub_80E2FE8
	mov r0, #1
	mov r1, #0x1e
	bl sub_80302A8
	b loc_80CC002
	add r4, r0, #0
	mov r7, sp
	bl object_getPanelsExceptCurrentFilterred
	cmp r0, #0
	beq loc_80CC002
	sub r6, r0, #1
	add r1, r0, #0
	mov r2, #8
	mov r0, sp
	bl sub_8000C72
	cmp r6, r4
	blt loc_80CBFE6
	sub r6, r4, #1
loc_80CBFE6:
	ldrb r0, [r7,r6]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x22 
	bl sub_80E05F6
	sub r6, #1
	bpl loc_80CBFE6
loc_80CC002:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80CC006:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r3, off_80CC020 // =dword_80CC024 
	bl sub_800EC48
	bl object_checkPanelParameters
.endfunc // sub_80CC006

	cmp r0, #0
	bne locret_80CC01E
	mov r1, #1
	strb r1, [r5,#5]
locret_80CC01E:
	pop {pc}
off_80CC020: .word dword_80CC024
dword_80CC024: .word 0x10, 0xB800000
dword_80CC02C: .word 0x10
dword_80CC030: .word 0x6800000
dword_80CC034: .word 0x6880080
dword_80CC038: .word 0x405FF0F
dword_80CC03C: .word 0x8000
dword_80CC040: .word 0x300000
loc_80CC044:
	push {lr}
	ldr r1, off_80CC054 // =off_80CC058 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CC054: .word off_80CC058
off_80CC058: .word sub_80CC064+1
	.word sub_80CC090+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80CC064:
	push {r4,r6,r7,lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80CC0C8 // =0x3205ff01 
	mov r6, #0
	ldr r7, dword_80CC0CC // =0x4200 
	bl sub_80C536A
	mov r0, #0xfc
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CC090
.endfunc // sub_80CC064

	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80CC090:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CC0A0
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80CC0A0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80CC0AC
	mov r0, #8
	str r0, [r5,#8]
loc_80CC0AC:
	bl sprite_update
.endfunc // sub_80CC090

	pop {pc}
.func
.thumb_func
sub_80CC0B2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x3f 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CC0C6
	bl sub_801155A
locret_80CC0C6:
	pop {pc}
dword_80CC0C8: .word 0x3205FF01
dword_80CC0CC: .word 0x4200
	.word 0x50005
	.word 0x50005
	.word 0xA0014
	.word 0xA0028
	.word 0xA003C
	.word 0xA003C
.endfunc // sub_80CC0B2

.func
.thumb_func
sub_80CC0E8:
	push {lr}
	ldr r1, off_80CC100 // =off_80CC104 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_80169BE
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80CC100: .word off_80CC104
off_80CC104: .word sub_80CC110+1
	.word sub_80CC1A0+1
	.word sub_80CC472+1
.endfunc // sub_80CC0E8

.func
.thumb_func
sub_80CC110:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0x28 
	strh r0, [r5,#0x3e]
	mov r0, #1
	ldr r1, [r5,#0x3c]
	add r1, r1, r0
	str r1, [r5,#0x3c]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	mov r1, #0x10
	mov r2, #0x2a 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CC110

	bl sprite_update
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, dword_80CC4BC // = 
	ldr r0, [r1,r0]
	str r0, [r5,#0x2c]
	bl sub_8019892
	tst r0, r0
	bne loc_80CC176
	bl object_freeMemory
	b locret_80CC19E
loc_80CC176:
	mov r1, #0xc
	mov r2, #0xd
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #0
	strb r0, [r5,#7]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	mov r1, #4
	str r1, [r5,#8]
locret_80CC19E:
	pop {pc}
.func
.thumb_func
sub_80CC1A0:
	push {lr}
	bl sub_801A00E
	.hword 0xF74D
	.word 0xF73DFF95, 0x4200FFF0, 0x6D6AD116, 0x7DA86F12, 0x49100080
	.word 0x42105808, 0xF74DD003, 0x200CFF57, 0xF73D8168, 0xD104FF65
	.word 0x7A684906, 0x46FE5809, 0xF74D4708, 0xE003FF1D, 0xFF48F74D
	.word 0x60A82008, 0xBD00
	.word off_80CC1F0
off_80CC1F0: .word sub_80CC208+1
	.word loc_80CC23E+1
	.word loc_80CC3B8+1
	.word dword_80CC200
dword_80CC200: .word 0x5800000, 0xA800000
.endfunc // sub_80CC1A0

.func
.thumb_func
sub_80CC208:
	push {lr}
	ldrb r0, [r5,#7]
	cmp r0, #2
	beq loc_80CC230
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CC21E
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0x78 
	strh r0, [r5,#0x20]
loc_80CC21E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80CC23C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80CC23C
loc_80CC230:
	mov r0, #0
	strb r0, [r5,#7]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CC23C:
	pop {pc}
.endfunc // sub_80CC208

loc_80CC23E:
	push {lr}
	ldr r1, off_80CC24C // =off_80CC250 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80CC24C: .word off_80CC250
off_80CC250: .word sub_80CC260+1
	.word sub_80CC29E+1
	.word loc_80CC320+1
	.word sub_80CC36C+1
.func
.thumb_func
sub_80CC260:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CC27A
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80CC29C
loc_80CC27A:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80CC290
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #8
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80CC290:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CC29C
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80CC29C:
	pop {pc}
.endfunc // sub_80CC260

.func
.thumb_func
sub_80CC29E:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CC2B4
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #5
	strh r0, [r5,#0x20]
	b locret_80CC35C
loc_80CC2B4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CC35C
	mov r0, #2
	ldrb r2, [r5,#0x16]
	cmp r2, #0
	beq loc_80CC2C6
	mov r0, #5
loc_80CC2C6:
	strb r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x3e]
	bl sub_801A04C
	bl sub_800E2C0
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80CC30C // =dword_80CC310 
	ldr r1, [r2,r1]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #2
	strb r0, [r5,#0x10]
	bl sub_8002E3C
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, dword_80CC4C0 // = 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #0xff
	bl sound_play // () -> void
	mov r0, #8
	strh r0, [r5,#0xa]
	pop {pc}
	.balign 4, 0x00
off_80CC30C: .word dword_80CC310
dword_80CC310: .word 0x70000, 0x80000, 0x90000, 0xA0000
loc_80CC320:
	push {lr}
	mov r0, #0
	bl sub_801162A
	tst r0, r0
	blt loc_80CC354
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80CC360 // =dword_80CC364 
	ldr r0, [r1,r0]
	tst r0, r2
	bne loc_80CC354
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80CC35C
loc_80CC354:
	bl sub_801A074 // () -> void
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80CC35C:
	pop {pc}
	.byte 0, 0
off_80CC360: .word dword_80CC364
dword_80CC364: .word 0x5800000, 0xA800000
.endfunc // sub_80CC29E

.func
.thumb_func
sub_80CC36C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CC39A
	mov r1, #4
	strb r1, [r5,#0xb]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #0x28 
	strh r0, [r5,#0x3e]
	bl sub_801A04C
	mov r0, #3
	strb r0, [r5,#0x10]
	bl sub_8002F90 // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80CC3B6
loc_80CC39A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x19
	beq loc_80CC3B2
	cmp r0, #0
	bge locret_80CC3B6
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80CC3B6
loc_80CC3B2:
	mov r0, #0
	strb r0, [r5,#0x10]
locret_80CC3B6:
	pop {pc}
.endfunc // sub_80CC36C

loc_80CC3B8:
	push {lr}
	ldr r1, off_80CC3C8 // =off_80CC3CC 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CC3C8: .word off_80CC3CC
off_80CC3CC: .word sub_80CC3DC+1
	.word sub_80CC400+1
	.word sub_80CC428+1
	.word sub_80CC43A+1
.func
.thumb_func
sub_80CC3DC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CC3F2
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0xe
	strh r0, [r5,#0x20]
	b locret_80CC3FE
loc_80CC3F2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CC3FE
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80CC3FE:
	pop {pc}
.endfunc // sub_80CC3DC

.func
.thumb_func
sub_80CC400:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CC416
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #2
	strh r0, [r5,#0x20]
	b locret_80CC426
loc_80CC416:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CC426
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80CC426:
	pop {pc}
.endfunc // sub_80CC400

.func
.thumb_func
sub_80CC428:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xc
	cmp r0, r1
	beq locret_80CC438
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80CC438:
	pop {pc}
.endfunc // sub_80CC428

.func
.thumb_func
sub_80CC43A:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CC454
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0x28 
	strh r0, [r5,#0x3e]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80CC470
loc_80CC454:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x19
	beq loc_80CC46C
	cmp r0, #0
	bge locret_80CC470
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80CC470
loc_80CC46C:
	mov r0, #0
	strb r0, [r5,#0x10]
locret_80CC470:
	pop {pc}
.endfunc // sub_80CC43A

.func
.thumb_func
sub_80CC472:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne loc_80CC480
	mov r0, #0
	str r0, [r1]
loc_80CC480:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80CC472

.func
.thumb_func
sub_80CC486:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x40 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80CC4B8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrb r3, [r5,#0x16]
	strb r3, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x64]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	push {r5}
	add r5, r0, #0
	bl sub_80CC110
	pop {r5}
locret_80CC4B8:
	pop {pc}
	.balign 4, 0x00
dword_80CC4BC: .word 0x80CC0D8
dword_80CC4C0: .word 0x80CC0D0
.endfunc // sub_80CC486

loc_80CC4C4:
	push {lr}
	ldr r1, off_80CC4DC // =off_80CC4E0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_80169BE
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CC4DC: .word off_80CC4E0
off_80CC4E0: .word sub_80CC4EC+1
	.word sub_80CC562+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CC4EC:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	ldr r1, [r5,#0x3c]
	add r1, r1, r0
	str r1, [r5,#0x3c]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	mov r1, #0x10
	mov r2, #0x29 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CC4EC

	bl sprite_update
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80CC548
	bl object_freeMemory
	b locret_80CC560
loc_80CC548:
	mov r1, #0x29 
	mov r2, #0
	mov r3, #0
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r1, #4
	str r1, [r5,#8]
locret_80CC560:
	pop {pc}
.func
.thumb_func
sub_80CC562:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80CC562

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CC57A
	bl sub_801A018
	b locret_80CC582
loc_80CC57A:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80CC582:
	pop {pc}
.func
.thumb_func
sub_80CC584:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x41 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80CC5A6
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrb r3, [r5,#0x16]
	strb r3, [r0,#0x16]
	push {r5}
	add r5, r0, #0
	bl sub_80CC4EC
	pop {r5}
locret_80CC5A6:
	pop {pc}
.endfunc // sub_80CC584

loc_80CC5A8:
	push {lr}
	ldr r1, off_80CC5B8 // =off_80CC5BC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CC5B8: .word off_80CC5BC
off_80CC5BC: .word sub_80CC5C8+1
	.word sub_80CC668+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CC5C8:
	push {r4,lr}
	bl sub_800E29C // () -> void
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80CC5E2
	ldr r0, dword_80CC754 // =0x100040f 
	ldr r1, dword_80CC758 // =0x4050000 
	bl sub_8011504
	tst r0, r0
	bne loc_80CC5FA
loc_80CC5E2:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl object_freeMemory
	pop {r4,pc}
.endfunc // sub_80CC5C8

loc_80CC5FA:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, off_80CC658 // =dword_80CC65C 
	ldrb r2, [r5,#4]
	lsl r2, r2, #2
	ldr r1, [r1,r2]
	mul r1, r0
	str r1, [r5,#0x40]
	mov r0, #0x50 
	lsl r0, r0, #0x10
	svc 6
	add r1, r0, #0
	bpl loc_80CC624
	neg r1, r1
loc_80CC624:
	mov r0, #1
	lsl r0, r0, #0x10
	svc 6
	str r0, [r5,#0x68]
	mov r0, #0x80
	lsl r0, r0, #8
	strh r0, [r5,#0x22]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r1, [r5,#0x6c]
	mov r0, #2
	bl sub_801A140
	mov r0, #0x60 
	bl sub_801A258
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80CC668
	pop {r4,pc}
	.balign 4, 0x00
off_80CC658: .word dword_80CC65C
dword_80CC65C: .word 0x18000, 0x24000, 0x30000
.func
.thumb_func
sub_80CC668:
	push {r4,r7,lr}
	bl sub_801A00E
	.hword 0xF74D
	.word 0x6D6FFD31, 0x42006F38, 0x4938D00A, 0xD1204208, 0x66288A68
	.word 0xFCF6F74D, 0x30FF202E, 0xFF9EF733, 0x7A684913, 0x46FE5809
	.word 0x6D6F4708, 0x28007878, 0x8A68D106, 0x42886E29, 0x2001D006
	.word 0xFCE6F74D, 0x7CE97CA8, 0xFA90F740, 0xFA78F74F, 0xFCACF74D
	.word 0x2034BD90, 0xC80E1940, 0x4242410, 0x2414191B, 0xFF91F013
	.word 0xFCCEF74D, 0x60A82008, 0xBD90
	.word off_80CC6E4
off_80CC6E4: .word sub_80CC6E8+1
.endfunc // sub_80CC668

.func
.thumb_func
sub_80CC6E8:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	ldr r0, [r5,#0x34]
	str r0, [sp]
	ldr r0, [r5,#0x38]
	str r0, [sp,#4]
	ldrh r0, [r5,#0x22]
	ldr r1, [r5,#0x68]
	add r0, r0, r1
	strh r0, [r5,#0x22]
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldrh r1, [r5,#0x22]
	lsr r1, r1, #8
	lsl r1, r1, #1
	ldr r0, off_80CC760 // =byte_80065E0 
	ldrsh r0, [r0,r1]
	mov r1, #0x18
	mul r0, r1
	lsl r0, r0, #8
	ldr r1, [r5,#0x6c]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, #1
	blt loc_80CC72C
	cmp r0, #6
	ble loc_80CC734
loc_80CC72C:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
loc_80CC734:
	bl object_highlightCurrentCollisionPanels
	add sp, sp, #8
	pop {r4,r6,r7,pc}
.endfunc // sub_80CC6E8

.func
.thumb_func
sub_80CC73C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x42 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CC750
	bl sub_801155A
locret_80CC750:
	pop {pc}
	.balign 4, 0x00
dword_80CC754: .word 0x100040F
dword_80CC758: .word 0x4050000
	.word 0x800000
off_80CC760: .word byte_80065E0
.endfunc // sub_80CC73C

	// <mkdata>
	.hword 0xA // mov r2, r1
	// <mkdata>
	.hword 0xA // mov r2, r1
	// <mkdata>
	.hword 0xA // mov r2, r1
	// <mkdata>
	.hword 0xA // mov r2, r1
loc_80CC76C:
	push {lr}
	ldr r1, off_80CC780 // =off_80CC784 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80CC780: .word off_80CC784
off_80CC784: .word sub_80CC790+1
	.word sub_80CC800+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CC790:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x39 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CC790

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80CC7DA
	bl object_freeMemory
	b locret_80CC7FE
loc_80CC7DA:
	mov r1, #0x40 
	mov r2, #0xd
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, dword_80CC940 // = 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #4
	str r0, [r5,#8]
locret_80CC7FE:
	pop {pc}
.func
.thumb_func
sub_80CC800:
	push {lr}
	bl sub_801A00E
	.hword 0xF74D
	.word 0xF73DFC65, 0x4200FCC0, 0x2000D117, 0xFF09F744, 0xDB124200
	.word 0x6F126D6A, 0x807DA8, 0x5808490D, 0xD10A4210, 0xFC34F73D
	.word 0x4906D104, 0x58097A68, 0x470846FE, 0xFBECF74D, 0xF74DE003
	.word 0x2008FC17, 0xBD007228
	.word off_80CC850
off_80CC850: .word sub_80CC868+1
	.word sub_80CC892+1
	.word sub_80CC8BA+1
	.word dword_80CC860
dword_80CC860: .word 0x5800000, 0xA800000
.endfunc // sub_80CC800

.func
.thumb_func
sub_80CC868:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CC880
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xb7
	bl sound_play // () -> void
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	b locret_80CC890
loc_80CC880:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CC890
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CC890:
	pop {pc}
.endfunc // sub_80CC868

.func
.thumb_func
sub_80CC892:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CC8A8
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #1
	strh r0, [r5,#0x20]
	b locret_80CC8B8
loc_80CC8A8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CC8B8
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CC8B8:
	pop {pc}
.endfunc // sub_80CC892

.func
.thumb_func
sub_80CC8BA:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CC8E0
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xb3
	bl sound_play // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r2, off_80CC904 // =byte_80CC908 
	ldrb r3, [r5,#4]
	lsl r3, r3, #2
	ldr r0, [r2,r3]
	mul r0, r4
	str r0, [r5,#0x40]
	b locret_80CC902
loc_80CC8E0:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80CC902
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
	b locret_80CC902
locret_80CC902:
	pop {r4,pc}
off_80CC904: .word byte_80CC908
byte_80CC908: .byte 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x7, 0x0
.endfunc // sub_80CC8BA

.func
.thumb_func
sub_80CC918:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x43 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CC93E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CC93E:
	pop {pc}
dword_80CC940: .word 0x80CC764
.endfunc // sub_80CC918

loc_80CC944:
	push {lr}
	ldr r1, off_80CC954 // =off_80CC958 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CC954: .word off_80CC958
off_80CC958: .word sub_80CC964+1
	.word sub_80CC9AA+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CC964:
	push {r4,lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_8019892
	add r4, r0, #0
	tst r0, r0
	bne loc_80CC97E
	bl object_freeMemory
	b locret_80CC9A8
loc_80CC97E:
	ldrb r1, [r5,#7]
	ldrb r2, [r5,#6]
	ldr r3, [r5,#0x60]
	bl sub_8019FB4
	ldrb r0, [r5,#5]
	bl sub_801A140
	ldrb r0, [r5,#4]
	strb r0, [r4,#1]
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq loc_80CC99C
	bl sub_801A258
loc_80CC99C:
	bl sub_801A018
	ldr r0, [r5,#0x68]
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
locret_80CC9A8:
	pop {r4,pc}
.endfunc // sub_80CC964

.func
.thumb_func
sub_80CC9AA:
	push {r4,r6,r7,lr}
	bl sub_801A00E
.endfunc // sub_80CC9AA

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CC9E4
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80CC9F0 // =dword_80CC9F4 
	ldr r0, [r1,r0]
	tst r0, r2
	bne loc_80CC9E4
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldr r1, [r5,#0x6c]
	cmp r0, r1
	bne loc_80CC9E4
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80CC9E4
	bl sub_801A018
	b locret_80CC9EC
loc_80CC9E4:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80CC9EC:
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80CC9F0: .word dword_80CC9F4
dword_80CC9F4: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80CC9FC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x44 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CCA3C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	mov r2, #0xff
	add r1, r2, #0
	and r1, r7
	str r1, [r0,#0x60]
	lsr r1, r7, #8
	and r1, r2
	str r1, [r0,#0x64]
	lsr r1, r7, #0x10
	and r1, r2
	str r1, [r0,#0x68]
	lsr r1, r7, #0x18
	and r1, r2
	str r1, [r0,#0x6c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r5, [r0,#0x4c]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CCA3C:
	pop {pc}
	.byte 0, 0
.endfunc // sub_80CC9FC

loc_80CCA40:
	push {lr}
	ldr r1, off_80CCA50 // =off_80CCA54 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80CCA50: .word off_80CCA54
off_80CCA54: .word sub_80CCA60+1
	.word loc_80CCAB8+1
	.word sub_80CCC1E+1
.func
.thumb_func
sub_80CCA60:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldr r0, dword_80CCAB0 // =0x80000 
	str r0, [r5,#0x48]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	ldr r0, dword_80CCAB4 // =0x1000000 
	str r0, [r5,#0x3c]
	mov r0, #6
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#8]
	bl loc_80CCAB8
	pop {pc}
	.byte 0, 0
dword_80CCAB0: .word 0x80000
dword_80CCAB4: .word 0x1000000
.endfunc // sub_80CCA60

loc_80CCAB8:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CCAD2
	ldr r1, off_80CCAE0 // =off_80CCAE4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
loc_80CCAD2:
	ldr r1, [r5,#0x60]
	mov r0, #0
	strb r0, [r1]
	mov r0, #8
	strb r0, [r5,#8]
	pop {pc}
	.byte 0, 0
off_80CCAE0: .word off_80CCAE4
off_80CCAE4: .word sub_80CCAF4+1
	.word sub_80CCBD0+1
	.word sub_80CCBDC+1
	.word sub_80CCBF6+1
.func
.thumb_func
sub_80CCAF4:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	bgt locret_80CCB82
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #0x22 
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #2
	ldr r3, [r5,#0x3c]
	ldr r4, dword_80CCBA8 // =0xa050201 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C53A6
	tst r0, r0
	beq loc_80CCB2A
	ldrb r0, [r7]
	mov r1, #0x10
	orr r0, r1
	strb r0, [r7]
loc_80CCB2A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r7, off_80CCBAC // =dword_80CCBC0 
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	add r7, r7, r2
	ldr r2, [r7,#4]
	ldr r3, [r7]
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_80CCB84
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r7, off_80CCBA4 // =dword_80CCBB0 
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	add r7, r7, r2
	ldr r2, [r7,#4]
	ldr r3, [r7]
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_80CCB7E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x16]
	mov r3, #1
	eor r2, r3
	bl sub_800D668
	tst r0, r0
	beq loc_80CCB7E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x16]
	bl object_setPanelAlliance
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_setPanelAllianceTimerLong
loc_80CCB7E:
	mov r0, #4
	strb r0, [r5,#9]
locret_80CCB82:
	pop {r4,r6,r7,pc}
.endfunc // sub_80CCAF4

loc_80CCB84:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	ldr r1, [r5,#0x60]
	mov r0, #0
	strb r0, [r1]
	bl object_freeMemory
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80CCBA4: .word dword_80CCBB0
dword_80CCBA8: .word 0xA050201
off_80CCBAC: .word dword_80CCBC0
dword_80CCBB0: .word 0xF880080, 0x20, 0xF8800A0, 0x0
dword_80CCBC0: .word 0xF880080, 0x30, 0xF8800A0, 0x10
.func
.thumb_func
sub_80CCBD0:
	push {lr}
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #8
	strb r0, [r5,#9]
	pop {pc}
.endfunc // sub_80CCBD0

.func
.thumb_func
sub_80CCBDC:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80CCBF4
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #0xc
	strb r0, [r5,#9]
locret_80CCBF4:
	pop {pc}
.endfunc // sub_80CCBDC

.func
.thumb_func
sub_80CCBF6:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CCC1C
	ldr r1, [r5,#0x60]
	mov r0, #0
	strb r0, [r1]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	mov r0, #8
	strb r0, [r5,#8]
locret_80CCC1C:
	pop {pc}
.endfunc // sub_80CCBF6

.func
.thumb_func
sub_80CCC1E:
	push {lr}
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80CCC1E

.func
.thumb_func
sub_80CCC26:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x45 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80CCC46
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	mov r1, #1
	strb r1, [r7]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
locret_80CCC46:
	pop {pc}
.endfunc // sub_80CCC26

loc_80CCC48:
	push {lr}
	ldr r1, off_80CCC58 // =off_80CCC5C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CCC58: .word off_80CCC5C
off_80CCC5C: .word sub_80CCC68+1
	.word loc_80CCCBC+1
	.word sub_80CCD42+1
.func
.thumb_func
sub_80CCC68:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x13
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldr r0, dword_80CCCB4 // =0x80000 
	str r0, [r5,#0x48]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	ldr r0, dword_80CCCB8 // =0xc00000 
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80CCCA8
	mov r0, #0xa1
	bl sound_play // () -> void
loc_80CCCA8:
	mov r0, #4
	strb r0, [r5,#8]
	bl loc_80CCCBC
	pop {pc}
	.balign 4, 0x00
dword_80CCCB4: .word 0x80000
dword_80CCCB8: .word 0xC00000
.endfunc // sub_80CCC68

loc_80CCCBC:
	push {lr}
	ldr r1, off_80CCCD0 // =off_80CCCD4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80CCCD0: .word off_80CCCD4
off_80CCCD4: .word sub_80CCCE0+1
	.word sub_80CCD24+1
	.word sub_80CCD30+1
.func
.thumb_func
sub_80CCCE0:
	push {lr}
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	bgt locret_80CCD1E
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80CCCFC
	mov r0, #0xa2
	bl sound_play // () -> void
loc_80CCCFC:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	ldr r3, [r5,#0x3c]
	ldr r4, dword_80CCD20 // =0x1905ff01 
	ldr r6, [r5,#0x2c]
	mov r7, #0x4b 
	bl sub_80C53A6
	tst r0, r0
	beq loc_80CCD1A
	ldrb r0, [r7]
	mov r1, #0x10
	orr r0, r1
	strb r0, [r7]
loc_80CCD1A:
	mov r0, #4
	strb r0, [r5,#9]
locret_80CCD1E:
	pop {pc}
dword_80CCD20: .word 0x1905FF01
.endfunc // sub_80CCCE0

.func
.thumb_func
sub_80CCD24:
	push {lr}
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #8
	strb r0, [r5,#9]
	pop {pc}
.endfunc // sub_80CCD24

.func
.thumb_func
sub_80CCD30:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	and r0, r1
	beq locret_80CCD40
	mov r0, #8
	strb r0, [r5,#8]
locret_80CCD40:
	pop {pc}
.endfunc // sub_80CCD30

.func
.thumb_func
sub_80CCD42:
	push {lr}
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80CCD42

.func
.thumb_func
sub_80CCD4A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x46 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CCD6E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CCD6E:
	pop {pc}
.endfunc // sub_80CCD4A

loc_80CCD70:
	push {lr}
	ldr r1, off_80CCD84 // =off_80CCD88 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80CCD84: .word off_80CCD88
off_80CCD88: .word sub_80CCD94+1
	.word sub_80CCDFC+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CCD94:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x42 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CCD94

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80CCDDE
	bl object_freeMemory
	b locret_80CCDFA
loc_80CCDDE:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80CCDFA:
	pop {pc}
.func
.thumb_func
sub_80CCDFC:
	push {lr}
	bl sub_801A00E
	.hword 0xF74D
	.word 0xF73DF967, 0x4200F9C2, 0x6D6AD114, 0x7DA86F12, 0x49100080
	.word 0x42105808, 0xF74DD001, 0xF73DF929, 0xD104F939, 0x7A684906
	.word 0x46FE5809, 0xF74D4708, 0xE003F8F1, 0xF91CF74D, 0x72282008
	.word 0xBD00
	.word off_80CCE48
off_80CCE48: .word sub_80CCE64+1
	.word sub_80CCEAC+1
	.word sub_80CCED0+1
	.word sub_80CCF88+1
	.word dword_80CCE5C
dword_80CCE5C: .word 0x5800000, 0xA800000
.endfunc // sub_80CCDFC

.func
.thumb_func
sub_80CCE64:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CCE7A
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#6]
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80CCEAA
loc_80CCE7A:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80CCE8C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
loc_80CCE8C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CCEAA
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_8002E3C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CCEAA:
	pop {pc}
.endfunc // sub_80CCE64

.func
.thumb_func
sub_80CCEAC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CCEBE
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	b locret_80CCECE
loc_80CCEBE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CCECE
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CCECE:
	pop {pc}
.endfunc // sub_80CCEAC

.func
.thumb_func
sub_80CCED0:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CCF0A
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80CCF68 // =dword_80CCF6C 
	ldr r4, [r1,r0]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldrb r1, [r5,#5]
	lsl r1, r1, #1
	ldr r2, off_80CCF7C // =dword_80CCF80 
	add r2, r2, r1
	mov r3, #0
	ldrsb r1, [r2,r3]
	mul r1, r0
	mov r3, #1
	ldrsb r2, [r2,r3]
	mul r1, r4
	mul r2, r4
	str r1, [r5,#0x40]
	str r2, [r5,#0x44]
	ldrb r0, [r5,#7]
	strh r0, [r5,#0x20]
	b locret_80CCF66
loc_80CCF0A:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldrb r4, [r5,#0x12]
	ldrb r6, [r5,#0x13]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80CCF4A
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80CCF4A
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	bne loc_80CCF42
	ldrb r0, [r5,#0x13]
	cmp r0, r6
	beq loc_80CCF54
loc_80CCF42:
	mov r0, #1
	bl sub_801A07C
	b loc_80CCF54
loc_80CCF4A:
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80CCF66
loc_80CCF54:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_getPanelParameters
	mov r2, #0x10
	tst r0, r2
	pop {r0,r1}
	beq locret_80CCF66
locret_80CCF66:
	pop {r4,r6,pc}
off_80CCF68: .word dword_80CCF6C
dword_80CCF6C: .word 0x18000, 0x20000, 0x28000, 0x30000
off_80CCF7C: .word dword_80CCF80
dword_80CCF80: .word 0x100FF00, 0xFF0001
.endfunc // sub_80CCED0

.func
.thumb_func
sub_80CCF88:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CCF9A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80CCFAA
loc_80CCF9A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CCFAA
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80CCFAA:
	pop {pc}
.endfunc // sub_80CCF88

.func
.thumb_func
sub_80CCFAC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x47 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CCFD2
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CCFD2:
	pop {pc}
	.word 0x280001
	.word 0x280101
.endfunc // sub_80CCFAC

.func
.thumb_func
sub_80CCFDC:
	push {lr}
	ldr r1, off_80CCFEC // =off_80CCFF0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CCFEC: .word off_80CCFF0
off_80CCFF0: .word sub_80CCFFC+1
	.word sub_80CD08C+1
	.word sub_8016C8A+1
.endfunc // sub_80CCFDC

.func
.thumb_func
sub_80CCFFC:
	push {r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #4
	mov r2, #9
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CCFFC

	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x12]
	strh r0, [r5,#0x14]
	mov r0, #0
	strb r0, [r5,#0xe]
	mov r0, #0xd6
	ldrb r1, [r5,#4]
	add r0, r0, r1
	strh r0, [r5,#0x28]
	ldr r7, dword_80CD088 // = 
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	add r7, r7, r0
	str r7, [r5,#0x60]
	ldrh r0, [r7,#2]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldr r0, off_80CD084 // =0x5a0 
	strh r0, [r5,#0x20]
	bl sub_8019892
	tst r0, r0
	bne loc_80CD06C
	bl object_freeMemory
	pop {r7,pc}
loc_80CD06C:
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #0
	bl sub_8019FB4
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80CD08C
	pop {r7,pc}
off_80CD084: .word 0x5A0
dword_80CD088: .word 0x80CCFD4
.func
.thumb_func
sub_80CD08C:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD12
	bl sub_800F672
	ldr r0, off_80CD0B4 // =off_80CD0B8 
	bl sub_801B394
	bl sub_801BBAC
	bl sub_801A018
.endfunc // sub_80CD08C

	pop {pc}
	.balign 4, 0x00
off_80CD0B4: .word off_80CD0B8
off_80CD0B8: .word sub_80CD0E0+1
	.word sub_80165B8+1
	.word sub_80CD1BE+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word loc_80CD0F8+1
	.word loc_80CD144+1
.func
.thumb_func
sub_80CD0E0:
	push {lr}
	mov r0, #0x94
	bl sound_play // () -> void
	ldr r7, [r5,#0x60]
	ldrb r0, [r7]
	strh r0, [r5,#0x22]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80CD0E0

loc_80CD0F8:
	push {lr}
	ldr r1, off_80CD108 // =off_80CD10C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CD108: .word off_80CD10C
off_80CD10C: .word sub_80CD114+1
	.word sub_80CD12C+1
.func
.thumb_func
sub_80CD114:
	push {lr}
	mov r0, #0xad
	bl sound_play // () -> void
	add r0, r5, #0
	ldrb r1, [r5,#0x16]
	mov r2, #0
	bl sub_80E541A
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80CD114

.func
.thumb_func
sub_80CD12C:
	push {lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80CD142
	mov r0, #3
	str r0, [r5,#0x6c]
	mov r0, #9
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CD142:
	pop {pc}
.endfunc // sub_80CD12C

loc_80CD144:
	push {lr}
	ldr r1, off_80CD154 // =off_80CD158 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CD154: .word off_80CD158
off_80CD158: .word sub_80CD160+1
	.word sub_80CD1AE+1
.func
.thumb_func
sub_80CD160:
	push {r4,r6,r7,lr}
	mov r7, #0x64 
	add r7, r7, r5
	ldrb r0, [r7]
	tst r0, r0
	beq loc_80CD174
	add r7, #1
	ldrb r0, [r7]
	tst r0, r0
	bne locret_80CD1AC
loc_80CD174:
	ldr r1, [r5,#0x6c]
	sub r1, #1
	str r1, [r5,#0x6c]
	bne loc_80CD180
	mov r1, #3
	str r1, [r5,#0x6c]
loc_80CD180:
	ldr r1, [r5,#0x6c]
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#1]
	tst r0, r0
	bne loc_80CD190
	bl sub_80CD26C
	b loc_80CD194
loc_80CD190:
	bl sub_80CD236
loc_80CD194:
	tst r0, r0
	beq locret_80CD1AC
	ldrh r2, [r5,#0x16]
	ldr r7, [r5,#0x60]
	ldrb r4, [r7,#1]
	mov r6, #0
	bl sub_80CD488
	mov r0, #0xc
	strh r0, [r5,#0x22]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80CD1AC:
	pop {r4,r6,r7,pc}
.endfunc // sub_80CD160

.func
.thumb_func
sub_80CD1AE:
	push {lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80CD1BC
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CD1BC:
	pop {pc}
.endfunc // sub_80CD1AE

.func
.thumb_func
sub_80CD1BE:
	push {lr}
	mov r0, #0
	str r0, [r5,#0x64]
	bl sub_801A180
	ldr r1, dword_80CD2E0 // =0x8000 
	tst r0, r1
	beq loc_80CD1FC
	ldr r1, dword_80CD2E4 // =0x300000 
	tst r0, r1
	beq loc_80CD1DC
	mov r0, #0
	bl sub_800F90E
	b loc_80CD20E
loc_80CD1DC:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80CD234
	cmp r0, #1
	beq loc_80CD20E
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80CD20E
loc_80CD1FC:
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	bl sub_80E05F6
loc_80CD20E:
	bl sub_802EF5C
	bl sub_800F656
	add r0, r5, #0
	bl sub_80E544C
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80CD234:
	pop {pc}
.endfunc // sub_80CD1BE

.func
.thumb_func
sub_80CD236:
	push {r4,r6,r7,lr}
	add r6, r1, #0
	bl object_getFlipDirection_800E2CA // () -> int
	add r1, r6, #0
	neg r6, r0
	ldrb r0, [r5,#0x16]
	ldrb r2, [r5,#0x17]
	eor r0, r2
	mov r2, #1
	eor r0, r2
	mov r2, #5
	mul r0, r2
	add r0, #1
loc_80CD252:
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_80CD236

	ldr r4, dword_80CD2E8 // =0x800000 
	tst r0, r4
	pop {r0,r1}
	beq locret_80CD26A
	add r0, r0, r6
	beq loc_80CD268
	cmp r0, #7
	blt loc_80CD252
loc_80CD268:
	mov r0, #0
locret_80CD26A:
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80CD26C:
	push {r4,r6,r7,lr}
	push {r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	pop {r1}
	ldrb r0, [r5,#0x16]
	lsl r3, r0, #3
	ldr r7, off_80CD2A0 // =dword_80CD2A4 
	add r7, r7, r3
	ldrb r2, [r5,#0x17]
	eor r0, r2
	ldr r2, [r7]
	ldr r3, [r7,#4]
	bl sub_800D086
.endfunc // sub_80CD26C

	add r0, r0, r6
	push {r0,r1}
	bl object_getPanelParameters
	ldr r4, dword_80CD2E8 // =0x800000 
	tst r0, r4
	pop {r0,r1}
	beq locret_80CD29E
	mov r0, #0
locret_80CD29E:
	pop {r4,r6,r7,pc}
off_80CD2A0: .word dword_80CD2A4
dword_80CD2A4: .word 0x0
	.word 0x20, 0x20, 0x0
.func
.thumb_func
sub_80CD2B4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x48 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CD2DE
	str r6, [r0,#0x2c]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	mov r1, #0xff
	and r1, r3
	mov r2, #1
	bl sub_800F614
locret_80CD2DE:
	pop {pc}
dword_80CD2E0: .word 0x8000
dword_80CD2E4: .word 0x300000
dword_80CD2E8: .word 0x800000
.endfunc // sub_80CD2B4

loc_80CD2EC:
	push {lr}
	ldr r1, off_80CD300 // =off_80CD304 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80CD300: .word off_80CD304
off_80CD304: .word sub_80CD310+1
	.word sub_80CD3B0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CD310:
	push {lr}
	ldrb r1, [r5,#4]
	lsl r1, r1, #0x19
	bcs loc_80CD320
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
loc_80CD320:
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x2e 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CD310

	bl sprite_update
	bl sub_800E456 // () -> int
	ldrb r1, [r5,#4]
	lsl r0, r0, #0x19
	lsr r0, r0, #0x19
	eor r0, r1
	bl sub_8002F5C
	mov r0, #5
	strb r0, [r5,#0xe]
	ldrb r0, [r5,#4]
	add r0, r0, r0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#4]
	lsl r1, r1, #0x19
	lsr r1, r1, #0x19
	eor r0, r1
	ldrb r1, [r5,#0x17]
	bl object_getFlipDirection // (int a1, int a2) -> int
	ldr r1, dword_80CD3AC // =0xa0000 
	mul r0, r1
	str r0, [r5,#0x40]
	bl sub_8019892
	tst r0, r0
	bne loc_80CD386
	bl object_freeMemory
	pop {pc}
loc_80CD386:
	mov r3, #8
	ldrb r1, [r5,#4]
	mov r2, #1
	tst r1, r2
	beq loc_80CD392
	mov r3, #4
loc_80CD392:
	mov r1, #0x1e
	mov r2, #5
	bl sub_8019FB4
	mov r1, #0
	strh r1, [r0,#0x2e]
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80CD3B0
	pop {pc}
dword_80CD3AC: .word 0xA0000
.func
.thumb_func
sub_80CD3B0:
	push {lr}
	bl sub_801A00E
	.hword 0x6E28
	.word 0xD0034200, 0x6F086D69, 0xD10E4200, 0x42006E68, 0x7801D002
	.word 0xD0084209, 0xFEDDF73C, 0xD00D4200, 0x42096E69, 0x2000D001
	.word 0xF74C7008, 0x7828FE47, 0x43882102, 0x20087028, 0xBD0060A8
	.word 0x7A684905, 0x46FE5809, 0x79294708, 0xD2FF0649, 0xFE08F74C
	.word 0xBD00
	.word off_80CD410
off_80CD410: .word sub_80CD414+1
.endfunc // sub_80CD3B0

.func
.thumb_func
sub_80CD414:
	push {r4,r7,lr}
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	ldr r1, dword_80CD4E8 // =0x800000 
	tst r0, r1
	bne loc_80CD45E
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E24C
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	strb r1, [r7,#0xb]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80CD45E
	ldrb r2, [r5,#4]
	lsl r2, r2, #0x19
	bcs locret_80CD45C
	ldrb r4, [r5,#0x16]
	ldr r7, off_80CD474 // =dword_80CD478 
	lsl r4, r4, #3
	ldr r2, [r7,r4]
	add r4, #4
	ldr r3, [r7,r4]
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_80CD45E
locret_80CD45C:
	pop {r4,r7,pc}
loc_80CD45E:
	bl sub_801A074 // () -> void
	ldr r1, [r5,#0x64]
	tst r1, r1
	beq loc_80CD46C
	mov r0, #0
	strb r0, [r1]
loc_80CD46C:
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r7,pc}
	.balign 4, 0x00
off_80CD474: .word dword_80CD478
dword_80CD478: .word 0x20, 0x0, 0x0
	.word 0x20
.endfunc // sub_80CD414

.func
.thumb_func
sub_80CD488:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x49 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CD4AA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strh r3, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x64]
	tst r7, r7
	beq locret_80CD4AA
	mov r1, #1
	strb r1, [r7]
locret_80CD4AA:
	pop {pc}
.endfunc // sub_80CD488

	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	mov r1, #1
	eor r0, r1
	mov r6, #5
	mul r6, r0
	add r6, #1
	mov r7, #1
loc_80CD4C0:
	add r0, r6, #0
	add r1, r7, #0
	push {r6,r7}
	ldrb r2, [r5,#0x16]
	ldrb r4, [r5,#0x17]
	lsl r2, r4
	mov r4, #1
	mov r6, #0
	mov r7, #0
	bl sub_80CD488
	pop {r6,r7}
	add r7, #1
	cmp r7, #3
	ble loc_80CD4C0
	mov r0, #0xad
	bl sound_play // () -> void
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80CD4E8: .word 0x800000
loc_80CD4EC:
	push {lr}
	ldr r1, off_80CD4FC // =off_80CD500 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CD4FC: .word off_80CD500
off_80CD500: .word sub_80CD50C+1
	.word sub_80CD5F8+1
	.word sub_80CD78E+1
.func
.thumb_func
sub_80CD50C:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x24 
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CD50C

	bl sub_8002E3C
	mov r0, #0xd5
	strh r0, [r5,#0x28]
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80CD582
	ldrb r0, [r5,#6]
	strb r0, [r5,#0x14]
	ldrb r1, [r5,#7]
	strb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	push {r0,r1}
	add r7, r5, #0
	add r7, #0x34 
	push {r7}
	ldmia r7!, {r2,r3}
	sub r2, r0, r2
	sub r0, r1, r3
	add r1, r2, #0
	push {r5}
	bl calcAngle_800117C
	pop {r5}
	strb r0, [r5,#0xc]
	ldr r1, dword_80CD5EC // =0x2c000 
	push {r1}
	bl sub_80011A0
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	pop {r4}
	pop {r0}
	pop {r1,r2}
	mov r3, #0
	ldr r6, dword_80CD5F0 // =0xffffd800 
	bl sub_800120E
	str r0, [r5,#0x48]
	strh r1, [r5,#0x20]
	tst r1, r1
	beq loc_80CD5CE
loc_80CD582:
	mov r0, #0x64 
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldr r0, dword_80CD5F4 // =0x1770 
	strh r0, [r5,#0x20]
	bl sub_8019892
	tst r0, r0
	bne loc_80CD5A2
	bl sub_802EF5C
	bl sub_800F656
	bl object_freeMemory
	pop {pc}
loc_80CD5A2:
	mov r1, #0x4f 
	mov r2, #0xf
	mov r3, #3
	bl sub_8019FB4
	ldr r0, [r5,#0x54]
	mov r1, #0x64 
	strh r1, [r0,#0x2e]
	mov r1, #0x1e
	strb r1, [r0,#7]
	bl sub_801A074 // () -> void
	mov r0, #0xa
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80CD5F8
	pop {pc}
loc_80CD5CE:
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	mov r2, #0
	add r7, r5, #0
	add r7, #0x34 
	stmia r7!, {r0-r2}
	bl sub_802EF5C
	bl sub_800F656
	bl sub_8016C8A
	pop {pc}
dword_80CD5EC: .word 0x2C000
dword_80CD5F0: .word 0xFFFFD800
dword_80CD5F4: .word 0x1770
.func
.thumb_func
sub_80CD5F8:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_801AD12
	bl sub_801A0D4
	bl sub_80CD7A0
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80CD618
	bl sub_800F672
loc_80CD618:
	ldr r0, off_80CD628 // =off_80CD62C 
	bl loc_801B750
	bl sub_801BBAC
	bl sub_801A018
.endfunc // sub_80CD5F8

	pop {pc}
off_80CD628: .word off_80CD62C
off_80CD62C: .word sub_80CD654+1
	.word sub_80165B8+1
	.word sub_80CD700+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80CD654+1
	.word sub_80CD6FC+1
.func
.thumb_func
sub_80CD654:
	push {lr}
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80CD6BC
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	beq loc_80CD688
	add r7, r5, #0
	add r7, #0x40 
	ldmia r7!, {r3,r4,r6}
	ldr r0, dword_80CD6F8 // =0xffffd800 
	add r6, r6, r0
	str r6, [r5,#0x48]
	add r7, r5, #0
	add r7, #0x34 
	ldmia r7!, {r0-r2}
	add r0, r0, r3
	add r1, r1, r4
	add r2, r2, r6
	cmp r2, #0
	ble loc_80CD688
	add r7, r5, #0
	add r7, #0x34 
	stmia r7!, {r0-r2}
	pop {pc}
loc_80CD688:
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	strb r1, [r7,#0xb]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	mov r2, #0
	add r7, r5, #0
	add r7, #0x34 
	stmia r7!, {r0-r2}
	bl object_isCurrentPanelSolid
	tst r0, r0
	beq loc_80CD6D4
	mov r0, #0xc0
	bl sound_play // () -> void
	mov r0, #1
	mov r1, #0xf
	push {r5}
	bl sub_80302A8
	pop {r5}
loc_80CD6BC:
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5]
	mov r1, #0x10
	orr r0, r1
	strb r0, [r5]
	mov r0, #9
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80CD654

loc_80CD6D4:
	bl sub_800E29C // () -> void
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0
	mov r4, #0
	bl sub_80E1D7A
	bl sub_801A074 // () -> void
	bl sub_800F656
	bl sub_802EF5C
	mov r0, #8
	strb r0, [r5,#8]
	pop {pc}
	.balign 4, 0x00
dword_80CD6F8: .word 0xFFFFD800
.func
.thumb_func
sub_80CD6FC:
	push {lr}
	pop {pc}
.endfunc // sub_80CD6FC

.func
.thumb_func
sub_80CD700:
	push {lr}
	bl sub_801A074 // () -> void
	bl sub_801A180
	ldr r1, dword_80CD8A4 // =0x8000 
	tst r0, r1
	beq loc_80CD73E
	ldr r1, dword_80CD8A8 // =0x300000 
	tst r0, r1
	beq loc_80CD71E
	mov r0, #1
	bl sub_800F90E
	b loc_80CD778
loc_80CD71E:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80CD78C
	cmp r0, #1
	beq loc_80CD778
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80CD778
loc_80CD73E:
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CD770
	mov r0, #4
	strb r0, [r5,#0xb]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x24]
	tst r0, r0
	bne loc_80CD770
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	bl sub_80E05F6
	ldr r0, [r5,#0x60]
	tst r0, r0
	bne loc_80CD770
	mov r0, #0x70 
	bl sound_play // () -> void
	b loc_80CD778
loc_80CD770:
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80CD78C
loc_80CD778:
	bl sub_802EF5C
	bl sub_800F656
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #8
	str r0, [r5,#8]
locret_80CD78C:
	pop {pc}
.endfunc // sub_80CD700

.func
.thumb_func
sub_80CD78E:
	push {lr}
	bl sub_80CD7D0
	ldr r0, [r5,#0x54]
	bl sub_80198CE
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80CD78E

.func
.thumb_func
sub_80CD7A0:
	push {lr}
	ldr r0, [r5,#0x60]
	tst r0, r0
	bne locret_80CD7CE
	ldr r7, [r5,#0x54]
	mov r0, #0x84
	ldrh r0, [r7,r0]
	tst r0, r0
	beq locret_80CD7CE
	mov r0, #1
	str r0, [r5,#0x60]
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0
	strh r0, [r5,#0x24]
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CD7CE:
	pop {pc}
.endfunc // sub_80CD7A0

.func
.thumb_func
sub_80CD7D0:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq locret_80CD820
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800C90A
	ldrb r0, [r0,#3]
	mov r1, #1
	eor r0, r1
	strb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r4, off_80CD824 // =dword_80CD828 
	ldr r4, [r4,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #1
	ldr r3, [r5,#0x3c]
	ldr r6, [r5,#0x2c]
	mov r7, #3
	push {r4}
	bl sub_80C536A
	pop {r4}
	add r0, r4, #0
	mov r1, #2
	mov r3, #0
	mov r4, #1
	bl sub_80E2FE8
	mov r0, #1
	mov r1, #0x3c 
	push {r5}
	bl sub_80302A8
	pop {r5}
	mov r0, #0xc3
	bl sound_play // () -> void
locret_80CD820:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80CD824: .word dword_80CD828
dword_80CD828: .word 0x405FF82, 0x405FF81, 0xB421B500, 0xF735204A, 0x1C28FD8F
	.word 0xD00ABC22, 0x62C66641, 0x75817DA9, 0x22107803, 0x70034313
	.word 0xF7412201, 0xBD00FEDF, 0xB46BB510, 0xF735204A, 0x1C2CFD7B
	.word 0xD00DBC6B, 0x75A385A6, 0x23107822, 0x7022431A, 0x74E174A0
	.word 0xFCFDF740, 0x63A16360, 0x63E02000, 0xB590BD10, 0xF740B40F
	.word 0x2103FD1E, 0x1C074348, 0x8A6CBC0F, 0x42419E4, 0xFFC8F7FF
	.word 0xBD90
dword_80CD8A4: .word 0x8000
dword_80CD8A8: .word 0x300000
	.word 0x320100
	.word 0xF0E0100
	.word 0xC80302
	.word 0xF0E0100
	.word 0x30404
	.word 0xD0C0002
	.word 0x10605
	.word 0xD0C0003
	.word 0x50404
	.word 0xD0C0002
	.word 0x10605
	.word 0xD0C0003
	.word 0xA0404
	.word 0xD0C0002
	.word 0x10605
	.word 0xD0C0003
.endfunc // sub_80CD7D0

.func
.thumb_func
sub_80CD8EC:
	push {lr}
	ldr r1, off_80CD8FC // =off_80CD900 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CD8FC: .word off_80CD900
off_80CD900: .word sub_80CD91E+1
	.word sub_80CD9CA+1
	.word sub_80CD90C+1
.endfunc // sub_80CD8EC

.func
.thumb_func
sub_80CD90C:
	push {lr}
	ldr r0, [r5,#0x4c]
	cmp r0, #0
	beq loc_80CD918
	mov r1, #0
	str r1, [r0]
loc_80CD918:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80CD90C

.func
.thumb_func
sub_80CD91E:
	push {r4,r7,lr}
	bl sub_800E29C // () -> void
	ldr r4, [r5,#0x60]
	ldr r0, [r5,#0x4c]
	cmp r0, #0
	beq loc_80CD958
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r3, off_80CDAC4 // =dword_80CDAC8 
	bl sub_81096FA
	bl object_checkPanelParameters
	tst r0, r0
	bne loc_80CD958
	ldr r0, [r5,#0x4c]
	mov r1, #0
	str r1, [r0]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #8
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80CD9A8
loc_80CD958:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x23 
	bl sprite_load // (int a1, int a2, int a3) ->
	ldrb r0, [r4]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CD91E

	bl sub_8002E3C
	bl sub_8002EAC
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x12]
	strh r0, [r5,#0x14]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r1, #0xd8
	ldrb r0, [r5,#4]
	cmp r0, #1
	bne loc_80CD998
	mov r1, #0xd9
loc_80CD998:
	strh r1, [r5,#0x28]
	ldrh r0, [r4,#2]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	bl sub_8019892
	tst r0, r0
	bne loc_80CD9AE
loc_80CD9A8:
	bl object_freeMemory
	pop {r4,r7,pc}
loc_80CD9AE:
	ldrb r1, [r4,#6]
	ldrb r2, [r4,#7]
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80CD9CA
	pop {r4,r7,pc}
.func
.thumb_func
sub_80CD9CA:
	push {lr}
	bl sub_8002DD8
	bl battle_isBattleOver
	tst r0, r0
	beq loc_80CD9DC
	mov r0, #0
	strh r0, [r5,#0x24]
loc_80CD9DC:
	bl sub_801AD12
	ldr r0, off_80CD9F0 // =off_80CD9F4 
	bl sub_801B394
	bl sub_801BBAC
	bl sub_801A018
	pop {pc}
off_80CD9F0: .word off_80CD9F4
off_80CD9F4: .word sub_80CDA1C+1
	.word sub_80165B8+1
	.word sub_80CDBE8+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80CDAD8+1
	.word sub_80CDBAC+1
.endfunc // sub_80CD9CA

.func
.thumb_func
sub_80CDA1C:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80CDAB2
	ldr r2, dword_80CDAB4 // =0x10010 
	ldr r3, dword_80CDAB8 // =0xf880080 
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#4]
	mov r1, #2
	tst r0, r1
	beq loc_80CDA3A
	ldr r2, dword_80CDABC // =0x10010 
	ldr r3, dword_80CDAC0 // =0x3880080 
loc_80CDA3A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_checkPanelParameters
	tst r0, r0
	bne loc_80CDA7A
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #8
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_802EF5C
	bl sub_800F656
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
loc_80CDA7A:
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#1]
	strb r0, [r5,#0x10]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #1
	bl sub_801A07C
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldrb r0, [r5,#4]
	cmp r0, #1
	ble loc_80CDAA0
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB1C
loc_80CDAA0:
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#4]
	mov r1, #1
	tst r0, r1
	beq locret_80CDAB2
	mov r0, #8
	strb r0, [r5,#0xa]
	mov r0, #0xf
	strh r0, [r5,#0x20]
locret_80CDAB2:
	pop {pc}
dword_80CDAB4: .word 0x10010
dword_80CDAB8: .word 0xF880080
dword_80CDABC: .word 0x10010
dword_80CDAC0: .word 0x3880080
off_80CDAC4: .word dword_80CDAC8
dword_80CDAC8: .word 0x10030
	.word 0x3880080
	.word 0x10010
	.word 0x38800A0
.endfunc // sub_80CDA1C

.func
.thumb_func
sub_80CDAD8:
	push {lr}
	ldr r1, off_80CDAE8 // =off_80CDAEC 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CDAE8: .word off_80CDAEC
off_80CDAEC: .word sub_80CDAFC+1
	.word sub_80CDB2C+1
	.word sub_80CDB50+1
	.word sub_80CDB80+1
.endfunc // sub_80CDAD8

.func
.thumb_func
sub_80CDAFC:
	push {lr}
	ldrh r0, [r5,#0x20]
	cmp r0, #0x3c 
	bne loc_80CDB0A
	ldrb r0, [r5,#4]
	cmp r0, #2
	bge loc_80CDB0A
loc_80CDB0A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CDB26
	ldr r0, dword_80CDB28 // =0x34000000 
	bl sub_8002FA6
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #0xc1
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xa]
locret_80CDB26:
	pop {pc}
dword_80CDB28: .word 0x34000000
.endfunc // sub_80CDAFC

.func
.thumb_func
sub_80CDB2C:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CDB4A
	ldr r0, dword_80CDB4C // =0x2c000000 
	bl sub_8002FA6
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #0xc1
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#0xa]
locret_80CDB4A:
	pop {pc}
dword_80CDB4C: .word 0x2C000000
.endfunc // sub_80CDB2C

.func
.thumb_func
sub_80CDB50:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CDB78
	ldr r0, dword_80CDB7C // =0x1c000000 
	bl sub_8002FA6
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#4]
	mov r1, #1
	tst r0, r1
	bne loc_80CDB74
	mov r0, #0xc2
	bl sound_play // () -> void
loc_80CDB74:
	mov r0, #0xc
	strb r0, [r5,#0xa]
locret_80CDB78:
	pop {pc}
	.balign 4, 0x00
dword_80CDB7C: .word 0x1C000000
.endfunc // sub_80CDB50

.func
.thumb_func
sub_80CDB80:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CDBAA
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#4]
	mov r1, #1
	tst r0, r1
	beq loc_80CDB9E
	mov r0, #9
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80CDBAA
loc_80CDB9E:
	bl sub_80CDCBC
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CDBAA:
	pop {pc}
.endfunc // sub_80CDB80

.func
.thumb_func
sub_80CDBAC:
	push {lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80CDBC0
	mov r0, #1
	strb r0, [r5,#0xa]
	bl sub_801A074 // () -> void
	mov r0, #8
	strh r0, [r5,#0x20]
loc_80CDBC0:
	ldrh r0, [r5,#0x20]
	mov r1, #1
	lsr r0, r1
	mov r1, #1
	and r0, r1
	mov r1, #2
	mul r0, r1
	ldrb r2, [r5]
	bic r2, r1
	orr r2, r0
	strb r2, [r5]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CDBE6
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CDBE6:
	pop {pc}
.endfunc // sub_80CDBAC

.func
.thumb_func
sub_80CDBE8:
	push {lr}
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
.endfunc // sub_80CDBE8

	bl sub_801A074 // () -> void
	bl sub_801A180
	ldr r1, dword_80CDD38 // =0x8000 
	tst r0, r1
	bne loc_80CDC1C
	ldrh r0, [r5,#0x24]
	tst r0, r0
	bne loc_80CDC54
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#4]
	mov r1, #1
	tst r0, r1
	beq loc_80CDC1C
	bl battle_isTimeStop
	bne locret_80CDC7A
	bl sub_80CDCBC
	b loc_80CDC66
loc_80CDC1C:
	bl sub_801A180
	ldr r1, dword_80CDD38 // =0x8000 
	tst r0, r1
	beq loc_80CDC54
	ldr r1, dword_80CDD3C // =0x300000 
	tst r0, r1
	beq loc_80CDC34
	mov r0, #2
	bl sub_800F90E
	b loc_80CDC66
loc_80CDC34:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80CDC7A
	cmp r0, #1
	beq loc_80CDC66
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80CDC66
loc_80CDC54:
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	bl sub_80E05F6
loc_80CDC66:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_802EF5C
	bl sub_800F656
	mov r0, #8
	str r0, [r5,#8]
locret_80CDC7A:
	pop {pc}
.func
.thumb_func
sub_80CDC7C:
	push {r4,lr}
	push {r0-r3,r5}
	mov r0, #0x4b 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r5}
	beq locret_80CDCBA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0x16]
	str r6, [r0,#0x2c]
	ldrb r3, [r0,#4]
	mov r2, #8
	mul r3, r2
	ldr r2, dword_80CDD40 // = 
	add r3, r3, r2
	str r3, [r0,#0x60]
	ldrb r1, [r0,#4]
	cmp r1, #1
	ble loc_80CDCAA
	str r7, [r0,#0x4c]
	str r0, [r7]
loc_80CDCAA:
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	ldrb r1, [r0,#0x16]
	ldrb r2, [r3,#5]
	bl sub_800F614
locret_80CDCBA:
	pop {r4,pc}
.endfunc // sub_80CDC7C

.func
.thumb_func
sub_80CDCBC:
	push {r4,r6,r7,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne locret_80CDD28
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800C90A
	ldrb r0, [r0,#3]
	mov r1, #1
	eor r0, r1
	strb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r4, off_80CDD2C // =dword_80CDD30 
	ldr r4, [r4,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldr r6, [r5,#0x2c]
	mov r7, #3
	push {r4}
	bl sub_80C536A
	pop {r4}
	add r0, r4, #0
	mov r1, #2
	mov r3, #0
	mov r4, #1
	bl sub_80E2FE8
	mov r0, #1
	mov r1, #0x1e
	bl sub_80302A8
	mov r0, #0xc3
	bl sound_play // () -> void
	ldrb r0, [r5,#4]
	cmp r0, #1
	bne locret_80CDD28
	mov r0, #3
	mov r1, #0x3c 
	push {r5}
	bl sub_80302A8
	pop {r5}
locret_80CDD28:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80CDD2C: .word dword_80CDD30
dword_80CDD30: .word 0x405FF82, 0x405FF81
dword_80CDD38: .word 0x8000
dword_80CDD3C: .word 0x300000
dword_80CDD40: .word 0x80CD8AC
.endfunc // sub_80CDCBC

loc_80CDD44:
	push {lr}
	ldr r1, off_80CDD54 // =off_80CDD58 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CDD54: .word off_80CDD58
off_80CDD58: .word sub_80CDD64+1
	.word loc_80CDDFC+1
	.word sub_80CDEF8+1
.func
.thumb_func
sub_80CDD64:
	push {lr}
	ldrb r0, [r5]
	mov r1, #3
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x22 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CDD64

	bl sub_8002EAC
	mov r0, #0xda
	strh r0, [r5,#0x28]
	ldr r0, dword_80CDDF8 // =0x1770 
	strh r0, [r5,#0x20]
	mov r0, #0x3c 
	strh r0, [r5,#0x22]
	mov r0, #2
	strb r0, [r5,#6]
	mov r0, #1
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	bl sub_80CDF18
	tst r0, r0
	beq loc_80CDDCA
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	strb r1, [r7,#0xb]
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #0
	str r0, [r5,#0x78]
	bl sub_8019892
	tst r0, r0
	bne loc_80CDDDC
loc_80CDDCA:
	bl sub_800F656
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl object_freeMemory
	pop {pc}
loc_80CDDDC:
	mov r1, #0x33 
	mov r2, #0x2a 
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80CDDFC
	pop {pc}
dword_80CDDF8: .word 0x1770
loc_80CDDFC:
	push {lr}
	bl sub_8002DD8
	bl sub_801AD12
	ldr r1, off_80CDE1C // =off_80CDE20 
	ldrb r0, [r5,#9]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801A018
	bl sub_801BBAC
	pop {pc}
off_80CDE1C: .word off_80CDE20
off_80CDE20: .word sub_80CDE68+1
	.word sub_80165B8+1
	.word sub_80CDE44+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80CDEC8+1
.func
.thumb_func
sub_80CDE44:
	push {lr}
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
.endfunc // sub_80CDE44

	bl sub_802EF5C
	bl sub_800F656
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80CDE68:
	push {r7,lr}
	ldrb r0, [r5,#6]
	sub r0, #1
	strb r0, [r5,#6]
	bne locret_80CDE94
	mov r0, #2
	strb r0, [r5,#6]
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne loc_80CDE96
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CDE94:
	pop {r7,pc}
loc_80CDE96:
	ldr r0, [r5,#0x78]
	add r0, #1
	ldr r1, [r5,#0x74]
	cmp r1, r0
	bhi loc_80CDEA2
	mov r0, #0
loc_80CDEA2:
	str r0, [r5,#0x78]
	mov r7, #0x60 
	add r7, r7, r5
	ldrb r0, [r7,r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	strb r1, [r7,#0xb]
	bl sub_800E29C // () -> void
	mov r0, #0x14
	add r0, #0xff
	bl sound_play // () -> void
	pop {r7,pc}
.endfunc // sub_80CDE68

.func
.thumb_func
sub_80CDEC8:
	push {lr}
	ldrh r0, [r5,#0x24]
	tst r0, r0
	beq loc_80CDEEA
	ldr r1, [r5,#0x54]
	ldr r0, [r1,#0x70]
	tst r0, r0
	bne loc_80CDEEA
	bl object_isCurrentPanelSolid
	tst r0, r0
	beq loc_80CDEEA
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CDEEA
	pop {pc}
loc_80CDEEA:
	bl sub_801A074 // () -> void
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80CDEC8

.func
.thumb_func
sub_80CDEF8:
	push {lr}
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x47 
	bl sub_80E05F6
	ldr r0, [r5,#0x54]
	bl sub_80198CE
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80CDEF8

.func
.thumb_func
sub_80CDF18:
	push {r4,r7,lr}
	ldr r4, off_80CDF4C // =off_80CDF50 
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	add r4, r4, r0
	ldr r2, [r4]
	ldr r3, [r4,#4]
	add r7, r5, #0
	add r7, #0x60 
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80CDF18

	add r1, r0, #0
	beq loc_80CDF46
	str r1, [r5,#0x74]
	add r0, r7, #0
	mov r2, #0x14
	bl sub_8000C72
	ldrb r0, [r7]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	pop {r4,r7,pc}
loc_80CDF46:
	mov r0, #0
	pop {r4,r7,pc}
	.balign 4, 0x00
off_80CDF4C: .word off_80CDF50
off_80CDF50: .word 0x30
	.byte 0x80
	.byte  0
	.byte 0x8C
	.byte 0xF
	.byte 0x10
	.byte  0
	.byte  0
	.byte  0
	.byte 0xA0
	.byte  0
	.byte 0x8C
	.byte 0xF
.func
.thumb_func
sub_80CDF60:
	push {lr}
	push {r0,r5}
	mov r0, #0x4c 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1,r5}
	beq locret_80CDF82
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	ldrb r2, [r0]
	mov r3, #0x10
	orr r2, r3
	strb r2, [r0]
	mov r2, #0
	bl sub_800F614
locret_80CDF82:
	pop {pc}
.endfunc // sub_80CDF60

loc_80CDF84:
	push {lr}
	ldr r1, off_80CDF94 // =off_80CDF98 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CDF94: .word off_80CDF98
off_80CDF98: .word sub_80CDFA4+1
	.word sub_80CDFEE+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CDFA4:
	push {lr}
	mov r0, #1
	strb r0, [r5,#0x12]
	strb r0, [r5,#0x13]
	bl sub_8019892
	tst r0, r0
	bne loc_80CDFBA
	bl object_freeMemory
	pop {pc}
loc_80CDFBA:
	mov r1, #0
	mov r2, #0x18
	mov r3, #0
	bl sub_8019FB4
	mov r0, #0x80
	bl sub_801A07C
	ldr r0, dword_80CE114 // =0x1000000 
	bl object_setFlag // (int a1) -> void
	bl sub_801A018
.endfunc // sub_80CDFA4

	mov r0, #0x84
	ldr r1, [r5,#0x54]
	add r0, r0, r1
	str r0, [r5,#0x60]
	mov r0, #0
	str r0, [r5,#0x64]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CDFEE
	mov r0, #1
	str r0, [r5,#0x64]
	pop {pc}
.func
.thumb_func
sub_80CDFEE:
	push {lr}
	bl sub_801A00E
	.word 0x42007968, 0xF73CD10E, 0x4200F8C8, 0x4909D107, 0x58097A68
	.word 0x470846FE, 0xF804F74C, 0x7DA8BD00, 0xFF47F75E, 0xF82CF74C
	.word 0xF74B6D68, 0xF735FC56, 0xBD00FA19
	.word off_80CE02C
off_80CE02C: .word sub_80CE034+1
	.word sub_80CE05E+1
.endfunc // sub_80CDFEE

.func
.thumb_func
sub_80CE034:
	push {lr}
	ldr r2, [r5,#0x60]
	mov r3, #1
loc_80CE03A:
	ldrh r0, [r2]
	cmp r0, #0
	bne loc_80CE04A
	add r2, #2
	add r3, #1
	cmp r3, #4
	ble loc_80CE03A
	b locret_80CE05C
loc_80CE04A:
	strb r3, [r5,#4]
	bl sub_801A074 // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	bl sub_80CE05E
locret_80CE05C:
	pop {pc}
.endfunc // sub_80CE034

.func
.thumb_func
sub_80CE05E:
	push {lr}
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq loc_80CE098
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80CE096
	bl sub_80CE0A4
	push {r5}
	ldrb r2, [r5,#4]
	ldr r6, [r5,#0x2c]
	ldr r7, [r5,#0x30]
	ldr r5, [r5,#0x4c]
	bl sub_80E360E
	add r2, r0, #0
	mov r1, #1
	ldrb r0, [r5,#0x16]
	bl sub_800BF16
	pop {r5}
	ldrb r0, [r5,#0x16]
	bl sub_802CEA6
	mov r0, #8
	str r0, [r5,#8]
locret_80CE096:
	pop {pc}
loc_80CE098:
	ldrb r0, [r5,#0x16]
	bl sub_802CEA6
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80CE05E

.func
.thumb_func
sub_80CE0A4:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80CE0D8 // =dword_80CE0DC 
	add r1, r1, r0
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0
	bl sub_800CEA0
.endfunc // sub_80CE0A4

	add r6, r0, #0
	beq loc_80CE0D2
	add r7, sp, #0
loc_80CE0C0:
	sub r6, #1
	blt loc_80CE0D2
	ldrb r0, [r7,r6]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_800ABC6
	b loc_80CE0C0
loc_80CE0D2:
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80CE0D8: .word dword_80CE0DC
dword_80CE0DC: .word 0x200000, 0x0
	.word 0x400000, 0x0
.func
.thumb_func
sub_80CE0EC:
	push {lr}
	push {r0,r2,r5}
	mov r0, #0x4d 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80CE112
	str r1, [r0,#0x4c]
	mov r2, #0
	strb r2, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r7, [r0,#0x30]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CE112:
	pop {pc}
dword_80CE114: .word 0x1000000
.endfunc // sub_80CE0EC

loc_80CE118:
	push {lr}
	ldr r1, off_80CE128 // =off_80CE12C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CE128: .word off_80CE12C
off_80CE12C: .word sub_80CE138+1
	.word sub_80CE178+1
	.word sub_80CE21C+1
.func
.thumb_func
sub_80CE138:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x50 
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #4
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CE138

	bl sprite_update
	bl sub_8002F90 // () -> void
	bl sub_800E29C // () -> void
	mov r0, #0xa0
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CE178
	pop {pc}
.func
.thumb_func
sub_80CE178:
	push {lr}
	ldr r1, off_80CE18C // =off_80CE190 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CE18C: .word off_80CE190
off_80CE190: .word sub_80CE198+1
	.word sub_80CE1D6+1
.endfunc // sub_80CE178

.func
.thumb_func
sub_80CE198:
	push {lr}
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	mov r1, #0xa
	svc 6
	tst r1, r1
	bne loc_80CE1BA
	mov r0, #0x10
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	bl sub_801BDDE
	mov r4, #0x26 
	bl sub_80E05F6
loc_80CE1BA:
	ldrh r0, [r5,#0x3e]
	sub r0, #3
	blt loc_80CE1C4
	strh r0, [r5,#0x3e]
	b locret_80CE1D4
loc_80CE1C4:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CE1D4:
	pop {pc}
.endfunc // sub_80CE198

.func
.thumb_func
sub_80CE1D6:
	push {r5,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CE20E
	push {r5}
	ldr r1, [r5,#0x4c]
	ldrh r0, [r5,#0x2c]
	tst r0, r0
	bne loc_80CE1EA
	ldrh r0, [r1,#0x26]
loc_80CE1EA:
	add r5, r1, #0
	bl object_addHP
	pop {r5}
	mov r0, #0x8a
	bl sound_play // () -> void
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r4, #6
	bl sub_80E05F6
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xa]
	b locret_80CE21A
loc_80CE20E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CE21A
	mov r0, #8
	str r0, [r5,#8]
locret_80CE21A:
	pop {r5,pc}
.endfunc // sub_80CE1D6

.func
.thumb_func
sub_80CE21C:
	push {lr}
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80CE21C

.func
.thumb_func
sub_80CE224:
	push {r4,lr}
	push {r0,r1,r5}
	mov r0, #0x4e 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80CE248
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r6, [r0,#0x2c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80CE248:
	pop {r4,pc}
	.balign 4, 0x00
.endfunc // sub_80CE224

loc_80CE24C:
	push {lr}
	ldr r1, off_80CE260 // =off_80CE264 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80CE260: .word off_80CE264
off_80CE264: .word sub_80CE270+1
	.word sub_80CE2B4+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CE270:
	push {lr}
	ldr r1, off_80CE2AC // =byte_80CE2B0 
	ldrb r0, [r5,#4]
	ldrb r0, [r1,r0]
	strb r0, [r5,#0xe]
	ldr r0, dword_80CE518 // =0x1090c02 
	ldr r1, dword_80CE51C // =0x4050100 
	bl sub_8011504
.endfunc // sub_80CE270

	tst r0, r0
	bne loc_80CE28C
	bl object_freeMemory
	pop {pc}
loc_80CE28C:
	bl sub_801A146
	bl sub_801A018
	ldrb r0, [r5,#5]
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CE2B4
	pop {pc}
off_80CE2AC: .word byte_80CE2B0
byte_80CE2B0: .byte 0x0, 0x2, 0x4, 0x1
.func
.thumb_func
sub_80CE2B4:
	push {r4,lr}
	bl sub_801A00E
	.hword 0xF74B
	.word 0xF73BFF0B, 0x4200FF66, 0xF73BD10A, 0xD104FEE7, 0x7A68490B
	.word 0x46FE5809, 0xF74B4708, 0xBD10FE9F, 0x19402034, 0x2414C80E
	.word 0xF987F012, 0x21027828, 0x70284388, 0xFEC0F74B, 0x60A82008
	.word 0xBD10
	.word off_80CE300
off_80CE300: .word sub_80CE308+1
	.word sub_80CE3C4+1
.endfunc // sub_80CE2B4

.func
.thumb_func
sub_80CE308:
	push {r4,r6,r7,lr}
	mov r0, r9
	push {r0}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CE32C
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r7, off_80CE520 // =dword_80CE3AC 
	ldmia r7!, {r1-r3}
	mul r1, r0
	mov r7, #0x40 
	add r7, r7, r5
	stmia r7!, {r1-r3}
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80CE32C:
	mov r3, #0x34 
	add r7, r5, r3
	mov r9, r7
	ldmia r7!, {r0-r2}
	mov r3, #0x40 
	add r7, r5, r3
	ldmia r7!, {r3,r4,r6}
	add r0, r0, r3
	add r6, r6, r4
	add r2, r2, r6
	mov r7, r9
	stmia r7!, {r0-r2}
	str r6, [r5,#0x48]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80CE3A4
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_800E24C
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	strb r1, [r7,#0xb]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80CE394
	bl object_isCurrentPanelSolid
	tst r0, r0
	beq loc_80CE388
	mov r0, #1
	bl sub_801A07C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r0}
	mov r9, r0
	pop {r4,r6,r7,pc}
loc_80CE388:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #1
	bl sub_80E05F6
loc_80CE394:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80CE3A4:
	pop {r0}
	mov r9, r0
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80CE3AC: .word 0x2E666
	.word 0xFFFFD800, 0x20666, 0x2E666, 0x2E666, 0x2E666
.endfunc // sub_80CE308

.func
.thumb_func
sub_80CE3C4:
	push {r4,r6,r7,lr}
	bl sub_801A074 // () -> void
	mov r6, #1
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x70]
	tst r1, r1
	bne loc_80CE3D6
	mov r6, #0xf
loc_80CE3D6:
	ldrb r0, [r5,#4]
	ldr r2, dword_80CE410 // =byte_80CE418 
	ldrb r2, [r2,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	add r3, r6, #0
	ldrh r4, [r5,#0x16]
	mov r7, #0
	bl sub_80CE468
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#4]
	ldr r3, dword_80CE40C // =byte_80CE418 
	ldrb r2, [r3,r2]
	add r3, r6, #0
	bl sub_80CE424
	ldrb r0, [r5,#4]
	add r0, r0, r0
	ldr r1, off_80CE414 // =byte_80CE418 
	ldrh r0, [r1,r0]
	bl sound_play // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
dword_80CE40C: .word 0x80CE41E
dword_80CE410: .word 0x80CE421
off_80CE414: .word byte_80CE418
byte_80CE418: .byte 0x90, 0x0, 0x18, 0x1, 0x1B, 0x1, 0x4, 0x7, 0x6, 0x3B, 0x3B, 0x3C
.endfunc // sub_80CE3C4

.func
.thumb_func
sub_80CE424:
	push {r4-r7,lr}
	add r5, r2, #0
	add r6, r0, #0
	add r7, r1, #0
	ldr r4, off_80CE524 // =off_8019B78 
	lsl r3, r3, #2
	ldr r4, [r4,r3]
loc_80CE432:
	mov r0, #0
	ldrsb r0, [r4,r0]
	mov r1, #1
	ldrsb r1, [r4,r1]
	cmp r0, #0x7f
	beq locret_80CE44C
	add r0, r0, r6
	add r1, r1, r7
	add r2, r5, #0
	bl object_setPanelType
	add r4, #2
	b loc_80CE432
locret_80CE44C:
	pop {r4-r7,pc}
.endfunc // sub_80CE424

	push {lr}
	push {r5}
	mov r0, #0x4f 
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80CE466
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
locret_80CE466:
	pop {pc}
.func
.thumb_func
sub_80CE468:
	push {r4,r6,r7,lr}
	mov r6, r8
	push {r6}
	mov r8, r7
	push {r0-r3}
	add r0, r4, #0
	bl sub_800E2C2
	add r6, r0, #0
	pop {r0-r3}
	lsl r3, r3, #0x19
	bcs loc_80CE4DC
	beq loc_80CE4D6
	lsr r3, r3, #0x17
	ldr r7, off_80CE528 // =off_8019B78 
	ldr r7, [r7,r3]
	mov r3, #0
loc_80CE48A:
	push {r0,r1}
	ldrsb r4, [r7,r3]
	cmp r4, #0x7f
	beq loc_80CE4D4
	mul r4, r6
	add r0, r0, r4
	add r3, #1
	ldrsb r4, [r7,r3]
	add r1, r1, r4
	add r3, #1
	push {r0-r3}
	bl object_isValidPanel
	tst r0, r0
	pop {r0-r3}
	beq loc_80CE4D0
	push {r0-r3}
	bl sub_800C90A
	ldrb r0, [r0,#2]
	tst r0, r0
	pop {r0-r3}
	beq loc_80CE4D0
	push {r0-r3}
	push {r2}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	pop {r2}
	add r4, r2, #0
	add r2, r1, #0
	add r1, r0, #0
	mov r3, r8
	bl sub_80E05F6
	pop {r0-r3}
loc_80CE4D0:
	pop {r0,r1}
	b loc_80CE48A
loc_80CE4D4:
	pop {r0,r1}
loc_80CE4D6:
	pop {r0}
	mov r8, r0
	pop {r4,r6,r7,pc}
loc_80CE4DC:
	lsr r3, r3, #0x16
	add r4, r2, #0
	mov r1, #3
	ldr r7, off_80CE52C // =dword_8019C34 
	add r7, r7, r3
	ldr r2, [r7]
	ldr r3, [r7,#4]
loc_80CE4EA:
	mov r0, #6
loc_80CE4EC:
	push {r0-r3}
	bl object_checkPanelParameters
.endfunc // sub_80CE468

	tst r0, r0
	pop {r0-r3}
	beq loc_80CE50A
	push {r0-r3}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	bl sub_80E05F6
	pop {r0-r3}
loc_80CE50A:
	sub r0, #1
	bne loc_80CE4EC
	sub r1, #1
	bne loc_80CE4EA
	pop {r0}
	mov r8, r0
	pop {r4,r6,r7,pc}
dword_80CE518: .word 0x1090C02
dword_80CE51C: .word 0x4050100
off_80CE520: .word dword_80CE3AC
off_80CE524: .word off_8019B78
off_80CE528: .word off_8019B78
off_80CE52C: .word dword_8019C34
.func
.thumb_func
sub_80CE530:
	push {lr}
	ldr r1, off_80CE544 // =off_80CE548 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CE544: .word off_80CE548
off_80CE548: .word sub_80CE554+1
	.word sub_80CE5F0+1
	.word sub_8016C8A+1
.endfunc // sub_80CE530

.func
.thumb_func
sub_80CE554:
	push {r4,lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80CE5B4
	mov r1, #0x10
	mov r2, #0x17
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	mov r1, #4
	mul r0, r1
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80CE704 // =0xc0000 
	mul r1, r0
	str r1, [r5,#0x40]
	mov r2, #0xc
	strh r2, [r5,#0x20]
	mul r1, r2
	ldr r0, [r5,#0x34]
	sub r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, dword_80CE704 // =0xc0000 
	str r1, [r5,#0x48]
	mul r1, r2
	ldr r0, dword_80CE708 // =0x40000 
	add r1, r1, r0
	str r1, [r5,#0x3c]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80CE5BA
loc_80CE5B4:
	bl object_freeMemory
	pop {r4,pc}
loc_80CE5BA:
	mov r1, #0xa
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #2
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
.endfunc // sub_80CE554

	mov r0, #4
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0xb3
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CE5F0
	pop {r4,pc}
.func
.thumb_func
sub_80CE5F0:
	push {lr}
	bl sub_801A00E
	.hword 0xF74B
	.word 0xF73BFD6D, 0x4200FDC8, 0xF73BD10E, 0xD108FD49, 0x6F006D68
	.word 0xD10D4200, 0x7A68490B, 0x46FE5809, 0xF74B4708, 0xBD00FCFD
	.word 0x19402034, 0x2414C80E, 0xFFE5F011, 0x21027828, 0x70284388
	.word 0xFD1EF74B, 0x60A82008, 0xBD00
	.word off_80CE644
off_80CE644: .word sub_80CE64C+1
	.word sub_80CE690+1
.endfunc // sub_80CE5F0

.func
.thumb_func
sub_80CE64C:
	push {r4,r6,r7,lr}
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80CE680
	ldr r0, dword_80CE708 // =0x40000 
	str r0, [r5,#0x3c]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #1
	bl sub_801A07C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80CE680:
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #3
	bcc locret_80CE68E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
locret_80CE68E:
	pop {r4,r6,r7,pc}
.endfunc // sub_80CE64C

.func
.thumb_func
sub_80CE690:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80CE6BA
	mov r0, #1
	strb r0, [r5,#0xa]
	bl sub_801A074 // () -> void
	mov r0, #0xc
	strh r0, [r5,#0x20]
	mov r0, #0xd1
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#5]
	tst r0, r0
	beq loc_80CE6BA
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_8109794
loc_80CE6BA:
	ldrh r0, [r5,#0x20]
	cmp r0, #8
	bgt loc_80CE6D8
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	mov r1, #2
	tst r0, r1
	beq loc_80CE6D8
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
loc_80CE6D8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CE6E4
	mov r0, #8
	str r0, [r5,#8]
locret_80CE6E4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80CE690

.func
.thumb_func
sub_80CE6E6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x50 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CE702
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
locret_80CE702:
	pop {pc}
dword_80CE704: .word 0xC0000
dword_80CE708: .word 0x40000
.endfunc // sub_80CE6E6

loc_80CE70C:
	push {lr}
	ldr r1, off_80CE720 // =off_80CE724 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80CE720: .word off_80CE724
off_80CE724: .word sub_80CE730+1
	.word sub_80CE782+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CE730:
	push {r4,lr}
	bl sub_800E29C // () -> void
	ldr r0, dword_80CE810 // =0x70402 
	ldr r1, dword_80CE814 // =0x4050300 
	bl sub_8011504
.endfunc // sub_80CE730

	tst r0, r0
	bne loc_80CE75A
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl object_freeMemory
	pop {r4,pc}
loc_80CE75A:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #2
	bl sub_801A140
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_801A018
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x60]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #4
	strb r0, [r5,#8]
	pop {r4,pc}
.func
.thumb_func
sub_80CE782:
	push {r4,r7,lr}
	bl sub_801A00E
	.word 0xFCA4F74B, 0xFCFFF73B, 0xD10E4200, 0x6F386D6F, 0x4208491F
	.word 0x4907D109, 0x58097A68, 0x470846FE, 0xFC36F74B, 0xFA87F73E
	.word 0xF74BBD90, 0x2008FC5F, 0xBD9060A8
	.word off_80CE7C0
off_80CE7C0: .word sub_80CE7C4+1
.endfunc // sub_80CE782

.func
.thumb_func
sub_80CE7C4:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80CE7DC
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	mov r0, #2
	strb r0, [r5,#9]
	b locret_80CE7EC
loc_80CE7DC:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
locret_80CE7EC:
	pop {pc}
.endfunc // sub_80CE7C4

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x51 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CE80E
	str r3, [r0,#0x60]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	mov r3, #2
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80CE80E:
	pop {pc}
dword_80CE810: .word 0x70402
dword_80CE814: .word 0x4050300
	.word 0xF800000
loc_80CE81C:
	push {lr}
	ldr r1, off_80CE82C // =off_80CE830 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CE82C: .word off_80CE830
off_80CE830: .word sub_80CE83C+1
	.word sub_80CE87C+1
	.word sub_80CEA88+1
.func
.thumb_func
sub_80CE83C:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, dword_80CEAF8 // =0x1000c0b 
	ldr r1, dword_80CEAFC // =0x7050100 
	bl sub_8011504
.endfunc // sub_80CE83C

	tst r0, r0
	bne loc_80CE858
	bl object_freeMemory
	pop {pc}
loc_80CE858:
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80CE878 // =0x50000 
	mul r0, r1
	str r0, [r5,#0x40]
	bl sub_801A018
	mov r0, #0x21 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#8]
	pop {pc}
dword_80CE878: .word 0x50000
.func
.thumb_func
sub_80CE87C:
	push {r7,lr}
	bl sub_801A00E
	.hword 0xF74B
	.word 0x6D6FFC27, 0x42006F38, 0x2001D003, 0xF74B66A8, 0xF73BFBEF
	.word 0xD104FBFF, 0x7A68490A, 0x46FE5809, 0x6D6F4708, 0x42007878
	.word 0x7CA8D003, 0xF73E7CE9, 0xF73BF991, 0xD101FBEF, 0xF976F74D
	.word 0xFBAAF74B, 0xBD80
	.word off_80CE8CC
off_80CE8CC: .word sub_80CE8D8+1
	.word sub_80CE9A4+1
	.word loc_80CEA0A+1
.endfunc // sub_80CE87C

.func
.thumb_func
sub_80CE8D8:
	push {lr}
	ldr r1, off_80CE8E8 // =off_80CE8EC 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CE8E8: .word off_80CE8EC
off_80CE8EC: .word sub_80CE8F4+1
	.word sub_80CE932+1
.endfunc // sub_80CE8D8

.func
.thumb_func
sub_80CE8F4:
	push {lr}
	mov r0, #8
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#6]
	str r0, [r5,#0x60]
	mov r0, #4
	strh r0, [r5,#0xa]
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq locret_80CE930
	ldr r0, [r5,#0x68]
	tst r0, r0
	beq locret_80CE930
	ldrb r0, [r5,#6]
	ldr r1, [r5,#0x60]
	sub r0, r0, r1
	str r0, [r5,#0x6c]
	mov r0, #1
	str r0, [r5,#0x70]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldrb r0, [r5,#5]
	cmp r0, #1
	bne locret_80CE930
	ldr r0, [r5,#0x4c]
	mov r2, #0
	bl sub_80E8612
locret_80CE930:
	pop {pc}
.endfunc // sub_80CE8F4

.func
.thumb_func
sub_80CE932:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80CE95A
	bl sub_800E29C // () -> void
	ldr r0, [r5,#0x60]
	sub r0, #1
	str r0, [r5,#0x60]
	ble loc_80CE97A
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80CE954
	ldr r0, [r5,#0x68]
	tst r0, r0
	bne loc_80CE97A
loc_80CE954:
	mov r0, #8
	strh r0, [r5,#0x20]
	pop {pc}
loc_80CE95A:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E258
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	beq locret_80CE978
	strb r0, [r5,#0x12]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	mov r0, #1
	bl sub_801A07C
locret_80CE978:
	pop {pc}
loc_80CE97A:
	mov r0, #1
	str r0, [r5,#0x70]
	ldrb r0, [r5,#5]
	cmp r0, #1
	beq loc_80CE996
	ldrb r0, [r5,#6]
	ldr r1, [r5,#0x60]
	sub r0, r0, r1
	str r0, [r5,#0x6c]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80CE9A2
loc_80CE996:
	ldrb r2, [r5,#6]
	ldr r1, [r5,#0x60]
	sub r2, r2, r1
	ldr r0, [r5,#0x4c]
	bl sub_80E8612
locret_80CE9A2:
	pop {pc}
.endfunc // sub_80CE932

.func
.thumb_func
sub_80CE9A4:
	push {lr}
	ldr r0, [r5,#0x68]
	cmp r0, #2
	bne loc_80CE9B2
	mov r0, #1
	str r0, [r5,#0x68]
	b locret_80CE9BC
loc_80CE9B2:
	ldr r1, off_80CE9C0 // =off_80CE9C4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80CE9BC:
	pop {pc}
	.byte 0, 0
off_80CE9C0: .word off_80CE9C4
off_80CE9C4: .word sub_80CE9CC+1
	.word sub_80CE9DC+1
.endfunc // sub_80CE9A4

.func
.thumb_func
sub_80CE9CC:
	push {lr}
	mov r0, #8
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#7]
	str r0, [r5,#0x60]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80CE9CC

.func
.thumb_func
sub_80CE9DC:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CE9F8
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x60]
	sub r0, #1
	str r0, [r5,#0x60]
	beq loc_80CE9FA
	mov r0, #8
	strh r0, [r5,#0x20]
locret_80CE9F8:
	pop {pc}
loc_80CE9FA:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldr r0, [r5,#0x40]
	neg r0, r0
	str r0, [r5,#0x40]
	pop {pc}
.endfunc // sub_80CE9DC

loc_80CEA0A:
	push {lr}
	ldr r1, off_80CEA18 // =off_80CEA1C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80CEA18: .word off_80CEA1C
off_80CEA1C: .word sub_80CEA24+1
	.word sub_80CEA42+1
.func
.thumb_func
sub_80CEA24:
	push {lr}
	mov r0, #8
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x6c]
	str r0, [r5,#0x60]
	mov r0, #4
	strh r0, [r5,#0xa]
	ldr r0, [r5,#0x60]
	tst r0, r0
	bne locret_80CEA40
	mov r0, #8
	str r0, [r5,#8]
	bl sub_801A074 // () -> void
locret_80CEA40:
	pop {pc}
.endfunc // sub_80CEA24

.func
.thumb_func
sub_80CEA42:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80CEA5E
	bl sub_800E29C // () -> void
	ldr r0, [r5,#0x60]
	sub r0, #1
	str r0, [r5,#0x60]
	ble loc_80CEA7E
	mov r0, #8
	strh r0, [r5,#0x20]
	pop {pc}
loc_80CEA5E:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E258
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	beq locret_80CEA7C
	strb r0, [r5,#0x12]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	mov r0, #1
	bl sub_801A07C
locret_80CEA7C:
	pop {pc}
loc_80CEA7E:
	mov r0, #8
	str r0, [r5,#8]
	bl sub_801A074 // () -> void
	pop {pc}
.endfunc // sub_80CEA42

.func
.thumb_func
sub_80CEA88:
	push {r6,r7,lr}
	ldr r7, [r5,#0x64]
	ldr r6, [r7]
	cmp r5, r6
	bne loc_80CEA96
	mov r0, #0
	str r0, [r7]
loc_80CEA96:
	ldr r0, [r5,#0x54]
	bl sub_80198CE
	bl object_freeMemory
	pop {r4,r7,pc}
.endfunc // sub_80CEA88

.func
.thumb_func
sub_80CEAA2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x52 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CEAC0
	bl sub_801155A
	str r7, [r0,#0x64]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80CEAC0:
	pop {pc}
.endfunc // sub_80CEAA2

.func
.thumb_func
sub_80CEAC2:
	push {r2,r4-r7,lr}
	add r6, r0, #0
	add r4, r1, #0
	add r7, r2, #0
	cmp r5, r6
	bne loc_80CEAD0
	mov r4, #1
loc_80CEAD0:
	tst r0, r0
	beq loc_80CEAEA
	add r5, r0, #0
	bl sub_800E29C // () -> void
	str r4, [r5,#0x68]
	str r7, [r5,#0x6c]
	mov r2, #1
	str r2, [r5,#0x70]
	mov r2, #4
	strb r2, [r5,#9]
	mov r2, #0
	strh r2, [r5,#0xa]
loc_80CEAEA:
	add r1, r4, #0
	pop {r2,r4-r7,pc}
.endfunc // sub_80CEAC2

.func
.thumb_func
sub_80CEAEE:
	tst r0, r0
	beq locret_80CEAF4
	ldr r0, [r0,#0x70]
locret_80CEAF4:
	mov pc, lr
	.balign 4, 0x00
dword_80CEAF8: .word 0x1000C0B
dword_80CEAFC: .word 0x7050100
.endfunc // sub_80CEAEE

loc_80CEB00:
	push {lr}
	ldr r1, off_80CEB14 // =off_80CEB18 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CEB14: .word off_80CEB18
off_80CEB18: .word sub_80CEB24+1
	.word loc_80CEB66+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CEB24:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0x12
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x1e
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CEB24

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80CEB66:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CEB82
	bl battle_isTimeStop
	bne locret_80CEB86
	ldr r1, off_80CEB88 // =off_80CEB8C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80CEB86
loc_80CEB82:
	mov r0, #8
	str r0, [r5,#8]
locret_80CEB86:
	pop {pc}
off_80CEB88: .word off_80CEB8C
off_80CEB8C: .word sub_80CEB9C+1
	.word sub_80CEBBE+1
	.word sub_80CEC1A+1
	.word sub_80CEC7C+1
.func
.thumb_func
sub_80CEB9C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CEBAC
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xb
	strh r0, [r5,#0x20]
loc_80CEBAC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80CEBBC
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CEBBC:
	pop {pc}
.endfunc // sub_80CEB9C

.func
.thumb_func
sub_80CEBBE:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CEBF4
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x1f
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80CEE60 // =0x260000 
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, dword_80CEE64 // =0x540000 
	str r0, [r5,#0x3c]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80CEE68 // =0x60000 
	mul r1, r0
	ldr r2, dword_80CEE68 // =0x60000 
	str r1, [r5,#0x40]
	str r2, [r5,#0x48]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80CEC18
loc_80CEBF4:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bl sub_800E2AC
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80CEC18
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CEC18:
	pop {pc}
.endfunc // sub_80CEBBE

.func
.thumb_func
sub_80CEC1A:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CEC58
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80CED78
	str r0, [r5,#0x64]
	str r1, [r5,#0x68]
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r2, #2
	mul r2, r0
	pop {r0,r1}
	add r0, r0, r2
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	ldr r0, dword_80CEE6C // =0xc00000 
	str r0, [r5,#0x3c]
	mov r0, #0x20 
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	b loc_80CEC68
loc_80CEC58:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80CEC68
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80CEC68:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs locret_80CEC7A
	ldr r0, [r5,#0x64]
	ldr r1, [r5,#0x68]
	bl object_highlightPanel
locret_80CEC7A:
	pop {pc}
.endfunc // sub_80CEC1A

.func
.thumb_func
sub_80CEC7C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CECAC
	mov r1, #4
	strb r1, [r5,#0xa]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#4]
	lsl r1, r1, #3
	ldr r2, off_80CED14 // =dword_80CED18 
	add r2, r2, r1
	ldr r1, [r2]
	ldr r2, [r2,#4]
	mul r1, r0
	neg r2, r2
	str r1, [r5,#0x40]
	str r2, [r5,#0x48]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80CED38 // =dword_80CED3C 
	ldr r0, [r1,r0]
	strh r0, [r5,#0x20]
	b loc_80CED00
loc_80CECAC:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bl sub_800E2AC
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80CED00
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80CED4C // =byte_80CED50 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80CECFA
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	bl sub_80E05F6
	mov r0, #0x70 
	bl sound_play // () -> void
	bl sub_80CEE38
loc_80CECFA:
	mov r0, #8
	str r0, [r5,#8]
	b locret_80CED12
loc_80CED00:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs locret_80CED12
	ldr r0, [r5,#0x64]
	ldr r1, [r5,#0x68]
	bl object_highlightPanel
locret_80CED12:
	pop {pc}
off_80CED14: .word dword_80CED18
dword_80CED18: .word 0x40000, 0x99999, 0x471C7, 0xAAAAA, 0x50000, 0xC0000
	.word 0x5B6DB, 0xDB6DB
off_80CED38: .word dword_80CED3C
dword_80CED3C: .word 0x14, 0x12, 0x10, 0xE
off_80CED4C: .word byte_80CED50
byte_80CED50: .byte 0x10, 0x0, 0x80, 0x15, 0x10, 0x0, 0x80, 0x2A
.endfunc // sub_80CEC7C

.func
.thumb_func
sub_80CED58:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x53 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CED76
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80CED76:
	pop {pc}
.endfunc // sub_80CED58

.func
.thumb_func
sub_80CED78:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x24
	ldrb r0, [r5,#5]
	tst r0, r0
	bne loc_80CED94
	ldr r2, [r5,#0x60]
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	push {r0,r1}
	bl object_isCurrentPanelValid
	tst r0, r0
	pop {r0,r1}
	bne loc_80CEE14
loc_80CED94:
	mov r4, #0
	mov r6, #0
loc_80CED98:
	add r2, r4, #0
	lsl r2, r2, #1
	ldr r3, off_80CEE18 // =dword_80CEE1C 
	add r2, r2, r3
	ldrb r0, [r2]
	ldrb r1, [r2,#1]
	ldrb r2, [r5,#0x16]
	tst r0, r0
	beq loc_80CEDAE
	mov r2, #7
	sub r0, r2, r0
loc_80CEDAE:
	lsl r1, r1, #4
	orr r0, r1
	add r7, sp, #0xc
	strb r0, [r7,r6]
	add r6, #1
	add r4, #1
	cmp r4, #4
	blt loc_80CED98
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	str r0, [sp,#8]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80CEE24 // =dword_80CEE28 
	add r1, r1, r0
	ldr r0, [r1]
	ldr r1, [r1,#4]
	str r0, [sp]
	str r1, [sp,#4]
	mov r4, #3
	ldrb r0, [r5,#0x16]
	tst r0, r0
	beq loc_80CEDE0
	mov r4, #4
loc_80CEDE0:
	add r0, r4, #0
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #0xc
	add r7, r7, r6
	bl sub_800CFDC
	tst r0, r0
	beq loc_80CEE02
	add r6, r6, r0
	ldr r0, [sp,#8]
	add r4, r4, r0
	cmp r4, #1
	blt loc_80CEE02
	cmp r4, #6
	bgt loc_80CEE02
	b loc_80CEDE0
loc_80CEE02:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80CEE14:
	add sp, sp, #0x24
	pop {r4,r6,r7,pc}
off_80CEE18: .word dword_80CEE1C
dword_80CEE1C: .word 0x3050105, 0x2060204
off_80CEE24: .word dword_80CEE28
dword_80CEE28: .word 0x20, 0x0, 0x0
	.word 0x20
.endfunc // sub_80CED78

.func
.thumb_func
sub_80CEE38:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80CEE58 // =0xa050101 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80CEE5C // =0x3 
	bl sub_80C536A
	tst r0, r0
	beq locret_80CEE54
	mov r1, #5
	strh r1, [r0,#0x20]
locret_80CEE54:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80CEE58: .word 0xA050101
dword_80CEE5C: .word 0x3
dword_80CEE60: .word 0x260000
dword_80CEE64: .word 0x540000
dword_80CEE68: .word 0x60000
dword_80CEE6C: .word 0xC00000
	.word 0x50002
	.word 0x14000A
.endfunc // sub_80CEE38

.func
.thumb_func
sub_80CEE78:
	push {lr}
	ldr r1, off_80CEE8C // =off_80CEE90 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80CEE8C: .word off_80CEE90
off_80CEE90: .word sub_80CEE9C+1
	.word sub_80CEF0A+1
	.word sub_8016C8A+1
.endfunc // sub_80CEE78

.func
.thumb_func
sub_80CEE9C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x1d
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CEE9C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_80CF080
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, dword_80CF0BC // = 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	bl sub_8019892
	tst r0, r0
	bne loc_80CEEF6
	bl object_freeMemory
	b locret_80CEF08
loc_80CEEF6:
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80CEF08:
	pop {pc}
.func
.thumb_func
sub_80CEF0A:
	push {lr}
	bl sub_801A00E
	.word 0xF8E0F74B, 0xF93BF73B, 0xD10F4200, 0xF7422000, 0x4200FB84
	.word 0xF73BDB0A, 0xD104F8B7, 0x7A684906, 0x46FE5809, 0xF74B4708
	.word 0xE003F86F, 0xF89AF74B, 0x60A82008, 0xBD00
	.word off_80CEF4C
off_80CEF4C: .word sub_80CEF5C+1
	.word sub_80CEF90+1
	.word sub_80CEFFC+1
	.word sub_80CF030+1
.endfunc // sub_80CEF0A

.func
.thumb_func
sub_80CEF5C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CEF76
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#4]
	ldr r1, off_80CEF88 // =byte_80CEF8C 
	ldrb r0, [r1,r0]
	mov r1, #0x14
	add r0, r0, r1
	strh r0, [r5,#0x20]
	b locret_80CEF86
loc_80CEF76:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80CEF86
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CEF86:
	pop {pc}
off_80CEF88: .word byte_80CEF8C
byte_80CEF8C: .byte 0x28, 0x1E, 0x1A, 0x14
.endfunc // sub_80CEF5C

.func
.thumb_func
sub_80CEF90:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CEFA8
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r5,#0x22]
	mov r0, #0
	strh r0, [r5,#0x20]
loc_80CEFA8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80CEFF0
	mov r0, #0xa
	strh r0, [r5,#0x20]
	bl sub_8001532
	mov r1, #3
	and r0, r1
	ldr r1, off_80CEFF4 // =byte_80CEFF8 
	ldrb r3, [r1,r0]
	lsl r3, r3, #0x10
	push {r3}
	bl object_getFlipDirection_800E2CA // () -> int
	pop {r3}
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r4, #0xc
	ldr r6, [r5,#0x2c]
	bl sub_80C6ADA
	mov r0, #0xb9
	bl sound_play // () -> void
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80CEFF0
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CEFF0:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80CEFF4: .word byte_80CEFF8
byte_80CEFF8: .byte 0x8, 0x10, 0x18, 0x20
.endfunc // sub_80CEF90

.func
.thumb_func
sub_80CEFFC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CF016
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#4]
	ldr r1, off_80CF028 // =byte_80CF02C 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x20]
	b locret_80CF026
loc_80CF016:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80CF026
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CF026:
	pop {pc}
off_80CF028: .word byte_80CF02C
byte_80CF02C: .byte 0x28, 0x1E, 0x1A, 0x14
.endfunc // sub_80CEFFC

.func
.thumb_func
sub_80CF030:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CF046
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #0xf
	strh r0, [r5,#0x20]
	b locret_80CF056
loc_80CF046:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80CF056
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80CF056:
	pop {pc}
.endfunc // sub_80CF030

.func
.thumb_func
sub_80CF058:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x54 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CF07E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CF07E:
	pop {pc}
.endfunc // sub_80CF058

.func
.thumb_func
sub_80CF080:
	push {lr}
	ldrb r1, [r5,#0x12]
	cmp r1, #1
	beq loc_80CF0AC
	cmp r1, #6
	beq loc_80CF0B0
	cmp r1, #4
	beq loc_80CF09E
	mov r0, #0
	ldr r2, [r5,#0x60]
	ldrb r2, [r2,#0x12]
	cmp r1, r2
	ble loc_80CF0B6
	mov r0, #1
	b loc_80CF0B6
loc_80CF09E:
	mov r0, #0
	ldr r2, [r5,#0x60]
	ldrb r2, [r2,#0x12]
	cmp r1, r2
	bge loc_80CF0B6
	mov r0, #1
	b loc_80CF0B6
loc_80CF0AC:
	ldrb r0, [r5,#0x16]
	b loc_80CF0B6
loc_80CF0B0:
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
loc_80CF0B6:
	strb r0, [r5,#0x17]
	pop {pc}
	.balign 4, 0x00
dword_80CF0BC: .word 0x80CEE70
	.word 0x6300C
	.word 0xBB80064
	.word 0x101300C
	.word 0x5A10064
.endfunc // sub_80CF080

.func
.thumb_func
sub_80CF0D0:
	push {lr}
	ldr r1, off_80CF0E0 // =off_80CF0E4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80CF0E0: .word off_80CF0E4
off_80CF0E4: .word sub_80CF0F0+1
	.word sub_80CF18C+1
	.word sub_8016C8A+1
.endfunc // sub_80CF0D0

.func
.thumb_func
sub_80CF0F0:
	push {r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	lsl r0, r0, #3
	ldr r7, dword_80CF188 // = 
	add r7, r7, r0
	str r7, [r5,#0x60]
	mov r0, #0x80
	ldrb r1, [r7]
	ldrb r2, [r7,#1]
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldr r7, [r5,#0x60]
	ldrb r0, [r7,#3]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CF0F0

	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #0xa0
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x12]
	strh r0, [r5,#0x14]
	mov r0, #0xdb
	ldrb r1, [r5,#4]
	add r0, r0, r1
	strh r0, [r5,#0x28]
	mov r0, #8
	lsl r0, r0, #0x10
	str r0, [r5,#0x48]
	mov r0, #0
	strb r0, [r5,#0xe]
	ldrh r0, [r7,#6]
	strh r0, [r5,#0x20]
	ldr r7, [r5,#0x60]
	ldrh r0, [r7,#4]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #1
	str r0, [r5,#0x64]
	strh r0, [r5,#0x22]
	bl sub_8019892
	tst r0, r0
	bne loc_80CF16A
	bl object_freeMemory
	pop {r7,pc}
loc_80CF16A:
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CF18C
	pop {r7,pc}
	.balign 4, 0x00
dword_80CF188: .word 0x80CF0C0
.func
.thumb_func
sub_80CF18C:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD12
	bl sub_800F672
	ldr r0, off_80CF1B4 // =off_80CF1B8 
	bl sub_801B394
	bl sub_801A018
.endfunc // sub_80CF18C

	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CF1B4: .word off_80CF1B8
off_80CF1B8: .word sub_80CF250+1
	.word sub_80165B8+1
	.word sub_80CF1DC+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80CF2B4+1
.func
.thumb_func
sub_80CF1DC:
	push {lr}
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
.endfunc // sub_80CF1DC

	bl sub_801A180
	ldr r1, dword_80CF3A4 // =0x8000 
	tst r0, r1
	beq loc_80CF222
	ldr r1, dword_80CF3A8 // =0x300000 
	tst r0, r1
	beq loc_80CF202
	mov r0, #3
	bl sub_800F90E
	b loc_80CF23A
loc_80CF202:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80CF24E
	cmp r0, #1
	beq loc_80CF23A
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80CF23A
loc_80CF222:
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0
	bl sub_80E05F6
loc_80CF23A:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_802EF5C
	bl sub_800F656
	mov r0, #8
	str r0, [r5,#8]
locret_80CF24E:
	pop {pc}
.func
.thumb_func
sub_80CF250:
	push {lr}
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	bgt locret_80CF2AA
	mov r0, #0
	str r0, [r5,#0x3c]
	bl object_isCurrentPanelSolid
	tst r0, r0
	beq loc_80CF284
	mov r0, #2
	mov r1, #0x1e
	push {r5}
	bl sub_80302A8
	pop {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r2, dword_80CF2AC // =0x10 
	ldr r3, dword_80CF2B0 // =0xf880080 
	bl object_checkPanelParameters
	tst r0, r0
	bne loc_80CF296
loc_80CF284:
	bl sub_801A074 // () -> void
	mov r0, #0
	strh r0, [r5,#0x24]
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
loc_80CF296:
	mov r0, #1
	bl sub_801A07C
	mov r0, #0xc0
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CF2AA:
	pop {pc}
dword_80CF2AC: .word 0x10
dword_80CF2B0: .word 0xF880080
.endfunc // sub_80CF250

.func
.thumb_func
sub_80CF2B4:
	push {r4,r6,r7,lr}
	bl battle_isBattleOver
	bne loc_80CF30C
	ldr r0, [r5,#0x64]
	sub r0, #1
	str r0, [r5,#0x64]
	bhi loc_80CF2E0
	mov r0, #0x10
	str r0, [r5,#0x64]
	bl sub_80CF332
	tst r0, r0
	beq loc_80CF2E0
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #1
	bl sub_80E1D7A
loc_80CF2E0:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80CF30A
	ldr r1, [r5,#0x60]
	ldrb r0, [r1,#2]
	strh r0, [r5,#0x22]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r4, off_80CF318 // =dword_80CF31C 
	ldr r4, [r4,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #5
	ldr r3, [r5,#0x3c]
	mov r6, #0x81
	lsl r6, r6, #0x10
	add r6, #1
	mov r7, #0
	bl sub_80C536A
locret_80CF30A:
	pop {r4,r6,r7,pc}
loc_80CF30C:
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80CF318: .word dword_80CF31C
dword_80CF31C: .word 0x5200FF82, 0x5200FF81, 0x6D68B500, 0xFAD1F74A, 0xF894F734
.endfunc // sub_80CF2B4

	pop {pc}
.func
.thumb_func
sub_80CF332:
	push {r4,lr}
	sub sp, sp, #0x18
	mov r7, sp
	ldr r4, off_80CF360 // =dword_80CF364 
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	add r4, r4, r0
	ldr r2, [r4]
	ldr r3, [r4,#4]
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80CF332

	add r4, r0, #0
	beq loc_80CF35C
	bl sub_8001532
	add r1, r4, #0
	svc 6
	ldrb r0, [r7,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80CF35C:
	add sp, sp, #0x18
	pop {r4,pc}
off_80CF360: .word dword_80CF364
dword_80CF364: .word 0x20, 0x0, 0x0
	.byte 0x20
	.byte  0
	.byte  0
	.byte  0
.func
.thumb_func
sub_80CF374:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x55 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80CF3A0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r3, #0x10
	orr r2, r3
	strb r2, [r0]
	mov r3, #0xff
	and r3, r1
	mov r2, #1
	bl sub_800F614
locret_80CF3A0:
	pop {pc}
	.byte  0
	.byte  0
dword_80CF3A4: .word 0x8000
dword_80CF3A8: .word 0x300000
	.word 0x50A0031
	.word 0x310001
	.word 0x1050A
	.word 0x50A0031
	.hword 0x1
.endfunc // sub_80CF374

.func
.thumb_func
sub_80CF3BE:
	push {lr}
	ldr r1, off_80CF3CC // =off_80CF3D0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80CF3CC: .word off_80CF3D0
off_80CF3D0: .word sub_80CF3DC+1
	.word sub_80CF488+1
	.word sub_8016C8A+1
.endfunc // sub_80CF3BE

.func
.thumb_func
sub_80CF3DC:
	push {r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	mov r1, #6
	mul r0, r1
	ldr r7, dword_80CF484 // = 
	add r7, r7, r0
	str r7, [r5,#0x60]
	mov r1, #0xc
	mov r0, #0x80
	ldrb r2, [r7]
	bl sprite_load // (int a1, int a2, int a3) ->
	ldrb r0, [r7,#1]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CF3DC

	bl sprite_update
	bl sub_8002F90 // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x10
	lsl r1, r1, #0x10
	mul r1, r0
	str r1, [r5,#0x40]
	mov r1, #0x10
	lsl r1, r1, #0x10
	str r1, [r5,#0x48]
	neg r0, r0
	ldr r1, dword_80CF47C // =0x1000000 
	mul r1, r0
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, dword_80CF480 // =0x1000000 
	str r0, [r5,#0x3c]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	bl sub_8019892
	tst r0, r0
	bne loc_80CF452
	bl object_freeMemory
	pop {pc}
loc_80CF452:
	mov r3, #3
	ldr r7, [r5,#0x60]
	ldrb r1, [r7,#2]
	ldrb r2, [r7,#3]
	bl sub_8019FB4
	bl sub_801A146
	bl sub_801A074 // () -> void
	bl sub_801A018
	ldrb r1, [r5,#0x12]
	ldrb r2, [r5,#0x13]
	mov r4, #1
	lsl r4, r4, #8
	bl sub_80E43F6
	mov r0, #4
	strb r0, [r5,#8]
	pop {r7,pc}
dword_80CF47C: .word 0x1000000
dword_80CF480: .word 0x1000000
dword_80CF484: .word 0x80CF3AC
.func
.thumb_func
sub_80CF488:
	push {lr}
	bl sub_801A00E
	.hword 0xF74A
	.word 0x4909FE21, 0x58097A68, 0x470846FE, 0xFB86F74C, 0xFDBAF74A
	.word 0xF74ABD00, 0x2008FDE5, 0x782860A8, 0x43882102, 0xBD007028
	.word off_80CF4BC
off_80CF4BC: .word sub_80CF4C8+1
	.word sub_80CF4E6+1
	.word sub_80CF554+1
.endfunc // sub_80CF488

.func
.thumb_func
sub_80CF4C8:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80CF4E4
	mov r0, #0x10
	strh r0, [r5,#0x20]
	mov r0, #0xc4
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CF4E4:
	pop {pc}
.endfunc // sub_80CF4C8

.func
.thumb_func
sub_80CF4E6:
	push {r7,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80CF53E
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80CF550 // =0xf800010 
	tst r0, r1
	beq loc_80CF52C
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #5
	bl sub_80E05F6
	mov r0, #0x70 
	bl sound_play // () -> void
	ldr r7, [r5,#0x60]
	ldrb r0, [r7,#4]
	tst r0, r0
	beq loc_80CF526
	mov r1, #0xf
	bl sub_80302A8
loc_80CF526:
	mov r0, #1
	bl sub_801A07C
loc_80CF52C:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	pop {r7,pc}
loc_80CF53E:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	pop {r7,pc}
dword_80CF550: .word 0xF800010
.endfunc // sub_80CF4E6

.func
.thumb_func
sub_80CF554:
	push {lr}
	ldr r1, [r5,#0x60]
	ldrb r0, [r1,#5]
	tst r0, r0
	beq loc_80CF582
	cmp r0, #1
	beq loc_80CF570
	cmp r0, #3
	bne loc_80CF57A
	bl sub_8001532
	mov r1, #1
	and r0, r1
	bne loc_80CF582
loc_80CF570:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
	b loc_80CF582
loc_80CF57A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_breakPanel_dup2
loc_80CF582:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80CF554

.func
.thumb_func
sub_80CF594:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x56 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CF5B0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80CF5B0:
	pop {pc}
.endfunc // sub_80CF594

.func
.thumb_func
sub_80CF5B2:
	push {lr}
	bl sub_80CF594
	tst r0, r0
	beq locret_80CF5C4
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80CF5C4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80CF5B2

loc_80CF5C8:
	push {lr}
	ldr r1, off_80CF5DC // =off_80CF5E0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80CF5DC: .word off_80CF5E0
off_80CF5E0: .word sub_80CF5EC+1
	.word sub_80CF658+1
	.word sub_80CF76C+1
.func
.thumb_func
sub_80CF5EC:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0x12
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x1a
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CF5EC

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80CF632
	b loc_80CF64C
loc_80CF632:
	mov r1, #6
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	b locret_80CF656
loc_80CF64C:
	ldr r1, [r5,#0x60]
	mov r0, #0
	str r0, [r1]
	bl object_freeMemory
locret_80CF656:
	pop {pc}
.func
.thumb_func
sub_80CF658:
	push {r6,r7,lr}
	bl sub_801A00E
	.hword 0xF74A
	.word 0x6CEBFD39, 0x210D7A58, 0xD1354288, 0x28007AE8, 0xF73AD12C
	.word 0x4200FD8C, 0x6CEBD12E, 0x210D7A58, 0xD1294288, 0x6F016D68
	.word 0x7DAB4A19, 0x58D3009B, 0xD10D4219, 0x42196893, 0xF73AD11E
	.word 0xD104FCFD, 0x7A684911, 0x46FE5809, 0xF74A4708, 0xBDC0FCB5
	.word 0xF878F000, 0xD0044200, 0x72E82002, 0xFCDAF74A, 0x2001BDC0
	.word 0xF74A72E8, 0xBDC0FCD5, 0x20006E29, 0x20086008, 0xBDC07228
	.word 0xFCCCF74A, 0x20006E29, 0x20086008, 0xBDC07228
	.word off_80CF6EC
off_80CF6EC: .word sub_80CF700+1
	.word off_80CF6F4
off_80CF6F4: .word LCDControl
	.word start_
	.word 0x3800000
.endfunc // sub_80CF658

.func
.thumb_func
sub_80CF700:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80CF728
	mov r1, #4
	strb r1, [r5,#0xa]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r2, off_80CF758 // =dword_80CF75C 
	ldrb r3, [r5,#4]
	lsl r3, r3, #2
	ldr r0, [r2,r3]
	add r1, r0, #0
	mul r0, r4
	str r0, [r5,#0x40]
	mov r0, #0x28 
	lsl r0, r0, #0x10
	svc 6
	strh r0, [r5,#0x20]
loc_80CF728:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80CF748
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80CF756
loc_80CF748:
	bl sub_801A074 // () -> void
	ldr r1, [r5,#0x60]
	mov r0, #0
	str r0, [r1]
	mov r0, #8
	strb r0, [r5,#8]
locret_80CF756:
	pop {r4,pc}
off_80CF758: .word dword_80CF75C
dword_80CF75C: .word 0x60000, 0x60000, 0x60000, 0x60000
.endfunc // sub_80CF700

.func
.thumb_func
sub_80CF76C:
	push {r7,lr}
	bl sub_801A074 // () -> void
	bl sub_8016C8A
	pop {r7,pc}
.endfunc // sub_80CF76C

.func
.thumb_func
sub_80CF778:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x57 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CF7A2
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CF7A2:
	pop {pc}
.endfunc // sub_80CF778

	push {r4,r6,lr}
	sub sp, sp, #0x10
	add r0, sp, #0
	mov r1, #0x10
	bl sub_801A4DC
	add r4, r0, #0
	tst r0, r0
	beq loc_80CF7E0
	mov r3, #0
	add r6, sp, #0
loc_80CF7BA:
	ldr r0, [r6]
	ldr r1, [r0,#0x54]
	tst r1, r1
	beq loc_80CF7D6
	ldr r1, [r1,#0x30]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #2
	ldr r3, off_80CF7E4 // =off_80CF7E8 
	ldr r2, [r3,r2]
	and r1, r2
	beq loc_80CF7D6
	str r0, [r5,#0x50]
	mov r0, #1
	b loc_80CF7E0
loc_80CF7D6:
	add r6, #4
	add r3, #1
	cmp r3, r4
	blt loc_80CF7BA
	mov r0, #0
loc_80CF7E0:
	add sp, sp, #0x10
	pop {r4,r6,pc}
off_80CF7E4: .word off_80CF7E8
off_80CF7E8: .word LCDControl
	.word start_
loc_80CF7F0:
	push {lr}
	ldr r1, off_80CF800 // =off_80CF804 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80CF800: .word off_80CF804
off_80CF804: .word sub_80CF810+1
	.word sub_80CF8B0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CF810:
	push {r7,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CF89C
	ldrb r0, [r5]
	mov r1, #3
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x14
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0xb
	ldrb r1, [r5,#5]
	tst r1, r1
	bne loc_80CF85A
	ldrb r0, [r5,#0xe]
	mov r1, #0xf
	and r0, r1
	ldr r7, off_80CF8A4 // =dword_80CF8A8 
	ldrb r0, [r7,r0]
loc_80CF85A:
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E29C // () -> void
	mov r0, #0x10
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r0, #0
	strh r0, [r5,#0x20]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x40]
	mul r0, r1
	str r0, [r5,#0x40]
	bl sub_8019892
	tst r0, r0
	beq loc_80CF89C
	mov r1, #7
	mov r2, #5
	ldrb r3, [r5,#4]
	bl sub_8019FB4
	mov r0, #4
	bl sub_801A07C
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CF8B0
	b locret_80CF8A0
loc_80CF89C:
	bl object_freeMemory
locret_80CF8A0:
	pop {r7,pc}
	.balign 4, 0x00
off_80CF8A4: .word dword_80CF8A8
dword_80CF8A8: .word 0x3020100, 0x4
.endfunc // sub_80CF810

.func
.thumb_func
sub_80CF8B0:
	push {r4,lr}
	bl sub_801A00E
.endfunc // sub_80CF8B0

	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CF8EA
	ldr r2, [r5,#0x54]
	ldr r0, [r2,#0x70]
	ldr r1, dword_80CF8F4 // =0x3f800000 
	tst r0, r1
	beq loc_80CF8D2
	ldrb r0, [r5,#5]
	tst r0, r0
	beq loc_80CF8EA
	bl sub_801A074 // () -> void
loc_80CF8D2:
	ldrh r4, [r5,#0x12]
	bl sub_80CF8F8
	ldrh r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80CF8E4
	mov r0, #4
	bl sub_801A07C
loc_80CF8E4:
	bl sub_801A018
	b locret_80CF8F2
loc_80CF8EA:
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80CF8F2:
	pop {r4,pc}
dword_80CF8F4: .word 0x3F800000
.func
.thumb_func
sub_80CF8F8:
	push {lr}
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	ldr r2, [r5,#0x54]
	strb r0, [r2,#0xa]
	strb r1, [r2,#0xb]
	bl object_isValidPanel
	tst r0, r0
	bne locret_80CF91C
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80CF91C:
	pop {pc}
.endfunc // sub_80CF8F8

.func
.thumb_func
sub_80CF91E:
	push {r5,lr}
	push {r0-r2,r5}
	mov r0, #0x58 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CF932
	bl sub_801155A
locret_80CF932:
	pop {r5,pc}
dword_80CF934: .word 0xC801, 0xD00097, 0x64C801, 0xD00097, 0xFAC801, 0xD00097
	.word 0x164C802, 0xD100D9
.endfunc // sub_80CF91E

loc_80CF954:
	push {lr}
	ldr r1, off_80CF964 // =off_80CF968 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CF964: .word off_80CF968
off_80CF968: .word sub_80CF974+1
	.word sub_80CFA18+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CF974:
	push {r7,lr}
	ldr r7, off_80CFA14 // =dword_80CF934 
	ldrb r0, [r5,#4]
	mov r1, #8
	mul r0, r1
	add r7, r7, r0
	str r7, [r5,#0x60]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #0
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r1, #0xff
	strb r1, [r5,#0x11]
	mov r0, #0
	ldrb r1, [r5,#6]
	cmp r1, #3
	bne loc_80CF9A2
	ldrb r0, [r7]
loc_80CF9A2:
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CF974

	bl sprite_update
	bl sub_8002E3C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x12]
	strh r0, [r5,#0x14]
	mov r0, #0
	ldrb r1, [r5,#4]
	cmp r1, #3
	bcc loc_80CF9CA
	mov r0, #2
loc_80CF9CA:
	strb r0, [r5,#0xe]
	ldrb r0, [r7,#2]
	lsl r0, r0, #1
	bne loc_80CF9D4
	mov r0, #1
loc_80CF9D4:
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldrh r0, [r7,#6]
	strh r0, [r5,#0x28]
	ldr r0, dword_80CFA10 // =0x1770 
	strh r0, [r5,#0x20]
	bl sub_8019892
	tst r0, r0
	bne loc_80CF9EE
	bl object_freeMemory
	pop {r7,pc}
loc_80CF9EE:
	mov r1, #0xe
	mov r2, #0xf
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xa
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80CFA18
	pop {r7,pc}
dword_80CFA10: .word 0x1770
off_80CFA14: .word dword_80CF934
.func
.thumb_func
sub_80CFA18:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD9E
	bl sub_801A0D4
	bl sub_800F672
	ldr r0, off_80CFA44 // =off_80CFA48 
	bl sub_801B394
	bl sub_801BBAC
	bl sub_801A018
.endfunc // sub_80CFA18

	pop {pc}
	.balign 4, 0x00
off_80CFA44: .word off_80CFA48
off_80CFA48: .word sub_80CFA6C+1
	.word sub_80165B8+1
	.word sub_80CFB2C+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word loc_8017E26+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80CFB28+1
.func
.thumb_func
sub_80CFA6C:
	push {r7,lr}
	ldrb r0, [r5,#6]
	cmp r0, #2
	bne loc_80CFA7A
	bl sub_80CFAC0
	b locret_80CFABE
loc_80CFA7A:
	tst r0, r0
	bne loc_80CFA88
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80CFABE
loc_80CFA88:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x10
	ldr r3, dword_80CFBF8 // =0xf880080 
	bl object_checkPanelParameters
	tst r0, r0
	bne loc_80CFAA2
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r7,pc}
loc_80CFAA2:
	ldr r7, [r5,#0x60]
	ldrb r0, [r7]
	strb r0, [r5,#0x10]
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5]
	mov r1, #4
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80CFABE:
	pop {r7,pc}
.endfunc // sub_80CFA6C

.func
.thumb_func
sub_80CFAC0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CFADC
	ldr r1, [r5,#0x60]
	ldrb r0, [r1]
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x48]
	mov r0, #0xa0
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80CFADC:
	ldr r0, dword_80CFBFC // =0xffffc000 
	ldr r1, [r5,#0x48]
	add r1, r1, r0
	str r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bgt loc_80CFB1E
	bl object_isCurrentPanelSolid
	cmp r0, #0
	bne loc_80CFAFE
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b loc_80CFB1E
loc_80CFAFE:
	mov r0, #1
	mov r1, #0x14
	bl sub_80302A8
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0xc0
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80CFB1E:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	pop {pc}
.endfunc // sub_80CFAC0

.func
.thumb_func
sub_80CFB28:
	push {lr}
	pop {pc}
.endfunc // sub_80CFB28

.func
.thumb_func
sub_80CFB2C:
	push {r4,lr}
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
.endfunc // sub_80CFB2C

	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A180
	ldr r1, dword_80CFC00 // =0x8000 
	tst r0, r1
	beq loc_80CFB7A
	ldr r1, dword_80CFC04 // =0x300000 
	tst r0, r1
	beq loc_80CFB5A
	mov r0, #4
	bl sub_800F90E
	b loc_80CFBB6
loc_80CFB5A:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80CFBC2
	cmp r0, #1
	beq loc_80CFBB6
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80CFBB6
loc_80CFB7A:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r0, [r5,#0x60]
	ldrb r4, [r0,#3]
	push {r1-r4}
	mov r0, #0xf
	bl sub_801BDDE
	bl sub_80E47A4
	pop {r1-r4}
	mov r0, #0xf
	bl sub_801BDDE
	bl sub_80E47A4
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #2
	bl sub_80E05F6
	ldr r1, [r5,#0x60]
	ldrh r0, [r1,#4]
	bl sound_play // () -> void
loc_80CFBB6:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80CFBC2:
	pop {r4,pc}
.func
.thumb_func
sub_80CFBC4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x59 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CFBF4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0x16]
	str r6, [r0,#0x2c]
	mov r1, #0x10
	ldrb r2, [r0,#6]
	cmp r2, #3
	bne loc_80CFBE6
	mov r1, #0x14
loc_80CFBE6:
	ldrb r2, [r0]
	orr r2, r1
	strb r2, [r0]
	add r1, r3, #0
	ldrb r2, [r0,#5]
	bl sub_800F614
locret_80CFBF4:
	pop {pc}
	.balign 4, 0x00
dword_80CFBF8: .word 0xF880080
dword_80CFBFC: .word 0xFFFFC000
dword_80CFC00: .word 0x8000
dword_80CFC04: .word 0x300000
.endfunc // sub_80CFBC4

loc_80CFC08:
	push {lr}
	ldr r1, off_80CFC18 // =off_80CFC1C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CFC18: .word off_80CFC1C
off_80CFC1C: .word sub_80CFC28+1
	.word sub_80CFC5E+1
	.word sub_80CFC96+1
.func
.thumb_func
sub_80CFC28:
	push {lr}
	mov r0, #0x64 
	strh r0, [r5,#0x20]
	mov r0, #8
	strh r0, [r5,#0x22]
	bl sub_8019892
	tst r0, r0
	beq loc_80CFC58
	mov r1, #0x1b
	mov r2, #0
	mov r3, #0
	bl sub_8019FB4
	bl sub_801A074 // () -> void
	mov r0, #0xad
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CFC5E
	pop {pc}
loc_80CFC58:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80CFC28

.func
.thumb_func
sub_80CFC5E:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80CFC5E

	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne loc_80CFC74
	bl sub_80CFCA8
	mov r0, #8
	strh r0, [r5,#0x22]
loc_80CFC74:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80CFC90
	mov r0, #0x80
	bl sub_801A07C
	ldr r1, [r5,#0x60]
	tst r1, r1
	beq loc_80CFC8C
	mov r0, #0
	strb r0, [r1]
loc_80CFC8C:
	mov r0, #8
	str r0, [r5,#8]
loc_80CFC90:
	bl sub_801A018
	pop {pc}
.func
.thumb_func
sub_80CFC96:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80CFC96

	ldr r0, [r5,#0x54]
	bl sub_80198CE
	bl object_freeMemory
	pop {pc}
.func
.thumb_func
sub_80CFCA8:
	push {lr}
	bl change_20013F0_800151C // () -> int
	mov r1, #0x1f
	and r1, r0
	sub r1, #0x98
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	eor r2, r3
	tst r2, r2
	beq loc_80CFCC2
	add r1, #0x11
	add r1, #0xff
loc_80CFCC2:
	lsl r1, r1, #0x10
	lsr r0, r0, #0x19
	sub r0, #0x40 
	lsl r2, r0, #0x10
	mov r3, #0x28 
	lsl r3, r3, #0x10
	mov r4, #0
	bl sub_80E48F8
	pop {pc}
.endfunc // sub_80CFCA8

.func
.thumb_func
sub_80CFCD6:
	push {lr}
	push {r5}
	mov r0, #0x5a 
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80CFCF4
	str r7, [r0,#0x60]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80CFCF4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80CFCD6

loc_80CFCF8:
	push {lr}
	ldr r1, off_80CFD0C // =off_80CFD10 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80CFD0C: .word off_80CFD10
off_80CFD10: .word sub_80CFD1C+1
	.word sub_80CFD64+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CFD1C:
	push {r4,r6,r7,lr}
	mov r1, #0x14
	mov r2, #0x1a
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80CFD1C

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_800E29C // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0xed
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CFD64
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80CFD64:
	push {lr}
	ldr r1, off_80CFD74 // =off_80CFD78 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CFD74: .word off_80CFD78
off_80CFD78: .word sub_80CFD80+1
	.word sub_80CFDB0+1
.endfunc // sub_80CFD64

.func
.thumb_func
sub_80CFD80:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CFD90
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80CFD90:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80CFDA0
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80CFDA0:
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #3
	bcc locret_80CFDAE
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
locret_80CFDAE:
	pop {pc}
.endfunc // sub_80CFD80

.func
.thumb_func
sub_80CFDB0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80CFDE4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r6, [r5,#0x2c]
	ldrb r7, [r5,#5]
	ldr r4, dword_80CFEC0 // =0x4050101 
	bl sub_80C536A
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0x25 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80CFDE4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80CFDF0
	mov r0, #8
	str r0, [r5,#8]
locret_80CFDF0:
	pop {pc}
.endfunc // sub_80CFDB0

.func
.thumb_func
sub_80CFDF2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x5b 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80CFE06
	bl sub_801155A
locret_80CFE06:
	pop {pc}
.endfunc // sub_80CFDF2

.func
.thumb_func
sub_80CFE08:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	mov r7, #0
	str r2, [sp,#4]
	str r3, [sp,#8]
	str r4, [sp,#0xc]
	str r6, [sp,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp,#0x14]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	str r0, [sp]
	str r0, [sp,#0x18]
loc_80CFE24:
	ldr r0, [sp]
	ldrb r1, [r5,#0x13]
	bl object_isValidPanel
	beq loc_80CFE58
	ldr r0, [sp]
	ldr r1, [sp,#0x18]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	ldr r4, [sp,#0xc]
	ldr r6, [sp,#0x10]
	bl sub_80CFE5C
	tst r0, r0
	bne loc_80CFE58
	ldr r0, [sp]
	ldr r1, [sp,#0x14]
	add r0, r0, r1
	str r0, [sp]
	add r7, #1
	cmp r7, #3
	bge loc_80CFE24
	ldr r0, [sp,#0x18]
	add r0, r0, r1
	str r0, [sp,#0x18]
	b loc_80CFE24
loc_80CFE58:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
.endfunc // sub_80CFE08

.func
.thumb_func
sub_80CFE5C:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r1, [sp,#0x20]
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	str r4, [sp,#0x10]
	str r6, [sp,#0x14]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80CFEB4 // =off_80CFEB8 
	ldr r0, [r1,r0]
	str r0, [sp,#0x18]
	mov r0, #1
	str r0, [sp,#4]
	mov r0, #0
	str r0, [sp,#0x1c]
loc_80CFE7E:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl object_getPanelParameters
.endfunc // sub_80CFE5C

	ldr r1, [sp,#0x18]
	tst r0, r1
	beq loc_80CFEA2
	ldr r0, [sp,#0x20]
	ldr r1, [sp,#4]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	ldr r4, [sp,#0x10]
	ldr r6, [sp,#0x14]
	bl sub_80CFDF2
	ldr r0, [sp,#0x1c]
	add r0, #1
	str r0, [sp,#0x1c]
loc_80CFEA2:
	ldr r0, [sp,#4]
	add r0, #1
	str r0, [sp,#4]
	cmp r0, #3
	ble loc_80CFE7E
	ldr r0, [sp,#0x1c]
	add sp, sp, #0x24
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80CFEB4: .word off_80CFEB8
off_80CFEB8: .word LCDControl
	.word start_
dword_80CFEC0: .word 0x4050101
loc_80CFEC4:
	push {lr}
	ldr r1, off_80CFED4 // =off_80CFED8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80CFED4: .word off_80CFED8
off_80CFED8: .word sub_80CFEE4+1
	.word sub_80CFF62+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80CFEE4:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80CFF5C
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80CFF5C
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x2f 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r1, #0xff
	strb r1, [r5,#0x11]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r1, [r5,#0x38]
	push {r0}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r2, r0
	pop {r0}
	mov r1, #0xb4
	lsl r1, r1, #0x10
	str r1, [r5,#0x3c]
	mul r1, r2
	add r1, r1, r0
	str r1, [r5,#0x34]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	beq loc_80CFF5C
	mov r1, #0x1c
	mov r2, #5
	ldrb r3, [r5,#4]
	bl sub_8019FB4
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80CFF62
	b locret_80CFF60
loc_80CFF5C:
	bl object_freeMemory
locret_80CFF60:
	pop {pc}
.endfunc // sub_80CFEE4

.func
.thumb_func
sub_80CFF62:
	push {lr}
	bl sub_801A00E
aImO: .asciz "imo"
	.byte 0x42, 0x1, 0xD0
	.word 0xF880F74A, 0xF90BF73A, 0xD0044200, 0xF87AF74A, 0x72282008
	.word 0x4905E008, 0x58097A68, 0x470846FE, 0xFE0CF74B, 0xF840F74A
	.word 0xBD00
	.word off_80CFFA0
off_80CFFA0: .word sub_80CFFB0+1
	.word sub_80CFFBC+1
	.word sub_80D0026+1
	.word sub_80D0044+1
.endfunc // sub_80CFF62

.func
.thumb_func
sub_80CFFB0:
	push {lr}
	mov r0, #0xf
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#9]
	pop {pc}
.endfunc // sub_80CFFB0

.func
.thumb_func
sub_80CFFBC:
	push {r4,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	ldrh r0, [r5,#0x20]
	cmp r0, #7
	bne loc_80CFFE8
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #2
	bl sub_80E05F6
loc_80CFFE8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80D0010
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x97
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0x97
	bl sound_play // () -> void
	pop {r4,pc}
loc_80D0010:
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D009C // =0xc0000 
	ldr r2, [r5,#0x3c]
	sub r2, r2, r1
	str r2, [r5,#0x3c]
	mul r1, r0
	ldr r2, [r5,#0x34]
	add r2, r2, r1
	str r2, [r5,#0x34]
	pop {r4,pc}
.endfunc // sub_80CFFBC

.func
.thumb_func
sub_80D0026:
	push {lr}
	ldrh r0, [r5,#0x20]
	cmp r0, #0x1c
	bne loc_80D0032
	bl sub_801A074 // () -> void
loc_80D0032:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80D0042
	mov r0, #0x14
	str r0, [r5,#0x20]
	mov r0, #0xc
	strb r0, [r5,#9]
locret_80D0042:
	pop {pc}
.endfunc // sub_80D0026

.func
.thumb_func
sub_80D0044:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80D0054
	mov r0, #8
	str r0, [r5,#8]
	b locret_80D006C
loc_80D0054:
	mov r1, #2
	tst r0, r1
	beq loc_80D0064
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	b locret_80D006C
loc_80D0064:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
locret_80D006C:
	pop {pc}
.endfunc // sub_80D0044

.func
.thumb_func
sub_80D006E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x5c 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D008A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
locret_80D008A:
	pop {pc}
.endfunc // sub_80D006E

	push {lr}
	bl sub_80D006E
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	pop {pc}
dword_80D009C: .word 0xC0000
loc_80D00A0:
	push {lr}
	ldr r1, off_80D00B4 // =off_80D00B8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D00B4: .word off_80D00B8
off_80D00B8: .word sub_80D00C4+1
	.word loc_80D0132+1
	.word sub_80D01BC+1
.func
.thumb_func
sub_80D00C4:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0xe
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#5]
	ldr r1, off_80D012C // =loc_80D0130 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D00C4

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0
	strb r0, [r5,#6]
	ldrb r0, [r5,#5]
	tst r0, r0
	bne loc_80D011C
	mov r0, #1
	ldr r1, [r5,#0x38]
	sub r1, r1, r0
	str r1, [r5,#0x38]
	ldr r1, [r5,#0x3c]
	sub r1, r1, r0
	str r1, [r5,#0x3c]
loc_80D011C:
	mov r0, #4
	str r0, [r5,#8]
	b locret_80D012A
	bl sub_80D01FE
	bl object_freeMemory
locret_80D012A:
	pop {pc}
off_80D012C: .word loc_80D0130
loc_80D0130:
	sub r5, #0x3c 
loc_80D0132:
	push {r4,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D0158
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xa
	cmp r0, r1
	bne loc_80D0158
	bl battle_isTimeStop
	bne locret_80D015C
	ldr r1, off_80D0160 // =off_80D0164 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80D015C
loc_80D0158:
	mov r0, #8
	str r0, [r5,#8]
locret_80D015C:
	pop {r4,pc}
	.byte 0, 0
off_80D0160: .word off_80D0164
off_80D0164: .word sub_80D0168+1
.func
.thumb_func
sub_80D0168:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D017A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80D01BA
loc_80D017A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xf
	beq loc_80D0192
	cmp r0, #0xa
	beq loc_80D01AC
	cmp r0, #0
	bgt locret_80D01BA
	mov r0, #8
	str r0, [r5,#8]
	b locret_80D01BA
loc_80D0192:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80D01BA
	bl sub_80D020E
	ldr r0, [r5,#0x64]
	ldrb r0, [r0,#0x12]
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	bne locret_80D01BA
	mov r0, #1
	strb r0, [r5,#6]
	b locret_80D01BA
loc_80D01AC:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80D01BA
	mov r0, #0x81
	add r0, #0xff
	bl sound_play // () -> void
locret_80D01BA:
	pop {r4,pc}
.endfunc // sub_80D0168

.func
.thumb_func
sub_80D01BC:
	push {lr}
	bl sub_80D01FE
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D01BC

.func
.thumb_func
sub_80D01C8:
	push {lr}
	push {r3}
	push {r0-r2,r5}
	mov r0, #0x5d 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq loc_80D01FA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	pop {r3}
	str r3, [r0,#0x64]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	b locret_80D01FC
loc_80D01FA:
	pop {r3}
locret_80D01FC:
	pop {pc}
.endfunc // sub_80D01C8

.func
.thumb_func
sub_80D01FE:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne locret_80D020C
	mov r0, #0
	str r0, [r1]
locret_80D020C:
	pop {pc}
.endfunc // sub_80D01FE

.func
.thumb_func
sub_80D020E:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, dword_80D0228 // =0x4050604 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80D022C // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D0228: .word 0x4050604
dword_80D022C: .word 0x3
.endfunc // sub_80D020E

	push {r4,r6,lr}
	add r6, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x14
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	mov r3, #0x18
	lsl r3, r3, #0x10
	ldrb r0, [r5,#5]
	tst r0, r0
	bne loc_80D0250
	neg r3, r3
loc_80D0250:
	add r2, r2, r3
	ldr r3, [r5,#0x3c]
	ldr r4, off_80D0260 // =dword_80D0264 
	ldrb r4, [r4,r6]
	bl sub_80E05F6
	pop {r4,r6,pc}
	.byte 0, 0
off_80D0260: .word dword_80D0264
dword_80D0264: .word 0x1213
loc_80D0268:
	push {lr}
	ldr r1, off_80D027C // =off_80D0280 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D027C: .word off_80D0280
off_80D0280: .word sub_80D028C+1
	.word loc_80D02D6+1
	.word sub_80D035C+1
.func
.thumb_func
sub_80D028C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r1, #8
	mov r2, #0xe
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x3e 
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D028C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80D02D6:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D02FC
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	bne loc_80D02FC
	bl battle_isTimeStop
	bne locret_80D0300
	ldr r1, off_80D0304 // =off_80D0308 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80D0300
loc_80D02FC:
	mov r0, #8
	str r0, [r5,#8]
locret_80D0300:
	pop {pc}
	.balign 4, 0x00
off_80D0304: .word off_80D0308
off_80D0308: .word sub_80D0310+1
	.word sub_80D033C+1
.func
.thumb_func
sub_80D0310:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D032A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x47 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xb
	strh r0, [r5,#0x20]
	b locret_80D033A
loc_80D032A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D033A
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D033A:
	pop {pc}
.endfunc // sub_80D0310

.func
.thumb_func
sub_80D033C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D034E
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#4]
	sub r0, #0xa
	strh r0, [r5,#0x20]
loc_80D034E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D035A
	mov r0, #8
	str r0, [r5,#8]
locret_80D035A:
	pop {pc}
.endfunc // sub_80D033C

.func
.thumb_func
sub_80D035C:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
.endfunc // sub_80D035C

	bl sub_8016C8A
	pop {pc}
.func
.thumb_func
sub_80D036C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x5e 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D0390
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D0390:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80D036C

loc_80D0394:
	push {lr}
	ldr r1, off_80D03A8 // =off_80D03AC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D03A8: .word off_80D03AC
off_80D03AC: .word sub_80D03B8+1
	.word sub_80D0454+1
	.word sub_80D04D2+1
.func
.thumb_func
sub_80D03B8:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	ldrh r1, [r5,#0x3a]
	add r1, r1, r0
	strh r1, [r5,#0x3a]
	ldrh r1, [r5,#0x3e]
	add r1, r1, r0
	strh r1, [r5,#0x3e]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80D0440 // =dword_80D0444 
	ldr r1, [r2,r1]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r1, #8
	mov r2, #0xe
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x3f 
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D03B8

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D0420
	bl object_freeMemory
	b locret_80D043E
loc_80D0420:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A018
	mov r0, #0xb3
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
locret_80D043E:
	pop {pc}
off_80D0440: .word dword_80D0444
dword_80D0444: .word 0x60000, 0x68000, 0x70000, 0x78000
.func
.thumb_func
sub_80D0454:
	push {lr}
	bl sub_801A00E
	.hword 0xF749
	.word 0xF739FE3B, 0x4200FE96, 0x6D68D10E, 0x42006F00, 0xF739D10A
	.word 0xD104FE13, 0x7A684906, 0x46FE5809, 0xF7494708, 0xE003FDCB
	.word 0xFDF6F749, 0x60A82008, 0xBD00
	.word off_80D0494
off_80D0494: .word sub_80D0498+1
.endfunc // sub_80D0454

.func
.thumb_func
sub_80D0498:
	push {r4,r6,lr}
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	bne loc_80D04C8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	beq loc_80D04C8
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80D04D0
loc_80D04C8:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D04D0:
	pop {r4,r6,pc}
.endfunc // sub_80D0498

.func
.thumb_func
sub_80D04D2:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D04D2

.func
.thumb_func
sub_80D04DA:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x5f 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D04FE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D04FE:
	pop {pc}
.endfunc // sub_80D04DA

loc_80D0500:
	push {lr}
	ldr r1, off_80D0514 // =off_80D0518 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D0514: .word off_80D0518
off_80D0518: .word sub_80D0524+1
	.word loc_80D0566+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D0524:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x42 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D0524

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80D0566:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D0582
	bl battle_isTimeStop
	bne locret_80D0586
	ldr r1, off_80D0588 // =off_80D058C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80D0586
loc_80D0582:
	mov r0, #8
	strb r0, [r5,#8]
locret_80D0586:
	pop {pc}
off_80D0588: .word off_80D058C
off_80D058C: .word sub_80D0590+1
.func
.thumb_func
sub_80D0590:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D05A4
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0xc
	strh r0, [r5,#0x22]
loc_80D05A4:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	cmp r0, #0xc
	blt loc_80D05B6
	bl sub_80D05EC
	mov r0, #0
	strh r0, [r5,#0x22]
loc_80D05B6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D05C2
	mov r0, #8
	strb r0, [r5,#8]
locret_80D05C2:
	pop {pc}
.endfunc // sub_80D0590

.func
.thumb_func
sub_80D05C4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x60 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D05EA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D05EA:
	pop {pc}
.endfunc // sub_80D05C4

.func
.thumb_func
sub_80D05EC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D0604 // =0x1200ff01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80D0608 // =0x1 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D0604: .word 0x1200FF01
dword_80D0608: .word 0x1
	.byte 0, 0, 0, 0
.endfunc // sub_80D05EC

loc_80D0610:
	push {lr}
	ldr r1, off_80D0624 // =off_80D0628 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80D0624: .word off_80D0628
off_80D0628: .word sub_80D0634+1
	.word sub_80D072C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D0634:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80D06CE
	mov r1, #0xc
	mov r2, #0x1c
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq loc_80D065C
	cmp r0, #2
	beq loc_80D065C
	cmp r0, #3
	beq loc_80D065C
	cmp r0, #4
	beq loc_80D065C
	cmp r0, #5
	beq loc_80D065C
	mov r1, #0x10
	mov r2, #0x32 
loc_80D065C:
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80D069E
	cmp r0, #5
	beq loc_80D069E
	b loc_80D06B6
loc_80D069E:
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D07C0 // =0x80000 
	mul r1, r0
	ldr r2, [r5,#0x34]
	add r2, r2, r1
	ldrb r1, [r5,#7]
	ldr r3, dword_80D07C4 // =0x70000 
	mul r1, r3
	mul r1, r0
	sub r2, r2, r1
	str r2, [r5,#0x34]
loc_80D06B6:
	ldr r1, dword_80D07C8 // =0x20000 
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80D06D4
loc_80D06CE:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80D0634

loc_80D06D4:
	mov r3, #3
	ldrb r1, [r5,#4]
	cmp r1, #1
	bne loc_80D06DE
	mov r3, #1
loc_80D06DE:
	mov r1, #4
	mov r2, #5
	bl sub_8019FB4
	mov r0, #1
	ldrb r1, [r5,#4]
	cmp r1, #1
	bne loc_80D06F0
	mov r0, #3
loc_80D06F0:
	bl sub_801A140
	ldrb r0, [r5,#4]
	cmp r0, #1
	bne loc_80D0700
	mov r0, #0x12
	bl sub_801A258
loc_80D0700:
	bl sub_801A018
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq loc_80D0722
	cmp r0, #2
	beq loc_80D0722
	cmp r0, #3
	beq loc_80D0722
	cmp r0, #4
	beq loc_80D0722
	cmp r0, #5
	beq loc_80D0722
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
loc_80D0722:
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D072C
	pop {pc}
.func
.thumb_func
sub_80D072C:
	push {r7,lr}
	bl sub_801A00E
.endfunc // sub_80D072C

	bl sub_801A0D4
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	tst r0, r0
	beq loc_80D0742
	bl sub_801A074 // () -> void
loc_80D0742:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D075C
	bl sub_801A018
	bl sub_80D0766
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	pop {r7,pc}
loc_80D075C:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80D0766:
	push {lr}
	ldrb r0, [r5,#9]
	cmp r0, #0
	bne loc_80D0782
	ldrb r1, [r5,#4]
	ldr r0, off_80D0790 // =dword_80D0794 
	ldrb r1, [r0,r1]
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	cmp r0, r1
	beq loc_80D0782
	ldrb r0, [r5,#6]
	strh r0, [r5,#0x20]
	strb r0, [r5,#9]
loc_80D0782:
	ldrb r1, [r5,#6]
	ldrh r0, [r5,#0x20]
	cmp r0, r1
	bne locret_80D078E
	mov r0, #1
	strb r0, [r5,#0x10]
locret_80D078E:
	pop {pc}
off_80D0790: .word dword_80D0794
dword_80D0794: .word 0xA0E3C35, 0x40D, 0x0
.endfunc // sub_80D0766

.func
.thumb_func
sub_80D07A0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x61 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D07BE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
locret_80D07BE:
	pop {pc}
dword_80D07C0: .word 0x80000
dword_80D07C4: .word 0x70000
dword_80D07C8: .word 0x20000
.endfunc // sub_80D07A0

loc_80D07CC:
	push {lr}
	ldr r1, off_80D07EC // =off_80D07F0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80D07E4
	bl sub_801BCA6
	b locret_80D07E8
loc_80D07E4:
	bl sub_801BBF4
locret_80D07E8:
	pop {pc}
	.balign 4, 0x00
off_80D07EC: .word off_80D07F0
off_80D07F0: .word sub_80D07FC+1
	.word sub_80D0868+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D07FC:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x39 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D07FC

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D0846
	bl object_freeMemory
	b locret_80D0866
loc_80D0846:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #0
	strb r0, [r5,#5]
	mov r0, #4
	str r0, [r5,#8]
locret_80D0866:
	pop {pc}
.func
.thumb_func
sub_80D0868:
	push {lr}
	bl sub_801A00E
	.hword 0xF749
	.word 0xF739FC31, 0x4200FC8C, 0x6D6AD115, 0x7DA86F12, 0x490F0080
	.word 0x42105808, 0x7928D10D, 0xD1022800, 0xFC02F739, 0x4906D10B
	.word 0x58097A68, 0x470846FE, 0xFBBAF749, 0xF749E003, 0x2008FBE5
	.word 0xBD007228
	.word off_80D08B4
off_80D08B4: .word sub_80D08CC+1
	.word sub_80D0916+1
	.word sub_80D0952+1
	.word dword_80D08C4
dword_80D08C4: .word 0x5800000, 0xA800000
.endfunc // sub_80D0868

.func
.thumb_func
sub_80D08CC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D08EE
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80D0A5C
	mov r0, #0xb7
	bl sound_play // () -> void
	ldrb r0, [r5,#4]
	ldr r1, off_80D0910 // =byte_80D0914 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x20]
	strh r0, [r5,#0x22]
	b locret_80D090E
loc_80D08EE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ldrh r1, [r5,#0x22]
	sub r1, #0xa
	cmp r0, r1
	beq loc_80D090A
	cmp r0, #0
	bgt locret_80D090E
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80D090E
loc_80D090A:
	bl sub_80D0A5C
locret_80D090E:
	pop {pc}
off_80D0910: .word byte_80D0914
byte_80D0914: .byte 0x14, 0x28
.endfunc // sub_80D08CC

.func
.thumb_func
sub_80D0916:
	push {lr}
	bl sub_80D0A80
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D093A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#4]
	ldr r1, off_80D094C // =byte_80D0950 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x20]
	b locret_80D094A
loc_80D093A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D094A
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D094A:
	pop {pc}
off_80D094C: .word byte_80D0950
byte_80D0950: .byte 0xA, 0xF
.endfunc // sub_80D0916

.func
.thumb_func
sub_80D0952:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D096A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xb3
	bl sound_play // () -> void
	bl sub_80D09BE
	b locret_80D0994
loc_80D096A:
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80D0994
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
	b locret_80D0994
locret_80D0994:
	pop {r4,pc}
.endfunc // sub_80D0952

.func
.thumb_func
sub_80D0996:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x62 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D09BC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D09BC:
	pop {pc}
.endfunc // sub_80D0996

.func
.thumb_func
sub_80D09BE:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#5]
	tst r0, r0
	bne loc_80D09CC
	mov r0, #0
	str r0, [r5,#0x44]
	b loc_80D0A24
loc_80D09CC:
	mov r6, #0
loc_80D09CE:
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	add r0, r0, r4
	ldrb r1, [r5,#0x13]
	ldr r2, off_80D0A44 // =byte_80D0A48 
	ldrsb r7, [r2,r6]
	add r1, r1, r7
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #2
	ldr r3, off_80D0A38 // =off_80D0A3C 
	ldr r2, [r3,r2]
	mov r3, #0
	bl sub_800D0BC
	tst r0, r0
	bne loc_80D09FE
	add r6, #1
	cmp r6, #5
	blt loc_80D09CE
	mov r0, #0
	str r0, [r5,#0x44]
	b loc_80D0A24
loc_80D09FE:
	ldrb r1, [r5,#0x12]
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80D0A08
	neg r0, r0
loc_80D0A08:
	mov r1, #0x28 
	lsl r1, r1, #0x10
	mul r0, r1
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80D0A50 // =dword_80D0A54 
	ldr r1, [r2,r1]
	svc 6
	add r1, r0, #0
	mov r0, #0x18
	lsl r0, r0, #0x10
	mul r0, r7
	svc 6
	str r0, [r5,#0x44]
loc_80D0A24:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80D0A50 // =dword_80D0A54 
	ldr r1, [r2,r1]
	mul r0, r1
	str r0, [r5,#0x40]
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80D0A38: .word off_80D0A3C
off_80D0A3C: .word LCDControl
	.word start_
off_80D0A44: .word byte_80D0A48
byte_80D0A48: .byte 0x0
	.byte 0xFF, 0x1, 0xFE
	.word 0x2
off_80D0A50: .word dword_80D0A54
dword_80D0A54: .word 0x60000, 0xC0000
.endfunc // sub_80D09BE

.func
.thumb_func
sub_80D0A5C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne locret_80D0A76
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D0A78 // =0x405ff01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80D0A7C // =0x1 
	bl sub_80C536A
locret_80D0A76:
	pop {r4,r6,r7,pc}
dword_80D0A78: .word 0x405FF01
dword_80D0A7C: .word 0x1
.endfunc // sub_80D0A5C

.func
.thumb_func
sub_80D0A80:
	push {lr}
	ldrb r0, [r5,#4]
	tst r0, r0
	beq locret_80D0AA4
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80D0AA4
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x58]
	ldrh r0, [r0,#0x22]
	mov r1, #2
	tst r0, r1
	beq locret_80D0AA4
	mov r0, #1
	strb r0, [r5,#5]
	mov r0, #0x8b
	bl sound_play // () -> void
locret_80D0AA4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80D0A80

loc_80D0AA8:
	push {lr}
	ldr r1, off_80D0AB8 // =off_80D0ABC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D0AB8: .word off_80D0ABC
off_80D0ABC: .word sub_80D0AC8+1
	.word sub_80D0B0E+1
	.word sub_80D0C1C+1
.func
.thumb_func
sub_80D0AC8:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_8019892
	tst r0, r0
	beq loc_80D0B02
	mov r1, #0x31 
	mov r2, #0x41 
	mov r3, #0
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #0
	strh r0, [r5,#0x22]
	str r0, [r5,#0x64]
	mov r0, #0
	strb r0, [r5,#5]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D0B0E
	b locret_80D0B0C
loc_80D0B02:
	ldr r1, [r5,#0x60]
	mov r0, #0
	str r0, [r1]
	bl object_freeMemory
locret_80D0B0C:
	pop {pc}
.endfunc // sub_80D0AC8

.func
.thumb_func
sub_80D0B0E:
	push {lr}
	bl sub_801A00E
	.word 0xFADEF749, 0xFB39F739, 0xD10A4200, 0xFABAF739, 0x4908D104
	.word 0x58097A68, 0x470846FE, 0xFA72F749, 0xF749E006, 0x6E29FA9D
	.word 0x60082000, 0x72282008, 0xBD00
	.word off_80D0B4C
off_80D0B4C: .word sub_80D0B54+1
	.word sub_80D0BD4+1
.endfunc // sub_80D0B0E

.func
.thumb_func
sub_80D0B54:
	push {lr}
	ldrb r0, [r5,#5]
	tst r0, r0
	beq loc_80D0B60
	bl sub_80D0C5C
loc_80D0B60:
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D0B6E
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x2e 
	strh r0, [r5,#0x20]
loc_80D0B6E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D0B90
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x70]
	ldr r2, off_80D0BBC // =off_80D0BC0 
	ldrb r3, [r5,#0x16]
	lsl r3, r3, #2
	ldr r3, [r2,r3]
	tst r1, r3
	beq locret_80D0BB8
	bl sub_801A074 // () -> void
	mov r0, #1
	strb r0, [r5,#5]
	b locret_80D0BB8
loc_80D0B90:
	ldrb r0, [r5,#5]
	tst r0, r0
	beq loc_80D0BAA
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, off_80D0BC8 // =byte_80D0BCC 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80D0BB8
loc_80D0BAA:
	bl sub_801A074 // () -> void
	ldr r1, [r5,#0x60]
	mov r0, #0
	str r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80D0BB8:
	pop {pc}
	.balign 4, 0x00
off_80D0BBC: .word off_80D0BC0
off_80D0BC0: .word LCDControl
	.word start_
off_80D0BC8: .word byte_80D0BCC
byte_80D0BCC: .byte 0xB4, 0x0, 0xF0, 0x0, 0x2C, 0x1, 0x68, 0x1
.endfunc // sub_80D0B54

.func
.thumb_func
sub_80D0BD4:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r3, [r5,#0x68]
	ldrb r2, [r3,#0x12]
	ldrb r3, [r3,#0x13]
	cmp r0, r2
	bne loc_80D0C0C
	cmp r1, r3
	bne loc_80D0C0C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	blt loc_80D0C0C
	bl sub_80D0CE0
	bl sub_80D0C5C
	ldrh r0, [r5,#0x20]
	mov r1, #7
	and r0, r1
	tst r0, r0
	bne locret_80D0C1A
	bl sub_80D0CB4
	bl sub_80D0D28
	b locret_80D0C1A
loc_80D0C0C:
	bl sub_80D0C7C
	ldr r1, [r5,#0x60]
	mov r0, #0
	str r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80D0C1A:
	pop {pc}
.endfunc // sub_80D0BD4

.func
.thumb_func
sub_80D0C1C:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D0C1C

	push {lr}
	push {r3}
	push {r0-r2,r5}
	mov r0, #0x63 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq loc_80D0C58
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	mov r1, #0
	str r1, [r0,#0x2c]
	str r7, [r0,#0x68]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	pop {r3}
	str r3, [r0,#0x60]
	str r0, [r3]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	b locret_80D0C5A
loc_80D0C58:
	pop {r3}
locret_80D0C5A:
	pop {pc}
.func
.thumb_func
sub_80D0C5C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D0C74 // =0x3105ff01 
	mov r6, #0
	ldr r7, dword_80D0C78 // =0x4000 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D0C74: .word 0x3105FF01
dword_80D0C78: .word 0x4000
.endfunc // sub_80D0C5C

.func
.thumb_func
sub_80D0C7C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80D0CA0 // =dword_80D0CA4 
	ldr r7, [r1,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D0C9C // =0x3105ff01 
	ldrh r6, [r5,#0x2e]
	lsl r6, r6, #0x10
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D0C9C: .word 0x3105FF01
off_80D0CA0: .word dword_80D0CA4
dword_80D0CA4: .word 0x3, 0x1003, 0x2003, 0x3003
.endfunc // sub_80D0C7C

.func
.thumb_func
sub_80D0CB4:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#4]
	ldr r1, off_80D0CD8 // =byte_80D0CDC 
	ldrb r6, [r1,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D0CD0 // =0x3105ff01 
	ldr r7, dword_80D0CD4 // =0x0 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80D0CD0: .word 0x3105FF01
dword_80D0CD4: .word 0x0
off_80D0CD8: .word byte_80D0CDC
byte_80D0CDC: .byte 0x2, 0x4, 0x8, 0x10
.endfunc // sub_80D0CB4

.func
.thumb_func
sub_80D0CE0:
	push {lr}
	ldr r1, [r5,#0x68]
	ldr r0, [r1,#0x58]
	ldrh r0, [r0,#0x24]
	mov r1, #0x40 
	tst r0, r1
	bne loc_80D0D00
	mov r1, #0x80
	tst r0, r1
	bne loc_80D0D00
	mov r1, #0x20 
	tst r0, r1
	bne loc_80D0D00
	mov r1, #0x10
	tst r0, r1
	beq loc_80D0D06
loc_80D0D00:
	ldr r0, [r5,#0x64]
	add r0, #1
	str r0, [r5,#0x64]
loc_80D0D06:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	cmp r0, #0x1e
	blt locret_80D0D26
	ldr r0, [r5,#0x64]
	cmp r0, #3
	blt loc_80D0D20
	ldrh r0, [r5,#0x20]
	cmp r0, #0x14
	ble locret_80D0D26
	sub r0, #0x14
	strh r0, [r5,#0x20]
loc_80D0D20:
	mov r0, #0
	strh r0, [r5,#0x22]
	str r0, [r5,#0x64]
locret_80D0D26:
	pop {pc}
.endfunc // sub_80D0CE0

.func
.thumb_func
sub_80D0D28:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r6, r0, #0
	add r7, r1, #0
	bl sub_8001532
	add r2, r0, #0
	mov r1, #0x1f
	and r0, r1
	lsl r0, r0, #0x10
	lsr r2, r2, #1
	bcs loc_80D0D48
	neg r0, r0
loc_80D0D48:
	add r1, r6, r0
	add r2, r7, #0
	push {r1,r2}
	bl sub_8001532
	add r2, r0, #0
	mov r1, #0xf
	and r0, r1
	lsl r0, r0, #0x10
	lsr r2, r2, #1
	bcs loc_80D0D60
	neg r0, r0
loc_80D0D60:
	mov r3, #0x14
	lsl r3, r3, #0x10
	add r3, r3, r0
	pop {r1,r2}
	ldr r4, dword_80D0D78 // =0x100000 
	add r2, r2, r4
	add r3, r3, r4
	mov r4, #0x21 
	bl sub_80E05F6
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D0D78: .word 0x100000
.endfunc // sub_80D0D28

loc_80D0D7C:
	push {lr}
	ldr r1, off_80D0D9C // =off_80D0DA0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80D0D94
	bl sub_801BCA6
	b locret_80D0D98
loc_80D0D94:
	bl sub_801BBF4
locret_80D0D98:
	pop {pc}
	.balign 4, 0x00
off_80D0D9C: .word off_80D0DA0
off_80D0DA0: .word sub_80D0DAC+1
	.word sub_80D0E14+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D0DAC:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	mov r1, #0x14
	mov r2, #0x14
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D0DAC

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D0DF6
	bl object_freeMemory
	b locret_80D0E12
loc_80D0DF6:
	mov r1, #0xa
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #3
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80D0E12:
	pop {pc}
.func
.thumb_func
sub_80D0E14:
	push {lr}
	bl sub_801A00E
	.hword 0xF749
	.word 0xF739F95B, 0x4200F9B6, 0x6D68D113, 0x42006F00, 0xF749D001
	.word 0x7928F921, 0xD1022800, 0xF92EF739, 0x4906D10B, 0x58097A68
	.word 0x470846FE, 0xF8E6F749, 0xF749E003, 0x2008F911, 0xBD0060A8
	.word off_80D0E5C
off_80D0E5C: .word sub_80D0E64+1
	.word sub_80D0E9E+1
.endfunc // sub_80D0E14

.func
.thumb_func
sub_80D0E64:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D0E7A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80D0E9C
loc_80D0E7A:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80D0E8C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
loc_80D0E8C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D0E9C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D0E9C:
	pop {pc}
.endfunc // sub_80D0E64

.func
.thumb_func
sub_80D0E9E:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D0EE2
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0x2f 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0x14
	strh r0, [r5,#0x22]
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80D0ED6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
loc_80D0ED6:
	ldrb r0, [r5,#4]
	cmp r0, #2
	bne locret_80D0F0A
	bl sub_80D0F32
	b locret_80D0F0A
loc_80D0EE2:
	ldr r1, [r5,#0x54]
	ldr r0, [r1,#0x70]
	tst r0, r0
	beq loc_80D0EEE
	bl sub_801A074 // () -> void
loc_80D0EEE:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80D0EFA
	bl sub_801A074 // () -> void
loc_80D0EFA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D0F0A
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D0F0A:
	pop {pc}
.endfunc // sub_80D0E9E

.func
.thumb_func
sub_80D0F0C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x64 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D0F30
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D0F30:
	pop {pc}
.endfunc // sub_80D0F0C

.func
.thumb_func
sub_80D0F32:
	push {r4,r6,r7,lr}
	mov r6, #0
loc_80D0F36:
	add r0, r6, #0
	lsl r0, r0, #1
	ldr r1, off_80D0F70 // =byte_80D0F74 
	add r1, r1, r0
	mov r2, #0
	ldrsb r2, [r1,r2]
	ldrb r0, [r5,#0x12]
	add r0, r0, r2
	mov r2, #1
	ldrsb r2, [r1,r2]
	ldrb r1, [r5,#0x13]
	add r1, r1, r2
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D0F68 // =0xa050301 
	push {r6}
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80D0F6C // =0x1201 
	bl sub_80C53A6
	pop {r6}
	add r6, #1
	cmp r6, #8
	blt loc_80D0F36
	pop {r4,r6,r7,pc}
dword_80D0F68: .word 0xA050301
dword_80D0F6C: .word 0x1201
off_80D0F70: .word byte_80D0F74
byte_80D0F74: .byte 0xFF
byte_80D0F75: .byte 0xFF
	.hword 0xFF
dword_80D0F78: .word 0xFF0001FF, 0xFF010100, 0x1010001, 0x10001, 0x10001
.endfunc // sub_80D0F32

loc_80D0F8C:
	push {lr}
	ldr r1, off_80D0FA0 // =off_80D0FA4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80D0FA0: .word off_80D0FA4
off_80D0FA4: .word sub_80D0FB0+1
	.word sub_80D102E+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D0FB0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0xff
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
.endfunc // sub_80D0FB0

	mov r1, #0x10
	mov r2, #0x4b 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D1004
	bl object_freeMemory
	b locret_80D102C
loc_80D1004:
	mov r1, #0xc
	mov r2, #0xd
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, off_80D1214 // =dword_80D0F78+12 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #4
	str r0, [r5,#8]
locret_80D102C:
	pop {pc}
.func
.thumb_func
sub_80D102E:
	push {lr}
	bl sub_801A00E
	.word 0xF84EF749, 0xF8A9F739, 0xD1134200, 0xF7402000, 0x4200FA92
	.word 0x6D68DB0E, 0x42006F00, 0xF739D10A, 0xD104F821, 0x7A684909
	.word 0x46FE5809, 0xF7484708, 0xE009FFD9, 0x7CE97CA8, 0xFD6BF74A
	.word 0xF8C4F000, 0xFFFEF748, 0x72282008, 0xBD00
	.word off_80D1084
off_80D1084: .word sub_80D1094+1
	.word sub_80D10B8+1
	.word sub_80D1106+1
	.word sub_80D1136+1
.endfunc // sub_80D102E

.func
.thumb_func
sub_80D1094:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D10A6
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	b locret_80D10B6
loc_80D10A6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D10B6
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D10B6:
	pop {pc}
.endfunc // sub_80D1094

.func
.thumb_func
sub_80D10B8:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D10E8
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_8002E3C
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x58 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xa
	strh r0, [r5,#0x20]
	b locret_80D1104
loc_80D10E8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xd
	beq loc_80D1100
	cmp r0, #0
	bge locret_80D1104
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80D1104
loc_80D1100:
	mov r0, #1
	strb r0, [r5,#0x10]
locret_80D1104:
	pop {pc}
.endfunc // sub_80D10B8

.func
.thumb_func
sub_80D1106:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D1124
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #2
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	mov r0, #0xc
	strh r0, [r5,#0x20]
	b locret_80D1134
loc_80D1124:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D1134
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D1134:
	pop {pc}
.endfunc // sub_80D1106

.func
.thumb_func
sub_80D1136:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D114C
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	bl sub_80D11B4
	b locret_80D1180
loc_80D114C:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80D1168
	bl sub_801A074 // () -> void
loc_80D1168:
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	bne loc_80D1178
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D1180
loc_80D1178:
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80D1180:
	pop {r4,pc}
.endfunc // sub_80D1136

.func
.thumb_func
sub_80D1182:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x65 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D11B2
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	push {r5}
	add r5, r0, #0
	bl sub_80D0FB0
	pop {r5}
locret_80D11B2:
	pop {pc}
.endfunc // sub_80D1182

.func
.thumb_func
sub_80D11B4:
	push {lr}
	bl sub_800E2C0
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80D11E8 // =dword_80D11EC 
	ldr r1, [r2,r1]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #7
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80D11D0
	mov r0, #0
loc_80D11D0:
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	cmp r0, #0
	bge loc_80D11DA
	neg r0, r0
loc_80D11DA:
	mov r2, #0x28 
	lsl r2, r2, #0x10
	mul r0, r2
	svc 6
	strh r0, [r5,#0x20]
	pop {pc}
	.balign 4, 0x00
off_80D11E8: .word dword_80D11EC
dword_80D11EC: .word 0x30000, 0x38000, 0x40000, 0x40000, 0x6B69B510, 0x23106BAA
	.word 0x2402041B, 0x4002001, 0xF00F4304, 0xBD10F9F2
off_80D1214: .word dword_80D0F78+0xC
.endfunc // sub_80D11B4

loc_80D1218:
	push {lr}
	ldr r1, off_80D122C // =off_80D1230 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D122C: .word off_80D1230
off_80D1230: .word sub_80D124E+1
	.word sub_80D12CA+1
	.word sub_80D123C+1
.func
.thumb_func
sub_80D123C:
	push {lr}
	ldr r0, [r5,#0x4c]
	cmp r0, #0
	beq loc_80D1248
	mov r1, #0
	str r1, [r0]
loc_80D1248:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D123C

.func
.thumb_func
sub_80D124E:
	push {r4,lr}
	bl sub_800E29C // () -> void
	ldr r0, dword_80D14F8 // =0x1034 
	ldr r1, dword_80D14FC // =0xc0d0100 
	bl sub_8011504
.endfunc // sub_80D124E

	tst r0, r0
	bne loc_80D1282
	ldr r0, [r5,#0x4c]
	cmp r0, #0
	beq loc_80D126A
	mov r1, #0
	str r1, [r0]
loc_80D126A:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl object_freeMemory
	pop {r4,pc}
loc_80D1282:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r1, [r5,#4]
	cmp r1, #0
	beq loc_80D1292
	mov r1, #1
loc_80D1292:
	strb r1, [r5,#4]
	lsl r0, r1, #1
	add r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0xff
	bl sub_801A140
	ldrb r0, [r5,#6]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	str r0, [r5,#0x68]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_801A074 // () -> void
	bl sub_801A018
	bl sub_80D149E
	ldr r0, [r5,#0x4c]
	cmp r0, #0
	beq loc_80D12C4
	mov r1, #2
	str r1, [r0]
loc_80D12C4:
	mov r0, #4
	strb r0, [r5,#8]
	pop {r4,pc}
.func
.thumb_func
sub_80D12CA:
	push {r4,r7,lr}
	bl sub_801A00E
	.word 0xFF00F748, 0xFF5BF738, 0xD1404200, 0xF8C5F000, 0xD03C2800
	.word 0x280C7A68, 0x2000D015, 0xF93DF740, 0xD1193001, 0x230C7928
	.word 0x33104343, 0x6B69041B, 0x24006BAA, 0xF977F00F, 0xF72F2070
	.word 0xF748F95F, 0x2014FEB1, 0x78288428, 0x43882102, 0x200C7028
	.word 0x20007268, 0xE00F8168, 0x6F386D6F, 0x42084974, 0x8CA8D115
	.word 0x66A86EA9, 0xD0054288, 0x84287968, 0x72682008, 0x81682000
	.word 0xFEA6F738, 0x490CD104, 0x58097A68, 0x470846FE, 0xFE5EF748
	.word 0x2034BD90, 0xC80E1940, 0x4242410, 0x2414191B, 0xF943F00F
	.word 0xF72F2070, 0xF748F92B, 0x2008FE7D, 0xBD9060A8
	.word off_80D1384
off_80D1384: .word sub_80D1394+1
	.word sub_80D13F6+1
	.byte 0x1B
	.byte 0x14
	.byte 0xD
	.byte  8
	.byte 0x2D 
	.byte 0x14
	.byte 0xD
	.byte  8
.endfunc // sub_80D12CA

.func
.thumb_func
sub_80D1394:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrb r2, [r5,#7]
	cmp r2, #0
	beq loc_80D13BA
	ldr r0, dword_80D1504 // =0xffff8000 
	add r0, r1, r0
	str r0, [r5,#0x48]
loc_80D13BA:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80D13F4
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r1, [r5,#4]
	mov r0, #1
	cmp r1, #0
	beq loc_80D13D8
	mov r0, #0x18
loc_80D13D8:
	bl sub_801A07C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldrb r0, [r5,#7]
	cmp r0, #0
	beq locret_80D13F4
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D1508 // =0x30000 
	mul r0, r1
	str r0, [r5,#0x40]
locret_80D13F4:
	pop {pc}
.endfunc // sub_80D1394

.func
.thumb_func
sub_80D13F6:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80D1418
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D1418:
	pop {pc}
.endfunc // sub_80D13F6

	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80D142A
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D142A:
	mov pc, lr
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80D1440
	mov r0, #8
	str r0, [r5,#8]
locret_80D1440:
	mov pc, lr
.func
.thumb_func
sub_80D1442:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x66 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D1468
	strb r3, [r0,#0xe]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x4c]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D1468:
	pop {pc}
.endfunc // sub_80D1442

.func
.thumb_func
sub_80D146A:
	push {r4,lr}
	ldr r0, [r5,#0x54]
	ldrb r0, [r0,#1]
	cmp r0, #0
	bne loc_80D1478
	mov r0, #1
	b locret_80D149C
loc_80D1478:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	and r0, r1
	ldrb r1, [r5,#4]
	cmp r1, #0
	beq locret_80D149C
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	sub r1, #1
	bl object_getPanelParameters
	mov r1, #0x10
	and r0, r1
	orr r0, r4
locret_80D149C:
	pop {r4,pc}
.endfunc // sub_80D146A

.func
.thumb_func
sub_80D149E:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#7]
	cmp r0, #0
	beq loc_80D14D2
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80D1504 // =0xffff8000 
	mov r4, #0xd
	strh r4, [r5,#0x22]
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	b locret_80D14F6
loc_80D14D2:
	mov r0, #0
	str r0, [r5,#0x44]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D150C // =0x1c000 
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r1, dword_80D1510 // =0xfffe0000 
	str r1, [r5,#0x48]
	neg r1, r1
	ldr r0, [r5,#0x3c]
	svc 6
	strh r0, [r5,#0x22]
	ldr r1, [r5,#0x40]
	mul r0, r1
	ldr r1, [r5,#0x34]
	sub r0, r1, r0
	str r0, [r5,#0x34]
locret_80D14F6:
	pop {r4,r6,r7,pc}
dword_80D14F8: .word 0x1034
dword_80D14FC: .word 0xC0D0100
	.word 0xF800000
dword_80D1504: .word 0xFFFF8000
dword_80D1508: .word 0x30000
dword_80D150C: .word 0x1C000
dword_80D1510: .word 0xFFFE0000
.endfunc // sub_80D149E

loc_80D1514:
	push {lr}
	ldr r1, off_80D1528 // =off_80D152C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D1528: .word off_80D152C
off_80D152C: .word sub_80D1538+1
	.word loc_80D15A4+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D1538:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r1, #0x10
	mov r2, #0x4a 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D1538

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80D1590 // =dword_80D1594 
	ldr r0, [r1,r0]
	str r0, [r5,#0x64]
	mov r0, #0
	str r0, [r5,#0x60]
	mov r0, #0
	strb r0, [r5,#5]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
	.byte 0, 0
off_80D1590: .word dword_80D1594
dword_80D1594: .word 0x50000, 0x60000, 0x70000, 0x80000
loc_80D15A4:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D15CA
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	bne loc_80D15CA
	bl battle_isTimeStop
	bne locret_80D15D4
	ldr r1, off_80D15D8 // =off_80D15DC 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80D15D4
loc_80D15CA:
	ldr r1, [r5,#0x68]
	mov r0, #0
	str r0, [r1]
	mov r0, #8
	strb r0, [r5,#8]
locret_80D15D4:
	pop {pc}
	.balign 4, 0x00
off_80D15D8: .word off_80D15DC
off_80D15DC: .word sub_80D15E4+1
	.word sub_80D1610+1
.func
.thumb_func
sub_80D15E4:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D15F6
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #5
	strh r0, [r5,#0x20]
	b loc_80D1606
loc_80D15F6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80D1606
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80D1606:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	pop {pc}
.endfunc // sub_80D15E4

.func
.thumb_func
sub_80D1610:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D162A
	mov r1, #4
	strb r1, [r5,#0xa]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x64]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0
	str r0, [r5,#0x44]
loc_80D162A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r6, [r5,#0x60]
	lsr r6, r6, #1
	bcs loc_80D163C
	add r4, r0, #0
	b loc_80D163E
loc_80D163C:
	add r4, r1, #0
loc_80D163E:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r2, [r5,#0x44]
	ldr r3, [r5,#0x38]
	add r2, r2, r3
	str r2, [r5,#0x38]
	ldr r6, [r5,#0x60]
	lsr r6, r6, #1
	bcs loc_80D165A
	add r6, r1, #0
	add r3, r0, #0
	b loc_80D165E
loc_80D165A:
	add r6, r3, #0
	add r3, r2, #0
loc_80D165E:
	cmp r4, r6
	beq loc_80D1678
	add r0, r3, #0
	add r1, r6, #0
	add r2, r4, #0
	bl sub_800E708
	cmp r0, #0
	beq loc_80D1678
	bl sub_800E29C // () -> void
	bl sub_80D172C
loc_80D1678:
	bl sub_800E2AC
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	ldrb r0, [r5,#5]
	tst r0, r0
	bne loc_80D1692
	bl sub_80D1700
	tst r0, r0
	bne loc_80D169C
loc_80D1692:
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80D16D4
	b loc_80D16CA
loc_80D169C:
	bl sub_80D1784
	mov r0, #0xbd
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	lsl r3, r3, #0x10
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #8
	mov r4, #8
	orr r4, r0
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_80E3FB4
	pop {r5}
	b locret_80D16D4
loc_80D16CA:
	ldr r1, [r5,#0x68]
	mov r0, #0
	str r0, [r1]
	mov r0, #8
	strb r0, [r5,#8]
locret_80D16D4:
	pop {r4,r6,pc}
.endfunc // sub_80D1610

.func
.thumb_func
sub_80D16D6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x67 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D16FE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x68]
	str r0, [r6]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D16FE:
	pop {pc}
.endfunc // sub_80D16D6

.func
.thumb_func
sub_80D1700:
	push {r4,lr}
	mov r4, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80D1700

	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80D1720 // =off_80D1724 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80D171C
	mov r4, #1
	strb r4, [r5,#5]
loc_80D171C:
	add r0, r4, #0
	pop {r4,pc}
off_80D1720: .word off_80D1724
off_80D1724: .word LCDControl
	.word start_
.func
.thumb_func
sub_80D172C:
	push {r4,r6,lr}
	ldr r0, [r5,#0x60]
	cmp r0, #2
	bge locret_80D176C
	lsl r0, r0, #2
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	add r0, r0, r1
	ldr r6, off_80D1770 // =byte_80D1774 
	add r6, r6, r0
	mov r0, #0
	ldrb r0, [r6,r0]
	mov r1, #1
	ldrb r1, [r6,r1]
	mov r2, #2
	ldrsb r4, [r6,r2]
	mov r3, #3
	ldrsb r6, [r6,r3]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r0, r2
	bne locret_80D176C
	cmp r1, r3
	bne locret_80D176C
	ldr r0, [r5,#0x64]
	mul r4, r0
	mul r6, r0
	str r4, [r5,#0x40]
	str r6, [r5,#0x44]
	ldr r0, [r5,#0x60]
	add r0, #1
	str r0, [r5,#0x60]
locret_80D176C:
	pop {r4,r6,pc}
	.byte 0, 0
off_80D1770: .word byte_80D1774
byte_80D1774: .byte 0x6, 0x1, 0x0, 0x1, 0x6, 0x3, 0xFF, 0x0, 0x1, 0x1, 0x0, 0x1, 0x1, 0x3, 0x1, 0x0
.endfunc // sub_80D172C

.func
.thumb_func
sub_80D1784:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D179C // =0x405ff01 
	mov r6, #0
	ldr r7, dword_80D17A0 // =0x1000 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D179C: .word 0x405FF01
dword_80D17A0: .word 0x1000
.endfunc // sub_80D1784

loc_80D17A4:
	push {lr}
	ldr r1, off_80D17B8 // =off_80D17BC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D17B8: .word off_80D17BC
off_80D17BC: .word sub_80D17C8+1
	.word sub_80D1860+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D17C8:
	push {lr}
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#4]
	ldr r1, off_80D1850 // =dword_80D1854 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x3e]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r1, #8
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r1, #0x10
	mov r2, #0x51 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	ldr r1, off_80D1858 // =byte_80D185C 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D17C8

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D182C
	bl object_freeMemory
	b locret_80D184E
loc_80D182C:
	mov r1, #0x16
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #0x10
	bl sub_801A258
	mov r0, #3
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
locret_80D184E:
	pop {pc}
off_80D1850: .word dword_80D1854
dword_80D1854: .word 0x2D2823
off_80D1858: .word byte_80D185C
byte_80D185C: .byte 0x1, 0x0, 0x2, 0x0
.func
.thumb_func
sub_80D1860:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80D1860

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D18A4
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80D187E
	bl sub_801A074 // () -> void
loc_80D187E:
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	bne loc_80D18A4
	bl battle_isTimeStop
	bne loc_80D189E
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D18A4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
loc_80D189E:
	bl sub_801A018
	b locret_80D18AC
loc_80D18A4:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D18AC:
	pop {pc}
.func
.thumb_func
sub_80D18AE:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x68 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D18D4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D18D4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80D18AE

loc_80D18D8:
	push {lr}
	ldr r1, off_80D18E8 // =off_80D18EC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D18E8: .word off_80D18EC
off_80D18EC: .word sub_80D18F8+1
	.word sub_80D1934+1
	.word sub_80D19C0+1
.func
.thumb_func
sub_80D18F8:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	bl sub_8019892
	tst r0, r0
	bne loc_80D191A
	bl object_freeMemory
	b locret_80D1932
loc_80D191A:
	ldr r1, [r5,#0x60]
	ldr r2, [r5,#0x64]
	ldrb r3, [r5,#4]
	bl sub_8019FB4
	ldrb r0, [r5,#5]
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80D1932:
	pop {r4,pc}
.endfunc // sub_80D18F8

.func
.thumb_func
sub_80D1934:
	push {r4,r6,r7,lr}
	bl sub_801A00E
.endfunc // sub_80D1934

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D19A8
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldr r1, [r5,#0x68]
	cmp r0, r1
	bne loc_80D19A8
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80D19B4 // =dword_80D19B8 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80D196A
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80D19A8
	bl sub_801A074 // () -> void
loc_80D196A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80D19A8
	ldrb r4, [r5,#0x12]
	ldrb r6, [r5,#0x13]
	ldr r7, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r7
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	bne loc_80D199C
	ldrb r0, [r5,#0x13]
	cmp r0, r6
	beq loc_80D19A2
loc_80D199C:
	mov r0, #1
	bl sub_801A07C
loc_80D19A2:
	bl sub_801A018
	b locret_80D19B0
loc_80D19A8:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D19B0:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80D19B4: .word dword_80D19B8
dword_80D19B8: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80D19C0:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80D19C0

	bl sub_801A0D4
	bl sub_801A074 // () -> void
	bl sub_8016C8A
	pop {pc}
.func
.thumb_func
sub_80D19D4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x69 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D19FE
	str r1, [r0,#0x60]
	str r2, [r0,#0x64]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r5, [r0,#0x4c]
	ldrb r2, [r5,#9]
	str r2, [r0,#0x68]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D19FE:
	pop {pc}
.endfunc // sub_80D19D4

.func
.thumb_func
sub_80D1A00:
	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
	.balign 4, 0x00
.endfunc // sub_80D1A00

loc_80D1A08:
	push {lr}
	ldr r1, off_80D1A18 // =off_80D1A1C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D1A18: .word off_80D1A1C
off_80D1A1C: .word sub_80D1A28+1
	.word sub_80D1A64+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D1A28:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0x30 
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	bl sub_8019892
	tst r0, r0
	bne loc_80D1A42
	bl object_freeMemory
	b locret_80D1A62
loc_80D1A42:
	ldrb r1, [r5,#5]
	ldrb r2, [r5,#6]
	mov r3, #3
	bl sub_8019FB4
	ldrb r0, [r5,#7]
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D1A64
locret_80D1A62:
	pop {pc}
.endfunc // sub_80D1A28

.func
.thumb_func
sub_80D1A64:
	push {lr}
	bl sub_801A00E
	.hword 0xF748
	.word 0xF738FB49, 0x4200FB8E, 0x6D68D110, 0x42006F00, 0xF748D001
	.word 0xF738FAF9, 0xD104FB09, 0x7A684906, 0x46FE5809, 0xF7484708
	.word 0xE003FAC1, 0xFAECF748, 0x60A82008, 0xBD00
	.word off_80D1AA8
off_80D1AA8: .word sub_80D1AB0+1
	.word sub_80D1AD2+1
.endfunc // sub_80D1A64

.func
.thumb_func
sub_80D1AB0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D1AC0
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
loc_80D1AC0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D1AD0
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D1AD0:
	pop {pc}
.endfunc // sub_80D1AB0

.func
.thumb_func
sub_80D1AD2:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D1B10
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	bl sub_801A07C
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x34 
	add r4, r4, r0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	bl sub_80E05F6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_breakPanel_dup3
	mov r0, #0xf
	sub r0, #5
	strh r0, [r5,#0x20]
	b locret_80D1B20
loc_80D1B10:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D1B20
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D1B20:
	pop {r4,pc}
.endfunc // sub_80D1AD2

.func
.thumb_func
sub_80D1B22:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x6a 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D1B46
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D1B46:
	pop {pc}
.endfunc // sub_80D1B22

loc_80D1B48:
	push {lr}
	ldr r1, off_80D1B58 // =off_80D1B5C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D1B58: .word off_80D1B5C
off_80D1B5C: .word sub_80D1B68+1
	.word sub_80D1B9A+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D1B68:
	push {lr}
	bl sub_8019892
	tst r0, r0
	bne loc_80D1B78
	bl object_freeMemory
	b locret_80D1B98
loc_80D1B78:
	mov r1, #0
	mov r2, #0x18
	mov r3, #0
	bl sub_8019FB4
	mov r1, #0
	strb r1, [r5,#0xe]
	mov r0, #2
	bl sub_801A07C
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D1B9A
locret_80D1B98:
	pop {pc}
.endfunc // sub_80D1B68

.func
.thumb_func
sub_80D1B9A:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80D1B9A

	ldrb r0, [r5,#4]
	sub r0, #1
	strb r0, [r5,#4]
	beq loc_80D1BD8
	ldr r3, [r5,#0x54]
	ldr r0, [r3,#0x70]
	tst r0, r0
	beq loc_80D1BCA
	ldr r2, off_80D1BE4 // =dword_80D1BE8 
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80D1BCA
	ldr r1, dword_80D1BF0 // =0x4000 
	tst r0, r1
	bne loc_80D1BCA
	mov r0, #1
	ldr r3, [r5,#0x4c]
	strb r0, [r3]
	b loc_80D1BD8
loc_80D1BCA:
	bl battle_isBattleOver
	tst r0, r0
	bne locret_80D1BE0
	bl sub_801A018
	b locret_80D1BE0
loc_80D1BD8:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D1BE0:
	pop {pc}
	.balign 4, 0x00
off_80D1BE4: .word dword_80D1BE8
dword_80D1BE8: .word 0x50000000, 0xA0000000
dword_80D1BF0: .word 0x4000
.func
.thumb_func
sub_80D1BF4:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x6b 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80D1C10
	str r1, [r0,#0x4c]
	strb r2, [r0,#4]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrh r3, [r5,#0x12]
	strh r3, [r0,#0x12]
locret_80D1C10:
	pop {pc}
	.word 0, 0, 0
	.byte 0, 0
.endfunc // sub_80D1BF4

loc_80D1C20:
	push {lr}
	ldr r1, off_80D1C34 // =off_80D1C38 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D1C34: .word off_80D1C38
off_80D1C38: .word sub_80D1C5A+1
	.word sub_80D1D14+1
	.word sub_80D1C44+1
.func
.thumb_func
sub_80D1C44:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldr r1, [r0]
	sub r1, #1
	str r1, [r0]
	ldr r0, [r5,#0x68]
	mov r1, #0
	str r1, [r0]
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D1C44

.func
.thumb_func
sub_80D1C5A:
	push {r4,lr}
	bl sub_800E29C // () -> void
	ldr r0, dword_80D2018 // =0x1001031 
	ldr r1, dword_80D201C // =0xc0d0000 
	bl sub_8011504
.endfunc // sub_80D1C5A

	tst r0, r0
	bne loc_80D1C84
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl object_freeMemory
	pop {r4,pc}
loc_80D1C84:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	bl sub_801A140
	mov r0, #0x32 
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80D1CE0 // =dword_80D1CE4 
	ldr r0, [r2,r1]
	str r0, [r5,#0x60]
	add r1, #0x18
	ldr r0, [r2,r1]
	str r0, [r5,#0x64]
	bl sub_801A018
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x60]
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80D2020 // =0x280000 
	svc 6
	strh r0, [r5,#0x22]
	ldr r0, [r5,#0x4c]
	ldr r1, [r0]
	add r1, #1
	str r1, [r0]
	ldr r0, [r5,#0x68]
	str r5, [r0]
	mov r0, #4
	strb r0, [r5,#8]
	pop {r4,pc}
	.word 0, 0
	.byte 0, 0, 0, 0
off_80D1CE0: .word dword_80D1CE4
dword_80D1CE4: .word 0x18000, 0x18000, 0x18000, 0x18000, 0x18000, 0x18000
	.word 0xE666, 0xE666, 0xE666, 0xE666, 0xE666, 0xE666
.func
.thumb_func
sub_80D1D14:
	push {r4,r7,lr}
	bl sub_801A00E
	.hword 0xF748
	.word 0xF738F9DB, 0x4200FA36, 0xF73AD127, 0x4200FF9E, 0x6D6FD023
	.word 0x42006F38, 0x2184D012, 0x29005A79, 0x49B9D11B, 0xD1184208
	.word 0x420849B8, 0xF748D008, 0x7A68F993, 0xD0032804, 0x72682004
	.word 0x81682000, 0xF99CF738, 0x4907D104, 0x58097A68, 0x470846FE
	.word 0xF954F748, 0xFFA5F73A, 0xF748BD90, 0x2008F97D, 0xBD9060A8
	.word off_80D1D84
off_80D1D84: .word sub_80D1D90+1
	.word loc_80D1DEE+1
	.word sub_80D1E7E+1
.endfunc // sub_80D1D14

.func
.thumb_func
sub_80D1D90:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80D1DA8
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	mov r0, #2
	strb r0, [r5,#9]
	b locret_80D1DEC
loc_80D1DA8:
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80D1DC8
	mov r0, #1
	strb r0, [r5,#0xa]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	lsl r1, r1, #4
	orr r0, r1
	str r0, [r5,#0x78]
	bl sub_80D1EF2
	ldrh r0, [r5,#0x22]
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
loc_80D1DC8:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D1DEC
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80D1DEC:
	pop {pc}
.endfunc // sub_80D1D90

loc_80D1DEE:
	push {lr}
	ldr r1, off_80D1DFC // =off_80D1E00 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80D1DFC: .word off_80D1E00
off_80D1E00: .word sub_80D1E08+1
	.word sub_80D1E32+1
.func
.thumb_func
sub_80D1E08:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x16]
	bl sub_80E7486
.endfunc // sub_80D1E08

	str r0, [r5,#0x74]
	tst r0, r0
	bne loc_80D1E24
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	b locret_80D1E30
loc_80D1E24:
	mov r0, #5
	strh r0, [r5,#0x22]
	mov r0, #4
	strh r0, [r5,#0xa]
	bl sub_80D1E32
locret_80D1E30:
	pop {pc}
.func
.thumb_func
sub_80D1E32:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80D1E42
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #5
	strh r0, [r5,#0x20]
loc_80D1E42:
	ldr r1, [r5,#0x74]
	cmp r1, #0
	beq loc_80D1E58
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
loc_80D1E58:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D1E7C
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80D1E72
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	b locret_80D1E7C
loc_80D1E72:
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	strb r0, [r5,#0xb]
locret_80D1E7C:
	pop {pc}
.endfunc // sub_80D1E32

.func
.thumb_func
sub_80D1E7E:
	push {lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80D1E92
	mov r0, #1
	strb r0, [r5,#0xa]
	bl sub_801A074 // () -> void
	mov r0, #0xa
	strh r0, [r5,#0x20]
loc_80D1E92:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	mov r1, #2
	tst r0, r1
	bne loc_80D1EAA
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80D1EAA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80D1EB6
	mov r0, #8
	str r0, [r5,#8]
locret_80D1EB6:
	pop {pc}
.endfunc // sub_80D1E7E

	push {r4,lr}
	push {r0-r3,r5}
	mov r0, #0x6c 
	mov r3, #0
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r5}
	beq locret_80D1EE6
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r3, [r0,#0x68]
	str r4, [r0,#0x6c]
	str r6, [r0,#0x2c]
	mov r3, #4
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x4c]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D1EE6:
	pop {r4,pc}
.func
.thumb_func
sub_80D1EE8:
	mov r1, #8
	strb r1, [r0,#9]
	mov r1, #0
	strh r1, [r0,#0xa]
	mov pc, lr
.endfunc // sub_80D1EE8

.func
.thumb_func
sub_80D1EF2:
	push {lr}
	bl sub_80D1F0E
	ldr r2, [r5,#0x40]
	cmp r2, #0
	bne loc_80D1F04
	bl sub_80D1F68
	b loc_80D1F08
loc_80D1F04:
	bl sub_80D1FA0
loc_80D1F08:
	bl sub_80D1FD8
	pop {pc}
.endfunc // sub_80D1EF2

.func
.thumb_func
sub_80D1F0E:
	push {lr}
	ldrb r2, [r5,#5]
	cmp r2, #0
	beq loc_80D1F42
	ldr r0, [r5,#0x6c]
	cmp r0, #0
	beq loc_80D1F42
	ldr r0, [r0]
	cmp r0, #0
	bne loc_80D1F4E
	cmp r2, #1
	beq loc_80D1F3E
	ldr r1, [r5,#0x70]
	cmp r1, #0
	bne loc_80D1F3E
	ldr r0, [r5,#0x6c]
	add r0, #4
	str r0, [r5,#0x6c]
	ldr r0, [r0]
	cmp r0, #0
	beq loc_80D1F3E
	mov r1, #1
	str r1, [r5,#0x70]
	b loc_80D1F4E
loc_80D1F3E:
	mov r0, #0
	str r0, [r5,#0x6c]
loc_80D1F42:
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103F8
	mov r2, #0
loc_80D1F4E:
	cmp r2, #2
	bne loc_80D1F62
	ldr r1, [r5,#0x70]
	cmp r1, #0
	bne loc_80D1F62
	ldr r0, [r0,#0x78]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b locret_80D1F66
loc_80D1F62:
	ldrb r1, [r0,#0x13]
	ldrb r0, [r0,#0x12]
locret_80D1F66:
	pop {pc}
.endfunc // sub_80D1F0E

.func
.thumb_func
sub_80D1F68:
	push {lr}
	ldrb r2, [r5,#0x13]
	ldr r3, [r5,#0x44]
	cmp r3, #0
	bge loc_80D1F76
	neg r1, r1
	neg r2, r2
loc_80D1F76:
	cmp r1, r2
	bgt locret_80D1F9E
	bl sub_80D200C
	bge locret_80D1F9E
	mov r3, #1
	ldrb r2, [r5,#0x12]
	cmp r0, r2
	beq loc_80D1F98
	bgt loc_80D1F8C
	sub r3, #2
loc_80D1F8C:
	ldr r0, [r5,#0x60]
	mul r0, r3
	str r0, [r5,#0x40]
	mov r0, #0
	str r0, [r5,#0x44]
	b locret_80D1F9E
loc_80D1F98:
	ldr r0, [r5,#0x44]
	neg r0, r0
	str r0, [r5,#0x44]
locret_80D1F9E:
	pop {pc}
.endfunc // sub_80D1F68

.func
.thumb_func
sub_80D1FA0:
	push {lr}
	ldrb r2, [r5,#0x12]
	ldr r3, [r5,#0x40]
	cmp r3, #0
	bge loc_80D1FAE
	neg r0, r0
	neg r2, r2
loc_80D1FAE:
	cmp r0, r2
	bgt locret_80D1FD6
	bl sub_80D200C
	bge locret_80D1FD6
	mov r3, #1
	ldrb r2, [r5,#0x13]
	cmp r1, r2
	beq loc_80D1FD0
	bgt loc_80D1FC4
	sub r3, #2
loc_80D1FC4:
	ldr r0, [r5,#0x64]
	mul r0, r3
	str r0, [r5,#0x44]
	mov r0, #0
	str r0, [r5,#0x40]
	b locret_80D1FD6
loc_80D1FD0:
	ldr r0, [r5,#0x40]
	neg r0, r0
	str r0, [r5,#0x40]
locret_80D1FD6:
	pop {pc}
.endfunc // sub_80D1FA0

.func
.thumb_func
sub_80D1FD8:
	push {r4,lr}
	bl sub_800E2C0
	add r4, r0, #0
	ldr r1, [r5,#0x40]
	cmp r1, #0
	bne loc_80D1FF8
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103F8
	ldrb r0, [r0,#0x12]
	ldrb r1, [r5,#0x12]
	sub r0, r1, r0
	beq locret_80D200A
loc_80D1FF8:
	mov r2, #0
	lsr r0, r0, #0x1f
	lsr r1, r1, #0x1f
	cmp r0, r1
	beq loc_80D2004
	mov r2, #1
loc_80D2004:
	strb r2, [r5,#0x17]
	bl sub_800F2C6
locret_80D200A:
	pop {r4,pc}
.endfunc // sub_80D1FD8

.func
.thumb_func
sub_80D200C:
	push {r0-r3,lr}
	ldrb r0, [r5,#6]
	add r1, r0, #1
	strb r1, [r5,#6]
	cmp r0, #2
	pop {r0-r3,pc}
dword_80D2018: .word 0x1001031
dword_80D201C: .word 0xC0D0000
dword_80D2020: .word 0x280000
	.word 0x3800000
	.word 0xC000000
dword_80D202C: .word 0xC0008
	.word 0x140010
.endfunc // sub_80D200C

.func
.thumb_func
sub_80D2034:
	push {lr}
	ldr r1, off_80D2048 // =off_80D204C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D2048: .word off_80D204C
off_80D204C: .word sub_80D2058+1
	.word sub_80D20E8+1
	.word sub_8016C8A+1
.endfunc // sub_80D2034

.func
.thumb_func
sub_80D2058:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0xf
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0xa
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D2058

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	beq loc_80D20CC
	mov r1, #0xc
	mov r2, #0xd
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, off_80D228C // =dword_80D202C 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80D20D4 // =dword_80D20D8 
	ldr r0, [r1,r0]
	str r0, [r5,#0x64]
	mov r0, #4
	str r0, [r5,#8]
	b locret_80D20D0
loc_80D20CC:
	bl object_freeMemory
locret_80D20D0:
	pop {pc}
	.balign 4, 0x00
off_80D20D4: .word dword_80D20D8
dword_80D20D8: .word 0x10000, 0x18000, 0x20000, 0x28000
.func
.thumb_func
sub_80D20E8:
	push {lr}
	bl sub_801A00E
	.hword 0xF747
	.word 0xF738FFF1, 0x4200F84C, 0x2000D117, 0xFA95F73F, 0xDB124200
	.word 0x6F126D6A, 0x807DA8, 0x5808490C, 0xD10A4210, 0xFFC0F737
	.word 0x4906D104, 0x58097A68, 0x470846FE, 0xFF78F747, 0xF747E003
	.word 0x2008FFA3, 0xBD007228
	.word off_80D2138
off_80D2138: .word sub_80D214C+1
	.word sub_80D2176+1
	.word dword_80D2144
dword_80D2144: .word 0x5800000, 0xA800000
.endfunc // sub_80D20E8

.func
.thumb_func
sub_80D214C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D2164
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80D2174
loc_80D2164:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D2174
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D2174:
	pop {pc}
.endfunc // sub_80D214C

.func
.thumb_func
sub_80D2176:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D218E
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xb
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x68]
	bl sub_80D2222
loc_80D218E:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r6, [r5,#0x68]
	tst r6, r6
	beq loc_80D21A0
	add r4, r0, #0
	b loc_80D21A2
loc_80D21A0:
	add r4, r1, #0
loc_80D21A2:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r2, [r5,#0x44]
	ldr r3, [r5,#0x38]
	add r2, r2, r3
	str r2, [r5,#0x38]
	ldr r6, [r5,#0x68]
	tst r6, r6
	beq loc_80D21BE
	add r6, r1, #0
	add r3, r0, #0
	b loc_80D21C2
loc_80D21BE:
	add r6, r3, #0
	add r3, r2, #0
loc_80D21C2:
	cmp r4, r6
	beq loc_80D21D8
	add r0, r3, #0
	add r1, r6, #0
	add r2, r4, #0
	bl sub_800E708
	cmp r0, #0
	beq loc_80D21D8
	bl sub_80D2222
loc_80D21D8:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80D2176

	mov r1, #0x10
	tst r0, r1
	bne locret_80D21F6
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80D21F6:
	pop {r4,r6,pc}
.func
.thumb_func
sub_80D21F8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x6d 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D2220
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D2220:
	pop {pc}
.endfunc // sub_80D21F8

.func
.thumb_func
sub_80D2222:
	push {r4,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r0, [r5,#0x68]
	tst r0, r0
	beq loc_80D2260
	ldr r1, [r5,#0x60]
	ldrb r1, [r1,#0x12]
	ldrb r2, [r5,#0x12]
	sub r1, r1, r2
	mul r1, r4
	cmp r1, #0
	blt loc_80D2260
	ldr r1, [r5,#0x60]
	ldrb r1, [r1,#0x13]
	ldrb r2, [r5,#0x13]
	cmp r1, r2
	beq loc_80D2260
	ldr r3, [r5,#0x64]
	cmp r1, r2
	bgt loc_80D2250
	neg r3, r3
loc_80D2250:
	str r3, [r5,#0x44]
	mov r3, #0
	str r3, [r5,#0x40]
	bl sub_800E29C // () -> void
	mov r1, #0
	str r1, [r5,#0x68]
	b locret_80D2276
loc_80D2260:
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x64]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0
	str r0, [r5,#0x44]
	bl sub_800E29C // () -> void
	mov r1, #1
	str r1, [r5,#0x68]
locret_80D2276:
	pop {r4,pc}
	.word dword_80D227C
dword_80D227C: .word 0x10000
	.word 0x18000, 0x20000, 0x28000
off_80D228C: .word dword_80D202C
.endfunc // sub_80D2222

.func
.thumb_func
sub_80D2290:
	push {lr}
	ldr r1, off_80D22A0 // =off_80D22A4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80D22A0: .word off_80D22A4
off_80D22A4: .word sub_80D22B0+1
	.word sub_80D2320+1
	.word sub_8016C8A+1
.endfunc // sub_80D2290

.func
.thumb_func
sub_80D22B0:
	push {lr}
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #8
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	bl sub_8002E3C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x12]
	strh r0, [r5,#0x14]
	ldrh r0, [r5,#0x3e]
	sub r0, #1
	strh r0, [r5,#0x3e]
	ldrh r0, [r5,#0x3a]
	sub r0, #1
	strh r0, [r5,#0x3a]
	mov r0, #0xce
	strh r0, [r5,#0x28]
	mov r0, #0xfa
	lsl r0, r0, #1
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldr r0, dword_80D231C // =0x1770 
	strh r0, [r5,#0x20]
	bl sub_8019892
	tst r0, r0
	bne loc_80D2306
	bl object_freeMemory
	pop {pc}
loc_80D2306:
	mov r1, #0xe
	mov r2, #0xf
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	pop {pc}
	.balign 4, 0x00
dword_80D231C: .word 0x1770
.endfunc // sub_80D22B0

.func
.thumb_func
sub_80D2320:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD9E
	ldr r0, off_80D2344 // =jt_80D2348 
	bl sub_801B394
	bl sub_801A018
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80D2344: .word jt_80D2348
jt_80D2348: .word sub_80D236C+1
	.word sub_80165B8+1
	.word sub_80D239C+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word loc_8017E26+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80D2398+1
.endfunc // sub_80D2320

.func
.thumb_func
sub_80D236C:
	push {lr}
	bl battle_getFlags
	mov r1, #1
	tst r0, r1
	bne loc_80D237E
	bl nullsub_10
	b locret_80D2396
loc_80D237E:
	ldrb r0, [r5]
	mov r1, #4
	bic r0, r1
	strb r0, [r5]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D2396:
	pop {pc}
.endfunc // sub_80D236C

.func
.thumb_func
sub_80D2398:
	push {lr}
	pop {pc}
.endfunc // sub_80D2398

.func
.thumb_func
sub_80D239C:
	push {r4,r7,lr}
	bl sub_802EF5C
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r1, #0
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80D23B8
	str r1, [r0]
loc_80D23B8:
	bl sub_801A180
	ldr r1, dword_80D2458 // =0x8000 
	tst r0, r1
	beq loc_80D23F0
	ldr r1, dword_80D245C // =0x300000 
	tst r0, r1
	beq loc_80D23D0
	mov r0, #5
	bl sub_800F90E
	b loc_80D2426
loc_80D23D0:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80D242E
	cmp r0, #1
	beq loc_80D2426
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80D2426
loc_80D23F0:
	mov r7, #0x34 
	add r7, r7, r5
	ldmia r7!, {r1-r3}
	mov r0, #0xf
	bl sub_801BDDE
	mov r4, #0
	bl sub_80E47A4
	mov r7, #0x34 
	add r7, r7, r5
	ldmia r7!, {r1-r3}
	mov r0, #0xf
	bl sub_801BDDE
	mov r4, #0
	bl sub_80E47A4
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #1
	bl sub_80E05F6
loc_80D2426:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D242E:
	pop {r4,r7,pc}
.endfunc // sub_80D239C

.func
.thumb_func
sub_80D2430:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x6e 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D2454
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r6, [r0,#0x2c]
	strb r3, [r0,#0xe]
	strb r4, [r0,#0x16]
	str r7, [r0,#0x60]
	ldrb r2, [r1]
	mov r1, #0x14
	orr r2, r1
	strb r2, [r0]
locret_80D2454:
	pop {pc}
	.balign 4, 0x00
dword_80D2458: .word 0x8000
dword_80D245C: .word 0x300000
.endfunc // sub_80D2430

.func
.thumb_func
sub_80D2460:
	push {lr}
	ldr r1, off_80D2470 // =jt_80D2474 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80D2470: .word jt_80D2474
jt_80D2474: .word sub_80D2480+1
	.word sub_80D24F0+1
	.word sub_8016C8A+1
.endfunc // sub_80D2460

.func
.thumb_func
sub_80D2480:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x44 
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_8002E3C
	bl sub_800E456 // () -> int
	mov r1, #1
	eor r0, r1
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x40 
	mul r1, r0
	ldrh r2, [r5,#0x36]
	add r2, r2, r1
	strh r2, [r5,#0x36]
	neg r0, r0
	mov r1, #8
	lsl r1, r1, #0x10
	mul r0, r1
	str r0, [r5,#0x40]
	bl sub_800E2AC
	mov r0, #8
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq loc_80D24DC
	mov r0, #1
loc_80D24DC:
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D24F0
	pop {pc}
.endfunc // sub_80D2480

.func
.thumb_func
sub_80D24F0:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r1, off_80D2508 // =off_80D250C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D2508: .word off_80D250C
off_80D250C: .word sub_80D2514+1
	.word sub_80D255A+1
.endfunc // sub_80D24F0

.func
.thumb_func
sub_80D2514:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldrh r0, [r5,#0x20]
	cmp r0, #2
	bne loc_80D2544
	push {r4,r6,r7}
	ldr r4, dword_80D25C8 // =0x4040401 
	ldr r6, [r5,#0x2c]
	mov r7, #0x51 
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80C536A
	pop {r4,r6,r7}
loc_80D2544:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80D2558
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D2558:
	pop {pc}
.endfunc // sub_80D2514

.func
.thumb_func
sub_80D255A:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80D2572
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
loc_80D2572:
	lsr r0, r0, #2
	bcs locret_80D257E
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
locret_80D257E:
	pop {pc}
.endfunc // sub_80D255A

.func
.thumb_func
sub_80D2580:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x6f 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D2594
	bl sub_801155A
locret_80D2594:
	pop {pc}
.endfunc // sub_80D2580

.func
.thumb_func
sub_80D2596:
	push {lr}
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	neg r0, r0
	mov r1, #5
	mul r0, r1
	add r0, #6
	push {r0,r2,r3}
	mov r1, #1
	bl sub_80D2580
	pop {r0,r2,r3}
	push {r0,r2,r3}
	mov r1, #2
	bl sub_80D2580
	pop {r0,r2,r3}
	push {r0,r2,r3}
	mov r1, #3
	bl sub_80D2580
	pop {r0,r2,r3}
	pop {pc}
	.balign 4, 0x00
dword_80D25C8: .word 0x4040401
	.word 0xC0008
	.word 0x180010
.endfunc // sub_80D2596

.func
.thumb_func
sub_80D25D4:
	push {lr}
	ldr r1, off_80D25E8 // =off_80D25EC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D25E8: .word off_80D25EC
off_80D25EC: .word sub_80D25F8+1
	.word sub_80D2684+1
	.word sub_8016C8A+1
.endfunc // sub_80D25D4

.func
.thumb_func
sub_80D25F8:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0xf
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0xd
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D25F8

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x2c]
	str r0, [r5,#0x2c]
	bl sub_8019892
	tst r0, r0
	beq loc_80D2676
	mov r1, #0x29 
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, dword_80D2680 // = 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	bl sub_80E5B62
	str r0, [r5,#0x7c]
	mov r0, #0
	str r0, [r5,#0x50]
	mov r0, #4
	str r0, [r5,#8]
	b locret_80D267E
loc_80D2676:
	bl sub_80D2A58
	bl object_freeMemory
locret_80D267E:
	pop {pc}
dword_80D2680: .word 0x80D25CC
.func
.thumb_func
sub_80D2684:
	push {lr}
	bl sub_801A00E
	.hword 0xF747
	.word 0xF737FD23, 0x4200FD7E, 0x6D28D126, 0xD1234200, 0x28107A68
	.word 0x2001D00D, 0xFF61F73E, 0xD0084200, 0x38018CA8, 0x420084A8
	.word 0x200CDD16, 0x20007268, 0x6D6A72E8, 0x7DA86F12, 0x49100080
	.word 0x42105808, 0xF737D10A, 0xD104FCE3, 0x7A684906, 0x46FE5809
	.word 0xF7474708, 0xE003FC9B, 0xF9C0F000, 0x60A82008, 0xBD00
	.word off_80D26F4
off_80D26F4: .word sub_80D2714+1
	.word sub_80D2750+1
	.word sub_80D2780+1
	.word sub_80D27A0+1
	.word loc_80D27E2+1
	.word dword_80D270C
dword_80D270C: .word 0x5800000, 0xA800000
.endfunc // sub_80D2684

.func
.thumb_func
sub_80D2714:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D2730
	mov r1, #4
	strb r1, [r5,#0xb]
	bl sub_80D29F4
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80D274E
loc_80D2730:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x1d
	beq loc_80D2748
	cmp r0, #0
	bgt locret_80D274E
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xb]
	b locret_80D274E
loc_80D2748:
	mov r0, #1
	bl sub_801A07C
locret_80D274E:
	pop {pc}
.endfunc // sub_80D2714

.func
.thumb_func
sub_80D2750:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D2766
	mov r1, #4
	strb r1, [r5,#0xb]
	ldrb r0, [r5,#4]
	ldr r1, off_80D2778 // =byte_80D277C 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x20]
	b locret_80D2776
loc_80D2766:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D2776
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xb]
locret_80D2776:
	pop {pc}
off_80D2778: .word byte_80D277C
byte_80D277C: .byte 0x18, 0x18, 0x12, 0x12
.endfunc // sub_80D2750

.func
.thumb_func
sub_80D2780:
	push {lr}
	bl sub_80D29BA
.endfunc // sub_80D2780

	tst r0, r0
	beq loc_80D2796
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
loc_80D2796:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xb]
	pop {pc}
.func
.thumb_func
sub_80D27A0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D27CC
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0x85
	bl sound_play // () -> void
	ldrb r0, [r5,#0xa]
	add r0, #4
	cmp r0, #8
	ble loc_80D27C4
	mov r0, #0
loc_80D27C4:
	strb r0, [r5,#0xa]
	mov r0, #0x18
	strh r0, [r5,#0x20]
	b locret_80D27E0
loc_80D27CC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D27E0
	mov r0, #0
	strb r0, [r5,#5]
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xb]
locret_80D27E0:
	pop {pc}
.endfunc // sub_80D27A0

loc_80D27E2:
	push {lr}
	mov r0, #1
	bl sub_801156A
	tst r0, r0
	beq loc_80D27F8
	ldrh r0, [r5,#0x24]
	sub r0, #1
	strh r0, [r5,#0x24]
	tst r0, r0
	ble loc_80D2812
loc_80D27F8:
	ldr r1, off_80D281C // =off_80D2820 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#5]
	tst r0, r0
	beq locret_80D281A
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xb]
	b locret_80D281A
loc_80D2812:
	bl sub_80D2A68
	mov r0, #8
	str r0, [r5,#8]
locret_80D281A:
	pop {pc}
off_80D281C: .word off_80D2820
off_80D2820: .word sub_80D282C+1
	.word sub_80D289E+1
	.word sub_80D2904+1
.func
.thumb_func
sub_80D282C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D2878
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	mov r0, #1
	str r0, [r5,#0x68]
	bl sub_80D2A14
	add r6, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #1
	mov r3, #0
	mov r4, #1
	lsl r4, r4, #0x18
	mov r3, #0
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #2
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0x3c 
	orr r4, r3
	mov r7, #0x68 
	add r7, r7, r5
	bl sub_80C5578
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
loc_80D2878:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80D288C
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r5,#0x22]
loc_80D288C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D289C
	mov r0, #0
	str r0, [r5,#0x68]
	mov r0, #1
	strb r0, [r5,#5]
locret_80D289C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80D282C

.func
.thumb_func
sub_80D289E:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D28B6
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r5,#0x22]
	mov r0, #0
	strh r0, [r5,#0x20]
loc_80D28B6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D2902
	bl sub_80D2A14
	add r6, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	lsl r1, r1, #4
	orr r0, r1
	mov r4, #0
	lsl r4, r4, #8
	mov r3, #0xa
	orr r4, r3
	mov r7, #0x6c 
	add r7, r7, r5
	add r3, r5, #0
	add r3, #0x70 
	ldrh r2, [r5,#0x22]
	lsl r2, r2, #2
	add r3, r3, r2
	ldr r1, [r5,#0x7c]
	ldr r2, dword_80D2A90 // =0xb333 
	bl sub_80CBAB8
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	cmp r0, #3
	bne locret_80D2902
	mov r0, #1
	strb r0, [r5,#5]
locret_80D2902:
	pop {r4,r6,r7,pc}
.endfunc // sub_80D289E

.func
.thumb_func
sub_80D2904:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D2928
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	ldr r1, [r5,#0x60]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	strb r0, [r5,#6]
	strb r1, [r5,#7]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80D2984
loc_80D2928:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80D293E
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	mov r2, #4
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80D293E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x1e
	beq loc_80D2956
	cmp r0, #0x14
	beq loc_80D297C
	cmp r0, #0
	bgt locret_80D2984
	mov r0, #1
	strb r0, [r5,#5]
	b locret_80D2984
loc_80D2956:
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl object_isValidPanel
	tst r0, r0
	beq locret_80D2984
	bl sub_80D2A14
	add r6, r0, #0
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	mov r2, #0x10
	mov r4, #1
	lsl r4, r4, #8
	mov r3, #0
	orr r4, r3
	bl sub_80E4FCA
	b locret_80D2984
loc_80D297C:
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl object_crackPanel
locret_80D2984:
	pop {r4,r6,r7,pc}
.endfunc // sub_80D2904

.func
.thumb_func
sub_80D2986:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x70 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D29B0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x64]
	str r0, [r6]
	str r7, [r0,#0x60]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D29B0:
	pop {pc}
.endfunc // sub_80D2986

.func
.thumb_func
sub_80D29B2:
	push {lr}
	mov r1, #1
	str r1, [r0,#0x50]
	pop {pc}
.endfunc // sub_80D29B2

.func
.thumb_func
sub_80D29BA:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldr r1, [r5,#0x60]
	ldrb r1, [r1,#0x13]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80D29E0 // =dword_80D29E4 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80D29BA

	tst r0, r0
	pop {r0,r1}
	bne locret_80D29DC
	mov r0, #0
locret_80D29DC:
	pop {pc}
	.byte 0, 0
off_80D29E0: .word dword_80D29E4
dword_80D29E4: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.func
.thumb_func
sub_80D29F4:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D2A0C // =0x605ff01 
	mov r6, #0
	ldr r7, dword_80D2A10 // =0x0 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D2A0C: .word 0x605FF01
dword_80D2A10: .word 0x0
.endfunc // sub_80D29F4

.func
.thumb_func
sub_80D2A14:
	push {lr}
	ldrb r0, [r5,#0xa]
	lsl r0, r0, #1
	ldrb r1, [r5,#4]
	lsl r1, r1, #1
	add r0, r0, r1
	ldr r2, off_80D2A30 // =dword_80D2A34 
	ldrh r0, [r2,r0]
	ldr r2, off_80D2A4C // =asc_80D2A50 
	ldrh r1, [r2,r1]
	lsl r1, r1, #0x10
	orr r0, r1
	pop {pc}
	.byte 0, 0
off_80D2A30: .word dword_80D2A34
dword_80D2A34: .word 0x64003C, 0xC800A0, 0x32001E, 0x640050, 0x64003C, 0xC800A0
off_80D2A4C: .word asc_80D2A50
asc_80D2A50: .asciz "\n"
	.byte 0xA
	.byte  0
	.byte 0xA
	.byte  0
	.byte 0xA
	.byte  0
.endfunc // sub_80D2A14

.func
.thumb_func
sub_80D2A58:
	push {lr}
	ldr r1, [r5,#0x64]
	ldr r0, [r1]
	cmp r0, r5
	bne locret_80D2A66
	mov r0, #0
	str r0, [r1]
locret_80D2A66:
	pop {pc}
.endfunc // sub_80D2A58

.func
.thumb_func
sub_80D2A68:
	push {lr}
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	bl sub_80E05F6
	mov r0, #0x70 
	bl sound_play // () -> void
	bl sub_801A074 // () -> void
	bl sub_80D2A58
	mov r0, #0
	str r0, [r5,#0x68]
	ldr r0, [r5,#0x7c]
	bl sub_80E5B6E
	pop {pc}
dword_80D2A90: .word 0xB333
.endfunc // sub_80D2A68

loc_80D2A94:
	push {lr}
	ldr r1, off_80D2AA4 // =off_80D2AA8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D2AA4: .word off_80D2AA8
off_80D2AA8: .word sub_80D2AB4+1
	.word sub_80D2B2C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D2AB4:
	push {r4,r6,r7,lr}
	ldrb r4, [r5,#4]
	cmp r4, #0
	bne loc_80D2ADE
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldr r4, [r5,#4]
	add r4, #1
	ldr r6, [r5,#0x2c]
	mov r7, #0x68 
	add r7, r7, r5
	bl sub_80D2B8E
	ldrb r1, [r0]
	ldrb r2, [r5]
	mov r3, #0x10
	and r2, r3
	mvn r3, r3
	and r1, r3
	orr r1, r2
	strb r1, [r0]
loc_80D2ADE:
	bl sub_8019892
	tst r0, r0
	bne loc_80D2AF0
	mov r0, #0
	str r0, [r5,#0x68]
	bl object_freeMemory
	pop {r4,r6,r7,pc}
loc_80D2AF0:
	mov r1, #6
	ldrb r2, [r5,#4]
	tst r2, r2
	beq loc_80D2AFA
	mov r1, #0x4a 
loc_80D2AFA:
	mov r3, #0x61 
	ldrb r2, [r5,#6]
	cmp r2, #1
	bne loc_80D2B04
	mov r3, #3
loc_80D2B04:
	mov r2, #5
	bl sub_8019FB4
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x22]
	mov r0, #0xc
	strh r0, [r5,#0x20]
	bl sub_80D2BC0
	mov r0, #1
	bl sub_801A07C
	mov r0, #0xa
	bl sub_801A140
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D2B2C
.endfunc // sub_80D2AB4

	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80D2B2C:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80D2B2C

	bl sub_801A0D4
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80D2B42
	ldr r1, [r0]
	cmp r1, r5
	bne loc_80D2B78
loc_80D2B42:
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x70]
	tst r1, r1
	beq loc_80D2B56
	bl sub_801A074 // () -> void
	mov r0, #0
	mov r1, #0xc
	bl sub_80302A8
loc_80D2B56:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	blt loc_80D2B78
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80D2B84
	mov r0, #0xc
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#6]
	cmp r0, #1
	beq loc_80D2B76
	mov r0, #1
	bl sub_801A07C
loc_80D2B76:
	b loc_80D2B84
loc_80D2B78:
	bl sub_801A074 // () -> void
	mov r0, #0
	str r0, [r5,#0x68]
	mov r0, #8
	str r0, [r5,#8]
loc_80D2B84:
	bl sub_80D2BC0
	bl sub_801A018
	pop {pc}
.func
.thumb_func
sub_80D2B8E:
	push {lr}
	push {r2,r5}
	mov r0, #0x71 
	bl object_spawnType3
	add r0, r5, #0
	pop {r2,r5}
	beq locret_80D2BB0
	strb r2, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	tst r7, r7
	beq locret_80D2BB0
	str r0, [r7]
locret_80D2BB0:
	pop {pc}
.endfunc // sub_80D2B8E

	ldr r1, [r0]
	ldr r2, [r1]
	cmp r2, r5
	bne locret_80D2BBE
	mov r2, #0
	str r2, [r1]
locret_80D2BBE:
	mov pc, lr
.func
.thumb_func
sub_80D2BC0:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r2, [r5,#0x4c]
	ldrb r1, [r2,#0x12]
	add r1, r1, r0
	strb r1, [r5,#0x12]
	ldrb r1, [r2,#0x13]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	pop {pc}
.endfunc // sub_80D2BC0

loc_80D2BDC:
	push {lr}
	ldr r1, off_80D2BF0 // =off_80D2BF4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80D2BF0: .word off_80D2BF4
off_80D2BF4: .word sub_80D2C00+1
	.word sub_80D2C10+1
	.word sub_80D2E86+1
.func
.thumb_func
sub_80D2C00:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D2C10
	pop {pc}
.endfunc // sub_80D2C00

.func
.thumb_func
sub_80D2C10:
	push {lr}
	ldr r1, off_80D2C20 // =asc_80D2C24 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80D2C20: .word asc_80D2C24
asc_80D2C24: .asciz "),\x0D"
	.byte 0xB5, 0x3, 0x49
	.word 0x58097AA8, 0x470846FE, 0xBD00, 0x80D2C3C, 0x80D2C41
	.word 0x7AE8B5D0, 0xD0342802, 0xD00D2801, 0x84282001, 0x7DE97DA8
	.word 0x21054048, 0x20064341, 0x71A81A40, 0x71E82001, 0x72E82001
	.word 0x38018C28, 0xD1258428, 0x79E979A8, 0xFFFDF739, 0xD0184200
	.word 0xF81FF000, 0xD01428FF, 0x197F2764, 0xB4016AEE, 0xFA0AF000
	.word 0x21107802, 0x7002430A, 0x88EEBC10, 0xF80FF000, 0x210880EE
	.word 0xD00042A0, 0x84292118, 0x2002E006, 0x6E6872E8, 0xD1014200
	.word 0x60A82008, 0xB510BDD0, 0xF73BB083, 0x4244FB02, 0x90002000
	.word 0x42009800, 0x7DA8D124, 0x491500C0, 0x680A1809, 0x79A8684B
	.word 0xF73979E9, 0x4200FFD0, 0x79A8D005, 0x79E99001, 0x20019102
	.word 0x79E89000, 0x71E83001, 0xDDE52803, 0x71E82001, 0x190079A8
	.word 0x300171A8, 0xD9DD2807, 0x42009800, 0x20FFD102, 0xE0059000
	.word 0x99029801, 0xF80EF000, 0x99029801, 0xBD10B003, 0x80D2D30
	.word 0x0
	.word 0xF8800B0, 0x20, 0xF880090, 0xB090B5D0, 0x91019000
	.word 0xC07DA8, 0x18094935, 0x900C6808, 0x900D6848, 0xFAB7F73B
	.word 0x99001C04, 0x910A1809, 0x20012600, 0x980A900B, 0xF739990B
	.word 0x4200FF80, 0x980AD016, 0xF739990B, 0x9A0CFDBD, 0xD0064210
	.word 0x990B980A, 0x43080109, 0x5588A904, 0x980B3601, 0x900B3001
	.word 0xDDE62803, 0x1900980A, 0xE7E0900A, 0xD03A4236, 0x90022000
	.word 0x900F900E, 0x7838AF04, 0x7400901, 0x900A0F40, 0x9C0E910B
	.word 0xD01F4224, 0x990B9801, 0x29001A09, 0x4249DA00, 0x1A129A0F
	.word 0xDA002A00, 0x42914252, 0xDB11DC16, 0x990A9800, 0x29001A09
	.word 0x4249DA00, 0x1A129A0E, 0xDA002A00, 0x42914252, 0xDB03DC08
	.word 0x9A0F990A, 0xDC034291, 0x900E980A, 0x910F990B, 0x98023701
	.word 0x90023001, 0xDBCC42B0, 0x9B0F9A0E, 0x22FFE000, 0xBDD0B010
	.word 0x80D2E28, 0x5800000, 0x0
	.word 0xA800000, 0x0
.endfunc // sub_80D2C10

	push {r6,r7,lr}
	sub sp, sp, #0x18
	str r0, [sp]
	str r1, [sp,#4]
	mov r0, #0
	str r0, [sp,#0xc]
	mov r0, r10
	ldr r0, [r0,#0x18]
	ldrb r0, [r5,#0xd]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	add r6, r0, #0
	ldr r0, [r6,#0x34]
	ldr r1, [r6,#0x38]
	bl sub_800E258
	str r0, [sp,#0x10]
	str r1, [sp,#0x14]
	ldr r2, [sp]
	ldr r3, [sp,#0x10]
	ldrb r1, [r5,#0x16]
	tst r1, r1
	bne loc_80D2E70
	cmp r2, r3
	bge loc_80D2E76
	b loc_80D2E74
loc_80D2E70:
	cmp r2, r3
	ble loc_80D2E76
loc_80D2E74:
	str r6, [sp,#0xc]
loc_80D2E76:
	mov r2, #0xff
	ldr r7, [sp,#0xc]
	tst r7, r7
	beq loc_80D2E82
	ldr r2, [sp,#0x10]
	ldr r3, [sp,#0x14]
loc_80D2E82:
	add sp, sp, #0x18
	pop {r6,r7,pc}
.func
.thumb_func
sub_80D2E86:
	push {lr}
	ldr r0, [r5,#0x68]
	mov r1, #0
	strb r1, [r0]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80D2E86

.func
.thumb_func
sub_80D2E94:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x72 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D2EBA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x68]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D2EBA:
	pop {pc}
.endfunc // sub_80D2E94

loc_80D2EBC:
	push {lr}
	ldr r1, off_80D2ECC // =off_80D2ED0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D2ECC: .word off_80D2ED0
off_80D2ED0: .word sub_80D2EDC+1
	.word loc_80D2F3C+1
	.word sub_80D3048+1
.func
.thumb_func
sub_80D2EDC:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80D2F36
	ldr r1, [r5,#0x68]
	ldr r0, [r1]
	add r0, #1
	strb r0, [r1]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5]
	mov r1, #3
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x2c 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_80D3058
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80D2F3C
	pop {pc}
loc_80D2F36:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80D2EDC

loc_80D2F3C:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80D2F56
	ldr r1, off_80D2F5C // =off_80D2F60 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	b locret_80D2F5A
loc_80D2F56:
	mov r0, #8
	str r0, [r5,#8]
locret_80D2F5A:
	pop {pc}
off_80D2F5C: .word off_80D2F60
off_80D2F60: .word sub_80D2F70+1
	.word sub_80D2FA0+1
	.word loc_80D2FC2+1
	.word 0xC800000
.func
.thumb_func
sub_80D2F70:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D2F88
	mov r0, #2
	lsl r0, r0, #0x10
	str r0, [r5,#0x48]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xa]
loc_80D2F88:
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x3e]
	cmp r0, #0xa
	blt locret_80D2F9E
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D2F9E:
	pop {pc}
.endfunc // sub_80D2F70

.func
.thumb_func
sub_80D2FA0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D2FB0
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xa]
loc_80D2FB0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80D2FC0
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D2FC0:
	pop {pc}
.endfunc // sub_80D2FA0

loc_80D2FC2:
	push {lr}
	ldr r1, off_80D2FD0 // =off_80D2FD4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80D2FD0: .word off_80D2FD4
off_80D2FD4: .word sub_80D2FE0+1
	.word sub_80D2FEC+1
	.word sub_80D3004+1
.func
.thumb_func
sub_80D2FE0:
	push {lr}
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80D2FE0

.func
.thumb_func
sub_80D2FEC:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80D3002
	mov r0, #0xb3
	bl sound_play // () -> void
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80D3002:
	pop {pc}
.endfunc // sub_80D2FEC

.func
.thumb_func
sub_80D3004:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r2, [r5,#0x40]
	add r0, r0, r2
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	ldr r2, [r5,#0x44]
	add r1, r1, r2
	str r1, [r5,#0x38]
	bl sub_800E2AC
	ldrb r0, [r5,#0x12]
	ldr r1, [r5,#0x60]
	cmp r0, r1
	bne locret_80D3042
	ldrb r0, [r5,#0x13]
	ldr r1, [r5,#0x64]
	cmp r0, r1
	bne locret_80D3042
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #8
	lsl r3, r3, #0x10
	ldr r4, dword_80D3044 // =0x4050501 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C53A6
	mov r0, #8
	str r0, [r5,#8]
locret_80D3042:
	pop {pc}
dword_80D3044: .word 0x4050501
.endfunc // sub_80D3004

.func
.thumb_func
sub_80D3048:
	push {lr}
	ldr r1, [r5,#0x68]
	ldr r0, [r1]
	sub r0, #1
	strb r0, [r1]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80D3048

.func
.thumb_func
sub_80D3058:
	push {lr}
	sub sp, sp, #0x10
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [sp]
	str r1, [sp,#4]
	ldr r0, [r5,#0x60]
	cmp r0, #0xff
	bne loc_80D307A
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D30A0 // =0x100000 
	mul r0, r1
	mov r1, #0
	b loc_80D3098
loc_80D307A:
	ldr r1, [r5,#0x64]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r0, #0
	add r0, r1, #0
	add r1, r2, #0
	ldr r2, [sp]
	sub r1, r1, r2
	ldr r2, [sp,#4]
	sub r0, r0, r2
	bl calcAngle_800117C
	ldr r1, dword_80D30A0 // =0x100000 
	bl sub_80011A0
loc_80D3098:
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	add sp, sp, #0x10
	pop {pc}
dword_80D30A0: .word 0x100000
.endfunc // sub_80D3058

	push {r4,lr}
	push {r0-r3,r5}
	mov r0, #0x73 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r5}
	beq locret_80D30C4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r3, [r0,#0x60]
	str r4, [r0,#0x64]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x68]
locret_80D30C4:
	pop {r4,pc}
	.word 0, 0
	.byte 0, 0
loc_80D30D0:
	push {lr}
	ldr r1, off_80D30E4 // =off_80D30E8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D30E4: .word off_80D30E8
off_80D30E8: .word sub_80D30F4+1
	.word sub_80D317C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D30F4:
	push {r4,lr}
	bl sub_800E29C // () -> void
	ldr r0, dword_80D34A4 // =0x1001031 
	ldr r1, dword_80D34A8 // =0x4050100 
	bl sub_8011504
.endfunc // sub_80D30F4

	tst r0, r0
	bne loc_80D311E
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl object_freeMemory
	pop {r4,pc}
loc_80D311E:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	bl sub_801A140
	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80D3160 // =dword_80D3164 
	ldr r0, [r2,r1]
	str r0, [r5,#0x60]
	add r1, #0xc
	ldr r0, [r2,r1]
	str r0, [r5,#0x64]
	bl sub_801A018
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x60]
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80D34AC // =0x280000 
	svc 6
	strh r0, [r5,#0x22]
	mov r0, #4
	strb r0, [r5,#8]
	pop {r4,pc}
	.byte 0, 0, 0, 0
off_80D3160: .word dword_80D3164
dword_80D3164: .word 0x28000, 0x30000, 0x38000, 0x18000, 0x1CCCC, 0x21999
.func
.thumb_func
sub_80D317C:
	push {r4,r7,lr}
	bl sub_801A00E
	.hword 0xF746
	.word 0xF737FFA7, 0x4200F802, 0xF739D121, 0x4200FD6A, 0x6D6FD01D
	.word 0x42006F38, 0x49C4D00E, 0xD1164208, 0x420849C3, 0xF746D008
	.word 0x7A68FF63, 0xD0032804, 0x72682004, 0x81682000, 0xFF6CF736
	.word 0x4906D104, 0x58097A68, 0x470846FE, 0xFF24F746, 0xF746BD90
	.word 0x2008FF4F, 0xBD9060A8
	.word off_80D31E0
off_80D31E0: .word sub_80D31EC+1
	.word ho_80D3240+1
	.word sub_80D32C4+1
.endfunc // sub_80D317C

.func
.thumb_func
sub_80D31EC:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80D3204
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	mov r0, #2
	strb r0, [r5,#9]
	b locret_80D323E
loc_80D3204:
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80D321A
	mov r0, #1
	strb r0, [r5,#0xa]
	bl sub_80D3326
	ldrh r0, [r5,#0x22]
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
loc_80D321A:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D323E
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80D323E:
	pop {pc}
.endfunc // sub_80D31EC

.func
.thumb_func
ho_80D3240:
	push {lr}
	ldr r1, off_80D3250 // =jt_80D3254 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80D3250: .word jt_80D3254
jt_80D3254: .word sub_80D325C+1
	.word sub_80D3278+1
.endfunc // ho_80D3240

.func
.thumb_func
sub_80D325C:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x16]
	bl sub_80E7486
	str r0, [r5,#0x68]
	mov r0, #5
	strh r0, [r5,#0x22]
	mov r0, #4
	strh r0, [r5,#0xa]
	bl sub_80D3278
	pop {pc}
.endfunc // sub_80D325C

.func
.thumb_func
sub_80D3278:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80D3288
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #5
	strh r0, [r5,#0x20]
loc_80D3288:
	ldr r1, [r5,#0x68]
	cmp r1, #0
	beq loc_80D329E
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
loc_80D329E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D32C2
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80D32B8
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	b locret_80D32C2
loc_80D32B8:
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	strb r0, [r5,#0xb]
locret_80D32C2:
	pop {pc}
.endfunc // sub_80D3278

.func
.thumb_func
sub_80D32C4:
	push {lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80D32D8
	mov r0, #1
	strb r0, [r5,#0xa]
	bl sub_801A074 // () -> void
	mov r0, #0xa
	strh r0, [r5,#0x20]
loc_80D32D8:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	mov r1, #2
	tst r0, r1
	bne loc_80D32F0
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80D32F0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80D32FC
	mov r0, #8
	str r0, [r5,#8]
locret_80D32FC:
	pop {pc}
.endfunc // sub_80D32C4

.func
.thumb_func
sub_80D32FE:
	push {r4,lr}
	push {r0-r2,r5}
	mov r0, #0x74 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D3324
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D3324:
	pop {r4,pc}
.endfunc // sub_80D32FE

.func
.thumb_func
sub_80D3326:
	push {lr}
	bl sub_80D3342
.endfunc // sub_80D3326

	ldr r2, [r5,#0x40]
	cmp r2, #0
	bne loc_80D3338
	bl sub_80D3404
	b loc_80D333C
loc_80D3338:
	bl sub_80D343C
loc_80D333C:
	bl sub_80D3474
	pop {pc}
.func
.thumb_func
sub_80D3342:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#0x12]
	add r0, r0, r4
	bl sub_80D3374
.endfunc // sub_80D3342

	cmp r0, #0
	bne locret_80D3372
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#0x12]
	neg r4, r4
	bl sub_80D3374
	cmp r0, #0
	bne locret_80D3372
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #7
	mul r0, r1
	mov r1, #2
locret_80D3372:
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80D3374:
	push {r4,r6,r7,lr}
	sub sp, sp, #4
	mov r7, sp
	add r6, r0, #0
loc_80D337C:
	add r0, r6, #0
	ldr r3, off_80D33F0 // =off_80D33F4 
	bl sub_81096FA
	bl sub_800CFDC
.endfunc // sub_80D3374

	cmp r0, #0
	bne loc_80D339C
	add r6, r6, r4
	cmp r6, #1
	blt loc_80D3398
	cmp r6, #6
	bgt loc_80D3398
	b loc_80D337C
loc_80D3398:
	mov r0, #0
	b loc_80D33E2
loc_80D339C:
	mov r1, #0
	strb r1, [r7,r0]
	ldrb r4, [r5,#0x13]
	ldrb r6, [r7]
	add r7, #1
loc_80D33A6:
	ldrb r0, [r7]
	cmp r0, #0
	beq loc_80D33DA
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r1, r4
	beq loc_80D33D4
	sub r1, r1, r4
	bpl loc_80D33BC
	neg r1, r1
loc_80D33BC:
	lsr r0, r6, #4
	sub r0, r0, r4
	bpl loc_80D33C4
	neg r0, r0
loc_80D33C4:
	cmp r1, r0
	bgt loc_80D33D6
	blt loc_80D33D4
	ldrb r0, [r7]
	lsr r0, r0, #4
	lsr r1, r6, #4
	cmp r0, r1
	bge loc_80D33D6
loc_80D33D4:
	ldrb r6, [r7]
loc_80D33D6:
	add r7, #1
	b loc_80D33A6
loc_80D33DA:
	add r0, r6, #0
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80D33E2:
	add sp, sp, #4
	pop {r4,r6,r7,pc}
	.word 0, 0
	.byte 0, 0
off_80D33F0: .word off_80D33F4
off_80D33F4: .word LCDControl
	.word 0x0
	.word start_
	.word 0x0
.func
.thumb_func
sub_80D3404:
	push {lr}
	ldrb r2, [r5,#0x13]
	ldr r3, [r5,#0x44]
	cmp r3, #0
	bge loc_80D3412
	neg r1, r1
	neg r2, r2
loc_80D3412:
	cmp r1, r2
	bgt locret_80D343A
	bl sub_80D3496
	bge locret_80D343A
	mov r3, #1
	ldrb r2, [r5,#0x12]
	cmp r0, r2
	beq loc_80D3434
	bgt loc_80D3428
	sub r3, #2
loc_80D3428:
	ldr r0, [r5,#0x60]
	mul r0, r3
	str r0, [r5,#0x40]
	mov r0, #0
	str r0, [r5,#0x44]
	b locret_80D343A
loc_80D3434:
	ldr r0, [r5,#0x44]
	neg r0, r0
	str r0, [r5,#0x44]
locret_80D343A:
	pop {pc}
.endfunc // sub_80D3404

.func
.thumb_func
sub_80D343C:
	push {lr}
	ldrb r2, [r5,#0x12]
	ldr r3, [r5,#0x40]
	cmp r3, #0
	bge loc_80D344A
	neg r0, r0
	neg r2, r2
loc_80D344A:
	cmp r0, r2
	bgt locret_80D3472
	bl sub_80D3496
	bge locret_80D3472
	mov r3, #1
	ldrb r2, [r5,#0x13]
	cmp r1, r2
	beq loc_80D346C
	bgt loc_80D3460
	sub r3, #2
loc_80D3460:
	ldr r0, [r5,#0x64]
	mul r0, r3
	str r0, [r5,#0x44]
	mov r0, #0
	str r0, [r5,#0x40]
	b locret_80D3472
loc_80D346C:
	ldr r0, [r5,#0x40]
	neg r0, r0
	str r0, [r5,#0x40]
locret_80D3472:
	pop {pc}
.endfunc // sub_80D343C

.func
.thumb_func
sub_80D3474:
	push {r4,lr}
	bl sub_800E2C0
	add r4, r0, #0
	ldr r1, [r5,#0x40]
	cmp r1, #0
	beq locret_80D3494
	mov r2, #0
	lsr r0, r0, #0x1f
	lsr r1, r1, #0x1f
	cmp r0, r1
	beq loc_80D348E
	mov r2, #1
loc_80D348E:
	strb r2, [r5,#0x17]
	bl sub_800F2C6
locret_80D3494:
	pop {r4,pc}
.endfunc // sub_80D3474

.func
.thumb_func
sub_80D3496:
	push {r0-r3,lr}
	ldrb r0, [r5,#6]
	add r1, r0, #1
	strb r1, [r5,#6]
	cmp r0, #2
	pop {r0-r3,pc}
	.balign 4, 0x00
dword_80D34A4: .word 0x1001031
dword_80D34A8: .word 0x4050100
dword_80D34AC: .word 0x280000
	.word 0xF3800000
	.word 0xC000000
	.word 0
	.byte 0, 0, 0, 0
	.word 0x1E000A4B
	.word 0x28010E5F
	.word 0x32021273
.endfunc // sub_80D3496

.func
.thumb_func
sub_80D34CC:
	push {lr}
	ldr r1, off_80D34DC // =off_80D34E0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D34DC: .word off_80D34E0
off_80D34E0: .word sub_80D3500+1
	.word sub_80D358C+1
	.word sub_80D34EC+1
.endfunc // sub_80D34CC

.func
.thumb_func
sub_80D34EC:
	push {lr}
	ldr r0, [r5,#0x4c]
	bl sub_80B8A0A
	ldr r0, [r5,#0x6c]
	bl sub_80C4072
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D34EC

.func
.thumb_func
sub_80D3500:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x18
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D3500

	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x12]
	strh r0, [r5,#0x14]
	mov r0, #0xe7
	strh r0, [r5,#0x28]
	mov r1, #4
	ldrb r2, [r5,#4]
	mul r1, r2
	ldr r0, dword_80D3844 // = 
	add r0, r0, r1
	str r0, [r5,#0x60]
	ldrb r1, [r0,#3]
	strh r1, [r5,#0x24]
	strh r1, [r5,#0x26]
	ldrb r1, [r0]
	lsl r1, r1, #1
	strh r1, [r5,#0x20]
	ldrb r0, [r0,#2]
	bl sprite_setPallete // (int pallete) -> void
	bl sub_8019892
	tst r0, r0
	bne loc_80D356C
	bl object_freeMemory
	pop {pc}
loc_80D356C:
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A018
	mov r3, #0
	bl sub_80B89DC
	str r0, [r5,#0x4c]
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80D358C
	pop {pc}
.func
.thumb_func
sub_80D358C:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD12
	bl sub_800F672
	ldr r0, off_80D35B4 // =off_80D35B8 
	bl sub_801B394
	bl sub_801BBAC
	bl sub_801A018
.endfunc // sub_80D358C

	pop {pc}
	.balign 4, 0x00
off_80D35B4: .word off_80D35B8
off_80D35B8: .word sub_80D35E0+1
	.word sub_80165B8+1
	.word sub_80D36CE+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word loc_80D35FE+1
	.word loc_80D3654+1
.func
.thumb_func
sub_80D35E0:
	push {lr}
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x22]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80D35E0

loc_80D35FE:
	push {lr}
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80D3612
	ldr r1, off_80D3614 // =jt_80D3618 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80D3612:
	pop {pc}
off_80D3614: .word jt_80D3618
jt_80D3618: .word sub_80D3620+1
	.word sub_80D3638+1
.func
.thumb_func
sub_80D3620:
	push {lr}
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x22]
	mov r0, #0xaa
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80D3620

.func
.thumb_func
sub_80D3638:
	push {lr}
	ldr r0, [r5,#0x3c]
	ldr r1, dword_80D3848 // =0xa000 
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80D3652
	mov r0, #9
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D3652:
	pop {pc}
.endfunc // sub_80D3638

loc_80D3654:
	push {lr}
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80D3668
	ldr r1, off_80D366C // =off_80D3670 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80D3668:
	pop {pc}
	.balign 4, 0x00
off_80D366C: .word off_80D3670
off_80D3670: .word sub_80D3678+1
	.word sub_80D369E+1
.func
.thumb_func
sub_80D3678:
	push {r4,lr}
	mov r0, #2
	strb r0, [r5,#0x10]
	ldr r1, [r5,#0x60]
	ldrb r0, [r1,#1]
	strh r0, [r5,#0x22]
	mov r0, #1
	str r0, [r5,#0x64]
	mov r0, #0
	mov r1, #0
	mov r2, #1
	mov r3, #0
	ldr r4, dword_80D384C // =0x12810 
	bl sub_80C4038
	str r0, [r5,#0x6c]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {r4,pc}
.endfunc // sub_80D3678

.func
.thumb_func
sub_80D369E:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D36C4
	ldr r0, [r5,#0x64]
	sub r0, #1
	str r0, [r5,#0x64]
	bne loc_80D36C2
	ldrh r0, [r5,#0x22]
	cmp r0, #0
	beq loc_80D36C2
	sub r0, #1
	strh r0, [r5,#0x22]
	bl sub_80D3770
	mov r0, #0xa
	str r0, [r5,#0x64]
loc_80D36C2:
	b locret_80D36CC
loc_80D36C4:
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D36CC:
	pop {pc}
.endfunc // sub_80D369E

.func
.thumb_func
sub_80D36CE:
	push {lr}
	bl sub_801A180
	ldr r1, dword_80D3850 // =0x8000 
	tst r0, r1
	beq loc_80D3708
	ldr r1, dword_80D3854 // =0x300000 
	tst r0, r1
	beq loc_80D36E8
	mov r0, #6
	bl sub_800F90E
	b loc_80D3720
loc_80D36E8:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80D3740
	cmp r0, #1
	beq loc_80D3720
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80D3720
loc_80D3708:
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0
	bl sub_80E05F6
loc_80D3720:
	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80D3740:
	pop {pc}
.endfunc // sub_80D36CE

.func
.thumb_func
sub_80D3742:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x75 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D376E
	str r6, [r0,#0x2c]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	mov r1, #0xff
	and r1, r3
	mov r2, #1
	bl sub_800F614
locret_80D376E:
	pop {pc}
.endfunc // sub_80D3742

.func
.thumb_func
sub_80D3770:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x10
	mov r7, sp
	bl sub_80D37F4
	add r6, r0, #0
	cmp r6, #0
	bne loc_80D3790
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #5
	mul r0, r1
	add r0, #1
	ldrb r1, [r5,#0x13]
	b loc_80D37C6
loc_80D3790:
	ldr r0, [r5,#0x68]
	cmp r0, r6
	blt loc_80D3798
	mov r0, #0
loc_80D3798:
	add r1, r0, #1
	str r1, [r5,#0x68]
	ldrb r0, [r7,r0]
	push {r0}
	bl sub_8001532
	mov r2, #7
	and r2, r0
	pop {r0}
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	cmp r2, #1
	beq loc_80D37B8
	cmp r2, #5
	bne loc_80D37C6
loc_80D37B8:
	ldr r3, off_80D37E0 // =dword_80D37E4 
	bl sub_81096FA
	mov r4, #0xa
	ldrb r6, [r5,#0x16]
	bl sub_8015E46
loc_80D37C6:
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80D3858 // =0x20600 
	ldr r6, [r5,#0x2c]
	bl sub_80C5F2C
	add sp, sp, #0x10
	pop {r4,r6,r7,pc}
	.word 0, 0
	.byte 0, 0
off_80D37E0: .word dword_80D37E4
dword_80D37E4: .word 0x10020, 0x0
	.word 0x10000, 0x20
.endfunc // sub_80D3770

.func
.thumb_func
sub_80D37F4:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	mov r6, #0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	cmp r0, #0
	beq loc_80D3820
loc_80D3806:
	push {r0}
	ldr r3, off_80D3830 // =off_80D3834 
	bl sub_81096FA
	bl sub_800CFDC
	add r6, r6, r0
	add r7, r7, r0
	pop {r0}
	add r0, r0, r4
	beq loc_80D3820
	cmp r0, #6
	ble loc_80D3806
loc_80D3820:
	add r0, r6, #0
	pop {r4,r6,r7,pc}
	.word 0, 0
	.byte 0, 0, 0, 0
off_80D3830: .word off_80D3834
off_80D3834: .word LCDControl
	.word 0x0
	.word start_
	.word 0x0
dword_80D3844: .word 0x80D34C0
dword_80D3848: .word 0xA000
dword_80D384C: .word 0x12810
dword_80D3850: .word 0x8000
dword_80D3854: .word 0x300000
dword_80D3858: .word 0x20600
.endfunc // sub_80D37F4

loc_80D385C:
	push {lr}
	ldr r1, dword_80D3878 // = 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
	.byte 0x7D 
	.byte 0x38 
	.byte 0xD
	.byte  8
	.byte 0xB
	.byte 0x39 
	.byte 0xD
	.byte  8
	.byte 0x8B
	.byte 0x6C 
	.byte  1
	.byte  8
dword_80D3878: .word 0x80D386C
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80D3904
	ldrb r0, [r5]
	mov r1, #3
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #0x2e 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D39B0 // =0x140000 
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_8019892
	tst r0, r0
	beq loc_80D3904
	mov r1, #4
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x22]
	mov r0, #2
	bl sub_801A07C
	bl sub_801A018
	mov r0, #0xb8
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D390A
	pop {pc}
loc_80D3904:
	bl object_freeMemory
	pop {pc}
.func
.thumb_func
sub_80D390A:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80D390A

	bl sub_801A0D4
	bl battle_isBattleOver
	bne loc_80D3934
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	tst r0, r0
	beq loc_80D3926
	bl sub_801A074 // () -> void
loc_80D3926:
	bl sub_80D3946
	bl sub_801BBAC
	bl sub_801A018
	pop {pc}
loc_80D3934:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80D3946:
	push {lr}
	ldrh r0, [r5,#0x20]
	ldrb r1, [r5,#4]
	sub r1, #6
	cmp r0, r1
	bne loc_80D3956
	mov r0, #1
	strb r0, [r5,#0x10]
loc_80D3956:
	ldrh r0, [r5,#0x20]
	cmp r0, #8
	bne loc_80D3960
	mov r0, #2
	strb r0, [r5,#0x10]
loc_80D3960:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	beq loc_80D397C
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80D397A
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x22]
	mov r0, #2
	bl sub_801A07C
locret_80D397A:
	pop {pc}
loc_80D397C:
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80D3946

.func
.thumb_func
sub_80D398E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x76 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D39AE
	strb r3, [r0,#0xe]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrb r1, [r0,#4]
	strh r1, [r0,#0x20]
	str r6, [r0,#0x2c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
locret_80D39AE:
	pop {pc}
dword_80D39B0: .word 0x140000
	.word 0x460032
	.word 0x6E005A
.endfunc // sub_80D398E

.func
.thumb_func
sub_80D39BC:
	push {lr}
	ldr r1, off_80D39D0 // =off_80D39D4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80D39D0: .word off_80D39D4
off_80D39D4: .word sub_80D39E0+1
	.word sub_80D3A7C+1
	.word sub_8016C8A+1
.endfunc // sub_80D39BC

.func
.thumb_func
sub_80D39E0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0xf
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D39E0

	ldrb r0, [r5,#5]
	lsl r0, r0, #2
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	beq loc_80D3A5A
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, dword_80D3A78 // = 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80D3A64 // =dword_80D3A68 
	ldr r0, [r1,r0]
	str r0, [r5,#0x68]
	mov r0, #0
	strb r0, [r5,#7]
	mov r0, #4
	str r0, [r5,#8]
	b locret_80D3A62
loc_80D3A5A:
	bl sub_80D3F32
	bl object_freeMemory
locret_80D3A62:
	pop {pc}
off_80D3A64: .word dword_80D3A68
dword_80D3A68: .word 0x5000, 0x6000, 0x7000, 0x8000
dword_80D3A78: .word 0x80D39B4
.func
.thumb_func
sub_80D3A7C:
	push {r4,lr}
	bl sub_801A00E
	.hword 0xF746
	.word 0xF736FB27, 0x4200FB82, 0x8CACD122, 0xF73D2000, 0x4200FDCA
	.word 0x8CA8DB1C, 0xDA0642A0, 0x210C7A68, 0xD0024288, 0x20007269
	.word 0x6D6A8168, 0x7DA86F12, 0x49110080, 0x42105808, 0xF736D10A
	.word 0xD104FAEB, 0x7A684907, 0x46FE5809, 0xF7464708, 0xE005FAA3
	.word 0xFACEF746, 0xFA2BF000, 0x72282008, 0xBD10
	.word off_80D3AE8
off_80D3AE8: .word sub_80D3B08+1
	.word sub_80D3B4E+1
	.word sub_80D3BC2+1
	.word loc_80D3C44+1
	.word sub_80D3D90+1
	.word dword_80D3B00
dword_80D3B00: .word 0x5800000, 0xA800000
.endfunc // sub_80D3A7C

.func
.thumb_func
sub_80D3B08:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D3B1A
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80D3B4C
loc_80D3B1A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D3B4C
	mov r0, #1
	bl sub_80D3DFA
	ldr r0, [r5,#0x40]
	tst r0, r0
	bne loc_80D3B3E
	ldr r0, [r5,#0x44]
	tst r0, r0
	bne loc_80D3B3E
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80D3B4C
loc_80D3B3E:
	mov r0, #0
	bl sub_8002F5C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D3B4C:
	pop {pc}
.endfunc // sub_80D3B08

.func
.thumb_func
sub_80D3B4E:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D3B5E
	mov r1, #4
	strb r1, [r5,#0xb]
	bl sub_80D3EE8
loc_80D3B5E:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldrb r6, [r5,#6]
	lsr r6, r6, #1
	bcc loc_80D3B70
	add r4, r0, #0
	b loc_80D3B72
loc_80D3B70:
	add r4, r1, #0
loc_80D3B72:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r2, [r5,#0x44]
	ldr r3, [r5,#0x38]
	add r2, r2, r3
	str r2, [r5,#0x38]
	ldrb r6, [r5,#6]
	lsr r6, r6, #1
	bcc loc_80D3B8E
	add r6, r1, #0
	add r3, r0, #0
	b loc_80D3B92
loc_80D3B8E:
	add r6, r3, #0
	add r3, r2, #0
loc_80D3B92:
	cmp r4, r6
	beq loc_80D3BAE
	add r0, r3, #0
	add r1, r6, #0
	add r2, r4, #0
	bl sub_800E708
	cmp r0, #0
	beq loc_80D3BAE
	mov r0, #0
	bl sub_80D3DFA
	tst r0, r0
	bne loc_80D3BB8
loc_80D3BAE:
	bl sub_800E2AC
	bl sub_801A04C
	b locret_80D3BC0
loc_80D3BB8:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D3BC0:
	pop {r4,r6,pc}
.endfunc // sub_80D3B4E

.func
.thumb_func
sub_80D3BC2:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D3BE4
	mov r1, #4
	strb r1, [r5,#0xb]
	bl sub_80D3F10
	bl sub_80D3F88
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, off_80D3C38 // =dword_80D3C3C 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
loc_80D3BE4:
	bl sub_80D3F96
	tst r0, r0
	bne loc_80D3C24
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80D3BFA
	bl sub_80D4004
loc_80D3BFA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D3C36
	ldrb r0, [r5,#7]
	add r0, #1
	strb r0, [r5,#7]
	cmp r0, #4
	bge loc_80D3C2E
	mov r0, #0x14
	strb r0, [r5,#0x10]
	mov r0, #0
	bl sub_80D3DFA
	tst r0, r0
	bne loc_80D3C2E
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80D3C36
loc_80D3C24:
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80D3C36
loc_80D3C2E:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D3C36:
	pop {pc}
off_80D3C38: .word dword_80D3C3C
dword_80D3C3C: .word 0x5A0050
	.word 0x6E0064
.endfunc // sub_80D3BC2

loc_80D3C44:
	push {lr}
	ldr r1, off_80D3C54 // =off_80D3C58 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D3C54: .word off_80D3C58
off_80D3C58: .word sub_80D3C6C+1
	.word sub_80D3CB0+1
	.word sub_80D3CE0+1
	.word sub_80D3D22+1
	.word sub_80D3D68+1
.func
.thumb_func
sub_80D3C6C:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D3CA2
	mov r1, #4
	strb r1, [r5,#0xb]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x10
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	mov r3, #0x20 
	lsl r3, r3, #0x10
	mov r4, #0x1e
	bl sub_80E05F6
	mov r0, #0xa5
	bl sound_play // () -> void
	mov r0, #0x1c
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80D3CAE
loc_80D3CA2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D3CAE
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80D3CAE:
	pop {r4,pc}
.endfunc // sub_80D3C6C

.func
.thumb_func
sub_80D3CB0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D3CC6
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0x1d
	strb r0, [r5,#0x10]
	mov r0, #0x36 
	strh r0, [r5,#0x20]
	b locret_80D3CDE
loc_80D3CC6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x1e
	beq loc_80D3CDA
	cmp r0, #0
	bgt locret_80D3CDE
	mov r0, #8
	strh r0, [r5,#0xa]
	b locret_80D3CDE
loc_80D3CDA:
	mov r0, #0x1e
	strb r0, [r5,#0x10]
locret_80D3CDE:
	pop {pc}
.endfunc // sub_80D3CB0

.func
.thumb_func
sub_80D3CE0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D3D06
	mov r1, #4
	strb r1, [r5,#0xb]
	bl sub_80D3F42
	tst r0, r0
	beq loc_80D3D14
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #5
	strh r0, [r5,#0x20]
	b locret_80D3D20
loc_80D3D06:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D3D20
	mov r0, #0xc
	strh r0, [r5,#0xa]
	b locret_80D3D20
loc_80D3D14:
	mov r0, #0x14
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D3D20:
	pop {pc}
.endfunc // sub_80D3CE0

.func
.thumb_func
sub_80D3D22:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D3D3E
	mov r1, #4
	strb r1, [r5,#0xb]
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, off_80D3D5C // =byte_80D3D60 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80D3D58
loc_80D3D3E:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80D3D4C
	bl sub_80D4020
loc_80D3D4C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D3D58
	mov r0, #0x10
	strh r0, [r5,#0xa]
locret_80D3D58:
	pop {pc}
	.balign 4, 0x00
off_80D3D5C: .word byte_80D3D60
byte_80D3D60: .byte 0x18, 0x0, 0x14, 0x0, 0x12, 0x0, 0x10, 0x0
.endfunc // sub_80D3D22

.func
.thumb_func
sub_80D3D68:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D3D7E
	mov r1, #4
	strb r1, [r5,#0xb]
	bl sub_80D4030
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80D3D8E
loc_80D3D7E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D3D8E
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D3D8E:
	pop {pc}
.endfunc // sub_80D3D68

.func
.thumb_func
sub_80D3D90:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D3DAE
	mov r1, #4
	strb r1, [r5,#0xb]
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	mov r4, #0x12
	bl sub_80E05F6
	mov r0, #5
	strh r0, [r5,#0x20]
	b locret_80D3DC2
loc_80D3DAE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D3DC2
	bl sub_801A074 // () -> void
	bl sub_80D3F32
	mov r0, #8
	strb r0, [r5,#8]
locret_80D3DC2:
	pop {pc}
.endfunc // sub_80D3D90

.func
.thumb_func
sub_80D3DC4:
	push {lr}
	push {r3}
	push {r0-r2,r5}
	mov r0, #0x77 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq loc_80D3DF6
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	pop {r3}
	str r3, [r0,#0x64]
	str r0, [r3]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	b locret_80D3DF8
loc_80D3DF6:
	pop {r3}
locret_80D3DF8:
	pop {pc}
.endfunc // sub_80D3DC4

.func
.thumb_func
sub_80D3DFA:
	push {r4,r6,r7,lr}
	sub sp, sp, #0xc
	str r0, [sp]
	mov r4, #0
loc_80D3E02:
	ldrb r0, [r5,#6]
	add r0, r0, r4
	mov r1, #3
	and r0, r1
	lsl r0, r0, #1
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	add r0, r0, r1
	ldr r1, off_80D3ED4 // =dword_80D3ED8 
	add r0, r0, r1
	mov r1, #0
	ldrsb r2, [r0,r1]
	mov r1, #1
	ldrsb r3, [r0,r1]
	str r2, [sp,#4]
	str r3, [sp,#8]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	ldrb r2, [r5,#6]
	add r2, r2, r4
	mov r3, #3
	and r2, r3
	lsl r2, r2, #4
	ldrb r3, [r5,#0x16]
	lsl r3, r3, #3
	add r2, r2, r3
	ldr r3, off_80D3E90 // =dword_80D3E94 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80D3DFA

	tst r0, r0
	pop {r0,r1}
	bne loc_80D3E56
	add r4, #1
	cmp r4, #2
	ble loc_80D3E02
	b loc_80D3E80
loc_80D3E56:
	ldr r0, [sp]
	tst r0, r0
	bne loc_80D3E64
	cmp r4, #0
	bne loc_80D3E64
	mov r0, #0
	b loc_80D3E8A
loc_80D3E64:
	ldr r0, [r5,#0x68]
	ldr r1, [sp,#4]
	ldr r2, [sp,#8]
	mul r1, r0
	mul r2, r0
	str r1, [r5,#0x40]
	str r2, [r5,#0x44]
	ldrb r0, [r5,#6]
	add r0, r0, r4
	mov r1, #3
	and r0, r1
	strb r0, [r5,#6]
	mov r0, #1
	b loc_80D3E8A
loc_80D3E80:
	mov r0, #0
	str r0, [r5,#0x40]
	str r0, [r5,#0x44]
	mov r0, #1
	b loc_80D3E8A
loc_80D3E8A:
	add sp, sp, #0xc
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80D3E90: .word dword_80D3E94
dword_80D3E94: .word 0x10000, 0xC800000, 0x10000, 0xC800000, 0x10020, 0xC800000
	.word 0x10000, 0xC800020, 0x10000, 0xC800000, 0x10000, 0xC800000
	.word 0x10000, 0xC800000, 0x10000, 0xC800000
off_80D3ED4: .word dword_80D3ED8
dword_80D3ED8: .word 0xFF0100, 0x1FF00, 0x10100, 0xFFFF00
.func
.thumb_func
sub_80D3EE8:
	push {lr}
	ldr r0, [r5,#0x40]
	cmp r0, #0
	beq loc_80D3EFC
	cmp r0, #0
	bgt loc_80D3EF8
	mov r1, #0x16
	b loc_80D3F0C
loc_80D3EF8:
	mov r1, #0x14
	b loc_80D3F0C
loc_80D3EFC:
	ldr r0, [r5,#0x44]
	cmp r0, #0
	beq locret_80D3F0E
	cmp r0, #0
	bgt loc_80D3F0A
	mov r1, #0x17
	b loc_80D3F0C
loc_80D3F0A:
	mov r1, #0x15
loc_80D3F0C:
	strb r1, [r5,#0x10]
locret_80D3F0E:
	pop {pc}
.endfunc // sub_80D3EE8

.func
.thumb_func
sub_80D3F10:
	push {lr}
	ldrb r0, [r5,#0x10]
	cmp r0, #0x15
	bne loc_80D3F1C
	mov r1, #0x1b
	b loc_80D3F2E
loc_80D3F1C:
	cmp r0, #0x14
	bne loc_80D3F24
	mov r1, #0x1a
	b loc_80D3F2E
loc_80D3F24:
	cmp r0, #0x17
	bne loc_80D3F2C
	mov r1, #0x19
	b loc_80D3F2E
loc_80D3F2C:
	mov r1, #0x18
loc_80D3F2E:
	strb r1, [r5,#0x10]
	pop {pc}
.endfunc // sub_80D3F10

.func
.thumb_func
sub_80D3F32:
	push {lr}
	ldr r1, [r5,#0x64]
	ldr r0, [r1]
	cmp r0, r5
	bne locret_80D3F40
	mov r0, #0
	str r0, [r1]
locret_80D3F40:
	pop {pc}
.endfunc // sub_80D3F32

.func
.thumb_func
sub_80D3F42:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	ldr r1, [r5,#0x60]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	ldr r3, off_80D3F7C // =dword_80D3F80 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80D3F84 - 0x80d3f80)
	mov r4, #0xa
	ldrb r6, [r5,#0x16]
	add r7, sp, #0
	bl sub_800D3FE
	add r6, r0, #0
	tst r6, r6
	beq loc_80D3F76
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80D3F78
loc_80D3F76:
	mov r0, #0
loc_80D3F78:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
off_80D3F7C: .word dword_80D3F80
dword_80D3F80: .word 0x10000
dword_80D3F84: .word 0xF880080
.endfunc // sub_80D3F42

.func
.thumb_func
sub_80D3F88:
	push {lr}
	ldr r1, [r5,#0x60]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	str r0, [r5,#0x6c]
	str r1, [r5,#0x70]
	pop {pc}
.endfunc // sub_80D3F88

.func
.thumb_func
sub_80D3F96:
	push {r7,lr}
	sub sp, sp, #0x18
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80D3FA6
	cmp r0, #1
	beq loc_80D3FBA
	b loc_80D3FCC
loc_80D3FA6:
	ldr r1, [r5,#0x60]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	ldr r2, [r5,#0x6c]
	ldr r3, [r5,#0x70]
	cmp r0, r2
	bne loc_80D3FE8
	cmp r1, r3
	bne loc_80D3FE8
	b loc_80D3FE4
loc_80D3FBA:
	mov r0, #0x40 
	ldrb r1, [r5,#0x16]
	mov r2, #1
	eor r1, r2
	bl sub_8010300
	tst r0, r0
	bne loc_80D3FE8
	b loc_80D3FE4
loc_80D3FCC:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80D3FF0 // =dword_80D3FF4 
	add r1, r1, r0
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0
	bl sub_800CEA0
	cmp r0, #9
	bgt loc_80D3FE8
	b loc_80D3FE4
loc_80D3FE4:
	mov r0, #0
	b loc_80D3FEA
loc_80D3FE8:
	mov r0, #1
loc_80D3FEA:
	add sp, sp, #0x18
	pop {r7,pc}
	.byte 0, 0
off_80D3FF0: .word dword_80D3FF4
dword_80D3FF4: .word 0x20, 0x0, 0x0
	.word 0x20
.endfunc // sub_80D3F96

.func
.thumb_func
sub_80D4004:
	push {lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80D4014 // =dword_80D4018 
	ldr r2, [r1,r0]
	bl object_highlightPanelRegionBlue
	pop {pc}
off_80D4014: .word dword_80D4018
dword_80D4018: .word 0x82, 0x81
.endfunc // sub_80D4004

.func
.thumb_func
sub_80D4020:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0xa
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	pop {pc}
.endfunc // sub_80D4020

.func
.thumb_func
sub_80D4030:
	push {r4,r6,r7,lr}
	mov r7, #0
loc_80D4034:
	add r2, r7, #0
	lsl r2, r2, #1
	ldr r3, off_80D406C // =dword_80D4070 
	add r2, r2, r3
	mov r3, #0
	ldrsb r0, [r2,r3]
	mov r3, #1
	ldrsb r1, [r2,r3]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80D4062
	ldrb r2, [r5,#0xe]
	mov r4, #1
	ldr r6, [r5,#0x2c]
	bl sub_80C7D50
loc_80D4062:
	add r7, #1
	cmp r7, #4
	blt loc_80D4034
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80D406C: .word dword_80D4070
dword_80D4070: .word 0x100FF, 0x100FF00, 0x40000355, 0x40020337, 0x4004033C
	.word 0x40060378
.endfunc // sub_80D4030

loc_80D4088:
	push {lr}
	ldr r1, off_80D4098 // =off_80D409C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D4098: .word off_80D409C
off_80D409C: .word sub_80D40A8+1
	.word sub_80D4144+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D40A8:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #4
	mov r2, #0xa
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D40A8

	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x12]
	strh r0, [r5,#0x14]
	mov r0, #0xdd
	ldrb r1, [r5,#4]
	add r0, r0, r1
	strh r0, [r5,#0x28]
	ldr r7, off_80D4138 // =byte_80D4140 
	ldrb r0, [r5,#4]
	ldrb r0, [r7,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldr r0, dword_80D4134 // =0x960 
	strh r0, [r5,#0x20]
	mov r1, #4
	ldrb r2, [r5,#4]
	mul r1, r2
	ldr r0, off_80D413C // =dword_80D4070+8 
	add r0, r0, r1
	str r0, [r5,#0x60]
	ldrb r0, [r0,#2]
	bl sprite_setPallete // (int pallete) -> void
	bl sub_8019892
	tst r0, r0
	bne loc_80D411A
	bl object_freeMemory
	pop {pc}
loc_80D411A:
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80D4144
	pop {pc}
	.balign 4, 0x00
dword_80D4134: .word 0x960
off_80D4138: .word byte_80D4140
off_80D413C: .word dword_80D4070+8
byte_80D4140: .byte 0x3C, 0x3C, 0x3C, 0x3C
.func
.thumb_func
sub_80D4144:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD12
	bl sub_800F672
	ldr r0, off_80D416C // =off_80D4170 
	bl sub_801B394
	bl sub_801BBAC
	bl sub_801A018
.endfunc // sub_80D4144

	pop {pc}
	.balign 4, 0x00
off_80D416C: .word off_80D4170
off_80D4170: .word sub_80D4198+1
	.word sub_80165B8+1
	.word sub_80D42E8+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word loc_80D41B6+1
	.word loc_80D41FC+1
.func
.thumb_func
sub_80D4198:
	push {lr}
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x22]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80D4198

loc_80D41B6:
	push {lr}
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80D41CA
	ldr r1, off_80D41CC // =off_80D41D0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80D41CA:
	pop {pc}
off_80D41CC: .word off_80D41D0
off_80D41D0: .word sub_80D41D8+1
	.word sub_80D41E8+1
.func
.thumb_func
sub_80D41D8:
	push {lr}
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x22]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80D41D8

.func
.thumb_func
sub_80D41E8:
	push {lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80D41FA
	mov r0, #9
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D41FA:
	pop {pc}
.endfunc // sub_80D41E8

loc_80D41FC:
	push {lr}
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80D4210
	ldr r1, off_80D4214 // =off_80D4218 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80D4210:
	pop {pc}
	.balign 4, 0x00
off_80D4214: .word off_80D4218
off_80D4218: .word sub_80D4228+1
	.word sub_80D4242+1
	.word sub_80D42B0+1
	.word sub_80D42CC+1
.func
.thumb_func
sub_80D4228:
	push {lr}
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x60]
	ldrb r0, [r0]
	lsl r0, r0, #1
	strh r0, [r5,#0x22]
	mov r0, #1
	str r0, [r5,#0x64]
	str r0, [r5,#0x68]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80D4228

.func
.thumb_func
sub_80D4242:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D4288
	ldr r0, [r5,#0x68]
	sub r0, #1
	str r0, [r5,#0x68]
	bne loc_80D4266
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#3]
	str r0, [r5,#0x68]
	ldr r7, off_80D4294 // =byte_80D42A8 
	ldrb r0, [r5,#4]
	add r0, r0, r0
	ldrh r0, [r7,r0]
	bl sound_play // () -> void
loc_80D4266:
	ldr r0, [r5,#0x64]
	sub r0, #1
	str r0, [r5,#0x64]
	bne loc_80D4280
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#1]
	str r0, [r5,#0x64]
	ldr r1, off_80D4290 // =off_80D4298 
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
loc_80D4280:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80D428C
loc_80D4288:
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80D428C:
	pop {pc}
	.byte 0, 0
off_80D4290: .word off_80D4298
off_80D4294: .word byte_80D42A8
off_80D4298: .word sub_80D435C+1
	.word sub_80D4392+1
	.word sub_80D43C0+1
	.word sub_80D43E8+1
byte_80D42A8: .byte 0xA8, 0x0, 0xA9, 0x0, 0xAA, 0x0, 0xAB, 0x0
.endfunc // sub_80D4242

.func
.thumb_func
sub_80D42B0:
	push {lr}
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#4]
	ldr r1, off_80D42C4 // =byte_80D42C8 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x22]
	mov r0, #0xc
	strh r0, [r5,#0xa]
	pop {pc}
off_80D42C4: .word byte_80D42C8
byte_80D42C8: .byte 0xAA, 0x3C, 0xAA, 0x1E
.endfunc // sub_80D42B0

.func
.thumb_func
sub_80D42CC:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne locret_80D42E6
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80D42E6
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D42E6:
	pop {pc}
.endfunc // sub_80D42CC

.func
.thumb_func
sub_80D42E8:
	push {lr}
	bl sub_801A180
	ldr r1, dword_80D4438 // =0x8000 
	tst r0, r1
	beq loc_80D4322
	ldr r1, dword_80D443C // =0x300000 
	tst r0, r1
	beq loc_80D4302
	mov r0, #7
	bl sub_800F90E
	b loc_80D433A
loc_80D4302:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80D435A
	cmp r0, #1
	beq loc_80D433A
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80D433A
loc_80D4322:
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0
	bl sub_80E05F6
loc_80D433A:
	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80D435A:
	pop {pc}
.endfunc // sub_80D42E8

.func
.thumb_func
sub_80D435C:
	push {r4-r7,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #0x10
	mul r0, r1
	add r0, #0x80
	mov r7, r10
	ldr r7, [r7,#0x18]
	add r7, r7, r0
	mov r4, #0
loc_80D436E:
	ldr r5, [r7]
	tst r5, r5
	beq loc_80D4388
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0x17
	beq loc_80D4388
	cmp r0, #0x18
	beq loc_80D4388
	mov r0, #4
	bl object_setInvulnerableTime
loc_80D4388:
	add r7, #4
	add r4, #1
	cmp r4, #4
	blt loc_80D436E
	pop {r4-r7,pc}
.endfunc // sub_80D435C

.func
.thumb_func
sub_80D4392:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r4, off_80D43B4 // =dword_80D43B8 
	ldr r4, [r4,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #5
	mov r3, #0
	mov r6, #0
	mov r7, #0x23 
	lsl r7, r7, #8
	add r7, #0
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80D43B4: .word dword_80D43B8
dword_80D43B8: .word 0x3200FF85, 0x3200FF84
.endfunc // sub_80D4392

.func
.thumb_func
sub_80D43C0:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #5
	mov r3, #0
	ldr r4, dword_80D43E4 // =0x3205ff83 
	mov r6, #0
	mov r7, #0x43 
	lsl r7, r7, #8
	add r7, #0
	bl sub_80C536A
	mov r0, #2
	mov r1, #4
	bl sub_80302A8
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D43E4: .word 0x3205FF83
.endfunc // sub_80D43C0

.func
.thumb_func
sub_80D43E8:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #5
	mov r3, #0
	ldr r4, dword_80D4404 // =0x3205ff80 
	mov r6, #0
	mov r7, #0x33 
	lsl r7, r7, #8
	add r7, #0
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D4404: .word 0x3205FF80
.endfunc // sub_80D43E8

.func
.thumb_func
sub_80D4408:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x78 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D4434
	str r6, [r0,#0x2c]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	mov r1, #0xff
	and r1, r3
	mov r2, #1
	bl sub_800F614
locret_80D4434:
	pop {pc}
	.balign 4, 0x00
dword_80D4438: .word 0x8000
dword_80D443C: .word 0x300000
.endfunc // sub_80D4408

loc_80D4440:
	push {lr}
	ldr r1, off_80D4454 // =off_80D4458 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D4454: .word off_80D4458
off_80D4458: .word sub_80D4472+1
	.word sub_80D44D2+1
	.word sub_80D4464+1
.func
.thumb_func
sub_80D4464:
	push {lr}
	ldr r0, [r5,#0x60]
	mov r1, #0
	str r1, [r0]
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D4464

.func
.thumb_func
sub_80D4472:
	push {r4,lr}
	bl sub_800E29C // () -> void
	ldr r0, dword_80D46AC // =0x41f 
	ldr r1, dword_80D46B0 // =0xc0d0300 
	bl sub_8011504
.endfunc // sub_80D4472

	tst r0, r0
	bne loc_80D449C
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl object_freeMemory
	pop {r4,pc}
loc_80D449C:
	mov r0, #0xa
	bl sub_801A140
	mov r0, #1
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldrb r0, [r5,#4]
	cmp r0, #4
	bne loc_80D44B4
	mov r1, #4
	strb r1, [r5,#0x10]
	mov r0, #0
loc_80D44B4:
	bl sprite_setPallete // (int pallete) -> void
	bl sub_801A018
	ldr r0, [r5,#0x60]
	str r5, [r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#8]
	pop {r4,pc}
.func
.thumb_func
sub_80D44D2:
	push {r4,r7,lr}
	bl sub_801A00E
	.word 0xFDFCF745, 0xFE57F735, 0xD11D4200, 0xF73D2002, 0x3001F840
	.word 0x6D6FD00F, 0x49706F38, 0xD1134208, 0xFDCEF735, 0x490CD104
	.word 0x58097A68, 0x470846FE, 0xFD86F745, 0x2034BD90, 0xC80E1940
	.word 0x4242400, 0x240E191B, 0xF86BF00C, 0xFDA8F745, 0x72682008
	.word 0x81682000, 0xBD90
	.word off_80D4534
off_80D4534: .word sub_80D4544+1
	.word loc_80D4570+1
	.word sub_80D45EC+1
	.word sub_80D4604+1
.endfunc // sub_80D44D2

.func
.thumb_func
sub_80D4544:
	push {lr}
	ldrh r0, [r5,#0x20]
	mov r1, #4
	tst r0, r1
	bne loc_80D4556
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
loc_80D4556:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D456E
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D456E:
	pop {pc}
.endfunc // sub_80D4544

loc_80D4570:
	push {lr}
	ldr r1, off_80D4580 // =off_80D4584 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80D4580: .word off_80D4584
off_80D4584: .word sub_80D458C+1
	.word sub_80D45AE+1
.func
.thumb_func
sub_80D458C:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80D459C
	mov r0, #1
	strb r0, [r5,#0xb]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
loc_80D459C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D45AC
	mov r0, #8
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80D45AC:
	pop {pc}
.endfunc // sub_80D458C

.func
.thumb_func
sub_80D45AE:
	push {lr}
	ldrh r0, [r5,#0x20]
	mov r1, #2
	tst r0, r1
	beq loc_80D45BC
	bl sprite_forceWhitePallete
loc_80D45BC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D45EA
	ldrb r0, [r5,#6]
	add r0, #1
	strb r0, [r5,#6]
	cmp r0, #2
	blt loc_80D45E0
	beq loc_80D45DA
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80D45EA
loc_80D45DA:
	ldrb r0, [r5,#5]
	add r0, #0x3c 
	strb r0, [r5,#5]
loc_80D45E0:
	ldrb r0, [r5,#0x10]
	add r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D45EA:
	pop {pc}
.endfunc // sub_80D45AE

.func
.thumb_func
sub_80D45EC:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #4
	bne loc_80D45F8
	bl sub_80D4674
loc_80D45F8:
	ldr r0, [r5,#0x4c]
	bl sub_8116878
	mov r0, #8
	strb r0, [r5,#8]
	pop {pc}
.endfunc // sub_80D45EC

.func
.thumb_func
sub_80D4604:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80D461E
	mov r0, #1
	strb r0, [r5,#0xb]
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80D4644
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x20]
loc_80D461E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D4648
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103F8
	ldrb r1, [r0,#0x13]
	ldrb r0, [r0,#0x12]
	mov r2, #3
	mov r3, #0
	mov r4, #0
	ldr r6, [r5,#0x2c]
	bl sub_80C7D50
loc_80D4644:
	mov r0, #8
	strb r0, [r5,#8]
locret_80D4648:
	pop {r4,r6,pc}
.endfunc // sub_80D4604

.func
.thumb_func
sub_80D464A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x79 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D4672
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D4672:
	pop {pc}
.endfunc // sub_80D464A

.func
.thumb_func
sub_80D4674:
	push {r4,r6,r7,lr}
	mov r0, #0
	strb r0, [r5,#0x16]
	mov r1, #3
loc_80D467C:
	push {r1}
	mov r0, #0
	mov r2, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, off_80D46A0 // =dword_80D46A4 
	lsl r6, r1, #1
	ldrh r4, [r4,r6]
	mov r6, #0xa
	bl sub_80D4B44
	pop {r1}
	sub r1, #1
	bne loc_80D467C
	mov r0, #1
	strb r0, [r5,#0x16]
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80D46A0: .word dword_80D46A4
dword_80D46A4: .word 0x1140000, 0x1280100
dword_80D46AC: .word 0x41F
dword_80D46B0: .word 0xC0D0300
	.word 0xF800000
.endfunc // sub_80D4674

loc_80D46B8:
	push {lr}
	ldr r1, off_80D46C8 // =off_80D46CC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D46C8: .word off_80D46CC
off_80D46CC: .word sub_80D46D8+1
	.word sub_80D4754+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D46D8:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x34 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	mov r0, #1
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D46D8

	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E2AC
	mov r0, #0xe2
	strh r0, [r5,#0x28]
	mov r0, #0x32 
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #0
	strb r0, [r5,#0xe]
	ldr r0, off_80D4750 // =0x1e0 
	strh r0, [r5,#0x20]
	bl sub_8019892
	tst r0, r0
	bne loc_80D472C
	bl object_freeMemory
	pop {pc}
loc_80D472C:
	mov r1, #0xc
	mov r2, #0xd
	mov r3, #1
	bl sub_8019FB4
	bl sub_801A074 // () -> void
	mov r0, #0
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80D4754
	pop {pc}
	.byte 0, 0
off_80D4750: .word 0x1E0
.func
.thumb_func
sub_80D4754:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD12
	bl sub_801A0D4
	bl sub_800F672
	ldr r0, [r5,#0x54]
	mov r1, #0x80
	ldrh r1, [r0,r1]
	tst r1, r1
	beq loc_80D4786
	mov r0, #0
	strh r0, [r5,#0x24]
	mov r0, #1
	str r0, [r5,#0x60]
	str r1, [r5,#0x64]
	bl sub_801A074 // () -> void
loc_80D4786:
	ldr r0, off_80D4798 // =off_80D479C 
	bl sub_801B394
	bl sub_801BC24
	bl sub_801A018
.endfunc // sub_80D4754

	pop {pc}
	.balign 4, 0x00
off_80D4798: .word off_80D479C
off_80D479C: .word sub_80D47C0+1
	.word sub_80165B8+1
	.word loc_80D4888+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80D4870+1
.func
.thumb_func
sub_80D47C0:
	push {r4,r6,lr}
	bl battle_isTimeStop
	bne locret_80D486E
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D47FA
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x3c 
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80D4A18 // =0xffffe000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	mov r0, #0x3c 
	strh r0, [r5,#0x22]
	mov r0, #1
	str r0, [r5,#0x6c]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D47FA:
	ldrh r0, [r5,#0x22]
	cmp r0, #5
	bge loc_80D4806
	mov r0, #1
	bl sub_801A07C
loc_80D4806:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bge loc_80D4848
	bl object_isCurrentPanelSolid
	bne loc_80D481E
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r4,r6,pc}
loc_80D481E:
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #4
	bl object_setPanelType
	mov r0, #0x90
	bl sound_play // () -> void
	mov r0, #0
	str r0, [r5,#0x6c]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80D486E
loc_80D4848:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80D4A18 // =0xffffe000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
	bl sub_801A04C
locret_80D486E:
	pop {r4,r6,pc}
.endfunc // sub_80D47C0

.func
.thumb_func
sub_80D4870:
	push {lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne locret_80D4886
	mov r0, #1
	strb r0, [r5,#0xa]
	mov r1, #0xe
	mov r2, #0xf
	mov r3, #3
	bl sub_801A082
locret_80D4886:
	pop {pc}
.endfunc // sub_80D4870

loc_80D4888:
	push {lr}
	ldr r1, off_80D4898 // =loc_80D489C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D4898: .word loc_80D489C
loc_80D489C:
	ldr r0, sub_80D4B44 // =0xb500 
	lsr r5, r1, #0x20
	ldr r0, dword_80D4B60 // =0x6050300 
	lsr r5, r1, #0x20
	ldr r1, loc_80D4B2C // =0x7168 
	lsr r5, r1, #0x20
	mov r0, #4
	strh r0, [r5,#0xa]
	mov pc, lr
	push {lr}
	bl sub_801A180
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80D499E
	cmp r0, #1
	beq loc_80D497E
	bl object_getFlag // () -> int
	ldr r1, off_80D4A1C // =LCDControl 
	tst r0, r1
	bne loc_80D497E
	bl sub_801A180
	ldr r1, dword_80D4A20 // =0x8000 
	tst r0, r1
	beq loc_80D48E2
	ldr r1, dword_80D4A20+4 // =0x300000 
	tst r0, r1
	beq loc_80D496C
	mov r0, #8
	bl sub_800F90E
	b loc_80D497E
loc_80D48E2:
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq loc_80D496C
	bl battle_isTimeStop
	bne locret_80D499E
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80D496C
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D496C
	ldr r0, [r5,#0x6c]
	tst r0, r0
	bne loc_80D497E
	mov r0, #8
	strh r0, [r5,#0xa]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80D493C
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x24 
	bl sub_80E05F6
	mov r0, #8
	add r0, #0xff
	bl sound_play // () -> void
loc_80D493C:
	mov r0, #0x40 
	bl sub_801DACC
	mov r6, #0xb2
	lsl r6, r6, #0x10
	ldr r0, [r5,#0x64]
	add r6, r6, r0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	ldr r4, [r5,#4]
	mov r7, #0x75 
	add r7, #0xff
	bl sub_80E61D2
	add r2, r0, #0
	mov r1, #1
	ldrb r0, [r5,#0x16]
	bl sub_800BF16
	bl sub_802EF5C
	b locret_80D499E
loc_80D496C:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
loc_80D497E:
	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80D499E:
	pop {pc}
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl battle_isTimeStop
	bne locret_80D499E
	mov r0, #0x40 
	bl sub_801DA48
	bl sub_800F656
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80D49CC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x7a 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D49F4
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	mov r1, #0xff
	and r1, r3
	mov r2, #1
	bl sub_800F614
locret_80D49F4:
	pop {pc}
.endfunc // sub_80D49CC

	push {lr}
	push {r1-r3}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r4, [r5,#0x13]
	lsl r4, r4, #0x18
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	lsl r0, r0, #0x10
	add r4, r4, r0
	pop {r1-r3}
	bl sub_80D49CC
	pop {pc}
	.balign 4, 0x00
dword_80D4A18: .word 0xFFFFE000
off_80D4A1C: .word LCDControl
dword_80D4A20: .word 0x8000, 0x300000
loc_80D4A28:
	push {lr}
	ldr r1, off_80D4A38 // =off_80D4A3C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D4A38: .word off_80D4A3C
off_80D4A3C: .word sub_80D4A48+1
	.word sub_80D4A98+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D4A48:
	push {r4,lr}
	bl sub_800E29C // () -> void
	ldr r0, dword_80D4B5C // =0x102102a 
	ldr r1, dword_80D4B60 // =0x6050300 
	bl sub_8011504
.endfunc // sub_80D4A48

	tst r0, r0
	bne loc_80D4A72
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl object_freeMemory
	pop {r4,pc}
loc_80D4A72:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, dword_80D4B64 // =0x80000 
	str r0, [r5,#0x40]
	mov r0, #0xa
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80D4A98
	pop {r4,pc}
.func
.thumb_func
sub_80D4A98:
	push {r4,r7,lr}
	bl sub_801A00E
	.hword 0xF745
	.word 0x6D6FFB19, 0x42006F38, 0x8A68D003, 0xF7456628, 0x4911FAE1
	.word 0x58097A68, 0x470846FE, 0x78786D6F, 0xD1062800, 0x6E298A68
	.word 0xD0024288, 0xF7452001, 0xF747FAD5, 0xF745F86B, 0xBD90FA9F
	.word 0x19402034, 0x2410C80E, 0x191B0424, 0xF00B2414, 0xF745FD84
	.word 0x2008FAC1, 0xBD9060A8
	.word off_80D4AFC
off_80D4AFC: .word sub_80D4B00+1
.endfunc // sub_80D4A98

.func
.thumb_func
sub_80D4B00:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq loc_80D4B0E
	sub r0, #1
	strb r0, [r5,#4]
	b locret_80D4B42
loc_80D4B0E:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, #2
	bne loc_80D4B34
	ldrb r0, [r5,#5]
	cmp r0, #1
	bne loc_80D4B34
	mov r0, #0
loc_80D4B2C:
	strb r0, [r5,#5]
	mov r0, #0xff
	bl sound_play // () -> void
loc_80D4B34:
	ldrb r0, [r5,#0x12]
	cmp r0, #7
	bne locret_80D4B42
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D4B42:
	pop {pc}
.endfunc // sub_80D4B00

.func
.thumb_func
sub_80D4B44:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x7b 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D4B58
	bl sub_801155A
locret_80D4B58:
	pop {pc}
	.balign 4, 0x00
dword_80D4B5C: .word 0x102102A
dword_80D4B60: .word 0x6050300
dword_80D4B64: .word 0x80000
.endfunc // sub_80D4B44

loc_80D4B68:
	push {lr}
	ldr r1, off_80D4B78 // =off_80D4B7C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D4B78: .word off_80D4B7C
off_80D4B7C: .word sub_80D4B88+1
	.word sub_80D4BC0+1
	.word sub_80D4BF6+1
.func
.thumb_func
sub_80D4B88:
	push {r4,lr}
	bl sub_80D4C3A
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r4, r0, #0
	tst r0, r0
	bne loc_80D4BA2
	bl object_freeMemory
	b locret_80D4BBE
loc_80D4BA2:
	mov r1, #0x36 
	mov r2, #0
	mov r3, #0
	bl sub_8019FB4
	ldrb r1, [r5,#4]
	strb r1, [r4,#1]
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80D4BBE:
	pop {r4,pc}
.endfunc // sub_80D4B88

.func
.thumb_func
sub_80D4BC0:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80D4BC0

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D4BEC
	bl sub_80D4C6C
	tst r0, r0
	bne loc_80D4BEC
	bl sub_80D4C3A
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl sub_801A018
	b locret_80D4BF4
loc_80D4BEC:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D4BF4:
	pop {pc}
.func
.thumb_func
sub_80D4BF6:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80D4BF6

	bl sub_801A0D4
	bl sub_801A074 // () -> void
	bl sub_8016C8A
	pop {pc}
.func
.thumb_func
sub_80D4C0A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x7c 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D4C32
	str r1, [r0,#0x60]
	str r2, [r0,#0x64]
	ldr r1, [r1]
	and r1, r2
	str r1, [r0,#0x68]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r5, [r0,#0x4c]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D4C32:
	pop {pc}
.endfunc // sub_80D4C0A

.func
.thumb_func
sub_80D4C34:
	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
.endfunc // sub_80D4C34

.func
.thumb_func
sub_80D4C3A:
	push {lr}
	ldr r3, [r5,#0x4c]
	mov r1, #0
	ldr r0, [r3,#0x40]
	cmp r0, #0
	beq loc_80D4C4E
	mov r1, #1
	cmp r0, #0
	bgt loc_80D4C4E
	neg r1, r1
loc_80D4C4E:
	ldrb r0, [r3,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	mov r1, #0
	ldr r0, [r3,#0x44]
	cmp r0, #0
	beq loc_80D4C64
	mov r1, #1
	cmp r0, #0
	bgt loc_80D4C64
	neg r1, r1
loc_80D4C64:
	ldrb r0, [r3,#0x13]
	add r0, r0, r1
	strb r0, [r5,#0x13]
	pop {pc}
.endfunc // sub_80D4C3A

.func
.thumb_func
sub_80D4C6C:
	push {lr}
	mov r3, #0
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	ldr r1, [r5,#0x64]
	and r0, r1
	ldr r1, [r5,#0x68]
	cmp r0, r1
	beq loc_80D4C80
	mov r3, #1
loc_80D4C80:
	add r0, r3, #0
	pop {pc}
.endfunc // sub_80D4C6C

loc_80D4C84:
	push {lr}
	ldr r1, off_80D4C94 // =off_80D4C98 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D4C94: .word off_80D4C98
off_80D4C98: .word sub_80D4CA4+1
	.word sub_80D4D34+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D4CA4:
	push {lr}
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x35 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D4CA4

	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x12]
	strh r0, [r5,#0x14]
	mov r0, #0xe3
	strh r0, [r5,#0x28]
	mov r0, #1
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldr r0, dword_80D4D30 // =0x1770 
	strh r0, [r5,#0x20]
	mov r0, #3
	strh r0, [r5,#0x22]
	ldrb r0, [r5,#4]
	cmp r0, #1
	beq loc_80D4D08
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x15
	bl sub_80E05F6
loc_80D4D08:
	bl sub_8019892
	tst r0, r0
	bne loc_80D4D16
	bl object_freeMemory
	pop {pc}
loc_80D4D16:
	mov r1, #0xe
	mov r2, #0xf
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	pop {pc}
	.byte 0, 0
dword_80D4D30: .word 0x1770
.func
.thumb_func
sub_80D4D34:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD12
	bl sub_800F672
	ldr r0, off_80D4D5C // =off_80D4D60 
	bl sub_801B4D4
	bl sub_801BBAC
	bl sub_801A018
.endfunc // sub_80D4D34

	pop {pc}
	.balign 4, 0x00
off_80D4D5C: .word off_80D4D60
off_80D4D60: .word sub_80D4D88+1
	.word sub_80165B8+1
	.word sub_80D4EFC+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80D4DC8+1
	.word loc_80D4DCC+1
.func
.thumb_func
sub_80D4D88:
	push {lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80D4DBC
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r2, dword_80D4DC0 // =0x10 
	ldr r3, dword_80D4DC4 // =0xf880080 
	bl object_checkPanelParameters
	tst r0, r0
	bne loc_80D4DA8
	bl sub_80D4EFC
	pop {pc}
loc_80D4DA8:
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D4DBC:
	pop {pc}
	.byte 0, 0
dword_80D4DC0: .word 0x10
dword_80D4DC4: .word 0xF880080
.endfunc // sub_80D4D88

.func
.thumb_func
sub_80D4DC8:
	push {lr}
	pop {pc}
.endfunc // sub_80D4DC8

loc_80D4DCC:
	push {lr}
	ldr r1, off_80D4DDC // =off_80D4DE0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D4DDC: .word off_80D4DE0
off_80D4DE0: .word sub_80D4DF0+1
	.word sub_80D4E64+1
	.word sub_80D4EBC+1
	.word sub_80D4EE0+1
.func
.thumb_func
sub_80D4DF0:
	push {r4,r6,r7,lr}
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80D4E3E
	mov r0, #0
	strb r0, [r5,#0x18]
	bl sub_801A074 // () -> void
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D4E40
	ldr r0, [r5,#0x60]
	bl sub_80D4FF6
	cmp r0, #0xff
	beq loc_80D4E40
	strb r0, [r5,#0x16]
	mov r0, #0x40 
	bl sub_801DACC
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	mov r7, #0x76 
	add r7, #0xff
	bl sub_80E6878
	add r2, r0, #0
	ldrb r0, [r5,#0x16]
	mov r1, #1
	bl sub_800BF16
	mov r0, #4
	strb r0, [r5,#0xa]
locret_80D4E3E:
	pop {r4,r6,r7,pc}
loc_80D4E40:
	bl sub_801A074 // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
.endfunc // sub_80D4DF0

.func
.thumb_func
sub_80D4E64:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#6]
	tst r0, r0
	beq locret_80D4EAC
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r4, off_80D4EB0 // =dword_80D4EB4 
	ldr r4, [r4,r0]
	ldrb r2, [r5,#0xe]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r3, #0
	ldr r6, [r5,#0x2c]
	mov r7, #3
	push {r1,r2,r4}
	bl sub_80C53A6
	pop {r0,r1,r3}
	ldrb r4, [r5,#0x16]
	mov r2, #0x45 
	bl sub_801BD3C
	mov r0, #1
	mov r1, #0x3c 
	push {r5}
	bl sub_80302A8
	pop {r5}
	mov r0, #0x2f 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #8
	strb r0, [r5,#0xa]
locret_80D4EAC:
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80D4EB0: .word dword_80D4EB4
dword_80D4EB4: .word 0x1705FF85, 0x1705FF84
.endfunc // sub_80D4E64

.func
.thumb_func
sub_80D4EBC:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80D4EDE
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	mov r0, #0xc
	strb r0, [r5,#0xa]
locret_80D4EDE:
	pop {pc}
.endfunc // sub_80D4EBC

.func
.thumb_func
sub_80D4EE0:
	push {lr}
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80D4EFA
	mov r0, #8
	str r0, [r5,#8]
locret_80D4EFA:
	pop {pc}
.endfunc // sub_80D4EE0

.func
.thumb_func
sub_80D4EFC:
	push {lr}
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
.endfunc // sub_80D4EFC

	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A180
	ldr r1, dword_80D5018 // =0x8000 
	tst r0, r1
	beq loc_80D4F46
	ldr r1, dword_80D501C // =0x300000 
	tst r0, r1
	beq loc_80D4F26
	mov r0, #9
	bl sub_800F90E
	b loc_80D4F94
loc_80D4F26:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80D4FA4
	cmp r0, #1
	beq loc_80D4F8E
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80D4F70
loc_80D4F46:
	ldrh r0, [r5,#0x24]
	tst r0, r0
	bne loc_80D4F70
	ldrb r0, [r5,#5]
	tst r0, r0
	bne loc_80D4F70
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	str r0, [r5,#0x60]
	tst r0, r0
	beq loc_80D4F70
	str r0, [r5,#0x60]
	bl sub_80D4FF6
	cmp r0, #0xff
	beq loc_80D4F70
	mov r0, #9
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
loc_80D4F70:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	mov r7, #0x34 
	add r7, r7, r5
	ldmia r7!, {r1-r3}
	mov r4, #0
	bl sub_80E1D7A
loc_80D4F8E:
	mov r0, #0x90
	bl sound_play // () -> void
loc_80D4F94:
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80D4FA4:
	pop {pc}
.func
.thumb_func
sub_80D4FA6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x7d 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D4FF4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r6, [r0,#0x2c]
	ldrb r2, [r0,#4]
	cmp r2, #0
	bne loc_80D4FC8
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	b loc_80D4FDC
loc_80D4FC8:
	push {r0}
	ldrb r1, [r0,#0x13]
	ldrb r0, [r0,#0x12]
	bl sub_800C90A
	ldrb r1, [r0,#3]
	pop {r0}
	strb r1, [r0,#0x16]
	mov r1, #0
	strb r1, [r0,#0x17]
loc_80D4FDC:
	mov r3, #0x10
	ldrb r2, [r0,#4]
	cmp r2, #0
	beq loc_80D4FE6
	mov r3, #0x14
loc_80D4FE6:
	ldrb r2, [r0]
	orr r2, r3
	strb r2, [r0]
	ldrb r1, [r0,#0x16]
	mov r2, #1
	bl sub_800F614
locret_80D4FF4:
	pop {pc}
.endfunc // sub_80D4FA6

.func
.thumb_func
sub_80D4FF6:
	ldr r1, dword_80D5020 // =0x55000000 
	ldr r2, dword_80D5024 // =0xaa000000 
	tst r0, r2
	bne loc_80D5006
	tst r0, r1
	beq loc_80D5006
	mov r0, #0
	mov pc, lr
loc_80D5006:
	tst r0, r1
	bne loc_80D5012
	tst r0, r2
	beq loc_80D5012
	mov r0, #1
	mov pc, lr
loc_80D5012:
	mov r0, #0xff
	mov pc, lr
	.balign 4, 0x00
dword_80D5018: .word 0x8000
dword_80D501C: .word 0x300000
dword_80D5020: .word 0x55000000
dword_80D5024: .word 0xAA000000
.endfunc // sub_80D4FF6

loc_80D5028:
	push {lr}
	ldr r1, off_80D5040 // =off_80D5044 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_80169BE
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80D5040: .word off_80D5044
off_80D5044: .word sub_80D5050+1
	.word sub_80D50C6+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D5050:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #1
	ldrh r1, [r5,#0x3a]
	sub r1, r1, r0
	strh r1, [r5,#0x3a]
	ldrh r1, [r5,#0x3e]
	sub r1, r1, r0
	strh r1, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x4e 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D5050

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	beq loc_80D50BC
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	b locret_80D50C4
loc_80D50BC:
	bl sub_80D5128
	bl object_freeMemory
locret_80D50C4:
	pop {pc}
.func
.thumb_func
sub_80D50C6:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80D50C6

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D50EE
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D50EE
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	bne loc_80D50EE
	bl sub_801A018
	b locret_80D50FA
loc_80D50EE:
	bl sub_801A074 // () -> void
	bl sub_80D5128
	mov r0, #8
	strb r0, [r5,#8]
locret_80D50FA:
	pop {pc}
.func
.thumb_func
sub_80D50FC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x7e 
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D5126
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D5126:
	pop {pc}
.endfunc // sub_80D50FC

.func
.thumb_func
sub_80D5128:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne locret_80D5136
	mov r0, #0
	str r0, [r1]
locret_80D5136:
	pop {pc}
.endfunc // sub_80D5128

loc_80D5138:
	push {lr}
	ldr r1, off_80D5150 // =off_80D5154 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_80169BE
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80D5150: .word off_80D5154
off_80D5154: .word sub_80D5160+1
	.word sub_80D51E4+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D5160:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #9
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x17
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D5160

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	beq loc_80D51DA
	mov r1, #0x29 
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xa
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D5358 // =0x49000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0xff
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80D532C
	mov r0, #4
	str r0, [r5,#8]
	b locret_80D51E2
loc_80D51DA:
	bl sub_80D5348
	bl object_freeMemory
locret_80D51E2:
	pop {pc}
.func
.thumb_func
sub_80D51E4:
	push {r4,lr}
	bl sub_801A00E
	.hword 0xF744
	.word 0xF734FF73, 0x4200FFCE, 0x7AE8D112, 0xD10F4200, 0x7A406CE8
	.word 0x4288210B, 0xF734D10A, 0xD104FF47, 0x7A684907, 0x46FE5809
	.word 0xF7444708, 0xE005FEFF, 0xFF2AF744, 0xF892F000, 0x72282008
	.word 0xBD10
	.word off_80D5230
off_80D5230: .word sub_80D5240+1
	.word sub_80D5280+1
	.word byte_80D523C
byte_80D523C: .byte 0xA, 0x14, 0x1E, 0x28
.endfunc // sub_80D51E4

.func
.thumb_func
sub_80D5240:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D526A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	bl sub_801A07C
	mov r0, #8
	add r0, r0, r5
	mov r1, #0xff
	push {r4}
	mov r4, #1
	bl sub_80D4C0A
	pop {r4}
	ldrb r0, [r5,#5]
	add r0, #1
	strh r0, [r5,#0x20]
	b locret_80D527E
loc_80D526A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D527E
	mov r0, #0x18
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80D527E:
	pop {pc}
.endfunc // sub_80D5240

.func
.thumb_func
sub_80D5280:
	push {r4,lr}
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80D52A0
	bl sub_801A074 // () -> void
loc_80D52A0:
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80D52B6
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq locret_80D52C2
	mov r0, #1
	bl sub_801A07C
	b locret_80D52C2
loc_80D52B6:
	bl sub_801A074 // () -> void
	bl sub_80D5348
	mov r0, #8
	str r0, [r5,#8]
locret_80D52C2:
	pop {r4,pc}
.endfunc // sub_80D5280

.func
.thumb_func
sub_80D52C4:
	push {lr}
	push {r3}
	push {r0-r2,r5}
	mov r0, #0x7f
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq loc_80D52F6
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	pop {r3}
	str r3, [r0,#0x64]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	b locret_80D52F8
loc_80D52F6:
	pop {r3}
locret_80D52F8:
	pop {pc}
.endfunc // sub_80D52C4

	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_getPanelParameters
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80D5320 // =dword_80D5324 
	ldr r1, [r2,r1]
	tst r0, r1
	pop {r0,r1}
	beq locret_80D531E
	bl sub_80D532C
locret_80D531E:
	pop {pc}
off_80D5320: .word dword_80D5324
dword_80D5324: .word 0x1800000, 0x2800000
.func
.thumb_func
sub_80D532C:
	push {r4,r6,r7,lr}
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D5340 // =0x605ff01 
	mov r6, #0
	ldr r7, dword_80D5344 // =0x0 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80D5340: .word 0x605FF01
dword_80D5344: .word 0x0
.endfunc // sub_80D532C

.func
.thumb_func
sub_80D5348:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne locret_80D5356
	mov r0, #0
	str r0, [r1]
locret_80D5356:
	pop {pc}
dword_80D5358: .word 0x49000
.endfunc // sub_80D5348

loc_80D535C:
	push {lr}
	ldr r1, off_80D537C // =off_80D5380 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne loc_80D5374
	bl sub_801BCA6
	b locret_80D5378
loc_80D5374:
	bl sub_801BBF4
locret_80D5378:
	pop {pc}
	.balign 4, 0x00
off_80D537C: .word off_80D5380
off_80D5380: .word sub_80D538C+1
	.word sub_80D53F4+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D538C:
	push {lr}
	bl sub_800E29C // () -> void
	ldr r0, dword_80D5570 // =0xa00000 
	str r0, [r5,#0x3c]
	mov r1, #0x10
	mov r2, #5
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D538C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D53D6
	bl object_freeMemory
	b locret_80D53F2
loc_80D53D6:
	mov r1, #0x15
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xa
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80D53F2:
	pop {pc}
.func
.thumb_func
sub_80D53F4:
	push {lr}
	bl sub_801A00E
	.hword 0xF744
	.word 0xF734FE6B, 0x4200FEC6, 0x6D69D113, 0x42006F08, 0xF000D001
	.word 0x7968F882, 0xD0022801, 0xFE3EF734, 0x4906D104, 0x58097A68
	.word 0x470846FE, 0xFDF6F744, 0xF744E003, 0x2008FE21, 0xBD0060A8
	.word off_80D543C
off_80D543C: .word sub_80D5448+1
	.word sub_80D5482+1
	.word sub_80D54C0+1
.endfunc // sub_80D53F4

.func
.thumb_func
sub_80D5448:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D545E
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80D5480
loc_80D545E:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80D5470
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
loc_80D5470:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D5480
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D5480:
	pop {pc}
.endfunc // sub_80D5448

.func
.thumb_func
sub_80D5482:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D549C
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_8002E3C
	ldr r0, dword_80D5574 // =0x65000 
	str r0, [r5,#0x48]
	mov r0, #0x19
	strh r0, [r5,#0x20]
	b locret_80D54BE
loc_80D549C:
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D54BE
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	bl sub_801A07C
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D54BE:
	pop {pc}
.endfunc // sub_80D5482

.func
.thumb_func
sub_80D54C0:
	push {lr}
	bl object_isCurrentPanelSolid
.endfunc // sub_80D54C0

	beq loc_80D54DA
	bl sub_80D5516
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80D54DA
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
loc_80D54DA:
	ldrb r0, [r5,#7]
	tst r0, r0
	bne loc_80D54E6
	mov r0, #0xd9
	bl sound_play // () -> void
loc_80D54E6:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80D54F0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x80
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D5514
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D5514:
	pop {pc}
.endfunc // sub_80D54F0

.func
.thumb_func
sub_80D5516:
	push {r4,r6,r7,lr}
	mov r4, #0
	bl sub_8001532
	mov r6, #3
	and r6, r0
loc_80D5522:
	push {r4,r6}
	mov r0, #3
	and r6, r0
	lsl r6, r6, #3
	ldr r7, off_80D554C // =dword_80D5550 
	add r7, r7, r6
	ldr r6, [r7]
	ldr r7, [r7,#4]
	mov r0, #2
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0
	bl sub_80E1084
	pop {r4,r6}
	add r6, #1
	add r4, #1
	cmp r4, #2
	bmi loc_80D5522
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80D554C: .word dword_80D5550
dword_80D5550: .word 0x8000, 0x28000, 0xFFFF8000, 0x30000, 0x10000, 0x28000
	.word 0xFFFF8000, 0x18000
dword_80D5570: .word 0xA00000
dword_80D5574: .word 0x65000
	.word 0
	.byte 0, 0, 0, 0
.endfunc // sub_80D5516

loc_80D5580:
	push {lr}
	ldr r1, off_80D5594 // =off_80D5598 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80D5594: .word off_80D5598
off_80D5598: .word sub_80D55A4+1
	.word sub_80D55F8+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D55A4:
	push {lr}
	mov r1, #0x10
	mov r2, #0x44 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#7]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D55A4

	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#6]
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D5738 // =0x280000 
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D55F8
	pop {pc}
.func
.thumb_func
sub_80D55F8:
	push {r7,lr}
	bl sub_80D5634
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D562E
	bl object_getFlipDirection_800E2CA // () -> int
	add r7, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	add r0, r0, r7
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	add r0, r0, r7
	mov r2, #4
	mov r3, #0
	bl sub_8109660
	pop {r7,pc}
loc_80D562E:
	mov r0, #8
	str r0, [r5,#8]
	pop {r7,pc}
.endfunc // sub_80D55F8

.func
.thumb_func
sub_80D5634:
	push {r4,lr}
	ldrb r0, [r5,#9]
	cmp r0, #0
	bne loc_80D564C
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#5]
	cmp r0, r1
	beq loc_80D564C
	mov r0, #4
	strh r0, [r5,#0x20]
	strb r0, [r5,#9]
loc_80D564C:
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq loc_80D565E
	ldrh r0, [r5,#0x20]
	ldrb r1, [r5,#6]
	cmp r0, r1
	bne locret_80D5682
	mov r1, #0
	b loc_80D5672
loc_80D565E:
	ldrh r0, [r5,#0x20]
	mov r1, #0
	cmp r0, #0x2d 
	beq loc_80D5672
	mov r1, #4
	cmp r0, #0x1e
	beq loc_80D5672
	mov r1, #8
	cmp r0, #0xf
	bne locret_80D5682
loc_80D5672:
	ldr r0, off_80D56C0 // =off_80D56C4 
	ldr r0, [r0,r1]
	mov r4, #3
loc_80D5678:
	bl sub_80D5684
	add r0, #8
	sub r4, #1
	bne loc_80D5678
locret_80D5682:
	pop {r4,pc}
.endfunc // sub_80D5634

.func
.thumb_func
sub_80D5684:
	push {r0,r4,r6,r7,lr}
	add r7, r0, #0
	ldrb r0, [r7,#2]
	cmp r0, #0
	beq locret_80D56B8
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r7]
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r4, [r7,#4]
	ldrb r2, [r5,#0xe]
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r6, [r5,#0x2c]
	push {r7}
	mov r7, #1
	bl sub_80C536A
	pop {r7}
	cmp r0, #0
	beq locret_80D56B8
	ldrb r1, [r7,#1]
	strh r1, [r0,#0x20]
locret_80D56B8:
	pop {r0,r4,r6,r7,pc}
	.word 0
	.byte 0, 0
off_80D56C0: .word off_80D56C4
off_80D56C4: .word dword_80D56D0
	.word dword_80D56E8
	.word dword_80D5700
dword_80D56D0: .word 0x12D00, 0x12050001, 0x10F01, 0x12050001, 0x10F02
	.word 0x12050004
dword_80D56E8: .word 0x0, 0x0
	.word 0x11E01, 0x12050001, 0x10F02, 0x12050004
dword_80D5700: .word 0x0, 0x0, 0x0, 0x0
	.byte  2
	.byte 0xF
	.byte  1
	.byte  0
	.byte  4
	.byte  0
	.byte  5
	.byte 0x12
.endfunc // sub_80D5684

.func
.thumb_func
sub_80D5718:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x81
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D5736
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
locret_80D5736:
	pop {pc}
dword_80D5738: .word 0x280000
	.byte 0, 0, 0, 0
.endfunc // sub_80D5718

loc_80D5740:
	push {lr}
	ldr r1, off_80D5754 // =off_80D5758 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80D5754: .word off_80D5758
off_80D5758: .word sub_80D5764+1
	.word sub_80D5806+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D5764:
	push {lr}
	mov r1, #0x10
	mov r2, #0x12
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D5764

	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x28]
	mov r1, #0x1d
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r2, [r5,#0x34]
	add r2, r2, r0
	str r2, [r5,#0x34]
	ldr r2, [r5,#0x3c]
	add r2, r2, r1
	str r2, [r5,#0x3c]
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq loc_80D57E6
	ldr r0, [r5,#0x60]
	str r5, [r0]
	ldrh r0, [r5,#0x3a]
	sub r0, #1
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	sub r0, #1
	strh r0, [r5,#0x3e]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x28 
	mul r1, r0
	lsl r1, r1, #0x10
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	b loc_80D57F6
loc_80D57E6:
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x28 
	mul r1, r0
	lsl r1, r1, #0x10
	ldr r0, [r5,#0x34]
	sub r0, r0, r1
	str r0, [r5,#0x34]
loc_80D57F6:
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
	.byte 0, 0, 0, 0
	.word byte_80D5804
byte_80D5804: .byte 0x4E, 0x78
.func
.thumb_func
sub_80D5806:
	push {r7,lr}
	bl sub_80D584E
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D583C
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq locret_80D583A
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	cmp r0, #0
	bne locret_80D583A
	mov r2, #0x64 
	add r2, r2, r5
	mov r3, #5
	mov r1, #1
loc_80D582A:
	ldr r0, [r2]
	cmp r0, #0
	beq loc_80D5832
	strh r1, [r0,#0x20]
loc_80D5832:
	add r2, #4
	sub r3, #1
	bne loc_80D582A
	b loc_80D583C
locret_80D583A:
	pop {r7,pc}
loc_80D583C:
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq loc_80D5848
	ldr r0, [r5,#0x60]
	mov r1, #0
	str r1, [r0]
loc_80D5848:
	mov r0, #8
	str r0, [r5,#8]
	pop {r7,pc}
.endfunc // sub_80D5806

.func
.thumb_func
sub_80D584E:
	push {r4,r7,lr}
	ldrh r0, [r5,#0x20]
	ldrb r1, [r5,#5]
	cmp r0, r1
	bne locret_80D5872
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	mov r7, #0x64 
	add r7, r7, r5
loc_80D5864:
	bl sub_80D5874
	add r7, #4
	add r0, r0, r4
	beq locret_80D5872
	cmp r0, #6
	ble loc_80D5864
locret_80D5872:
	pop {r4,r7,pc}
.endfunc // sub_80D584E

.func
.thumb_func
sub_80D5874:
	push {r0,r4,r6,lr}
	ldrb r1, [r5,#0x13]
	mov r4, #0
	ldrb r2, [r5,#0xe]
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r6, [r5,#0x2c]
	bl sub_80D69E2
	cmp r0, #0
	beq locret_80D588E
	ldrb r1, [r5,#5]
	strh r1, [r0,#0x20]
locret_80D588E:
	pop {r0,r4,r6,pc}
.endfunc // sub_80D5874

.func
.thumb_func
sub_80D5890:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x82
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D58B0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
locret_80D58B0:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80D5890

loc_80D58B4:
	push {lr}
	ldr r1, off_80D58C8 // =off_80D58CC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D58C8: .word off_80D58CC
off_80D58CC: .word sub_80D58D8+1
	.word loc_80D592C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D58D8:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x12
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	mov r1, #8
	mov r2, #0xa
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x19
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D58D8

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	b locret_80D592A
locret_80D592A:
	pop {pc}
loc_80D592C:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D5948
	bl battle_isTimeStop
	bne locret_80D594C
	ldr r1, off_80D5950 // =off_80D5954 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80D594C
loc_80D5948:
	mov r0, #8
	strb r0, [r5,#8]
locret_80D594C:
	pop {pc}
	.byte 0, 0
off_80D5950: .word off_80D5954
off_80D5954: .word sub_80D595C+1
	.word sub_80D5994+1
.func
.thumb_func
sub_80D595C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D596C
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80D5A0A
loc_80D596C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D598A
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	b locret_80D5992
loc_80D598A:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80D5992:
	pop {pc}
.endfunc // sub_80D595C

.func
.thumb_func
sub_80D5994:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D59AA
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0x1a
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80D59E0
loc_80D59AA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x19
	beq loc_80D59BE
	cmp r0, #0
	bgt locret_80D59E0
	mov r0, #8
	str r0, [r5,#8]
	b locret_80D59E0
loc_80D59BE:
	bl sub_80D5A9C
	bl object_isCurrentPanelSolid
	tst r0, r0
	beq locret_80D59E0
	mov r0, #2
	mov r1, #0x14
	bl sub_80302A8
	mov r0, #0xc0
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
locret_80D59E0:
	pop {pc}
.endfunc // sub_80D5994

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x83
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D5A08
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D5A08:
	pop {pc}
.func
.thumb_func
sub_80D5A0A:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#5]
	ldrb r1, [r5,#6]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r6, r0, #0
	add r7, r1, #0
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80D5A88 // =dword_80D5A8C 
	ldr r4, [r1,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#5]
	cmp r0, r1
	beq loc_80D5A62
	mov r2, #1
	ldr r0, [r5,#0x34]
	cmp r0, r6
	blt loc_80D5A32
	neg r2, r2
loc_80D5A32:
	mul r2, r4
	str r2, [r5,#0x40]
	ldr r0, [r5,#0x34]
	sub r0, r0, r6
	cmp r0, #0
	bge loc_80D5A40
	neg r0, r0
loc_80D5A40:
	add r1, r4, #0
	svc 6
	strh r0, [r5,#0x20]
	mov r2, #1
	ldr r0, [r5,#0x38]
	cmp r0, r7
	blt loc_80D5A50
	neg r2, r2
loc_80D5A50:
	sub r0, r0, r7
	cmp r0, #0
	bge loc_80D5A58
	neg r0, r0
loc_80D5A58:
	ldrh r1, [r5,#0x20]
	svc 6
	mul r0, r2
	str r0, [r5,#0x44]
	b locret_80D5A84
loc_80D5A62:
	mov r0, #0
	str r0, [r5,#0x40]
	mov r2, #1
	ldr r0, [r5,#0x38]
	cmp r0, r7
	blt loc_80D5A70
	neg r2, r2
loc_80D5A70:
	mul r2, r4
	str r2, [r5,#0x44]
	ldr r0, [r5,#0x38]
	sub r0, r0, r7
	cmp r0, #0
	bge loc_80D5A7E
	neg r0, r0
loc_80D5A7E:
	add r1, r4, #0
	svc 6
	strh r0, [r5,#0x20]
locret_80D5A84:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80D5A88: .word dword_80D5A8C
dword_80D5A8C: .word 0x90000, 0x98000, 0xA0000, 0xA8000
.endfunc // sub_80D5A0A

.func
.thumb_func
sub_80D5A9C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D5AB4 // =0x15050a01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80D5AB8 // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D5AB4: .word 0x15050A01
dword_80D5AB8: .word 0x3
.endfunc // sub_80D5A9C

loc_80D5ABC:
	push {lr}
	ldr r1, off_80D5AD0 // =off_80D5AD4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80D5AD0: .word off_80D5AD4
off_80D5AD4: .word sub_80D5AE0+1
	.word sub_80D5B84+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D5AE0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0x19
	strh r0, [r5,#0x3e]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0xf
	lsl r0, r0, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r1, #0xc
	mov r2, #0x33 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D5AE0

	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D5B3E
	bl object_freeMemory
	b locret_80D5B6E
loc_80D5B3E:
	mov r1, #6
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A018
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80D5B70 // =dword_80D5B74 
	ldr r1, [r2,r1]
	str r1, [r5,#0x60]
	mul r0, r1
	str r0, [r5,#0x40]
	bl sub_80D5C26
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
locret_80D5B6E:
	pop {pc}
off_80D5B70: .word dword_80D5B74
dword_80D5B74: .word 0x50000, 0x58000, 0x60000, 0x68000
.func
.thumb_func
sub_80D5B84:
	push {lr}
	bl sub_801A00E
	.hword 0xF744
	.word 0xF734FAA3, 0x4200FAFE, 0x6D68D110, 0x42006F00, 0xF744D001
	.word 0xF734FA69, 0xD104FA79, 0x7A684906, 0x46FE5809, 0xF7444708
	.word 0xE003FA31, 0xFA5CF744, 0x72282008, 0xBD00
	.word off_80D5BC8
off_80D5BC8: .word sub_80D5BCC+1
.endfunc // sub_80D5B84

.func
.thumb_func
sub_80D5BCC:
	push {r4,lr}
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D5BF6
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq locret_80D5BFE
	mov r0, #1
	bl sub_801A07C
	b locret_80D5BFE
loc_80D5BF6:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D5BFE:
	pop {r4,pc}
.endfunc // sub_80D5BCC

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x84
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D5C24
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D5C24:
	pop {pc}
.func
.thumb_func
sub_80D5C26:
	push {r4,lr}
	mov r0, #7
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80D5C32
	mov r0, #0
loc_80D5C32:
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r1, [r5,#0x34]
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80D5C42
	neg r0, r0
loc_80D5C42:
	ldr r1, [r5,#0x60]
	svc 6
	pop {r4,pc}
.endfunc // sub_80D5C26

loc_80D5C48:
	push {lr}
	ldr r1, off_80D5C5C // =off_80D5C60 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80D5C5C: .word off_80D5C60
off_80D5C60: .word sub_80D5C6C+1
	.word sub_80D5C9A+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D5C6C:
	push {lr}
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #0x3c 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D5C6C

	bl sub_8002F90 // () -> void
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80D5C9A:
	push {lr}
	bl sub_80D5CC8
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D5CAE
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D5CAE:
	ldrh r0, [r5,#0x20]
	cmp r0, #8
	bge loc_80D5CB8
	bl sub_80D5CDC
loc_80D5CB8:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #9
	ble locret_80D5CC6
	mov r0, #8
	str r0, [r5,#8]
locret_80D5CC6:
	pop {pc}
.endfunc // sub_80D5C9A

.func
.thumb_func
sub_80D5CC8:
	push {lr}
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	pop {pc}
.endfunc // sub_80D5CC8

.func
.thumb_func
sub_80D5CDC:
	push {r4,r6,r7,lr}
	add r6, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	lsl r0, r6, #1
	ldr r3, off_80D5D20 // =byte_80D5D24 
	add r3, r3, r0
	mov r0, #0
	ldrsb r0, [r3,r0]
	mul r0, r4
	ldrb r2, [r5,#0x12]
	add r0, r0, r2
	mov r1, #1
	ldrsb r1, [r3,r1]
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D5D4C // =0x705ff01 
	ldr r7, dword_80D5D50 // =0x1180003 
	ldrb r6, [r5,#4]
	tst r6, r6
	beq loc_80D5D16
	mov r7, #3
loc_80D5D16:
	ldr r6, [r5,#0x2c]
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80D5D20: .word byte_80D5D24
byte_80D5D24: .byte 0x1, 0x0, 0x1, 0x1, 0x0, 0x1, 0xFF, 0x1, 0xFF, 0x0, 0xFF, 0xFF, 0x0
	.byte 0xFF, 0x1, 0xFF
.endfunc // sub_80D5CDC

.func
.thumb_func
sub_80D5D34:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x85
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D5D48
	bl sub_801155A
locret_80D5D48:
	pop {pc}
	.byte  0
	.byte  0
dword_80D5D4C: .word 0x705FF01
dword_80D5D50: .word 0x1180003
.endfunc // sub_80D5D34

loc_80D5D54:
	push {lr}
	ldr r1, off_80D5D68 // =off_80D5D6C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D5D68: .word off_80D5D6C
off_80D5D6C: .word sub_80D5D78+1
	.word loc_80D5DC8+1
	.word sub_80D5EA8+1
.func
.thumb_func
sub_80D5D78:
	push {lr}
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0xa
	mul r0, r1
	ldrh r1, [r5,#0x36]
	add r1, r1, r0
	strh r1, [r5,#0x36]
	mov r0, #0x30 
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x55 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D5D78

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80D5DC8:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D5DE4
	bl battle_isTimeStop
	bne locret_80D5DE8
	ldr r1, off_80D5DEC // =off_80D5DF0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80D5DE8
loc_80D5DE4:
	mov r0, #8
	str r0, [r5,#8]
locret_80D5DE8:
	pop {pc}
	.balign 4, 0x00
off_80D5DEC: .word off_80D5DF0
off_80D5DF0: .word sub_80D5DF4+1
.func
.thumb_func
sub_80D5DF4:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D5E2A
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x2d 
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80D5F04 // =0xffffc000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	mov r0, #0x2d 
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80D5E9A
loc_80D5E2A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80D5E66
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80D5E9C // =byte_80D5EA0 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80D5E5C
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	bl sub_80E05F6
	bl sub_80D5EDE
loc_80D5E5C:
	mov r0, #8
	str r0, [r5,#8]
	mov r0, #0
	strh r0, [r5,#0x22]
	b locret_80D5E9A
loc_80D5E66:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80D5E78
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl object_highlightPanel
loc_80D5E78:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80D5F04 // =0xffffc000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
locret_80D5E9A:
	pop {r4,r6,pc}
off_80D5E9C: .word byte_80D5EA0
byte_80D5EA0: .byte 0x10, 0x0, 0x80, 0x15, 0x10, 0x0, 0x80, 0x2A
.endfunc // sub_80D5DF4

.func
.thumb_func
sub_80D5EA8:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D5EA8

.func
.thumb_func
sub_80D5EB0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x86
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D5EDC
	strb r1, [r0,#0x14]
	strb r2, [r0,#0x15]
	ldrb r1, [r5,#0x12]
	strb r1, [r0,#0x12]
	ldrb r1, [r5,#0x13]
	strb r1, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D5EDC:
	pop {pc}
.endfunc // sub_80D5EB0

.func
.thumb_func
sub_80D5EDE:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D5EFC // =0xa050101 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80D5F00 // =0x3 
	bl sub_80C536A
	tst r0, r0
	beq locret_80D5EFA
	mov r1, #5
	strh r1, [r0,#0x20]
locret_80D5EFA:
	pop {r4,r6,r7,pc}
dword_80D5EFC: .word 0xA050101
dword_80D5F00: .word 0x3
dword_80D5F04: .word 0xFFFFC000
.endfunc // sub_80D5EDE

loc_80D5F08:
	push {lr}
	ldr r1, off_80D5F1C // =off_80D5F20 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D5F1C: .word off_80D5F20
off_80D5F20: .word sub_80D5F2C+1
	.word sub_80D5FA0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D5F2C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_80D61FC
	mov r1, #0x10
	mov r2, #0x54 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D5F2C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_80169BE
	bl sub_8019892
	tst r0, r0
	bne loc_80D5F7E
	bl object_freeMemory
	b locret_80D5F9E
loc_80D5F7E:
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	mov r0, #9
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #0
	strb r0, [r5,#6]
	mov r0, #4
	str r0, [r5,#8]
locret_80D5F9E:
	pop {pc}
.func
.thumb_func
sub_80D5FA0:
	push {r4,lr}
	bl sub_801A00E
	.hword 0xF744
	.word 0xF734F895, 0x4200F8F0, 0xF740D121, 0x6CE8FD04, 0x210A7A40
	.word 0xD1144288, 0x6F126D6A, 0x807DA8, 0x58084912, 0xD0014210
	.word 0xF850F744, 0xF860F734, 0x4909D104, 0x58097A68, 0x470846FE
	.word 0xF818F744, 0x6B69E009, 0x4B886BAA, 0xF00A2412, 0xF744FB00
	.word 0x2008F83D, 0xBD107228
	.word off_80D6004
off_80D6004: .word sub_80D6020+1
	.word sub_80D6098+1
	.word sub_80D60BC+1
	.word sub_80D6164+1
	.word dword_80D6018
dword_80D6018: .word 0x5800000, 0xA800000
.endfunc // sub_80D5FA0

.func
.thumb_func
sub_80D6020:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D6048
	mov r1, #4
	strb r1, [r5,#0xa]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80D6084 // =dword_80D6088 
	ldr r1, [r2,r1]
	bl sub_80D61D2
	str r0, [r5,#0x40]
	strh r1, [r5,#0x20]
loc_80D6048:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80D605E
	bl sub_801A074 // () -> void
loc_80D605E:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80D6072
	mov r0, #1
	bl sub_801A07C
loc_80D6072:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D6082
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D6082:
	pop {r4,pc}
off_80D6084: .word dword_80D6088
dword_80D6088: .word 0x20000, 0x20000, 0x20000, 0x20000
.endfunc // sub_80D6020

.func
.thumb_func
sub_80D6098:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D60AA
	mov r1, #4
	strb r1, [r5,#0xa]
	ldr r0, [r5,#0x60]
	strh r0, [r5,#0x20]
	b locret_80D60BA
loc_80D60AA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D60BA
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D60BA:
	pop {pc}
.endfunc // sub_80D6098

.func
.thumb_func
sub_80D60BC:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D60E6
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_80D61FC
	ldrb r0, [r5,#0x16]
	ldr r1, off_80D615C // =dword_80D6160 
	ldrb r0, [r1,r0]
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80D6148 // =dword_80D614C 
	ldr r1, [r2,r1]
	bl sub_80D61D2
	str r0, [r5,#0x40]
	strh r1, [r5,#0x20]
loc_80D60E6:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80D60FC
	bl sub_801A074 // () -> void
loc_80D60FC:
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80D6112
	bl sub_801A074 // () -> void
	b loc_80D611E
loc_80D6112:
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80D611E
	mov r0, #1
	bl sub_801A07C
loc_80D611E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D6146
	ldrb r0, [r5,#6]
	add r0, #1
	strb r0, [r5,#6]
	cmp r0, #5
	bge loc_80D613E
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80D6146
loc_80D613E:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D6146:
	pop {r4,pc}
off_80D6148: .word dword_80D614C
dword_80D614C: .word 0x80000, 0x90000, 0xA0000, 0xB0000
off_80D615C: .word dword_80D6160
dword_80D6160: .word 0x7
.endfunc // sub_80D60BC

.func
.thumb_func
sub_80D6164:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D618C
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#0x16]
	ldr r1, off_80D61A0 // =off_80D61A4 
	ldrb r0, [r1,r0]
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1,#0x13]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r5,#0x20]
	b locret_80D619C
loc_80D618C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D619C
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D619C:
	pop {r4,pc}
	.byte 0, 0
off_80D61A0: .word off_80D61A4
off_80D61A4: .word 0x700
.endfunc // sub_80D6164

.func
.thumb_func
sub_80D61A8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x87
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D61D0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D61D0:
	pop {pc}
.endfunc // sub_80D61A8

.func
.thumb_func
sub_80D61D2:
	push {r4,lr}
	add r4, r1, #0
	ldrb r2, [r5,#0x12]
	sub r2, r2, r0
	cmp r2, #0
	blt loc_80D61E0
	neg r1, r1
loc_80D61E0:
	add r0, r1, #0
	cmp r2, #0
	bge loc_80D61E8
	neg r2, r2
loc_80D61E8:
	mov r3, #0x28 
	lsl r3, r3, #0x10
	mul r3, r2
	push {r0}
	add r0, r3, #0
	add r1, r4, #0
	svc 6
	add r1, r0, #0
	pop {r0}
	pop {r4,pc}
.endfunc // sub_80D61D2

.func
.thumb_func
sub_80D61FC:
	push {lr}
	ldrb r0, [r5,#5]
	add r0, #1
	ldrh r1, [r5,#0x3e]
	sub r1, r1, r0
	strh r1, [r5,#0x3e]
	ldrh r1, [r5,#0x3a]
	sub r1, r1, r0
	strh r1, [r5,#0x3a]
	pop {pc}
dword_80D6210: .word 0x100000, 0xA0005, 0x14000F, 0x20001, 0x40003, 0x10001
	.word 0x10001
.endfunc // sub_80D61FC

loc_80D622C:
	push {lr}
	ldr r1, off_80D6240 // =off_80D6244 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80D6240: .word off_80D6244
off_80D6244: .word sub_80D6250+1
	.word sub_80D62E8+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D6250:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	ldrb r1, [r5,#6]
	ldrh r0, [r5,#0x3e]
	sub r0, r0, r1
	strh r0, [r5,#0x3e]
	ldrh r0, [r5,#0x3a]
	sub r0, r0, r1
	strh r0, [r5,#0x3a]
	mov r1, #0x10
	mov r2, #0x54 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#5]
	ldr r1, off_80D62E0 // =byte_80D62E4 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D6250

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_80169BE
	bl sub_8019892
	tst r0, r0
	bne loc_80D62B0
	bl object_freeMemory
	b locret_80D62DE
loc_80D62B0:
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldrb r1, [r5,#5]
	lsl r1, r1, #3
	add r0, r0, r1
	ldr r1, off_80D6554 // =dword_80D6210+4 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #4
	str r0, [r5,#8]
locret_80D62DE:
	pop {pc}
off_80D62E0: .word byte_80D62E4
byte_80D62E4: .byte 0x0, 0x2, 0x1, 0x0
.func
.thumb_func
sub_80D62E8:
	push {lr}
	bl sub_801A00E
	.hword 0xF743
	.word 0xF733FEF1, 0x4200FF4C, 0x2000D125, 0xF935F73B, 0xDB1E4200
	.word 0xFB5BF740, 0x7A406CE8, 0x4288210C, 0x6D6AD114, 0x7DA86F12
	.word 0x490F0080, 0x42105808, 0xF743D001, 0xF733FEA7, 0xD104FEB7
	.word 0x7A684908, 0x46FE5809, 0xF7434708, 0xE008FE6F, 0xF902F000
	.word 0xF000E001, 0xF743F884, 0x2008FE95, 0xBD007228
	.word off_80D6354
off_80D6354: .word sub_80D6364+1
	.word dword_80D635C
dword_80D635C: .word 0x5800000, 0xA800000
.endfunc // sub_80D62E8

.func
.thumb_func
sub_80D6364:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D6386
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#0x16]
	ldr r1, off_80D63F4 // =byte_80D63F8 
	ldrb r0, [r1,r0]
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80D63E0 // =dword_80D63E4 
	ldr r1, [r2,r1]
	bl sub_80D6424
	str r0, [r5,#0x40]
	strh r1, [r5,#0x20]
loc_80D6386:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_80D650C
.endfunc // sub_80D6364

	tst r0, r0
	beq loc_80D63D0
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80D63A4
	bl sub_801A074 // () -> void
loc_80D63A4:
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80D63BA
	bl sub_801A074 // () -> void
	b loc_80D63C6
loc_80D63BA:
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80D63C6
	mov r0, #1
	bl sub_801A07C
loc_80D63C6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D63DC
	b loc_80D63D4
loc_80D63D0:
	bl sub_80D6544
loc_80D63D4:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D63DC:
	pop {r4,pc}
	.byte 0, 0
off_80D63E0: .word dword_80D63E4
dword_80D63E4: .word 0x30000, 0x38000, 0x40000, 0x48000
off_80D63F4: .word byte_80D63F8
byte_80D63F8: .byte 0x7, 0x0, 0x0, 0x0
.func
.thumb_func
sub_80D63FC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x88
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D6422
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D6422:
	pop {pc}
.endfunc // sub_80D63FC

.func
.thumb_func
sub_80D6424:
	push {r4,lr}
	add r4, r1, #0
	ldrb r2, [r5,#0x12]
	sub r2, r2, r0
	cmp r2, #0
	blt loc_80D6432
	neg r1, r1
loc_80D6432:
	add r0, r1, #0
	cmp r2, #0
	bge loc_80D643A
	neg r2, r2
loc_80D643A:
	mov r3, #0x28 
	lsl r3, r3, #0x10
	mul r3, r2
	push {r0}
	add r0, r3, #0
	add r1, r4, #0
	svc 6
	add r1, r0, #0
	pop {r0}
	pop {r4,pc}
.endfunc // sub_80D6424

	push {r4,r6,r7,lr}
	ldrb r0, [r5,#5]
	lsl r0, r0, #2
	ldr r1, off_80D64FC // =off_80D6500 
	ldr r0, [r1,r0]
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	ldr r3, [r5,#0x3c]
	mov r4, #0
	bl sub_80E05F6
	ldrb r0, [r5,#5]
	cmp r0, #2
	bne locret_80D64CA
	mov r6, #0
loc_80D6478:
	add r2, r6, #0
	lsl r2, r2, #1
	ldr r3, off_80D64CC // =dword_80D64D0 
	add r3, r3, r2
	mov r2, #0
	ldrsb r2, [r3,r2]
	ldrb r0, [r5,#0x12]
	add r0, r0, r2
	mov r2, #1
	ldrsb r2, [r3,r2]
	ldrb r1, [r5,#0x13]
	add r1, r1, r2
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80D64C4
	push {r0,r1,r6}
	mov r2, #1
	mov r3, #0
	ldr r4, dword_80D64E0 // =0x48050101 
	ldrb r6, [r5,#4]
	lsl r6, r6, #2
	ldr r7, off_80D64E8 // =dword_80D64EC 
	ldr r6, [r7,r6]
	ldr r7, dword_80D64E4 // =0x3 
	bl sub_80C536A
	pop {r0,r1,r6}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	ldr r3, [r5,#0x3c]
	mov r4, #0
	bl sub_80E05F6
loc_80D64C4:
	add r6, #1
	cmp r6, #8
	blt loc_80D6478
locret_80D64CA:
	pop {r4,r6,r7,pc}
off_80D64CC: .word dword_80D64D0
dword_80D64D0: .word 0xFF0000FF, 0x1000001, 0xFFFF01FF, 0xFF010101
dword_80D64E0: .word 0x48050101
dword_80D64E4: .word 0x3
off_80D64E8: .word dword_80D64EC
dword_80D64EC: .word 0x1E, 0x32, 0x64, 0x64
off_80D64FC: .word off_80D6500
off_80D6500: .word 0x70
	.word 0x70
	.word 0x10F
.func
.thumb_func
sub_80D650C:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	ldr r3, off_80D6538 // =dword_80D653C 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80D6540 - 0x80d653c)
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80D650C

	tst r0, r0
	pop {r0,r1}
	bne locret_80D6536
	bl object_isValidPanel
	tst r0, r0
	bne loc_80D6534
	mov r0, #1
	b locret_80D6536
loc_80D6534:
	mov r0, #0
locret_80D6536:
	pop {pc}
off_80D6538: .word dword_80D653C
dword_80D653C: .word 0x10010
dword_80D6540: .word 0x0
.func
.thumb_func
sub_80D6544:
	push {r4,lr}
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, dword_80D6558 // =0x100000 
	mov r4, #0x12
	bl sub_80E05F6
	pop {r4,pc}
off_80D6554: .word dword_80D6210+4
dword_80D6558: .word 0x100000
.endfunc // sub_80D6544

loc_80D655C:
	push {lr}
	ldr r1, off_80D6570 // =off_80D6574 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
off_80D6570: .word off_80D6574
off_80D6574: .word sub_80D6580+1
	.word sub_80D65E0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D6580:
	push {r7,lr}
	mov r1, #0x10
	mov r2, #0x45 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D6580

	bl sub_8002F90 // () -> void
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_80D67D2
	ldrb r0, [r5,#6]
	bl sprite_setPallete // (int pallete) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	str r0, [r5,#0x40]
	mov r0, #1
	str r0, [r5,#0x44]
	ldr r0, off_80D67E4 // =0x168 
	strh r0, [r5,#0x22]
	mov r0, #0xff
	strb r0, [r5,#0xc]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D65E0
	pop {r7,pc}
.func
.thumb_func
sub_80D65E0:
	push {lr}
	ldr r1, off_80D65F0 // =off_80D65F4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80D65F0: .word off_80D65F4
off_80D65F4: .word sub_80D65FC+1
	.word sub_80D677C+1
.endfunc // sub_80D65E0

.func
.thumb_func
sub_80D65FC:
	push {r4,lr}
	ldrb r0, [r5,#0xc]
	cmp r0, #0xff
	bne loc_80D6624
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	blt loc_80D6620
	ldrb r0, [r5,#0x16]
	bl sub_80103BC
	tst r0, r0
	beq loc_80D6624
	ldr r0, [r0,#0x58]
	ldrh r1, [r0,#0x2c]
	mov r2, #1
	tst r1, r2
	beq loc_80D6624
loc_80D6620:
	ldrb r0, [r5,#5]
	strb r0, [r5,#0xc]
loc_80D6624:
	ldrh r4, [r5,#0x12]
	ldr r1, off_80D6688 // =off_80D668C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrh r0, [r5,#0x12]
.endfunc // sub_80D65FC

	cmp r0, r4
	beq locret_80D6686
	ldrb r0, [r5,#0xc]
	cmp r0, #0xff
	bne loc_80D6646
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
	b locret_80D6686
loc_80D6646:
	sub r0, #1
	strb r0, [r5,#0xc]
	lsr r1, r4, #8
	mov r0, #0xff
	and r0, r4
	ldrb r4, [r5,#6]
	lsl r4, r4, #0x10
	ldrb r2, [r5,#4]
	lsl r2, r2, #2
	add r2, #0x14
	add r4, r4, r2
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldr r7, [r5,#0x60]
	add r7, #0x64 
	add r7, r7, r5
	bl sub_80D68E0
	ldr r0, [r5,#0x60]
	add r0, #1
	str r0, [r5,#0x60]
	ldrb r0, [r5,#0xc]
	tst r0, r0
	bne locret_80D6686
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D6686:
	pop {r4,pc}
off_80D6688: .word off_80D668C
off_80D668C: .word sub_80D6694+1
	.word sub_80D66E2+1
.func
.thumb_func
sub_80D6694:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D66A4
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D66A4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D66E0
	ldr r0, [r5,#0x44]
	ldrb r1, [r5,#0x13]
	add r1, r1, r0
	ldrb r0, [r5,#0x12]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80D66CE
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_80D67D2
	mov r0, #0
	strb r0, [r5,#0xb]
	b locret_80D66E0
loc_80D66CE:
	ldr r0, [r5,#0x44]
	neg r0, r0
	str r0, [r5,#0x44]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0xb]
locret_80D66E0:
	pop {r4,pc}
.endfunc // sub_80D6694

.func
.thumb_func
sub_80D66E2:
	push {r4,r7,lr}
	sub sp, sp, #0xc
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D66F4
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D66F4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80D6764
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x40]
	cmp r0, r1
	beq loc_80D6714
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x16]
	bl sub_800D5F0
	tst r0, r0
	beq loc_80D6752
loc_80D6714:
	ldr r0, [r5,#0x40]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	str r0, [sp,#4]
	str r1, [sp,#8]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80D6752
	ldr r0, [sp,#4]
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r2, off_80D6768 // =dword_80D676C 
	add r1, r1, r2
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0
	bl sub_800CFDC
	cmp r0, #3
	beq loc_80D6752
	ldr r0, [sp,#4]
	ldr r1, [sp,#8]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_80D67D2
	mov r0, #0
	strb r0, [r5,#0xb]
	b loc_80D6764
loc_80D6752:
	ldr r0, [r5,#0x40]
	neg r0, r0
	str r0, [r5,#0x40]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #0
	strb r0, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0xb]
loc_80D6764:
	add sp, sp, #0xc
	pop {r4,r7,pc}
off_80D6768: .word dword_80D676C
dword_80D676C: .word 0x0
	.word 0x20, 0x20, 0x0
.endfunc // sub_80D66E2

.func
.thumb_func
sub_80D677C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D6792
	ldr r0, [r5,#0x64]
	tst r0, r0
	bne locret_80D67A4
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D6792:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D67A4
	ldr r0, [r5,#0x4c]
	mov r1, #0
	strb r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
locret_80D67A4:
	pop {pc}
.endfunc // sub_80D677C

.func
.thumb_func
sub_80D67A6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x89
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D67D0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x4c]
	mov r1, #1
	strb r1, [r7]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D67D0:
	pop {pc}
.endfunc // sub_80D67A6

.func
.thumb_func
sub_80D67D2:
	push {lr}
	bl sub_800E29C // () -> void
	ldr r1, dword_80D67E8 // =0x80000 
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	str r1, [r5,#0x3c]
	pop {pc}
off_80D67E4: .word 0x168
dword_80D67E8: .word 0x80000
.endfunc // sub_80D67D2

loc_80D67EC:
	push {lr}
	ldr r1, off_80D6800 // =off_80D6804 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
off_80D6800: .word off_80D6804
off_80D6804: .word sub_80D6810+1
	.word loc_80D685A+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D6810:
	push {r7,lr}
	mov r1, #0x10
	mov r2, #0x45 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D6810

	bl sub_8002F90 // () -> void
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_80D67D2
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#6]
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0xbd
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80D685A
	pop {r7,pc}
loc_80D685A:
	push {lr}
	ldr r1, off_80D6868 // =off_80D686C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80D6868: .word off_80D686C
off_80D686C: .word sub_80D6874+1
	.word sub_80D688C+1
.func
.thumb_func
sub_80D6874:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D688A
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D688A:
	pop {pc}
.endfunc // sub_80D6874

.func
.thumb_func
sub_80D688C:
	push {lr}
	bl object_isCurrentPanelSolid
.endfunc // sub_80D688C

	tst r0, r0
	beq loc_80D68C6
	ldr r4, dword_80D690C // =0xa050001 
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80D68A0
	ldr r4, dword_80D6910 // =0x2b050001 
loc_80D68A0:
	lsl r0, r0, #2
	ldr r7, off_80D68D4 // =byte_80D68D8 
	ldr r7, [r7,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r6, [r5,#0x2c]
	bl sub_80C53A6
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x21 
	bl sub_80E05F6
	mov r0, #0xb9
	bl sound_play // () -> void
loc_80D68C6:
	ldr r0, [r5,#0x4c]
	mov r1, #0
	strb r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
	.balign 4, 0x00
off_80D68D4: .word byte_80D68D8
byte_80D68D8: .byte 0x3, 0x0, 0x0, 0x0, 0x3, 0x0, 0x54, 0x32
.func
.thumb_func
sub_80D68E0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x8a
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D690A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r7, [r0,#0x4c]
	mov r1, #1
	strb r1, [r7]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D690A:
	pop {pc}
dword_80D690C: .word 0xA050001
dword_80D6910: .word 0x2B050001
dword_80D6914: .word 0x1030504, 0x3, 0x100050B, 0x3
.endfunc // sub_80D68E0

loc_80D6924:
	push {lr}
	ldr r1, off_80D6934 // =off_80D6938 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D6934: .word off_80D6938
off_80D6938: .word sub_80D6952+1
	.word sub_80D69B8+1
	.word sub_80D6944+1
.func
.thumb_func
sub_80D6944:
	push {lr}
	ldr r0, [r5,#0x4c]
	mov r1, #0
	str r1, [r0]
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D6944

.func
.thumb_func
sub_80D6952:
	push {r4,lr}
	ldr r4, off_80D6A18 // =dword_80D6914 
	ldrb r1, [r5,#4]
	mov r2, #8
	mul r1, r2
	add r4, r4, r1
	str r4, [r5,#0x60]
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80D6976
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80D697C
loc_80D6976:
	bl object_freeMemory
	pop {r4,pc}
loc_80D697C:
	ldrb r1, [r4]
	ldrb r2, [r4,#1]
	ldr r3, [r4,#4]
	bl sub_8019FB4
	ldrb r1, [r4,#3]
	strb r1, [r7,#1]
	ldrb r0, [r4,#2]
	bl sub_801A140
	ldrb r0, [r4,#5]
	tst r0, r0
	beq loc_80D699A
	bl sub_801A258
loc_80D699A:
	ldrb r0, [r4,#6]
	cmp r0, #0
	beq loc_80D69A6
	ldrb r1, [r4,#7]
	bl sub_801A4D0
loc_80D69A6:
	ldr r0, [r5,#0x4c]
	str r5, [r0]
	bl sub_801A018
.endfunc // sub_80D6952

	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D69B8
	pop {r4,pc}
.func
.thumb_func
sub_80D69B8:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80D69B8

	bl sub_801A0D4
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	tst r0, r0
	bne loc_80D69D8
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D69D8
	bl sub_801A018
	pop {pc}
loc_80D69D8:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80D69E2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x8b
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D6A00
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x4c]
locret_80D6A00:
	pop {pc}
.endfunc // sub_80D69E2

	push {lr}
	bl sub_80D69E2
	cmp r0, #0
	beq locret_80D6A14
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D6A14:
	pop {pc}
	.balign 4, 0x00
off_80D6A18: .word dword_80D6914
	.byte 0, 0, 0, 0
loc_80D6A20:
	push {lr}
	ldr r1, off_80D6A34 // =off_80D6A38 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80D6A34: .word off_80D6A38
off_80D6A38: .word sub_80D6A44+1
	.word sub_80D6B28+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D6A44:
	push {r4,lr}
	mov r1, #0x10
	mov r2, #0x40 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D6A44

	ldrb r0, [r5,#7]
	ldr r1, off_80D6B20 // =byte_80D6B24 
	ldrb r0, [r1,r0]
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#6]
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x28 
	mul r1, r0
	ldrh r0, [r5,#0x36]
	sub r0, r0, r1
	strh r0, [r5,#0x36]
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x28]
	mov r1, #0x1c
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r2, [r5,#0x34]
	add r2, r2, r0
	str r2, [r5,#0x34]
	ldr r2, [r5,#0x3c]
	add r2, r2, r1
	str r2, [r5,#0x3c]
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80D6AC0
	bl object_freeMemory
	pop {r4,pc}
loc_80D6AC0:
	mov r1, #0xb
	mov r2, #5
	ldrb r3, [r5,#4]
	bl sub_8019FB4
	mov r1, #0x15
	strb r1, [r7,#1]
	mov r0, #0xff
	bl sub_801A140
	ldr r3, [r5,#0x54]
	ldrb r0, [r3,#0x10]
	cmp r0, #0
	bne loc_80D6AE2
	ldrb r0, [r5,#5]
	bl sub_801A258
loc_80D6AE2:
	ldrb r0, [r5,#7]
	cmp r0, #2
	blt loc_80D6AFE
	cmp r0, #3
	beq loc_80D6AF6
	mov r0, #0x18
	mov r1, #1
	bl sub_801A4D0
	b loc_80D6AFE
loc_80D6AF6:
	mov r0, #0xf6
	mov r1, #0
	bl sub_801A4D0
loc_80D6AFE:
	bl sub_801A018
	mov r0, #0xf3
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D6B28
	pop {r4,pc}
	.word 0, 0, 0
	.byte 0, 0
off_80D6B20: .word byte_80D6B24
byte_80D6B24: .byte 0x1, 0x2, 0x0, 0x3
.func
.thumb_func
sub_80D6B28:
	push {r7,lr}
	bl sub_801A00E
.endfunc // sub_80D6B28

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D6B58
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	tst r0, r0
	beq loc_80D6B46
	bl sub_801A074 // () -> void
loc_80D6B46:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D6B58
	bl sub_801A018
	bl object_highlightCurrentCollisionPanels
	pop {r7,pc}
loc_80D6B58:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	mov r2, #0x64 
	add r2, r2, r5
	mov r1, #1
	mov r3, #3
loc_80D6B68:
	ldr r0, [r2]
	cmp r0, #0
	beq loc_80D6B70
	strh r1, [r0,#0x20]
loc_80D6B70:
	add r2, #4
	sub r3, #1
	bne loc_80D6B68
	pop {r7,pc}
.func
.thumb_func
sub_80D6B78:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x8c
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D6B9A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r0, [r7]
	str r7, [r0,#0x60]
locret_80D6B9A:
	pop {pc}
.endfunc // sub_80D6B78

	push {lr}
	bl sub_80D6B78
	cmp r0, #0
	beq locret_80D6BAE
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D6BAE:
	pop {pc}
	push {r4,r6,r7,lr}
	mov r7, #0x64 
	add r7, r7, r5
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	mov r6, #0
	pop {r4,r6,r7,pc}
	push {r0-r3,lr}
	bl sub_80D69E2
	cmp r0, #0
	beq locret_80D6BD0
	ldrb r1, [r5,#6]
	strh r1, [r0,#0x20]
locret_80D6BD0:
	pop {r0-r3,pc}
	.balign 4, 0x00
loc_80D6BD4:
	push {lr}
	ldr r1, off_80D6BF4 // =off_80D6BF8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80D6BEC
	bl sub_801BCA6
	b locret_80D6BF0
loc_80D6BEC:
	bl sub_801BBF4
locret_80D6BF0:
	pop {pc}
	.balign 4, 0x00
off_80D6BF4: .word off_80D6BF8
off_80D6BF8: .word sub_80D6C04+1
	.word loc_80D6C56+1
	.word sub_80D6D10+1
.func
.thumb_func
sub_80D6C04:
	push {lr}
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldr r1, dword_80D6D78 // =0xc00000 
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, dword_80D6D78 // =0xc00000 
	str r0, [r5,#0x3c]
	mov r1, #0xc
	mov r2, #0x31 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D6C04

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80D6C56:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D6C78
	ldrb r0, [r5,#4]
	cmp r0, #1
	beq loc_80D6C6C
	bl battle_isTimeStop
	bne locret_80D6C7C
loc_80D6C6C:
	ldr r1, off_80D6C80 // =off_80D6C84 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80D6C7C
loc_80D6C78:
	mov r0, #8
	str r0, [r5,#8]
locret_80D6C7C:
	pop {pc}
	.byte 0, 0
off_80D6C80: .word off_80D6C84
off_80D6C84: .word sub_80D6C88+1
.func
.thumb_func
sub_80D6C88:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D6CAE
	mov r1, #4
	strb r1, [r5,#0xa]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D6D7C // =0xb0000 
	mul r0, r1
	ldr r1, dword_80D6D7C // =0xb0000 
	str r0, [r5,#0x40]
	str r1, [r5,#0x48]
	mov r0, #0xc4
	bl sound_play // () -> void
	mov r0, #0x11
	strh r0, [r5,#0x20]
	b loc_80D6CF0
loc_80D6CAE:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80D6CF0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80D6D04 // =byte_80D6D08 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80D6CEA
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	bl sub_80E05F6
	bl sub_80D6D3E
loc_80D6CEA:
	mov r0, #8
	str r0, [r5,#8]
	b locret_80D6D02
loc_80D6CF0:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs locret_80D6D02
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
locret_80D6D02:
	pop {pc}
off_80D6D04: .word byte_80D6D08
byte_80D6D08: .byte 0x10, 0x0, 0x80, 0x15, 0x10, 0x0, 0x80, 0x2A
.endfunc // sub_80D6C88

.func
.thumb_func
sub_80D6D10:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D6D10

.func
.thumb_func
sub_80D6D18:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x8d
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D6D3C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D6D3C:
	pop {pc}
.endfunc // sub_80D6D18

.func
.thumb_func
sub_80D6D3E:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#4]
	cmp r0, #1
	beq loc_80D6D5A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D6D70 // =0xa050101 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80D6D74 // =0x3 
	bl sub_80C536A
	beq locret_80D6D6C
loc_80D6D5A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D6D70 // =0xa050101 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80D6D74 // =0x3 
	bl sub_80C53A6
locret_80D6D6C:
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80D6D70: .word 0xA050101
dword_80D6D74: .word 0x3
dword_80D6D78: .word 0xC00000
dword_80D6D7C: .word 0xB0000
.endfunc // sub_80D6D3E

loc_80D6D80:
	push {lr}
	ldr r1, off_80D6DA0 // =off_80D6DA4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#6]
	tst r0, r0
	bne loc_80D6D98
	bl sub_801BCA6
	b locret_80D6D9C
loc_80D6D98:
	bl sub_801BBF4
locret_80D6D9C:
	pop {pc}
	.byte 0, 0
off_80D6DA0: .word off_80D6DA4
off_80D6DA4: .word sub_80D6DB0+1
	.word sub_80D6E1E+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D6DB0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #8
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0xf
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #1
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D6DB0

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D6DFA
	bl object_freeMemory
	b locret_80D6E1C
loc_80D6DFA:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0x50 
	bl sub_801A258
	mov r0, #2
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80D6E1C:
	pop {pc}
.func
.thumb_func
sub_80D6E1E:
	push {r4,lr}
	bl sub_801A00E
	.word 0xF956F743, 0xF9B1F733, 0xD1154200, 0x6F206D6C, 0xD0034200
	.word 0xF91CF743, 0x67202000, 0x420079A8, 0xF733D102, 0xD10BF927
	.word 0x7A684906, 0x46FE5809, 0xF7434708, 0xE003F8DF, 0xF90AF743
	.word 0x60A82008, 0xBD10
	.word off_80D6E6C
off_80D6E6C: .word sub_80D6E70+1
.endfunc // sub_80D6E1E

.func
.thumb_func
sub_80D6E70:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D6E92
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #7
	bl object_setPanelType
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	b locret_80D6EAE
loc_80D6E92:
	ldr r1, [r5,#0x54]
	ldr r0, [r1,#0x70]
	tst r0, r0
	beq loc_80D6E9E
	bl sub_801A074 // () -> void
loc_80D6E9E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D6EAE
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D6EAE:
	pop {pc}
.endfunc // sub_80D6E70

.func
.thumb_func
sub_80D6EB0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x8e
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D6ED4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D6ED4:
	pop {pc}
	.balign 4, 0x00
	.word 0x40002
	.word 0xA0006
.endfunc // sub_80D6EB0

.func
.thumb_func
sub_80D6EE0:
	push {lr}
	ldr r1, off_80D6EF4 // =off_80D6EF8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D6EF4: .word off_80D6EF8
off_80D6EF8: .word sub_80D6F04+1
	.word sub_80D6F74+1
	.word sub_8016C8A+1
.endfunc // sub_80D6EE0

.func
.thumb_func
sub_80D6F04:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0x10
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D6F04

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	beq loc_80D6F6E
	mov r1, #0xc
	mov r2, #0xd
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, dword_80D7064 // = 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #4
	str r0, [r5,#8]
	b locret_80D6F72
loc_80D6F6E:
	bl object_freeMemory
locret_80D6F72:
	pop {pc}
.func
.thumb_func
sub_80D6F74:
	push {lr}
	bl sub_801A00E
	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D6FBA
	mov r0, #0
	bl sub_801162A
	tst r0, r0
	blt loc_80D6FBA
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80D6FD0 // =dword_80D6FD4 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80D6FA4
	bl sub_801A074 // () -> void
loc_80D6FA4:
	bl battle_isTimeStop
	bne loc_80D6FB4
	ldr r1, off_80D6FC4 // =off_80D6FC8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
loc_80D6FB4:
	bl sub_801A018
	b locret_80D6FC2
loc_80D6FBA:
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80D6FC2:
	pop {pc}
off_80D6FC4: .word off_80D6FC8
off_80D6FC8: .word sub_80D6FDC+1
	.word sub_80D7008+1
off_80D6FD0: .word dword_80D6FD4
dword_80D6FD4: .word 0x5800000, 0xA800000
.endfunc // sub_80D6F74

.func
.thumb_func
sub_80D6FDC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D6FF6
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x82
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xa
	strh r0, [r5,#0x20]
	b locret_80D7006
loc_80D6FF6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D7006
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D7006:
	pop {pc}
.endfunc // sub_80D6FDC

.func
.thumb_func
sub_80D7008:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D7028
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #6
	bl object_setPanelType
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	b locret_80D7038
loc_80D7028:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D7038
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80D7038:
	pop {pc}
.endfunc // sub_80D7008

.func
.thumb_func
sub_80D703A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x8f
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D7060
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D7060:
	pop {pc}
	.balign 4, 0x00
dword_80D7064: .word 0x80D6ED8
.endfunc // sub_80D703A

loc_80D7068:
	push {lr}
	ldr r1, off_80D707C // =off_80D7080 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D707C: .word off_80D7080
off_80D7080: .word sub_80D708C+1
	.word sub_80D7100+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D708C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x42 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D708C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D70D6
	bl object_freeMemory
	b locret_80D70FE
loc_80D70D6:
	mov r1, #0x47 
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A018
	mov r1, #0
	ldrb r0, [r5,#0x13]
	cmp r0, #1
	beq loc_80D70F4
	mov r1, #3
loc_80D70F4:
	str r1, [r5,#0x60]
	mov r0, #0
	str r0, [r5,#0x64]
	mov r0, #4
	str r0, [r5,#8]
locret_80D70FE:
	pop {pc}
.func
.thumb_func
sub_80D7100:
	push {lr}
	bl sub_801A00E
	.hword 0xF742
	.word 0xF733FFE5, 0x4200F840, 0x6D6AD112, 0x7DA86F12, 0x490D0080
	.word 0x42105808, 0xF732D10A, 0xD104FFB9, 0x7A684906, 0x46FE5809
	.word 0xF7424708, 0xE003FF71, 0xFF9CF742, 0x72282008, 0xBD00
	.word off_80D7148
off_80D7148: .word sub_80D715C+1
	.word sub_80D7186+1
	.word dword_80D7154
dword_80D7154: .word 0x5800000, 0xA800000
.endfunc // sub_80D7100

.func
.thumb_func
sub_80D715C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D7174
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0xb8
	bl sound_play // () -> void
	mov r0, #0xa
	strh r0, [r5,#0x20]
	b locret_80D7184
loc_80D7174:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D7184
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D7184:
	pop {pc}
.endfunc // sub_80D715C

.func
.thumb_func
sub_80D7186:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D7198
	mov r0, #4
	strb r0, [r5,#0xa]
	bl sub_80D71FE
	b locret_80D71D4
loc_80D7198:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r2, [r5,#0x44]
	ldr r3, [r5,#0x38]
	add r2, r2, r3
	str r2, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D71D4
	ldr r0, [r5,#0x64]
	add r0, #1
	str r0, [r5,#0x64]
	cmp r0, #3
	bge loc_80D71CC
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80D71D4
loc_80D71CC:
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80D71D4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80D7186

.func
.thumb_func
sub_80D71D6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x90
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D71FC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D71FC:
	pop {pc}
.endfunc // sub_80D71D6

.func
.thumb_func
sub_80D71FE:
	push {r6,lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80D7244 // =dword_80D7248 
	ldr r1, [r1,r0]
	add r6, r1, #0
	ldr r0, [r5,#0x64]
	lsl r0, r0, #2
	ldr r2, off_80D7258 // =dword_80D725C 
	ldr r0, [r2,r0]
	svc 6
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x60]
	lsl r0, r0, #1
	ldr r1, off_80D7268 // =dword_80D726C 
	add r1, r1, r0
	mov r2, #0
	ldrsb r0, [r1,r2]
	mov r2, #1
	ldrsb r1, [r1,r2]
	mul r0, r6
	mul r1, r6
	push {r0,r1}
	bl sub_800E2C0
	add r2, r0, #0
	pop {r0,r1}
	mul r0, r2
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	ldr r0, [r5,#0x60]
	add r0, #1
	str r0, [r5,#0x60]
	pop {r6,pc}
	.balign 4, 0x00
off_80D7244: .word dword_80D7248
dword_80D7248: .word 0x40000, 0x48000, 0x50000, 0x58000
off_80D7258: .word dword_80D725C
dword_80D725C: .word 0xC80000, 0x300000, 0xF00000
off_80D7268: .word dword_80D726C
dword_80D726C: .word 0x1000001, 0x100FF, 0xFFFF00
.endfunc // sub_80D71FE

loc_80D7278:
	push {lr}
	ldr r1, off_80D728C // =off_80D7290 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80D728C: .word off_80D7290
off_80D7290: .word sub_80D729C+1
	.word sub_80D730A+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D729C:
	push {lr}
	mov r0, #0x10
	mov r1, #0x46 
	bl sprite_decompress
	mov r1, #0x10
	mov r2, #0x46 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D729C

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	lsl r0, r0, #0x10
	str r0, [r5,#0x40]
	bl sub_8019892
	tst r0, r0
	bne loc_80D72F2
	bl object_freeMemory
	pop {pc}
loc_80D72F2:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D730A
	pop {pc}
.func
.thumb_func
sub_80D730A:
	push {lr}
	bl sub_801A00E
	.word 0xFEE0F742, 0x6F016D68, 0xD1074209, 0x7A68490A, 0x46FE5809
	.word 0xF7424708, 0xBD00FE77, 0x19402034, 0x2400C80E, 0xF95FF009
	.word 0xF7292085, 0xF742F947, 0x2008FE99, 0xBD0060A8
	.word off_80D734C
off_80D734C: .word sub_80D7358+1
	.word sub_80D7382+1
	.word sub_80D73AC+1
.endfunc // sub_80D730A

.func
.thumb_func
sub_80D7358:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D7370
	mov r0, #0xe
	strh r0, [r5,#0x20]
	mov r0, #0x13
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D7370:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D7380
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D7380:
	pop {pc}
.endfunc // sub_80D7358

.func
.thumb_func
sub_80D7382:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D739A
	mov r0, #1
	strb r0, [r5,#0x10]
	bl sub_8002E3C
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D739A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D73AA
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D73AA:
	pop {pc}
.endfunc // sub_80D7382

.func
.thumb_func
sub_80D73AC:
	push {lr}
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldr r0, [r5,#0x34]
	asr r0, r0, #0x10
	add r0, #0x96
	mov r1, #0x96
	add r1, r1, r1
	cmp r0, r1
	bls locret_80D73D4
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D73D4:
	pop {pc}
.endfunc // sub_80D73AC

.func
.thumb_func
sub_80D73D6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x91
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D73FA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D73FA:
	pop {pc}
	.byte 0, 0, 0, 0
.endfunc // sub_80D73D6

loc_80D7400:
	push {lr}
	ldr r1, off_80D7410 // =off_80D7414 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80D7410: .word off_80D7414
off_80D7414: .word sub_80D7420+1
	.word sub_80D74DC+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D7420:
	push {r4,lr}
	bl sub_800E29C // () -> void
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80D7442
	ldr r0, dword_80D75EC // =0x1040403 
	ldr r1, dword_80D75F0 // =0x6050300 
	ldrb r2, [r5,#6]
	cmp r2, #0
	bne loc_80D743A
	ldr r1, dword_80D75F4 // =0x6050100 
loc_80D743A:
	bl sub_8011504
	tst r0, r0
	bne loc_80D745A
loc_80D7442:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl object_freeMemory
	pop {r4,pc}
.endfunc // sub_80D7420

loc_80D745A:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, off_80D74D0 // =dword_80D74D4 
	ldrb r2, [r5,#5]
	lsl r2, r2, #2
	ldr r1, [r1,r2]
	str r1, [r5,#0x44]
	mul r1, r0
	str r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	lsl r1, r1, #1
	add r0, r0, r1
	str r0, [r5,#0x34]
	mov r0, #0xa
	bl sub_801A140
	mov r2, #3
	ldrb r0, [r5,#7]
	cmp r0, #0
	beq loc_80D74A2
	ldrb r2, [r5,#0x16]
	mov r3, #1
	eor r2, r3
	mov r3, #7
	mul r2, r3
	ldrb r3, [r5,#0x12]
	sub r2, r2, r3
	bpl loc_80D74A2
	neg r2, r2
loc_80D74A2:
	ldr r0, dword_80D75F8 // =0x280000 
	mul r0, r2
	ldr r1, [r5,#0x44]
	sub r0, r0, r1
	sub r0, r0, r1
	svc 6
	add r0, #1
	strh r0, [r5,#0x20]
	bl sub_801A018
	mov r0, #0x21 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80D74DC
	pop {r4,pc}
	.word 0
	.byte 0, 0, 0, 0
off_80D74D0: .word dword_80D74D4
dword_80D74D4: .word 0xC0000, 0xC0000
.func
.thumb_func
sub_80D74DC:
	push {r4,r7,lr}
	bl sub_801A00E
	.hword 0xF742
	.word 0x6D6FFDF7, 0x42006F38, 0x8A68D011, 0xF7426628, 0x6E68FDBF
	.word 0xD10A2800, 0x6C69483E, 0x3002DF06, 0x20016228, 0xF758211E
	.word 0x2001FECD, 0x49166668, 0x58097A68, 0x470846FE, 0x78786D6F
	.word 0xD10C2800, 0x28047A68, 0x7A28D009, 0xD0062808, 0x6E298A68
	.word 0xD0064288, 0xF7422001, 0x7CA8FD9F, 0xF7357CE9, 0xF744FB49
	.word 0xF742FB31, 0xBD90FD65, 0x19402034, 0x2410C80E, 0x191B0424
	.word 0xF0092414, 0xF742F84A, 0x2008FD87, 0xBD9060A8
	.word off_80D7570
off_80D7570: .word sub_80D7578+1
	.word sub_80D75A4+1
.endfunc // sub_80D74DC

.func
.thumb_func
sub_80D7578:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80D75A2
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	bl sub_801A074 // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D75A2:
	pop {pc}
.endfunc // sub_80D7578

.func
.thumb_func
sub_80D75A4:
	push {lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80D75CE
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	mov r1, #2
	tst r0, r1
	beq loc_80D75C6
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
loc_80D75C6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80D75D2
loc_80D75CE:
	mov r0, #8
	str r0, [r5,#8]
locret_80D75D2:
	pop {pc}
.endfunc // sub_80D75A4

.func
.thumb_func
sub_80D75D4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x92
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D75E8
	bl sub_801155A
locret_80D75E8:
	pop {pc}
	.balign 4, 0x00
dword_80D75EC: .word 0x1040403
dword_80D75F0: .word 0x6050300
dword_80D75F4: .word 0x6050100
dword_80D75F8: .word 0x280000
.endfunc // sub_80D75D4

loc_80D75FC:
	push {lr}
	ldr r1, off_80D760C // =off_80D7610 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D760C: .word off_80D7610
off_80D7610: .word sub_80D761C+1
	.word sub_80D774C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D761C:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #4
	mov r2, #0xd
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D761C

	bl sub_8002E3C
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	mov r1, #3
	mul r0, r1
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0xeb
	strh r0, [r5,#0x28]
	ldrb r0, [r5,#6]
	strb r0, [r5,#0x14]
	ldrb r1, [r5,#7]
	strb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	push {r0,r1}
	add r7, r5, #0
	add r7, #0x34 
	push {r7}
	ldmia r7!, {r2,r3}
	sub r2, r0, r2
	sub r0, r1, r3
	add r1, r2, #0
	push {r5}
	bl calcAngle_800117C
	pop {r5}
	strb r0, [r5,#0xc]
	ldr r1, dword_80D7738 // =0x2c000 
	push {r1}
	bl sub_80011A0
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	pop {r4}
	pop {r0}
	pop {r1,r2}
	mov r3, #0
	ldr r6, dword_80D773C // =0xffffd800 
	bl sub_800120E
	str r0, [r5,#0x48]
	strh r1, [r5,#0x20]
	tst r1, r1
	beq loc_80D7718
	ldrh r0, [r5,#0x2c]
	ldr r1, dword_80D77C0 // =0x8000 
	tst r0, r1
	beq loc_80D76B4
	ldr r2, dword_80D77C4 // =0x7000 
	and r2, r0
	ldr r1, dword_80D77C8 // =0xfff 
	and r0, r1
	lsl r0, r0, #1
	orr r0, r2
	strh r0, [r5,#0x2c]
loc_80D76B4:
	ldr r0, dword_80D77CC // =0xfa0 
	strh r0, [r5,#0x26]
	ldrh r1, [r5,#0x2c]
	ldr r2, dword_80D77C8 // =0xfff 
	and r1, r2
	sub r0, r0, r1
	strh r0, [r5,#0x24]
	str r0, [r5,#0x6c]
	ldr r0, off_80D7740 // =0xb4 
	strh r0, [r5,#0x20]
	bl sub_8019892
	tst r0, r0
	bne loc_80D76DE
	bl sub_802EF5C
	bl sub_800F656
	bl object_freeMemory
	pop {pc}
loc_80D76DE:
	mov r1, #0x4f 
	mov r2, #0xf
	mov r3, #3
	bl sub_8019FB4
	ldr r0, [r5,#0x54]
	ldrb r2, [r5,#4]
	ldr r1, off_80D7744 // =byte_80D7748 
	ldrb r1, [r1,r2]
	strh r1, [r0,#0x2e]
	mov r1, #0x1e
	strb r1, [r0,#7]
	bl sub_801A074 // () -> void
	mov r0, #0xa
	bl sub_801A140
	bl sub_801A018
	mov r0, #0x10
	neg r0, r0
	mov r1, #3
	bl sub_801DC7C
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80D774C
	pop {pc}
loc_80D7718:
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	mov r2, #0
	add r7, r5, #0
	add r7, #0x34 
	stmia r7!, {r0-r2}
	bl sub_802EF5C
	bl sub_800F656
	bl sub_8016C8A
	pop {pc}
	.balign 4, 0x00
dword_80D7738: .word 0x2C000
dword_80D773C: .word 0xFFFFD800
off_80D7740: .word 0xB4
off_80D7744: .word byte_80D7748
byte_80D7748: .byte 0x32, 0x32, 0x46, 0x5A
.func
.thumb_func
sub_80D774C:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_801AD12
	bl sub_801A0D4
	bl sub_800F672
	ldr r0, off_80D7794 // =off_80D7798 
	bl loc_801B878
	ldrh r0, [r5,#0x24]
	ldr r1, dword_80D77D0 // =0xbb9 
	cmp r0, r1
	bgt loc_80D7772
	strh r1, [r5,#0x24]
loc_80D7772:
	bl sub_80D7A2A
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq loc_80D778A
	ldrh r0, [r5,#0x26]
	ldrh r1, [r5,#0x2c]
	ldr r2, dword_80D77C8 // =0xfff 
	and r1, r2
	sub r0, r0, r1
	strh r0, [r5,#0x24]
	str r0, [r5,#0x6c]
loc_80D778A:
	bl sub_801BBAC
	bl sub_801A018
.endfunc // sub_80D774C

	pop {pc}
off_80D7794: .word off_80D7798
off_80D7798: .word sub_80D77D4+1
	.word sub_80165B8+1
	.word sub_80D787C+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8017CC0+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80D77D4+1
	.word sub_80D7878+1
dword_80D77C0: .word 0x8000
dword_80D77C4: .word 0x7000
dword_80D77C8: .word 0xFFF
dword_80D77CC: .word 0xFA0
dword_80D77D0: .word 0xBB9
.func
.thumb_func
sub_80D77D4:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	beq loc_80D7802
	add r7, r5, #0
	add r7, #0x40 
	ldmia r7!, {r3,r4,r6}
	ldr r0, dword_80D7874 // =0xffffd800 
	add r6, r6, r0
	str r6, [r5,#0x48]
	add r7, r5, #0
	add r7, #0x34 
	ldmia r7!, {r0-r2}
	add r0, r0, r3
	add r1, r1, r4
	add r2, r2, r6
	cmp r2, #0
	ble loc_80D7802
	add r7, r5, #0
	add r7, #0x34 
	stmia r7!, {r0-r2}
	pop {pc}
loc_80D7802:
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	strb r1, [r7,#0xb]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	mov r2, #0
	add r7, r5, #0
	add r7, #0x34 
	stmia r7!, {r0-r2}
	bl object_isCurrentPanelSolid
.endfunc // sub_80D77D4

	tst r0, r0
	beq loc_80D784E
	mov r0, #0xc0
	bl sound_play // () -> void
	mov r0, #1
	mov r1, #0xf
	push {r5}
	bl sub_80302A8
	pop {r5}
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5]
	mov r1, #0x10
	orr r0, r1
	strb r0, [r5]
	mov r0, #9
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
loc_80D784E:
	bl sub_800E29C // () -> void
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0
	mov r4, #0
	bl sub_80E1D7A
	bl sub_801DD34
	bl sub_801A074 // () -> void
	bl sub_800F656
	bl sub_802EF5C
	mov r0, #8
	strb r0, [r5,#8]
	pop {pc}
dword_80D7874: .word 0xFFFFD800
.func
.thumb_func
sub_80D7878:
	push {lr}
	pop {pc}
.endfunc // sub_80D7878

.func
.thumb_func
sub_80D787C:
	push {lr}
	bl sub_801DD34
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D7890
	ldr r0, [r5,#0x64]
	cmp r0, #0
	bne loc_80D7896
loc_80D7890:
	bl sub_80D789C
	b locret_80D789A
loc_80D7896:
	bl loc_80D7928
locret_80D789A:
	pop {pc}
.endfunc // sub_80D787C

.func
.thumb_func
sub_80D789C:
	push {lr}
	bl sub_801A074 // () -> void
	bl sub_801A180
	ldr r1, dword_80D7AB8 // =0x8000 
	tst r0, r1
	beq loc_80D78DA
	ldr r1, dword_80D7ABC // =0x300000 
	tst r0, r1
	beq loc_80D78BA
	mov r0, #0xa
	bl sub_800F90E
	b loc_80D790E
loc_80D78BA:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80D7926
	cmp r0, #1
	beq loc_80D790E
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80D790E
loc_80D78DA:
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D7906
	mov r0, #4
	strb r0, [r5,#0xb]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x24]
	tst r0, r0
	bne loc_80D7906
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0
	bl sub_80E05F6
	mov r0, #0x70 
	bl sound_play // () -> void
	b loc_80D790E
loc_80D7906:
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80D7926
loc_80D790E:
	bl sub_802EF5C
	bl sub_800F656
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #8
	str r0, [r5,#8]
	bl sub_801DD34
locret_80D7926:
	pop {pc}
.endfunc // sub_80D789C

loc_80D7928:
	push {lr}
	bl battle_isTimeStop
	tst r0, r0
	bne loc_80D793C
	ldr r1, off_80D7948 // =off_80D794C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
loc_80D793C:
	ldrh r0, [r5,#0x20]
	mov r1, #0x20 
	orr r0, r1
	strh r0, [r5,#0x20]
	pop {pc}
	.balign 4, 0x00
off_80D7948: .word off_80D794C
off_80D794C: .word sub_80D795C+1
	.word sub_80D7996+1
	.word sub_80D79AC+1
	.word sub_80D7A0E+1
.func
.thumb_func
sub_80D795C:
	push {r4,lr}
	bl sub_801A074 // () -> void
	ldr r0, [r5,#0x54]
	mov r1, #0
	str r1, [r0,#0x3c]
	bl sub_802EF5C
	mov r0, #0x85
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	mov r1, #0
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80D7AC0 // =0x10d04 
	bl sub_80C4038
	str r0, [r5,#0x68]
	bl sub_800F656
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB1C
.endfunc // sub_80D795C

	mov r0, #4
	strh r0, [r5,#0xa]
	pop {r4,pc}
.func
.thumb_func
sub_80D7996:
	push {lr}
	mov r1, #5
	strb r1, [r5,#0x10]
	ldr r0, [r5,#0x68]
	mov r1, #9
	strb r1, [r0,#0x10]
	mov r0, #0x20 
	strh r0, [r5,#0x22]
	mov r0, #8
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80D7996

.func
.thumb_func
sub_80D79AC:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x22]
	cmp r0, #8
	bne loc_80D79E0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #2
	ldr r6, [r5,#0x2c]
	ldr r4, dword_80D7AC4 // =0x405ff10 
	mov r3, #0
	mov r7, #3
	bl sub_80C536A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x32 
	mov r3, #0x10
	ldrb r4, [r5,#0x16]
	ldrb r7, [r5,#0x17]
	eor r4, r7
	mov r7, #0
	bl sub_801BD3C
	ldr r0, [r5,#0x68]
	bl sub_80C4072
loc_80D79E0:
	ldrh r0, [r5,#0x22]
	cmp r0, #0x14
	bne loc_80D79EE
	mov r0, #0x86
	add r0, #0xff
	bl sound_play // () -> void
loc_80D79EE:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bge loc_80D79FA
	mov r0, #0xc
	strh r0, [r5,#0xa]
loc_80D79FA:
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #3
	bcs locret_80D7A0C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x10
	mov r3, #0
	bl sub_8109660
locret_80D7A0C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80D79AC

.func
.thumb_func
sub_80D7A0E:
	push {lr}
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
.endfunc // sub_80D7A0E

	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	bl sub_801DD34
	pop {pc}
.func
.thumb_func
sub_80D7A2A:
	push {lr}
	ldrb r0, [r5,#9]
	cmp r0, #2
	beq locret_80D7A76
	ldrh r0, [r5,#0x20]
	cmp r0, #1
	beq loc_80D7A5A
	ldr r0, [r5,#0x64]
	tst r0, r0
	bne locret_80D7A76
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq locret_80D7A76
	ldr r0, [r5,#0x6c]
	ldrh r1, [r5,#0x24]
	str r1, [r5,#0x6c]
	cmp r0, r1
	beq locret_80D7A76
	ldr r0, [r5,#0x60]
	add r0, #1
	str r0, [r5,#0x60]
	cmp r0, #3
	blt locret_80D7A76
loc_80D7A5A:
	mov r0, #1
	str r0, [r5,#0x64]
	ldrh r1, [r5,#0x24]
	ldrh r0, [r5,#0x26]
	sub r0, r0, r1
	ldrh r1, [r5,#0x2c]
	ldr r2, dword_80D7AC8 // =0x7000 
	and r1, r2
	orr r0, r1
	strh r0, [r5,#0x2c]
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D7A76:
	pop {pc}
.endfunc // sub_80D7A2A

.func
.thumb_func
sub_80D7A78:
	push {lr}
	push {r0,r5}
	mov r0, #0x93
	bl object_spawnType3
	add r0, r5, #0
	pop {r1,r5}
	beq locret_80D7A94
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r2, #1
	bl sub_800F614
locret_80D7A94:
	pop {pc}
.endfunc // sub_80D7A78

.func
.thumb_func
sub_80D7A96:
	push {r4,r7,lr}
	push {r0-r3}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	add r7, r0, #0
	pop {r0-r3}
	push {r4}
	ldrh r4, [r5,#0x12]
	add r4, r4, r7
	lsl r4, r4, #0x10
	pop {r7}
	orr r4, r7
	bl sub_80D7A78
	pop {r4,r7,pc}
dword_80D7AB8: .word 0x8000
dword_80D7ABC: .word 0x300000
dword_80D7AC0: .word 0x10D04
dword_80D7AC4: .word 0x405FF10
dword_80D7AC8: .word 0x7000
.endfunc // sub_80D7A96

loc_80D7ACC:
	push {lr}
	ldr r1, off_80D7AE0 // =off_80D7AE4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
off_80D7AE0: .word off_80D7AE4
off_80D7AE4: .word sub_80D7AF0+1
	.word sub_80D7B5C+1
	.word sub_80D7C6E+1
.func
.thumb_func
sub_80D7AF0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0xf
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0xa
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D7AF0

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	beq loc_80D7B4E
	mov r1, #4
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	b locret_80D7B5A
loc_80D7B4E:
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	add r0, #1
	str r0, [r1]
	bl object_freeMemory
locret_80D7B5A:
	pop {pc}
.func
.thumb_func
sub_80D7B5C:
	push {lr}
	bl sub_801A00E
	.hword 0xF742
	.word 0xF732FAB7, 0x4200FB12, 0x6D6AD10F, 0x7DA86F12, 0x490B0080
	.word 0x42105808, 0x4906D107, 0x58097A68, 0x470846FE, 0xFA46F742
	.word 0xF742E003, 0x2008FA71, 0xBD007228
	.word off_80D7B9C
off_80D7B9C: .word sub_80D7BB0+1
	.word sub_80D7BE0+1
	.word dword_80D7BA8
dword_80D7BA8: .word 0x5800000, 0xA800000
.endfunc // sub_80D7B5C

.func
.thumb_func
sub_80D7BB0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D7BCE
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x94
	bl sound_play // () -> void
	ldrb r0, [r5,#4]
	mov r1, #0xc
	mul r0, r1
	add r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80D7BDE
loc_80D7BCE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D7BDE
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D7BDE:
	pop {pc}
.endfunc // sub_80D7BB0

.func
.thumb_func
sub_80D7BE0:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D7BFC
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xb
	strb r0, [r5,#0x10]
	bl sub_80D7CCC
	str r0, [r5,#0x64]
	str r1, [r5,#0x68]
	bl sub_80D7D4C
loc_80D7BFC:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldrb r6, [r5,#5]
	tst r6, r6
	bne loc_80D7C0E
	add r4, r0, #0
	b loc_80D7C10
loc_80D7C0E:
	add r4, r1, #0
loc_80D7C10:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r2, [r5,#0x44]
	ldr r3, [r5,#0x38]
	add r2, r2, r3
	str r2, [r5,#0x38]
	ldrb r6, [r5,#5]
	tst r6, r6
	bne loc_80D7C2C
	add r6, r1, #0
	add r3, r0, #0
	b loc_80D7C30
loc_80D7C2C:
	add r6, r3, #0
	add r3, r2, #0
loc_80D7C30:
	cmp r4, r6
	beq loc_80D7C4E
	add r0, r3, #0
	add r1, r6, #0
	add r2, r4, #0
	bl sub_800E708
	cmp r0, #0
	beq loc_80D7C4E
	bl sub_80D7DC0
	tst r0, r0
	bne loc_80D7C64
	bl sub_80D7D4C
loc_80D7C4E:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	bne locret_80D7C6C
loc_80D7C64:
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80D7C6C:
	pop {r4,r6,pc}
.endfunc // sub_80D7BE0

.func
.thumb_func
sub_80D7C6E:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	add r0, #1
	str r0, [r1]
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80D7C6E

.func
.thumb_func
sub_80D7C7E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x94
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq loc_80D7CA8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	b locret_80D7CAE
loc_80D7CA8:
	ldr r3, [r7]
	add r3, #1
	str r3, [r7]
locret_80D7CAE:
	pop {pc}
.endfunc // sub_80D7C7E

.func
.thumb_func
sub_80D7CB0:
	push {lr}
	ldr r0, [r5,#0x40]
	cmp r0, #0
	bgt loc_80D7CC4
	cmp r0, #0
	beq locret_80D7CCA
	mov r0, #1
	bl sub_8002F5C
	b locret_80D7CCA
loc_80D7CC4:
	mov r0, #0
	bl sub_8002F5C
locret_80D7CCA:
	pop {pc}
.endfunc // sub_80D7CB0

.func
.thumb_func
sub_80D7CCC:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp]
	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80D7CE0
	mov r0, #6
loc_80D7CE0:
	ldrb r1, [r5,#0x13]
	ldrb r3, [r5,#0x16]
	lsl r3, r3, #2
	ldr r2, off_80D7D40 // =off_80D7D44 
	ldr r2, [r2,r3]
	mov r3, #0
	ldr r4, [sp]
	bl sub_800D0BC
.endfunc // sub_80D7CCC

	tst r0, r0
	bne loc_80D7D3A
	mov r6, #1
	ldrb r0, [r5,#0x16]
	tst r0, r0
	beq loc_80D7D00
	mov r6, #6
loc_80D7D00:
	add r0, r6, #0
	ldrb r3, [r5,#0x16]
	lsl r3, r3, #2
	ldr r2, off_80D7D40 // =off_80D7D44 
	ldr r2, [r2,r3]
	mov r3, #0
	add r7, sp, #4
	bl sub_800CFDC
	tst r0, r0
	beq loc_80D7D22
	add r0, sp, #4
	ldrb r0, [r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80D7D3A
loc_80D7D22:
	ldr r0, [sp]
	add r6, r6, r0
	cmp r6, #1
	blt loc_80D7D2E
	cmp r6, #6
	ble loc_80D7D00
loc_80D7D2E:
	ldrb r1, [r5,#0x13]
	mov r0, #7
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80D7D3A
	mov r0, #0
loc_80D7D3A:
	add sp, sp, #8
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80D7D40: .word off_80D7D44
off_80D7D44: .word LCDControl
	.word start_
.func
.thumb_func
sub_80D7D4C:
	push {r4,r6,r7,lr}
	mov r4, #0
	ldrb r0, [r5,#5]
	tst r0, r0
	beq loc_80D7D80
loc_80D7D56:
	cmp r4, #2
	bge loc_80D7DAA
	add r4, #1
	ldr r1, [r5,#0x64]
	ldrb r2, [r5,#0x12]
	cmp r1, r2
	beq loc_80D7D80
	mov r0, #0
	strb r0, [r5,#5]
	ldr r3, dword_80D7DE0 // =0x24000 
	cmp r1, r2
	bgt loc_80D7D70
	neg r3, r3
loc_80D7D70:
	str r3, [r5,#0x40]
	mov r3, #0
	str r3, [r5,#0x44]
	bl sub_800E29C // () -> void
	bl sub_80D7CB0
	b locret_80D7DBE
loc_80D7D80:
	cmp r4, #2
	bge loc_80D7DAA
	add r4, #1
	ldr r1, [r5,#0x68]
	ldrb r2, [r5,#0x13]
	cmp r1, r2
	beq loc_80D7D56
	mov r0, #1
	strb r0, [r5,#5]
	ldr r3, dword_80D7DE0 // =0x24000 
	cmp r1, r2
	bgt loc_80D7D9A
	neg r3, r3
loc_80D7D9A:
	str r3, [r5,#0x44]
	mov r3, #0
	str r3, [r5,#0x40]
	bl sub_800E29C // () -> void
	bl sub_80D7CB0
	b locret_80D7DBE
loc_80D7DAA:
	ldr r0, [r5,#0x40]
	neg r0, r0
	str r0, [r5,#0x40]
	ldr r0, [r5,#0x44]
	neg r0, r0
	str r0, [r5,#0x44]
	bl sub_800E29C // () -> void
	bl sub_80D7CB0
locret_80D7DBE:
	pop {r4,r6,r7,pc}
.endfunc // sub_80D7D4C

.func
.thumb_func
sub_80D7DC0:
	push {r4,lr}
	mov r4, #0
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	ldr r2, [r5,#0x64]
	ldr r3, [r5,#0x68]
	cmp r0, r2
	bne loc_80D7DDA
	cmp r1, r3
	bne loc_80D7DDA
	mov r4, #1
loc_80D7DDA:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
dword_80D7DE0: .word 0x24000
.endfunc // sub_80D7DC0

loc_80D7DE4:
	push {lr}
	ldr r1, off_80D7DF8 // =off_80D7DFC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80D7DF8: .word off_80D7DFC
off_80D7DFC: .word sub_80D7E08+1
	.word sub_80D7E7A+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D7E08:
	push {lr}
	mov r1, #0x10
	mov r2, #0x43 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D7E08

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x28 
	mul r1, r0
	ldrh r0, [r5,#0x36]
	sub r0, r0, r1
	strh r0, [r5,#0x36]
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x28]
	mov r1, #0x1f
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r2, [r5,#0x34]
	add r2, r2, r0
	str r2, [r5,#0x34]
	ldr r2, [r5,#0x3c]
	add r2, r2, r1
	str r2, [r5,#0x3c]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D7E7A
	pop {pc}
.func
.thumb_func
sub_80D7E7A:
	push {r7,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D7E92
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D7E92
	bl sub_80D7E98
	pop {r7,pc}
loc_80D7E92:
	mov r0, #8
	str r0, [r5,#8]
	pop {r7,pc}
.endfunc // sub_80D7E7A

.func
.thumb_func
sub_80D7E98:
	push {lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80D7EA8
	mov r0, #1
	strb r0, [r5,#0xa]
	mov r0, #0xf
	strh r0, [r5,#0x22]
loc_80D7EA8:
	ldrh r0, [r5,#0x22]
	cmp r0, #0xb
	bne loc_80D7EC6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	sub r1, #1
	mov r2, #0xe1
	bl sub_80D7EF6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	add r1, #1
	mov r2, #0xd1
	bl sub_80D7EF6
loc_80D7EC6:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80D7ED2
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80D7ED2:
	pop {pc}
.endfunc // sub_80D7E98

.func
.thumb_func
sub_80D7ED4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x95
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D7EF4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r0, [r7]
	str r7, [r0,#0x60]
locret_80D7EF4:
	pop {pc}
.endfunc // sub_80D7ED4

.func
.thumb_func
sub_80D7EF6:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	add r7, r2, #0
	str r0, [sp]
	str r1, [sp,#4]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	mov r6, #3
loc_80D7F08:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl object_getPanelParameters
.endfunc // sub_80D7EF6

	ldr r1, off_80D7F40 // =LCDControl 
	ldrb r2, [r5,#0x16]
	cmp r2, #0
	beq loc_80D7F1A
	ldr r1, off_80D7F44 // =start_ 
loc_80D7F1A:
	tst r0, r1
	beq loc_80D7F32
	ldr r0, [sp]
	ldr r1, [sp,#4]
	mov r2, #0
	mov r3, #0
	push {r4,r6}
	ldr r4, dword_80D7F48 // =0x3205ff01 
	mov r6, #0
	bl sub_80C536A
	pop {r4,r6}
loc_80D7F32:
	ldr r0, [sp]
	add r0, r0, r4
	str r0, [sp]
	sub r6, #1
	bne loc_80D7F08
	add sp, sp, #8
	pop {r4,r6,r7,pc}
off_80D7F40: .word LCDControl
off_80D7F44: .word start_
dword_80D7F48: .word 0x3205FF01
dword_80D7F4C: .word 0x1030507, 0x2140C, 0x800, 0x80000, 0x4030507, 0x140C
	.word 0x800, 0x80000, 0x2030507, 0x1140C, 0x800, 0x80000
	.word 0x4030507, 0x140C, 0x500800, 0x80000, 0x2030507, 0x1140C
	.word 0x500800, 0x80000, 0x11030507, 0x150C, 0x800, 0x80000
	.word 0x11030507, 0x150C, 0xA00800, 0x80000, 0x11030507, 0x150C
	.word 0x800, 0x80000, 0x2030507, 0x1140C, 0x600800, 0x80000
	.word 0x6030507, 0x3140C, 0x800, 0x80000, 0xB030507, 0x1004110
	.word 0x800, 0x80000, 0x11010507, 0x150C, 0x800, 0x80000
	.word 0x4030507, 0x140C, 0x100800, 0x80000, 0x4030507, 0x140C
	.word 0x200800, 0x80000, 0x4010507, 0x140C, 0x10300800, 0x80000
	.word 0x4010507, 0x140C, 0x400800, 0x80000, 0x4030507, 0x3B10
	.word 0x100, 0x80000, 0x10030507, 0x1003C10, 0x800, 0x80000
	.word 0x11030507, 0x150C, 0x800, 0x80000
loc_80D807C:
	push {lr}
	ldr r1, off_80D80A4 // =off_80D80A8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#7]
	cmp r0, #0
	beq locret_80D80A2
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq loc_80D809E
	mov r0, #0xff
	strb r0, [r5,#0x11]
loc_80D809E:
	bl sub_801BBAC
locret_80D80A2:
	pop {pc}
off_80D80A4: .word off_80D80A8
off_80D80A8: .word sub_80D80B4+1
	.word sub_80D8172+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D80B4:
	push {r7,lr}
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#4]
	mov r1, #0x10
	mul r0, r1
	ldr r7, off_80D8258 // =dword_80D7F4C 
	add r7, r7, r0
	str r7, [r5,#0x4c]
	ldrb r1, [r7,#4]
	ldrb r2, [r7,#5]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D80B4

	ldrb r0, [r7,#0xa]
	mov r1, #0xf
	and r0, r1
	cmp r0, #0
	beq loc_80D80E4
	bl sub_8002E3C
	b loc_80D80E8
loc_80D80E4:
	bl sub_8002F90 // () -> void
loc_80D80E8:
	ldrb r0, [r7,#6]
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r7,#0xa]
	lsr r0, r0, #4
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne loc_80D8106
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
loc_80D8106:
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r7,#9]
	strb r0, [r5,#7]
	bl sub_800E2AC
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r7,#0xc]
	mul r0, r1
	str r0, [r5,#0x40]
	ldrb r0, [r7,#8]
	strb r0, [r5,#6]
	bl sub_8019892
	tst r0, r0
	bne loc_80D8132
	bl object_freeMemory
	pop {r7,pc}
loc_80D8132:
	ldrb r1, [r7]
	ldrb r2, [r7,#1]
	ldrb r3, [r7,#2]
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	ldrb r0, [r7,#3]
	bl sub_801A07C
	ldrb r0, [r7,#0xb]
	cmp r0, #0
	beq loc_80D8152
	bl sub_801A258
loc_80D8152:
	ldrb r0, [r5,#4]
	cmp r0, #0x11
	bne loc_80D8160
	mov r0, #0x18
	mov r1, #1
	bl sub_801A4D0
loc_80D8160:
	bl sub_801A018
	bl sub_801BBAC
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D8172
	pop {r7,pc}
.func
.thumb_func
sub_80D8172:
	push {r4,r6,lr}
	bl sub_801A00E
.endfunc // sub_80D8172

	bl sub_801A0D4
	ldrb r0, [r5,#9]
	cmp r0, #0
	beq loc_80D81A4
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	beq loc_80D81F8
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	mov r1, #2
	tst r0, r1
	bne loc_80D8208
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	b loc_80D8208
loc_80D81A4:
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x70]
	tst r1, r1
	beq loc_80D81BA
	bl sub_801A074 // () -> void
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #1
	strb r0, [r5,#9]
	b loc_80D8208
loc_80D81BA:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r0, #0
	ldr r1, [r5,#0x34]
	ldr r0, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r3, [r5,#0x60]
	cmp r3, #0
	beq loc_80D81E4
	bl sub_800E6E8
	tst r0, r0
	beq loc_80D81E8
	ldrb r0, [r5,#7]
	sub r0, #1
	strb r0, [r5,#7]
	bgt loc_80D81E8
	b loc_80D81F8
loc_80D81E4:
	mov r3, #1
	str r3, [r5,#0x60]
loc_80D81E8:
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80D8208
loc_80D81F8:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
loc_80D8208:
	bl sub_801A018
	ldrb r0, [r5,#6]
	cmp r0, #0
	beq loc_80D8216
	bl object_highlightCurrentCollisionPanels
loc_80D8216:
	ldrb r0, [r5,#4]
	cmp r0, #0x10
	bne locret_80D8220
	bl sub_801BBAC
locret_80D8220:
	pop {r4,r6,pc}
.func
.thumb_func
sub_80D8222:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x96
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D8240
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
locret_80D8240:
	pop {pc}
.endfunc // sub_80D8222

	push {lr}
	bl sub_80D8222
	cmp r0, #0
	beq locret_80D8254
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D8254:
	pop {pc}
	.balign 4, 0x00
off_80D8258: .word dword_80D7F4C
loc_80D825C:
	push {lr}
	ldr r1, off_80D8270 // =off_80D8274 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80D8270: .word off_80D8274
off_80D8274: .word sub_80D8280+1
	.word sub_80D8310+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D8280:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80D8280

	mov r1, #0x10
	tst r0, r1
	bne loc_80D82A2
	mov r1, #0
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80D829C
	str r1, [r0]
	str r1, [r5,#0x60]
loc_80D829C:
	bl object_freeMemory
	b locret_80D830E
loc_80D82A2:
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #2
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D82F6
	mov r1, #0
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80D82F0
	str r1, [r0]
	str r1, [r5,#0x60]
loc_80D82F0:
	bl object_freeMemory
	b locret_80D830E
loc_80D82F6:
	mov r1, #0xa
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #1
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80D830E:
	pop {pc}
.func
.thumb_func
sub_80D8310:
	push {lr}
	bl sub_801A00E
	.hword 0xF741
	.word 0xF731FEDD, 0x4200FF38, 0x6D68D119, 0x42006F00, 0xF741D00A
	.word 0x2100FEA3, 0x42006E28, 0x6001D001, 0x20086629, 0xE01460A8
	.word 0xFEAAF731, 0x4909D111, 0x58097A68, 0x470846FE, 0xFE62F741
	.word 0xF741E009, 0x2100FE8D, 0x42006E28, 0x6001D001, 0x20086629
	.word 0xBD0060A8
	.word off_80D8370
off_80D8370: .word sub_80D837C+1
	.word sub_80D83A0+1
	.word sub_80D83CC+1
.endfunc // sub_80D8310

.func
.thumb_func
sub_80D837C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D838E
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #5
	strh r0, [r5,#0x20]
	b locret_80D839E
loc_80D838E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D839E
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D839E:
	pop {pc}
.endfunc // sub_80D837C

.func
.thumb_func
sub_80D83A0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D83B6
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	b locret_80D83CA
loc_80D83B6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D83CA
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D83CA:
	pop {pc}
.endfunc // sub_80D83A0

.func
.thumb_func
sub_80D83CC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D83E6
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #2
	strb r0, [r5,#0x10]
	bl sub_801A074 // () -> void
	mov r0, #2
	strh r0, [r5,#0x20]
	b locret_80D83FE
loc_80D83E6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D83FE
	mov r1, #0
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80D83FA
	str r1, [r0]
	str r1, [r5,#0x60]
loc_80D83FA:
	mov r0, #8
	str r0, [r5,#8]
locret_80D83FE:
	pop {pc}
.endfunc // sub_80D83CC

.func
.thumb_func
sub_80D8400:
	push {lr}
	push {r3}
	push {r0-r2,r5}
	mov r0, #0x97
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	pop {r4}
	beq locret_80D842C
	str r4, [r0,#0x60]
	str r0, [r4]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D842C:
	pop {pc}
.endfunc // sub_80D8400

.func
.thumb_func
sub_80D842E:
	push {r5,lr}
	add r5, r0, #0
	ldrb r0, [r5,#9]
	cmp r0, #8
	beq locret_80D8440
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D8440:
	pop {r5,pc}
	.balign 4, 0x00
.endfunc // sub_80D842E

loc_80D8444:
	push {lr}
	ldr r1, off_80D8454 // =off_80D8458 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D8454: .word off_80D8458
off_80D8458: .word sub_80D8464+1
	.word sub_80D84DE+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D8464:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	ldrh r0, [r5,#0x12]
	strh r0, [r5,#0x14]
	mov r1, #0x10
	mov r2, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #3
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D8464

	bl sprite_update
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	ldrh r0, [r5,#0x3e]
	sub r0, #1
	strh r0, [r5,#0x3e]
	ldrh r0, [r5,#0x3a]
	sub r0, #1
	strh r0, [r5,#0x3a]
	mov r0, #0xd2
	strh r0, [r5,#0x28]
	mov r0, #1
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	bl sub_8019892
	tst r0, r0
	bne loc_80D84C4
	bl object_freeMemory
	b locret_80D84DC
loc_80D84C4:
	mov r1, #0xe
	mov r2, #0xf
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A018
	mov r0, #8
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	str r0, [r5,#8]
locret_80D84DC:
	pop {pc}
.func
.thumb_func
sub_80D84DE:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD9E
	mov r0, #1
	strh r0, [r5,#0x24]
	ldr r0, off_80D8504 // =off_80D8508 
	bl sub_801B394
	bl sub_801A018
.endfunc // sub_80D84DE

	bl sub_801BBF4
	pop {pc}
off_80D8504: .word off_80D8508
off_80D8508: .word sub_80D852C+1
	.word sub_80165B8+1
	.word sub_80D855C+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word loc_8017E26+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80D8558+1
.func
.thumb_func
sub_80D852C:
	push {lr}
	bl battle_getFlags
	mov r1, #1
	tst r0, r1
	bne loc_80D853E
	bl nullsub_10
	b locret_80D8556
loc_80D853E:
	ldrb r0, [r5]
	mov r1, #4
	bic r0, r1
	strb r0, [r5]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D8556:
	pop {pc}
.endfunc // sub_80D852C

.func
.thumb_func
sub_80D8558:
	push {lr}
	pop {pc}
.endfunc // sub_80D8558

.func
.thumb_func
sub_80D855C:
	push {r4,r7,lr}
	bl sub_802EF5C
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
.endfunc // sub_80D855C

	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80D8578
	mov r1, #0
	str r1, [r0]
loc_80D8578:
	bl sub_801A180
	ldr r1, dword_80D8618 // =0x8000 
	tst r0, r1
	beq loc_80D85B0
	ldr r1, dword_80D861C // =0x300000 
	tst r0, r1
	beq loc_80D8590
	mov r0, #0xb
	bl sub_800F90E
	b loc_80D85E6
loc_80D8590:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80D85EE
	cmp r0, #1
	beq loc_80D85E6
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80D85E6
loc_80D85B0:
	mov r7, #0x34 
	add r7, r7, r5
	ldmia r7!, {r1-r3}
	mov r0, #0xf
	bl sub_801BDDE
	mov r4, #0
	bl sub_80E47A4
	mov r7, #0x34 
	add r7, r7, r5
	ldmia r7!, {r1-r3}
	mov r0, #0xf
	bl sub_801BDDE
	mov r4, #0
	bl sub_80E47A4
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #1
	bl sub_80E05F6
loc_80D85E6:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D85EE:
	pop {r4,r7,pc}
.func
.thumb_func
sub_80D85F0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x98
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D8614
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	strb r4, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrb r2, [r0]
	mov r1, #0x14
	orr r2, r1
	strb r2, [r0]
locret_80D8614:
	pop {pc}
	.balign 4, 0x00
dword_80D8618: .word 0x8000
dword_80D861C: .word 0x300000
.endfunc // sub_80D85F0

loc_80D8620:
	push {lr}
	ldr r1, off_80D8634 // =off_80D8638 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80D8634: .word off_80D8638
off_80D8638: .word sub_80D8644+1
	.word loc_80D868E+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D8644:
	push {lr}
	mov r1, #0xc
	mov r2, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D8644

	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80D868E
	pop {pc}
loc_80D868E:
	push {lr}
	ldr r1, off_80D869C // =off_80D86A0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80D869C: .word off_80D86A0
off_80D86A0: .word sub_80D86B0+1
	.word sub_80D86D2+1
	.word sub_80D8706+1
	.word sub_80D8746+1
.func
.thumb_func
sub_80D86B0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D86C0
	mov r0, #6
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D86C0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D86D0
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D86D0:
	pop {pc}
.endfunc // sub_80D86B0

.func
.thumb_func
sub_80D86D2:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D86E2
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D86E2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D8704
	ldrb r0, [r5,#5]
	cmp r0, #0xff
	bne loc_80D86FC
	ldr r0, [r5,#0x4c]
	mov r1, #0
	strb r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
loc_80D86FC:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D8704:
	pop {pc}
.endfunc // sub_80D86D2

.func
.thumb_func
sub_80D8706:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D8734
	mov r0, #0x96
	strh r0, [r5,#0x20]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldrh r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	mov r3, #0x1c
	lsl r3, r3, #0x10
	mov r7, #0
	bl sub_80D88B8
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D8734:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D8744
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D8744:
	pop {pc}
.endfunc // sub_80D8706

.func
.thumb_func
sub_80D8746:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D875A
	mov r0, #6
	strh r0, [r5,#0x20]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D875A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D876C
	ldr r0, [r5,#0x4c]
	mov r1, #0
	strb r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
locret_80D876C:
	pop {pc}
.endfunc // sub_80D8746

.func
.thumb_func
sub_80D876E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x99
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D8798
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x4c]
	mov r1, #1
	strb r1, [r7]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D8798:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80D876E

loc_80D879C:
	push {lr}
	ldr r1, off_80D87B0 // =off_80D87B4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
off_80D87B0: .word off_80D87B4
off_80D87B4: .word sub_80D87C0+1
	.word sub_80D881C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D87C0:
	push {lr}
	mov r1, #0xc
	mov r2, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D87C0

	bl sub_8002F90 // () -> void
	ldrb r0, [r5,#5]
	add r0, r0, r0
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x3c 
	mul r0, r1
	lsl r0, r0, #0x10
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r0, #0
	strb r0, [r5,#7]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D881C
	pop {pc}
.func
.thumb_func
sub_80D881C:
	push {lr}
	ldr r1, off_80D8840 // =off_80D8844 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#7]
.endfunc // sub_80D881C

	add r0, #1
	strb r0, [r5,#7]
	mov r1, #0xf
	and r0, r1
	cmp r0, #1
	bne locret_80D883E
	mov r0, #0x4a 
	add r0, #0xff
	bl sound_play // () -> void
locret_80D883E:
	pop {pc}
off_80D8840: .word off_80D8844
off_80D8844: .word sub_80D884C+1
	.word sub_80D8868+1
.func
.thumb_func
sub_80D884C:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80D8866
	ldrb r0, [r5,#0x10]
	add r0, #1
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D8866:
	pop {pc}
.endfunc // sub_80D884C

.func
.thumb_func
sub_80D8868:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D887C
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #0xa
	strh r0, [r5,#0x22]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D887C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D88B0
	mov r0, #0xf
	strh r0, [r5,#0x20]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#5]
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldr r4, dword_80D88B4 // =0x16050c01 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C53A6
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80D88B0
	mov r0, #8
	str r0, [r5,#8]
locret_80D88B0:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80D88B4: .word 0x16050C01
.endfunc // sub_80D8868

.func
.thumb_func
sub_80D88B8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x9a
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D88DC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D88DC:
	pop {pc}
	.byte 0, 0
.endfunc // sub_80D88B8

loc_80D88E0:
	push {lr}
	ldr r1, off_80D88F8 // =off_80D88FC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl battle_isTimeStop
	bne locret_80D88F6
	bl sub_801BBAC
locret_80D88F6:
	pop {pc}
off_80D88F8: .word off_80D88FC
off_80D88FC: .word sub_80D8908+1
	.word sub_80D8988+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D8908:
	push {r4,lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80D8908

	mov r1, #0x10
	tst r0, r1
	beq loc_80D8926
	ldr r1, dword_80D8C30 // =0x3800000 
	tst r0, r1
	beq loc_80D8942
loc_80D8926:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl sub_800F656
	bl object_freeMemory
	b locret_80D8986
loc_80D8942:
	ldr r0, dword_80D8C34 // =0xc41 
	ldr r1, dword_80D8C38 // =0xe0f0300 
	bl sub_8011504
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D8C3C // =0x40000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #4
	strh r0, [r5,#0x22]
	mov r0, #0xe5
	strh r0, [r5,#0x28]
	ldr r0, off_80D8C40 // =0x190 
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	bl sub_80D8BBC
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0x21 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D8988
locret_80D8986:
	pop {r4,pc}
.func
.thumb_func
sub_80D8988:
	push {r4,lr}
	bl sub_801A00E
	.byte  0
	.byte 0x20
	.byte 0x38 
	.byte 0xF7
	.byte 0xEB
	.byte 0xFD
	.byte  0
	.byte 0x42 
	.byte  9
	.byte 0xDA
	.byte 0x34 
	.byte 0x20
	.byte 0x40 
	.byte 0x19
	.byte 0xE
	.byte 0xC8
	.byte  0
	.byte 0x24 
	.byte  7
	.byte 0xF0
	.byte 0x29 
	.byte 0xFE
	.byte 0x70 
	.byte 0x20
	.byte 0x27 
	.byte 0xF7
	.byte 0x11
	.byte 0xFE
	.byte 0x30 
	.byte 0xE0
	.byte 0x6B 
	.byte 0x6D 
	.byte 0x18
	.byte 0x6F 
	.byte 0xA4
	.byte 0x49 
	.byte  8
	.byte 0x42 
	.byte 0xF0
	.byte 0xD1
	.byte 0xA4
	.byte 0x49 
	.byte  8
	.byte 0x42 
	.byte  4
	.byte 0xD1
	.byte 0x76 
	.byte 0x20
	.byte 0x18
	.byte 0x5C 
	.byte 0x20
	.byte 0x21 
	.byte  8
	.byte 0x42 
	.byte  2
	.byte 0xD0
	.byte 0x68 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x68 
	.byte 0x71 
	.byte 0x34 
	.byte 0xF7
	.byte 0x6B 
	.byte 0xF9
	.word 0xD1064200, 0x19402034, 0x2414C80E, 0xFE0BF007, 0xF741E015
	.word 0x4999FBCD, 0xD0074208, 0x28107A68, 0x2010D004, 0x20007268
	.word 0xE0028168, 0xFB4CF731, 0x4908D104, 0x58097A68, 0x470846FE
.endfunc // sub_80D8988

	b loc_80D8A1E
	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
loc_80D8A1E:
	bl sub_801A018
	pop {r4,pc}
	.word off_80D8A28
off_80D8A28: .word sub_80D8A3C+1
	.word sub_80D8AB6+1
	.word sub_80D8ADC+1
	.word sub_80D8B18+1
	.word sub_80D8B52+1
.func
.thumb_func
sub_80D8A3C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D8A54
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_80D8C10
	tst r0, r0
	beq loc_80D8A7E
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D8A54:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	add r4, r0, #0
	ldr r2, [r5,#0x60]
	bl sub_800E6E8
	tst r0, r0
	beq loc_80D8A90
	bl sub_80D8BBC
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_80D8C10
	tst r0, r0
	beq loc_80D8A7E
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80D8A90
loc_80D8A7E:
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r4,r6,r7,pc}
loc_80D8A90:
	add r0, r4, #0
	ldr r1, [r5,#0x38]
	bl sub_800E24C
	add r6, r0, #0
	bl sub_80D8C10
.endfunc // sub_80D8A3C

	tst r0, r0
	beq loc_80D8AAA
	ldrb r0, [r5,#0x12]
	cmp r0, r6
	beq loc_80D8AAA
	b loc_80D8A7E
loc_80D8AAA:
	str r4, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80D8AB6:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D8AC6
	mov r0, #0xf
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D8AC6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D8ADA
	bl sub_80D8C06
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D8ADA:
	pop {pc}
.endfunc // sub_80D8AB6

.func
.thumb_func
sub_80D8ADC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D8AF0
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D8AF0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D8B16
	ldr r0, [r5,#0x64]
	strh r0, [r5,#0x20]
	bl sub_80D8BD4
	mov r0, #0xc7
	bl sound_play // () -> void
	ldrb r0, [r5,#5]
	sub r0, #1
	strb r0, [r5,#5]
	bgt locret_80D8B16
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D8B16:
	pop {pc}
.endfunc // sub_80D8ADC

.func
.thumb_func
sub_80D8B18:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D8B38
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	mov r0, #4
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D8B38:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D8B50
	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D8B50:
	pop {r4,pc}
.endfunc // sub_80D8B18

.func
.thumb_func
sub_80D8B52:
	push {r4,lr}
	bl sub_801A180
	ldr r1, dword_80D8C50 // =0x300000 
	tst r0, r1
	beq loc_80D8B66
	mov r0, #0xc
	bl sub_800F90E
	b loc_80D8B84
loc_80D8B66:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80D8B94
	cmp r0, #1
	beq loc_80D8B84
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
loc_80D8B84:
	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D8B94:
	pop {r4,pc}
.endfunc // sub_80D8B52

.func
.thumb_func
sub_80D8B96:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x9b
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D8BBA
	bl sub_801155A
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	ldrb r1, [r0,#0x16]
	mov r2, #1
	bl sub_800F614
locret_80D8BBA:
	pop {pc}
.endfunc // sub_80D8B96

.func
.thumb_func
sub_80D8BBC:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x60]
	pop {pc}
.endfunc // sub_80D8BBC

.func
.thumb_func
sub_80D8BD4:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80D8C54 // =0x1205ff10 
	ldr r6, [r5,#0x2c]
	mov r7, #1
	bl sub_80C536A
	mov r4, #0x43 
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #8
	orr r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	bl sub_80E05F6
	tst r0, r0
	beq locret_80D8C04
	ldrb r1, [r0,#6]
	add r1, #2
	strb r1, [r0,#6]
locret_80D8C04:
	pop {r4,r6,r7,pc}
.endfunc // sub_80D8BD4

.func
.thumb_func
sub_80D8C06:
	push {lr}
	mov r0, #0xa
	b loc_80D8C0C
loc_80D8C0C:
	str r0, [r5,#0x64]
	pop {pc}
.endfunc // sub_80D8C06

.func
.thumb_func
sub_80D8C10:
	push {lr}
	bl object_getPanelParameters
.endfunc // sub_80D8C10

	tst r0, r0
	beq loc_80D8C2A
	ldr r1, dword_80D8C58 // =0xf800000 
	tst r0, r1
	bne loc_80D8C2A
	mov r1, #0x10
	tst r0, r1
	beq loc_80D8C2A
	mov r0, #1
	pop {pc}
loc_80D8C2A:
	mov r0, #0
	pop {pc}
	.byte 0, 0
dword_80D8C30: .word 0x3800000
dword_80D8C34: .word 0xC41
dword_80D8C38: .word 0xE0F0300
dword_80D8C3C: .word 0x40000
off_80D8C40: .word 0x190
	.word 0xF800002
	.word 0x800
	.word 0x8000
dword_80D8C50: .word 0x300000
dword_80D8C54: .word 0x1205FF10
dword_80D8C58: .word 0xF800000
loc_80D8C5C:
	push {lr}
	ldr r1, off_80D8C6C // =off_80D8C70 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D8C6C: .word off_80D8C70
off_80D8C70: .word sub_80D8C7C+1
	.word sub_80D8CF0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D8C7C:
	push {lr}
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #0
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D8C7C

	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E29C // () -> void
	mov r0, #0
	ldr r0, [r5,#0x3c]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0xe]
	mov r0, #0xcd
	strh r0, [r5,#0x28]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	bl sub_8019892
	tst r0, r0
	bne loc_80D8CD4
	bl object_freeMemory
	b locret_80D8CEE
loc_80D8CD4:
	mov r1, #0x29 
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	mov r0, #0
	strb r0, [r5,#0xb]
	bl sub_80D8CF0
locret_80D8CEE:
	pop {pc}
.func
.thumb_func
sub_80D8CF0:
	push {lr}
	bl battle_getFlags
	mov r1, #1
	tst r0, r1
	bne loc_80D8D02
	bl nullsub_10
	b locret_80D8D4C
loc_80D8D02:
	ldrb r0, [r5]
	mov r1, #4
	bic r0, r1
	strb r0, [r5]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_801A00E
	bl battle_isBattleOver
	bne loc_80D8D26
	mov r0, #0
	bl sub_80D8D7E
	tst r0, r0
	blt loc_80D8D3A
loc_80D8D26:
	ldr r1, off_80D8D50 // =off_80D8D54 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	bl sub_801A018
	b locret_80D8D4C
loc_80D8D3A:
	mov r0, #0x6f 
	bl sound_play // () -> void
	bl sub_80D8DEE
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D8D4C:
	pop {pc}
	.byte 0, 0
off_80D8D50: .word off_80D8D54
off_80D8D54: .word locret_80D8D58+1
.endfunc // sub_80D8CF0

locret_80D8D58:
	mov pc, lr
.func
.thumb_func
sub_80D8D5A:
	push {lr}
	push {r1-r5}
	mov r0, #0x9c
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r5}
	beq locret_80D8D7C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strh r3, [r0,#0x24]
	strh r3, [r0,#0x26]
	strb r4, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80D8D7C:
	pop {pc}
.endfunc // sub_80D8D5A

.func
.thumb_func
sub_80D8D7E:
	push {r4,lr}
	sub sp, sp, #0xc
	str r0, [sp,#8]
	mov r0, #0
	str r0, [sp,#4]
	ldr r7, [r5,#0x54]
	bl sub_800E3BE
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800C90A
.endfunc // sub_80D8D7E

	ldrb r0, [r0,#2]
	cmp r0, #5
	bne loc_80D8DA2
	add r4, #1
	lsr r4, r4, #1
loc_80D8DA2:
	add r0, r4, #0
	str r0, [sp]
	ldr r1, [sp,#8]
	tst r1, r1
	bne loc_80D8DC0
	ldrh r1, [r5,#0x24]
	sub r1, r1, r0
	strh r1, [r5,#0x24]
	bgt loc_80D8DC0
	mov r0, #0
	strh r0, [r5,#0x24]
	mov r0, #0
	sub r0, #1
	str r0, [sp,#4]
	b loc_80D8DE2
loc_80D8DC0:
	bl sub_8002DD8
	ldr r0, [sp]
	tst r0, r0
	beq loc_80D8DE2
	bl sprite_forceWhitePallete
	ldr r0, [sp,#8]
	tst r0, r0
	beq loc_80D8DD8
	mov r0, #1
	b loc_80D8DE0
loc_80D8DD8:
	mov r0, #0x85
	bl sound_play // () -> void
	mov r0, #0
loc_80D8DE0:
	str r0, [sp,#4]
loc_80D8DE2:
	ldr r0, [sp]
	tst r0, r0
	beq loc_80D8DE8
loc_80D8DE8:
	ldr r0, [sp,#4]
	add sp, sp, #0xc
	pop {r4,pc}
.func
.thumb_func
sub_80D8DEE:
	push {lr}
	mov r2, r10
	ldr r2, [r2,#0x18]
	ldrb r1, [r5,#0x16]
	add r1, #4
	mov r0, #0
	strb r0, [r2,r1]
	mov r1, #1
	strb r1, [r2,#0xb]
	mov r0, #8
	bl battle_setFlags
	pop {pc}
	.word 0
	.byte 0, 0, 0, 0
.endfunc // sub_80D8DEE

loc_80D8E10:
	push {lr}
	ldr r1, off_80D8E24 // =off_80D8E28 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80D8E24: .word off_80D8E28
off_80D8E28: .word sub_80D8E34+1
	.word sub_80D8EB0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D8E34:
	push {lr}
	mov r1, #0x10
	mov r2, #0x4c 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D8E34

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0x46 
	ldrb r1, [r5,#4]
	cmp r1, #0
	beq loc_80D8E72
	sub r0, #0x47 
loc_80D8E72:
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r2, [r5,#4]
	lsl r2, r2, #2
	ldr r1, off_80D8EA0 // =dword_80D8EA4 
	ldr r1, [r1,r2]
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D8EB0
	pop {pc}
	.word 0, 0
	.byte 0, 0
off_80D8EA0: .word dword_80D8EA4
dword_80D8EA4: .word 0x3C0000, 0x460000, 0x3C0000
.func
.thumb_func
sub_80D8EB0:
	push {r7,lr}
	bl loc_80D8EC6
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D8EC0
	pop {r7,pc}
loc_80D8EC0:
	mov r0, #8
	str r0, [r5,#8]
	pop {r7,pc}
.endfunc // sub_80D8EB0

loc_80D8EC6:
	push {lr}
	ldr r1, off_80D8ED4 // =off_80D8ED8 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80D8ED4: .word off_80D8ED8
off_80D8ED8: .word sub_80D8EE4+1
	.word sub_80D8F20+1
	.word nullsub_11+1
.func
.thumb_func
sub_80D8EE4:
	push {r4,lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80D8F1E
	mov r0, #1
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	add r1, r0, #0
	ldrb r0, [r5,#0x12]
	mov r4, #5
	mov r3, #0x60 
	add r3, r3, r5
loc_80D8F02:
	bl sub_80D8F66
	add r3, #4
	add r0, r0, r1
	beq loc_80D8F14
	cmp r0, #6
	bgt loc_80D8F14
	sub r4, #1
	bne loc_80D8F02
loc_80D8F14:
	mov r0, #0
	sub r0, #1
	str r0, [r3]
	mov r0, #4
	strb r0, [r5,#0xa]
locret_80D8F1E:
	pop {r4,pc}
.endfunc // sub_80D8EE4

.func
.thumb_func
sub_80D8F20:
	push {r4,lr}
	ldrb r0, [r5,#4]
	cmp r0, #2
	bne loc_80D8F30
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne loc_80D8F38
	b loc_80D8F54
loc_80D8F30:
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	cmp r0, #0x45 
	beq loc_80D8F54
loc_80D8F38:
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #2
	sub r2, r0, #3
	mov r3, #0x60 
	add r3, r3, r5
loc_80D8F44:
	ldr r1, [r3]
	cmp r1, #0
	beq loc_80D8F50
	cmp r1, r2
	beq loc_80D8F54
	strh r0, [r1,#0x20]
loc_80D8F50:
	add r3, #4
	b loc_80D8F44
loc_80D8F54:
	ldrh r0, [r5,#0x20]
	cmp r0, #5
	bgt locret_80D8F62
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #8
	strb r0, [r5,#0xa]
locret_80D8F62:
	pop {r4,pc}
.endfunc // sub_80D8F20

.func
.thumb_func
nullsub_11:
	mov pc, lr
.endfunc // nullsub_11

.func
.thumb_func
sub_80D8F66:
	push {r0,r1,r3,r4,r6,r7,lr}
	ldrb r1, [r5,#0x13]
	mov r4, #1
	ldrb r2, [r5,#0xe]
	push {r7}
	ldr r6, [r5,#0x2c]
	add r7, r3, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80D69E2
	ldrb r1, [r0]
	ldrb r2, [r5]
	mov r3, #0x10
	and r2, r3
	mvn r3, r3
	and r1, r3
	orr r1, r2
	strb r1, [r0]
	pop {r7}
	cmp r0, #0
	beq locret_80D8F96
	ldrh r1, [r5,#0x20]
	strh r1, [r0,#0x20]
locret_80D8F96:
	pop {r0,r1,r3,r4,r6,r7,pc}
.endfunc // sub_80D8F66

.func
.thumb_func
sub_80D8F98:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x9d
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D8FB6
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80D8FB6:
	pop {pc}
.endfunc // sub_80D8F98

.func
.thumb_func
sub_80D8FB8:
	ldrb r1, [r0,#4]
	cmp r1, #2
	bne locret_80D8FC2
	mov r1, #1
	strb r1, [r0,#5]
locret_80D8FC2:
	mov pc, lr
.endfunc // sub_80D8FB8

loc_80D8FC4:
	push {lr}
	ldr r1, off_80D8FD4 // =off_80D8FD8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D8FD4: .word off_80D8FD8
off_80D8FD8: .word sub_80D8FE4+1
	.word sub_80D9024+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D8FE4:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [r5,#0x40]
	ldr r0, [r5,#4]
	strh r0, [r5,#0x22]
	bl sub_8019892
	tst r0, r0
	bne loc_80D900A
	bl object_freeMemory
	pop {pc}
loc_80D900A:
	mov r1, #0x3d 
	mov r2, #5
	mov r3, #0
	bl sub_8019FB4
	mov r0, #0x10
	bl sub_801A258
	bl sub_801A018
.endfunc // sub_80D8FE4

	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80D9024:
	push {lr}
	bl sub_801A00E
aOm8o: .asciz "om8o"
	.byte 0x42
	.word 0x7B28D008, 0xD1054200, 0x73282001, 0x72682004, 0x81682000
	.word 0xF954F731, 0x42082101, 0x4908D007, 0x58097A68, 0x470846FE
	.word 0xFFDEF740, 0xF741BD00, 0x7828F809, 0x43882102, 0x20087028
	.word 0xBD0060A8
	.word off_80D9074
off_80D9074: .word sub_80D907C+1
	.word loc_80D90AE+1
.endfunc // sub_80D9024

.func
.thumb_func
sub_80D907C:
	push {lr}
	ldr r1, [r5,#0x40]
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80D90AC
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80D90AC:
	pop {pc}
.endfunc // sub_80D907C

loc_80D90AE:
	push {lr}
	ldr r1, off_80D90BC // =off_80D90C0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80D90BC: .word off_80D90C0
off_80D90C0: .word sub_80D90C8+1
	.word sub_80D9120+1
.func
.thumb_func
sub_80D90C8:
	push {r4,r6,r7,lr}
	ldr r4, dword_80D9118 // =0x405ff09 
	ldrh r0, [r5,#0x22]
	lsr r0, r0, #1
	bcc loc_80D90D4
	ldr r4, dword_80D911C // =0x405ff0b 
loc_80D90D4:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80D9150 // =0x1000 
	push {r4}
	bl sub_80C536A
	pop {r3}
	mov r2, #0xff
	and r3, r2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x3d 
	ldrb r4, [r5,#0x16]
	mov r7, #0xa
	lsl r7, r7, #0x10
	bl sub_801BD3C
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	beq loc_80D910E
	mov r0, #8
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {r4,r6,r7,pc}
loc_80D910E:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
dword_80D9118: .word 0x405FF09
dword_80D911C: .word 0x405FF0B
.endfunc // sub_80D90C8

.func
.thumb_func
sub_80D9120:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80D912E
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D912E:
	pop {pc}
.endfunc // sub_80D9120

.func
.thumb_func
sub_80D9130:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x9e
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D914C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80D914C:
	pop {pc}
	.byte 0, 0
dword_80D9150: .word 0x1000
.endfunc // sub_80D9130

loc_80D9154:
	push {lr}
	ldr r1, off_80D9168 // =off_80D916C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80D9168: .word off_80D916C
off_80D916C: .word sub_80D9178+1
	.word sub_80D91C8+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D9178:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x50 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D9178

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0x66 
	mov r1, #0
	strb r1, [r5,r0]
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80D91C8:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D9200
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, off_80D9340 // =LCDControl 
	ldrb r2, [r5,#0x16]
	cmp r2, #0
	beq loc_80D91E4
	ldr r1, off_80D9344 // =start_ 
loc_80D91E4:
	and r0, r1
	beq loc_80D91EE
	mov r0, #0x66 
	mov r1, #1
	strb r1, [r5,r0]
loc_80D91EE:
	bl battle_isTimeStop
	bne locret_80D9204
	ldr r1, off_80D9208 // =off_80D920C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80D9204
loc_80D9200:
	mov r0, #8
	str r0, [r5,#8]
locret_80D9204:
	pop {pc}
	.balign 4, 0x00
off_80D9208: .word off_80D920C
off_80D920C: .word sub_80D9210+1
.endfunc // sub_80D91C8

.func
.thumb_func
sub_80D9210:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80D9222
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #8
	strh r0, [r5,#0x20]
	b locret_80D924C
loc_80D9222:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D924C
	bl sub_80D9298
	tst r0, r0
	bne loc_80D9234
	b loc_80D9248
loc_80D9234:
	mov r2, #0x64 
	mov r3, #0x65 
	ldrb r0, [r5,r2]
	ldrb r1, [r5,r3]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
loc_80D9248:
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80D924C:
	pop {pc}
.endfunc // sub_80D9210

.func
.thumb_func
sub_80D924E:
	push {lr}
	push {r3}
	push {r0-r2,r5}
	mov r0, #0x9f
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	pop {r4}
	beq locret_80D9282
	str r4, [r0,#0x60]
	str r0, [r4]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	mov r4, #0x64 
	strb r1, [r0,r4]
	mov r4, #0x65 
	strb r2, [r0,r4]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D9282:
	pop {pc}
.endfunc // sub_80D924E

.func
.thumb_func
sub_80D9284:
	push {r5,lr}
	cmp r0, #0
	beq locret_80D9296
	add r5, r0, #0
	mov r1, #0
	ldr r0, [r5,#0x60]
	str r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
locret_80D9296:
	pop {r5,pc}
.endfunc // sub_80D9284

.func
.thumb_func
sub_80D9298:
	push {r5,lr}
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80D92BE
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80D9348 // =0x1800000 
	ldrb r2, [r5,#0x16]
	cmp r2, #0
	beq loc_80D92BA
	ldr r1, dword_80D934C // =0x2800000 
loc_80D92BA:
	tst r0, r1
	bne loc_80D931E
loc_80D92BE:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x16]
	mov r2, #1
	eor r1, r2
	mov r2, #5
	mov r3, #1
	mul r1, r2
	add r1, r1, r3
	add r1, r1, r0
	ldrb r2, [r5,#0x12]
	add r0, r0, r2
	cmp r0, r1
	beq loc_80D931E
	strb r0, [r5,#0x12]
	ldr r0, off_80D9324 // =off_80D9328 
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r0, [r0,r1]
	mov r2, #0
	ldrsb r0, [r0,r2]
	ldrb r1, [r5,#0x13]
	add r0, r0, r1
	cmp r0, #0
	beq loc_80D931E
	cmp r0, #4
	beq loc_80D931E
	strb r0, [r5,#0x13]
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80D9312
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80D9348 // =0x1800000 
	ldrb r2, [r5,#0x16]
	cmp r2, #0
	beq loc_80D930E
	ldr r1, dword_80D934C // =0x2800000 
loc_80D930E:
	tst r0, r1
	bne loc_80D931E
loc_80D9312:
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #0
	pop {r5,pc}
loc_80D931E:
	mov r0, #1
	pop {r5,pc}
	.balign 4, 0x00
off_80D9324: .word off_80D9328
off_80D9328: .word dword_80D9334
	.word dword_80D9338
	.word dword_80D933C
dword_80D9334: .word 0xFF
dword_80D9338: .word 0x0
dword_80D933C: .word 0x1
off_80D9340: .word LCDControl
off_80D9344: .word start_
dword_80D9348: .word 0x1800000
dword_80D934C: .word 0x2800000
.endfunc // sub_80D9298

loc_80D9350:
	push {lr}
	ldr r1, off_80D936C // =off_80D9370 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl battle_isPaused
	str r0, [r5,#0x68]
	bne locret_80D9368
	bl sub_801BCA6
locret_80D9368:
	pop {pc}
	.balign 4, 0x00
off_80D936C: .word off_80D9370
off_80D9370: .word sub_80D937C+1
	.word sub_80D9434+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D937C:
	push {lr}
	bl sub_800E29C // () -> void
	ldr r0, off_80D940C // =dword_80D9410 
	ldrb r1, [r5,#4]
	lsl r1, r1, #1
	ldrh r0, [r0,r1]
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x51 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldr r0, off_80D9404 // =dword_80D9408 
	ldrb r1, [r5,#4]
	ldrb r0, [r0,r1]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D937C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80D93CE
	mov r1, #0
	ldr r0, [r5,#0x60]
	str r1, [r0]
	bl object_freeMemory
	b locret_80D9400
loc_80D93CE:
	mov r1, #0x16
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #3
	bl sub_801A140
	mov r0, #0x64 
	ldrb r0, [r5,r0]
	lsl r0, r0, #2
	ldr r1, off_80D9418 // =dword_80D941C 
	ldr r0, [r1,r0]
	bl sub_801A258
	bl sub_801A074 // () -> void
	bl sub_801A018
	ldrb r0, [r5,#5]
	lsl r0, r0, #0x18
	lsr r0, r0, #0x18
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
locret_80D9400:
	pop {pc}
	.balign 4, 0x00
off_80D9404: .word dword_80D9408
dword_80D9408: .word 0x20001
off_80D940C: .word dword_80D9410
dword_80D9410: .word 0x160010, 0x14
off_80D9418: .word dword_80D941C
dword_80D941C: .word 0x10, 0x10, 0x11, 0x12, 0x11, 0x12
.func
.thumb_func
sub_80D9434:
	push {lr}
	bl battle_isPaused
	bne locret_80D9482
	bl sub_801A00E
	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D947A
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80D9464
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#9]
	mov r1, #0xc
	cmp r0, r1
	beq loc_80D9464
	mov r0, #8
	strb r0, [r5,#9]
loc_80D9464:
	bl battle_isTimeStop
	bne loc_80D9474
	ldr r1, off_80D9484 // =off_80D9488 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
loc_80D9474:
	bl sub_801A018
	b locret_80D9482
loc_80D947A:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80D9482:
	pop {pc}
off_80D9484: .word off_80D9488
off_80D9488: .word sub_80D9498+1
	.word sub_80D94B8+1
	.word sub_80D94C2+1
	.word sub_80D94E6+1
.endfunc // sub_80D9434

.func
.thumb_func
sub_80D9498:
	push {lr}
	bl sub_801A074 // () -> void
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D94B6
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D94B6:
	pop {pc}
.endfunc // sub_80D9498

.func
.thumb_func
sub_80D94B8:
	push {lr}
	mov r0, #1
	bl sub_801A07C
	pop {pc}
.endfunc // sub_80D94B8

.func
.thumb_func
sub_80D94C2:
	push {lr}
	bl battle_isPaused
	ldr r1, [r5,#0x68]
	cmp r0, r1
	bne locret_80D94E4
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80D9548 // =0xf880080 
	and r0, r1
	bne locret_80D94E4
	mov r0, #4
	strb r0, [r5,#9]
locret_80D94E4:
	pop {pc}
.endfunc // sub_80D94C2

.func
.thumb_func
sub_80D94E6:
	push {lr}
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80D94E6

.func
.thumb_func
sub_80D94F2:
	push {lr}
	push {r3}
	push {r0-r2,r5}
	mov r0, #0xa0
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	pop {r4}
	beq locret_80D9530
	str r4, [r0,#0x60]
	str r0, [r4]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r1, [r0,#6]
	mov r2, #0x64 
	strb r1, [r0,r2]
	ldrb r2, [r0]
	mov r1, #0x14
	orr r2, r1
	strb r2, [r0]
	push {r0}
	bl battle_isPaused
	add r1, r0, #0
	pop {r0}
	str r1, [r0,#0x68]
locret_80D9530:
	pop {pc}
.endfunc // sub_80D94F2

.func
.thumb_func
sub_80D9532:
	push {r5,lr}
	cmp r0, #0
	beq locret_80D9544
	add r5, r0, #0
	mov r1, #0
	ldr r0, [r5,#0x60]
	str r1, [r0]
	mov r0, #0xc
	strb r0, [r5,#9]
locret_80D9544:
	pop {r5,pc}
	.balign 4, 0x00
dword_80D9548: .word 0xF880080
.endfunc // sub_80D9532

loc_80D954C:
	push {lr}
	ldr r1, off_80D955C // =off_80D9560 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D955C: .word off_80D9560
off_80D9560: .word sub_80D956C+1
	.word sub_80D95B0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D956C:
	push {r4,lr}
	bl sub_80D9682
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r4, r0, #0
	tst r0, r0
	bne loc_80D9586
	bl object_freeMemory
	b locret_80D95AE
loc_80D9586:
	mov r1, #0x39 
	mov r2, #2
	mov r3, #3
	bl sub_8019FB4
	ldrb r1, [r5,#4]
	strb r1, [r4,#1]
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x6a 
	strb r0, [r5,r2]
	mov r2, #0x6b 
	strb r1, [r5,r2]
	mov r0, #4
	str r0, [r5,#8]
locret_80D95AE:
	pop {r4,pc}
.endfunc // sub_80D956C

.func
.thumb_func
sub_80D95B0:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80D95B0

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D9624
	bl sub_80D9690
	tst r0, r0
	bne loc_80D9624
	ldr r1, dword_80D9634 // =0xc000000 
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r1
	beq loc_80D95D8
	bl sub_801A074 // () -> void
loc_80D95D8:
	bl sub_80D9682
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	bl sub_801156A
	add r0, #1
	bne loc_80D9600
	mov r0, #0
	ldr r1, [r5,#0x4c]
	ldr r1, [r1,#0x4c]
	strh r0, [r1,#0x24]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	b loc_80D961E
loc_80D9600:
	ldrh r0, [r5,#0x24]
	mov r2, #0x68 
	ldrh r1, [r5,r2]
	strh r0, [r5,r2]
	sub r0, r1, r0
	ldr r1, [r5,#0x4c]
	ldr r1, [r1,#0x4c]
	ldrh r2, [r1,#0x24]
	sub r2, r2, r0
	cmp r2, #0
	bge loc_80D9618
	mov r2, #0
loc_80D9618:
	strh r2, [r1,#0x24]
	bl sub_80D9638
loc_80D961E:
	bl sub_801A018
	b locret_80D9630
loc_80D9624:
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #8
	str r0, [r5,#8]
locret_80D9630:
	pop {pc}
	.balign 4, 0x00
dword_80D9634: .word 0xC000000
.func
.thumb_func
sub_80D9638:
	push {lr}
	ldrb r0, [r5,#0x12]
	mov r1, #0x6a 
	ldrb r2, [r5,r1]
	cmp r0, r2
	beq locret_80D964C
	strb r0, [r5,r1]
	mov r0, #1
	bl sub_801A07C
locret_80D964C:
	pop {pc}
.endfunc // sub_80D9638

.func
.thumb_func
sub_80D964E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xa2
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D967A
	str r1, [r0,#0x60]
	str r2, [r0,#0x64]
	strh r3, [r0,#0x24]
	strh r3, [r0,#0x26]
	mov r2, #0x68 
	strh r3, [r0,r2]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80D967A:
	pop {pc}
.endfunc // sub_80D964E

	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
.func
.thumb_func
sub_80D9682:
	push {lr}
	ldr r3, [r5,#0x4c]
	ldrb r0, [r3,#0x12]
	strb r0, [r5,#0x12]
	ldrb r0, [r3,#0x13]
	strb r0, [r5,#0x13]
	pop {pc}
.endfunc // sub_80D9682

.func
.thumb_func
sub_80D9690:
	push {lr}
	mov r3, #0
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	ldr r1, [r5,#0x64]
	and r0, r1
	beq loc_80D96A0
	mov r3, #1
loc_80D96A0:
	add r0, r3, #0
	pop {pc}
.endfunc // sub_80D9690

loc_80D96A4:
	push {lr}
	ldr r1, off_80D96B8 // =off_80D96BC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80D96B8: .word off_80D96BC
off_80D96BC: .word sub_80D96C8+1
	.word sub_80D9746+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D96C8:
	push {lr}
	mov r1, #0x10
	mov r2, #0x4d 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D96C8

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r5,#6]
	strh r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	ldr r0, dword_80D9838 // =0x3c0000 
	ldr r1, dword_80D983C // =0x190000 
	add r1, r1, r0
	str r1, [r5,#0x3c]
	ldrb r1, [r5,#4]
	strh r1, [r5,#0x20]
	svc 6
	str r0, [r5,#0x48]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80D9838 // =0x3c0000 
	mul r1, r0
	ldr r2, [r5,#0x34]
	sub r2, r2, r1
	ldr r3, dword_80D9840 // =0x140000 
	mul r3, r0
	sub r2, r2, r3
	str r2, [r5,#0x34]
	add r0, r1, #0
	ldrh r1, [r5,#0x20]
	svc 6
	str r0, [r5,#0x40]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x15
	bl sub_80E05F6
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D9788
	pop {pc}
.func
.thumb_func
sub_80D9746:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80D9762
	bl battle_isTimeStop
	bne locret_80D9760
	ldr r1, off_80D977C // =off_80D9780 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80D9760:
	pop {pc}
loc_80D9762:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
off_80D977C: .word off_80D9780
off_80D9780: .word sub_80D9788+1
	.word sub_80D97EC+1
.endfunc // sub_80D9746

.func
.thumb_func
sub_80D9788:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D97EA
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	bne loc_80D97CE
	mov r0, #8
	str r0, [r5,#8]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80D97D6
loc_80D97CE:
	mov r0, #2
	mov r1, #0x18
	bl sub_80302A8
loc_80D97D6:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r4, dword_80D9844 // =0xb050001 
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80D9848 // =0x1180003 
	bl sub_80C536A
locret_80D97EA:
	pop {r4,r6,r7,pc}
.endfunc // sub_80D9788

.func
.thumb_func
sub_80D97EC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	mov r1, #2
	tst r0, r1
	bne loc_80D9806
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80D9806:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D981A
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80D981A:
	pop {r4,r6,r7,pc}
.endfunc // sub_80D97EC

.func
.thumb_func
sub_80D981C:
	push {lr}
	push {r5}
	mov r0, #0xa1
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80D9836
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r1, #0x40 
	strb r1, [r0,#0xe]
	str r6, [r0,#0x2c]
locret_80D9836:
	pop {pc}
dword_80D9838: .word 0x3C0000
dword_80D983C: .word 0x190000
dword_80D9840: .word 0x140000
dword_80D9844: .word 0xB050001
dword_80D9848: .word 0x1180003
.endfunc // sub_80D981C

loc_80D984C:
	push {lr}
	ldr r1, off_80D9860 // =off_80D9864 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80D9860: .word off_80D9864
off_80D9864: .word sub_80D9870+1
	.word sub_80D98E8+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D9870:
	push {r7,lr}
	mov r1, #0x10
	mov r2, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	mov r1, #2
	mul r0, r1
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D9870

	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E2C0
	ldr r1, dword_80D98E4 // =0xa0000 
	mul r0, r1
	str r0, [r5,#0x40]
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	bne loc_80D98BE
	bl object_freeMemory
	pop {r7,pc}
loc_80D98BE:
	mov r1, #0xe
	mov r2, #0xf
	mov r3, #3
	bl sub_8019FB4
	mov r0, #2
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D98E8
	mov r0, #0x13
	add r0, #0xff
	bl sound_play // () -> void
	pop {r7,pc}
dword_80D98E4: .word 0xA0000
.func
.thumb_func
sub_80D98E8:
	push {lr}
	bl sub_801A00E
	.hword 0xF740
	.word 0x6D69FBF1, 0x49476F08, 0xD10B4208, 0x7A684908, 0x46FE5809
	.word 0xF7334708, 0x4200F9AE, 0xF740D002, 0xBD00FB83, 0xFBAEF740
	.word 0xF844F000, 0xBD00
	.word off_80D9924
off_80D9924: .word sub_80D9930+1
	.word sub_80D995C+1
	.word sub_80D99A4+1
.endfunc // sub_80D98E8

.func
.thumb_func
sub_80D9930:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80D9948
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80D995A
	mov r0, #2
	strb r0, [r5,#0x10]
	strb r0, [r5,#4]
loc_80D9948:
	ldr r0, [r5,#0x54]
	ldrb r0, [r0,#0xf]
	mov r1, #0x3c 
	tst r0, r1
	beq locret_80D995A
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D995A:
	pop {pc}
.endfunc // sub_80D9930

.func
.thumb_func
sub_80D995C:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	bl object_getPanelParameters
.endfunc // sub_80D995C

	mov r1, #0x10
	tst r0, r1
	beq loc_80D9980
	bl sub_800E2AC
	bl sub_801A04C
	b locret_80D99A2
loc_80D9980:
	bl sub_801A074 // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80D99A2:
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80D99A4:
	push {r4,lr}
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #1
	push {r1-r4}
	mov r0, #0xf
	bl sub_801BDDE
	bl sub_80E47A4
	pop {r1-r4}
	mov r0, #0xf
	bl sub_801BDDE
	bl sub_80E47A4
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #2
	bl sub_80E05F6
	mov r0, #0xd9
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,pc}
.endfunc // sub_80D99A4

.func
.thumb_func
sub_80D99EC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xa3
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80D9A12
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	mov r1, #2
	strb r1, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrb r3, [r5,#0x16]
	strb r3, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80D9A12:
	pop {pc}
	.word 0xC800000
	.word 0
	.byte 0, 0, 0, 0
dword_80D9A20: .word 0x100A3C, 0x120F3C00, 0x143C0300, 0x3C063012, 0x1004
	.word 0x30083C, 0x200C3C03, 0x103C0600, 0x3C090011, 0xC00110C
	.word 0x12143C, 0xF
.endfunc // sub_80D99EC

loc_80D9A50:
	push {lr}
	ldr r1, off_80D9A64 // =off_80D9A68 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80D9A64: .word off_80D9A68
off_80D9A68: .word sub_80D9A74+1
	.word sub_80D9ABA+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D9A74:
	push {lr}
	ldrb r0, [r5,#4]
	mov r1, #5
	mul r0, r1
	ldr r1, off_80D9D2C // =dword_80D9A20 
	add r0, r0, r1
	str r0, [r5,#0x60]
	ldr r0, dword_80D9D30 // =0x1001052 
	ldr r1, dword_80D9D34 // =0xa050300 
	bl sub_8011504
.endfunc // sub_80D9A74

	tst r0, r0
	bne loc_80D9A94
	bl object_freeMemory
	pop {pc}
loc_80D9A94:
	bl sub_801A146
	bl sub_801A074 // () -> void
	bl sub_801A018
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#4]
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80D9ABA
	pop {pc}
.func
.thumb_func
sub_80D9ABA:
	push {r4,lr}
	bl sub_801A00E
	.word 0xFB08F740, 0x6F016D68, 0x42114A9B, 0x7A68D11C, 0xD1042808
	.word 0xF7372000, 0x3001FDA8, 0xF730D014, 0x4200FB56, 0xF730D10A
	.word 0xD104FAD7, 0x7A68490B, 0x46FE5809, 0xF7404708, 0xBD10FA8F
	.word 0x19402034, 0x2414C80E, 0xFD77F006, 0x21027828, 0x70284388
	.word 0xFAB0F740, 0x60A82008, 0xBD10
	.word off_80D9B20
off_80D9B20: .word sub_80D9B2C+1
	.word sub_80D9C1C+1
	.word sub_80D9C54+1
.endfunc // sub_80D9ABA

.func
.thumb_func
sub_80D9B2C:
	push {r4,r6,r7,lr}
	mov r0, r9
	push {r0}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D9B60
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x28 
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80D9D3C // =0xffffd000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D9B60:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80D9D3C // =0xffffd000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80D9BFE
	bl sub_800E24C
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	strb r1, [r7,#0xb]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80D9BE6
	bl object_isCurrentPanelSolid
	tst r0, r0
	beq loc_80D9BDA
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, off_80D9D40 // =start_ 
	ldrb r2, [r5,#0x16]
	cmp r2, #0
	beq loc_80D9BBE
	ldr r1, off_80D9D44 // =LCDControl 
loc_80D9BBE:
	tst r0, r1
	bne loc_80D9BDA
	mov r0, #1
	bl sub_801A07C
	bl sub_800E29C // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r0}
	mov r9, r0
	pop {r4,r6,r7,pc}
loc_80D9BDA:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #1
	bl sub_80E05F6
loc_80D9BE6:
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #8
	str r0, [r5,#8]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80D9BFE:
	pop {r0}
	mov r9, r0
	pop {r4,r6,r7,pc}
	.byte 0x66 
	.byte 0xE6
	.hword 0x2
	.word 0xFFFFD800, 0x20666, 0x2E666, 0x2E666, 0x2E666
.endfunc // sub_80D9B2C

.func
.thumb_func
sub_80D9C1C:
	push {r4,r6,r7,lr}
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r1, #0xc
	mov r2, #0xd
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x60]
	ldrb r1, [r0]
	add r1, #1
	strh r1, [r5,#0x20]
	ldrb r1, [r0,#1]
	strh r1, [r5,#0x24]
	strh r1, [r5,#0x26]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
.endfunc // sub_80D9C1C

	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80D9C54:
	push {r4,lr}
	ldrh r0, [r5,#0x20]
	cmp r0, #2
	bne loc_80D9C74
	ldr r4, off_80D9D48 // =0x601 
	bl sub_80E11E0
	mov r0, #0xbe
	add r0, #0xff
	bl sound_play // () -> void
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#2]
	ldr r1, [r5,#0x2c]
	bl sub_80D9CE4
loc_80D9C74:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80D9CA2
	ldr r0, [r5,#0x60]
	ldrb r0, [r0,#3]
	cmp r0, #0
	beq loc_80D9C8A
	mov r1, #0
	bl sub_80D9CE4
loc_80D9C8A:
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #8
	str r0, [r5,#8]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
locret_80D9CA2:
	pop {r4,pc}
.endfunc // sub_80D9C54

.func
.thumb_func
sub_80D9CA4:
	push {lr}
	push {r5}
	mov r0, #0xa4
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80D9CC0
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	mov r1, #0
	strb r1, [r0,#0xe]
	str r5, [r0,#0x4c]
locret_80D9CC0:
	pop {pc}
.endfunc // sub_80D9CA4

	push {lr}
	push {r0-r3}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	lsl r0, r0, #0x10
	ldrb r1, [r5,#0x13]
	lsl r1, r1, #0x18
	orr r0, r1
	orr r4, r0
	pop {r0-r3}
	bl sub_80D9CA4
	pop {pc}
.func
.thumb_func
sub_80D9CE4:
	push {r4,r6,r7,lr}
	lsl r7, r0, #8
	add r6, r1, #0
	mov r1, #1
	cmp r0, #0x10
	blt loc_80D9CF6
	cmp r0, #0x15
	bgt loc_80D9CF6
	mov r1, #0
loc_80D9CF6:
	orr r7, r1
	ldrb r0, [r5,#4]
	cmp r0, #3
	blt loc_80D9D02
	mov r6, #0x14
	lsl r6, r6, #0x10
loc_80D9D02:
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#5]
	eor r0, r1
	lsl r0, r0, #2
	ldr r4, off_80D9D20 // =dword_80D9D24 
	ldr r4, [r4,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.byte 0, 0, 0, 0
off_80D9D20: .word dword_80D9D24
dword_80D9D24: .word 0xB05FF82, 0xB05FF81
off_80D9D2C: .word dword_80D9A20
dword_80D9D30: .word 0x1001052
dword_80D9D34: .word 0xA050300
	.word 0xF800000
dword_80D9D3C: .word 0xFFFFD000
off_80D9D40: .word start_
off_80D9D44: .word LCDControl
off_80D9D48: .word 0x601
.endfunc // sub_80D9CE4

loc_80D9D4C:
	push {lr}
	ldr r1, off_80D9D5C // =off_80D9D60 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80D9D5C: .word off_80D9D60
off_80D9D60: .word sub_80D9D6C+1
	.word sub_80D9E24+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80D9D6C:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #2
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80D9D6C

	bl sprite_update
	bl sub_8002E3C
	ldrb r0, [r5,#6]
	strb r0, [r5,#0x14]
	ldrb r1, [r5,#7]
	strb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	push {r0,r1}
	add r7, r5, #0
	add r7, #0x34 
	push {r7}
	ldmia r7!, {r2,r3}
	sub r2, r0, r2
	sub r0, r1, r3
	add r1, r2, #0
	push {r5}
	bl calcAngle_800117C
	pop {r5}
	strb r0, [r5,#0xc]
	ldr r1, dword_80D9E18 // =0x2c000 
	push {r1}
	bl sub_80011A0
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	pop {r4}
	pop {r0}
	pop {r1,r2}
	mov r3, #0xa
	lsl r3, r3, #0x10
	ldr r6, dword_80D9E1C // =0xffffd800 
	bl sub_800120E
	str r0, [r5,#0x48]
	strh r1, [r5,#0x20]
	mov r0, #0x28 
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	bl sub_8019892
	tst r0, r0
	bne loc_80D9DF2
	bl object_freeMemory
	pop {pc}
loc_80D9DF2:
	mov r1, #0x4e 
	mov r2, #0x14
	mov r3, #0
	bl sub_8019FB4
	bl sub_80D9FC2
	mov r0, #0x20 
	bl sub_801A258
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80D9E24
	pop {pc}
dword_80D9E18: .word 0x2C000
dword_80D9E1C: .word 0xFFFFD800
	.word 0x1770
.func
.thumb_func
sub_80D9E24:
	push {r4,lr}
	bl sub_801A00E
	.hword 0xF730
	.word 0x4200F9B0, 0x2000D11F, 0xFB99F737, 0xDB114200, 0x6F016D68
	.word 0x42114A7E, 0xF730D10C, 0xD106F927, 0x7A68490D, 0x46FE5809
	.word 0xF7414708, 0xF740FEA9, 0xE010F8DD, 0x19402034, 0x244AC80E
	.word 0xFBC5F006, 0xF7262070, 0xF740FBAD, 0x7828F8FF, 0x43882102
	.word 0x20087028, 0xBD1060A8
	.word off_80D9E88
off_80D9E88: .word sub_80D9E94+1
	.word sub_80D9F2C+1
	.word sub_80D9F84+1
.endfunc // sub_80D9E24

.func
.thumb_func
sub_80D9E94:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80D9EC2
	add r7, r5, #0
	add r7, #0x40 
	ldmia r7!, {r3,r4,r6}
	ldr r0, dword_80D9F28 // =0xffffd800 
	add r6, r6, r0
	str r6, [r5,#0x48]
	add r7, r5, #0
	add r7, #0x34 
	ldmia r7!, {r0-r2}
	add r0, r0, r3
	add r1, r1, r4
	add r2, r2, r6
	cmp r2, #0
	ble loc_80D9EC2
	add r7, r5, #0
	add r7, #0x34 
	stmia r7!, {r0-r2}
	pop {r4,r6,r7,pc}
loc_80D9EC2:
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	ldr r7, [r5,#0x54]
	strb r0, [r7,#0xa]
	strb r1, [r7,#0xb]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	mov r2, #0xa
	lsl r2, r2, #0x10
	add r7, r5, #0
	add r7, #0x34 
	stmia r7!, {r0-r2}
	bl object_isCurrentPanelSolid
.endfunc // sub_80D9E94

	tst r0, r0
	beq loc_80D9F06
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5]
	mov r1, #0x10
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x16
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r4,r6,r7,pc}
loc_80D9F06:
	bl sub_800E29C // () -> void
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0
	mov r4, #0
	bl sub_80E1D7A
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	strb r0, [r5,#8]
	pop {r4,r6,r7,pc}
dword_80D9F28: .word 0xFFFFD800
.func
.thumb_func
sub_80D9F2C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80D9F3C
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80D9F3C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80D9F82
	mov r0, #0x10
	bl sub_801A07C
	mov r1, #4
	mov r2, #5
	mov r3, #0
	bl sub_801A082
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x4a 
	mov r3, #0xf
	ldrb r4, [r5,#0x16]
	mov r7, #0
	bl sub_801BD3C
	mov r0, #1
	mov r1, #0xf
	bl sub_80302A8
	mov r0, #0x70 
	bl sound_play // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80D9F82:
	pop {pc}
.endfunc // sub_80D9F2C

.func
.thumb_func
sub_80D9F84:
	push {lr}
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80D9F84

.func
.thumb_func
sub_80D9F90:
	push {lr}
	push {r5}
	mov r0, #0xa5
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80D9FA6
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80D9FA6:
	pop {pc}
.endfunc // sub_80D9F90

	push {r4,lr}
	push {r1-r3}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	pop {r1-r3}
	ldrh r4, [r5,#0x12]
	add r4, r4, r0
	lsl r4, r4, #0x10
	bl sub_80D9F90
	pop {r4,pc}
.func
.thumb_func
sub_80D9FC2:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	mov r4, #0
	add r6, sp, #0
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_8013682 // (int idx) -> void*
	ldrb r1, [r0,#0x18]
	tst r1, r1
	bne loc_80D9FE0
	mov r1, #0
	strb r1, [r6,r4]
	add r4, #1
loc_80D9FE0:
	ldrb r1, [r0,#0x19]
	tst r1, r1
	bne loc_80D9FEC
	mov r1, #1
	strb r1, [r6,r4]
	add r4, #1
loc_80D9FEC:
	mov r2, #0x12
	ldrb r1, [r0,r2]
	cmp r1, #3
	beq loc_80D9FFA
	mov r1, #2
	strb r1, [r6,r4]
	add r4, #1
loc_80D9FFA:
	mov r2, #0x14
	ldrb r1, [r0,r2]
	tst r1, r1
	bne loc_80DA008
	mov r1, #3
	strb r1, [r6,r4]
	add r4, #1
loc_80DA008:
	cmp r4, #0
	bne loc_80DA012
	ldr r0, dword_80DA040 // =0x3020100 
	str r0, [sp]
	mov r4, #4
loc_80DA012:
	bl sub_8001532
	add r1, r4, #0
	svc 6
	add r0, sp, #0
	ldrb r1, [r0,r1]
	lsl r1, r1, #1
	ldr r2, off_80DA030 // =dword_80DA034 
	add r2, r2, r1
	ldrb r0, [r2]
	ldrb r1, [r2,#1]
	bl sub_801A4D0
	add sp, sp, #8
	pop {r4,r6,r7,pc}
off_80DA030: .word dword_80DA034
dword_80DA034: .word 0x1190118, 0x41400F5
	.word 0x3F800000
dword_80DA040: .word 0x3020100
	.word 0, 0
	.byte 0, 0, 0, 0
.endfunc // sub_80D9FC2

loc_80DA050:
	push {lr}
	ldr r1, off_80DA060 // =off_80DA064 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80DA060: .word off_80DA064
off_80DA064: .word sub_80DA07C+1
	.word sub_80DA108+1
	.word sub_80DA070+1
.func
.thumb_func
sub_80DA070:
	push {lr}
	bl sub_80DA424
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80DA070

.func
.thumb_func
sub_80DA07C:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #4
	mov r2, #5
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	mov r0, #0xa
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DA07C

	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x12]
	strh r0, [r5,#0x14]
	mov r0, #0xe4
	strh r0, [r5,#0x28]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	ldr r0, off_80DA45C // =0x2d0 
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#0x13]
	ldr r1, off_80DA100 // =byte_80DA104 
	ldrb r0, [r1,r0]
	strb r0, [r5,#6]
	mov r0, #0
	str r0, [r5,#0x78]
	bl sub_8019892
	tst r0, r0
	bne loc_80DA0E6
	bl object_freeMemory
	pop {pc}
loc_80DA0E6:
	mov r1, #0x13
	mov r2, #0x14
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A018
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80DA108
	pop {pc}
	.byte 0, 0
off_80DA100: .word byte_80DA104
byte_80DA104: .byte 0x0, 0x2, 0x1, 0x0
.func
.thumb_func
sub_80DA108:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD12
	bl sub_800F672
	ldr r0, off_80DA130 // =off_80DA134 
	bl sub_801B394
	bl sub_801BBAC
	bl sub_801A018
.endfunc // sub_80DA108

	pop {pc}
	.byte 0, 0
off_80DA130: .word off_80DA134
off_80DA134: .word sub_80DA15C+1
	.word sub_80165B8+1
	.word sub_80DA2EC+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_80DA37A+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word loc_80DA172+1
	.word loc_80DA266+1
.func
.thumb_func
sub_80DA15C:
	push {lr}
	mov r0, #0xa
	strh r0, [r5,#0x22]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80DA15C

loc_80DA172:
	push {lr}
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80DA18A
	bl sub_80DA448
	ldr r1, off_80DA18C // =loc_80DA190 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80DA18A:
	pop {pc}
off_80DA18C: .word loc_80DA190
loc_80DA190:
	adr r1, loc_80DA428
	lsr r5, r1, #0x20
	adr r1, loc_80DA454
	lsr r5, r1, #0x20
	adr r1, loc_80DA4B8
	lsr r5, r1, #0x20
	adr r1, off_80DA584
	lsr r5, r1, #0x20
	adr r2, locret_80DA2C8
	lsr r5, r1, #0x20
	mov r0, #0x28 
	strh r0, [r5,#0x22] // (word_80DA5A6 - 0x80da584)
	mov r0, #4
	strh r0, [r5,#0xa] // (word_80DA58E - 0x80da584)
	mov pc, lr
	push {lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80DA1C4
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x22]
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80DA1C4:
	pop {pc}
	push {lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80DA1E0
	ldrb r0, [r5,#6]
	ldr r1, off_80DA1F0 // =loc_80DA1F4 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	mov r0, #0xe
	strh r0, [r5,#0x22]
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80DA1E0:
	pop {pc}
	.word 0, 0, 0
	.byte 0, 0
off_80DA1F0: .word loc_80DA1F4
loc_80DA1F4:
	// <mkdata>
	.hword 0x1 // mov r1, r0
	// <mkdata>
	.hword 0x4 // mov r4, r0
	push {r4,r6,lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80DA232
	ldrb r0, [r5,#6]
	ldr r1, off_80DA240 // =dword_80DA244 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r4, [r5,#6]
	ldr r2, dword_80DA460 // = 
	ldrsb r2, [r2,r4]
	add r1, r1, r2
	mov r2, #1
	lsl r2, r2, #8
	orr r4, r2
	ldrb r2, [r5,#0xe]
	mov r3, #0x60 
	add r3, r3, r5
	mov r6, #0
	bl sub_80D924E
	mov r0, #0x10
	strh r0, [r5,#0xa]
locret_80DA232:
	pop {r4,r6,pc}
	.word 0, 0
	.byte 0, 0, 0, 0
off_80DA240: .word dword_80DA244
dword_80DA244: .word 0x50002
.func
.thumb_func
sub_80DA248:
	push {lr}
	ldr r0, [r5,#0x60]
	cmp r0, #0
	beq locret_80DA264
	mov r1, #0x66 
	ldrb r1, [r0,r1]
	cmp r1, #0
	beq locret_80DA264
	bl sub_80D9284
	mov r0, #9
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DA264:
	pop {pc}
.endfunc // sub_80DA248

loc_80DA266:
	push {lr}
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80DA282
	bl sub_80DA448
	cmp r0, #0
	bne locret_80DA282
	ldr r1, off_80DA284 // =off_80DA288 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80DA282:
	pop {pc}
off_80DA284: .word off_80DA288
off_80DA288: .word sub_80DA290+1
	.word sub_80DA2D8+1
.func
.thumb_func
sub_80DA290:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#6]
	ldr r1, off_80DA2D0 // =byte_80DA2D4 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r0, dword_80DA464 // = 
	ldrb r1, [r5,#6]
	ldrsb r6, [r0,r1]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r7, #0x64 
	add r7, r7, r5
loc_80DA2AE:
	bl sub_80DA3C0
	add r7, #4
	cmp r0, #0
	bne loc_80DA2AE
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	mov r0, #0x9b
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80DA2C8:
	pop {r4,r6,r7,pc}
	.word 0
	.byte 0, 0
off_80DA2D0: .word byte_80DA2D4
byte_80DA2D4: .byte 0x8, 0x7, 0x9, 0x0
.endfunc // sub_80DA290

.func
.thumb_func
sub_80DA2D8:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	beq locret_80DA2EA
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DA2EA:
	pop {pc}
.endfunc // sub_80DA2D8

.func
.thumb_func
sub_80DA2EC:
	push {lr}
	bl sub_801A180
	ldr r1, dword_80DA468 // =0x8000 
	tst r0, r1
	beq loc_80DA326
	ldr r1, dword_80DA46C // =0x300000 
	tst r0, r1
	beq loc_80DA306
	mov r0, #0xd
	bl sub_800F90E
	b loc_80DA358
loc_80DA306:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80DA378
	cmp r0, #1
	beq loc_80DA358
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80DA358
loc_80DA326:
	ldr r0, [r5,#0x78]
	tst r0, r0
	bne loc_80DA336
	ldr r0, [r5,#0x20]
	tst r0, r0
	bne loc_80DA340
	mov r0, #1
	str r0, [r5,#0x78]
loc_80DA336:
	bl sub_80DA3EC
	tst r0, r0
	bne loc_80DA358
	b locret_80DA378
loc_80DA340:
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0
	bl sub_80E05F6
loc_80DA358:
	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80DA378:
	pop {pc}
.endfunc // sub_80DA2EC

.func
.thumb_func
sub_80DA37A:
	push {lr}
	ldrb r0, [r5,#0xd]
	cmp r0, #0
	bne loc_80DA38A
	mov r0, #1
	str r0, [r5,#0x7c]
	bl sub_80DA424
loc_80DA38A:
	bl sub_8017CC0
	pop {pc}
.endfunc // sub_80DA37A

.func
.thumb_func
sub_80DA390:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xa6
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DA3BE
	str r6, [r0,#0x2c]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	mov r1, #0xff
	and r1, r3
	mov r2, #1
	bl sub_800F614
locret_80DA3BE:
	pop {pc}
.endfunc // sub_80DA390

.func
.thumb_func
sub_80DA3C0:
	push {r4,r6,r7,lr}
	add r0, r0, r4
	beq loc_80DA3D2
	cmp r0, #6
	bgt loc_80DA3D2
	add r1, r1, r6
	beq loc_80DA3D2
	cmp r1, #3
	ble loc_80DA3D6
loc_80DA3D2:
	mov r0, #0
	b locret_80DA3E6
loc_80DA3D6:
	push {r0,r1}
	ldrb r2, [r5,#0xe]
	add r3, r7, #0
	ldrb r4, [r5,#6]
	ldr r6, [r5,#0x2c]
	bl sub_80D94F2
	pop {r0,r1}
locret_80DA3E6:
	pop {r4,r6,r7,pc}
	.byte 0xFF
	.byte  0
	.byte  1
	.byte  0
.endfunc // sub_80DA3C0

.func
.thumb_func
sub_80DA3EC:
	push {r4,lr}
	mov r4, #0
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80DA3FE
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #0x14
	strh r0, [r5,#0x20]
loc_80DA3FE:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	mov r1, #2
	tst r0, r1
	bne loc_80DA416
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80DA416:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80DA420
	mov r4, #1
loc_80DA420:
	add r0, r4, #0
	pop {r4,pc}
.endfunc // sub_80DA3EC

.func
.thumb_func
sub_80DA424:
	push {r4,r6,lr}
	ldr r0, [r5,#0x60]
loc_80DA428:
	cmp r0, #0
	beq loc_80DA430
	bl sub_80D9284
loc_80DA430:
	mov r4, #0x64 
	add r4, r4, r5
	mov r6, #5
loc_80DA436:
	ldr r0, [r4]
	cmp r0, #0
	beq loc_80DA440
	bl sub_80D9532
loc_80DA440:
	add r4, #4
	sub r6, #1
	bne loc_80DA436
	pop {r4,r6,pc}
.endfunc // sub_80DA424

.func
.thumb_func
sub_80DA448:
	ldr r0, [r5,#0x7c]
	cmp r0, #0
	beq locret_80DA45A
	mov r1, #0
	str r1, [r5,#0x7c]
	mov r1, #8
loc_80DA454:
	strb r1, [r5,#9]
	mov r1, #0
	strh r1, [r5,#0xa]
locret_80DA45A:
	mov pc, lr
off_80DA45C: .word 0x2D0
dword_80DA460: .word 0x80DA3E8
dword_80DA464: .word 0x80DA3E8
dword_80DA468: .word 0x8000
dword_80DA46C: .word 0x300000
.endfunc // sub_80DA448

loc_80DA470:
	push {lr}
	ldr r1, off_80DA484 // =off_80DA488 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80DA484: .word off_80DA488
off_80DA488: .word sub_80DA494+1
	.word sub_80DA53A+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DA494:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80DA4B2
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x50 
	mul r0, r1
	ldrh r1, [r5,#0x36]
	add r0, r0, r1
	strh r0, [r5,#0x36]
loc_80DA4B2:
	mov r1, #0x10
	mov r2, #0x12
	mov r0, #0x80
loc_80DA4B8:
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	ldr r1, off_80DA52C // =off_80DA530 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DA494

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrh r0, [r5,#0x3e]
	sub r0, #1
	strh r0, [r5,#0x3e]
	ldrh r0, [r5,#0x3a]
	sub r0, #1
	strh r0, [r5,#0x3a]
	bl sub_8019892
	tst r0, r0
	bne loc_80DA502
	bl object_freeMemory
	b locret_80DA52A
loc_80DA502:
	mov r1, #0xb
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	ldrb r0, [r5,#4]
	ldr r1, off_80DA534 // =byte_80DA538 
	ldrb r0, [r1,r0]
	bl sub_801A07C
	mov r0, #0xff
	bl sub_801A140
	mov r0, #0x10
	bl sub_801A258
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80DA52A:
	pop {pc}
off_80DA52C: .word off_80DA530
off_80DA530: .word 0x100
off_80DA534: .word byte_80DA538
byte_80DA538: .byte 0x8, 0x2E
.func
.thumb_func
sub_80DA53A:
	push {lr}
	bl sub_801A00E
	.word 0xFDC8F73F, 0xFE23F72F, 0xD1154200, 0x6F006D68, 0xD0014200
	.word 0xFD8EF73F, 0x7A406CE8, 0x4288210B, 0xF72FD10A, 0xD10BFD99
	.word 0x7A684906, 0x46FE5809, 0xF73F4708, 0xE003FD51, 0xFD7CF73F
	.word 0x60A82008, 0xBD00
off_80DA584: .word off_80DA588
off_80DA588: .word loc_80DA58C+1
.endfunc // sub_80DA53A

loc_80DA58C:
	push {lr}
word_80DA58E: .hword 0x7AA8
	.word 0xD1044200, 0x72A92104, 0x84287968, 0x6D69E015, 0x42006F08
	.byte 0x1, 0xD0
word_80DA5A6: .hword 0xF73F
	.byte 0x65 
	.byte 0xFD
	.byte 0xA8
	.byte 0x7C 
	.byte 0xE9
	.byte 0x7C 
	.byte 0x2A 
	.byte 0x79 
	.byte  6
	.byte 0x4B 
	.byte 0x9A
	.byte 0x5C 
	.byte 0xEB
	.byte 0x8A
	.byte 0x32 
	.byte 0xF7
	.byte 0x8D
	.byte 0xFB
	.byte 0x28 
	.byte 0x8C
	.byte  1
	.byte 0x38 
	.byte 0x28 
	.byte 0x84
	.byte  3
	.byte 0xDC
	.byte 0x3F 
	.byte 0xF7
	.byte 0x57 
	.byte 0xFD
	.byte  8
	.byte 0x20
	.byte 0xA8
	.byte 0x60 
	.byte  0
	.byte 0xBD
	.byte 0xD0
	.byte 0xA5
	.byte 0xD
	.byte  8
	.byte  8
	.byte 0x2E 
.func
.thumb_func
sub_80DA5D2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xa7
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DA5F8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DA5F8:
	pop {pc}
	.byte  0
	.byte  0
.endfunc // sub_80DA5D2

loc_80DA5FC:
	push {lr}
	ldr r1, off_80DA610 // =off_80DA614 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80DA610: .word off_80DA614
off_80DA614: .word sub_80DA620+1
	.word loc_80DA662+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DA620:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0x5a 
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0x14
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x55 
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DA620

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80DA662:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DA67E
	bl battle_isTimeStop
	bne locret_80DA682
	ldr r1, off_80DA684 // =off_80DA688 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80DA682
loc_80DA67E:
	mov r0, #8
	strb r0, [r5,#8]
locret_80DA682:
	pop {pc}
off_80DA684: .word off_80DA688
off_80DA688: .word sub_80DA68C+1
.func
.thumb_func
sub_80DA68C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DA69C
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80DA736
loc_80DA69C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80DA6C2
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x48]
	ldr r1, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bl sub_800E2AC
	b locret_80DA700
loc_80DA6C2:
	ldrb r0, [r5,#5]
	ldrb r1, [r5,#6]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80DA704 // =byte_80DA708 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80DA6FC
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #4
	lsl r3, r3, #0x10
	mov r4, #5
	bl sub_80E05F6
	bl sub_80DA7EC
	mov r0, #1
	mov r1, #0xf
	bl sub_80302A8
loc_80DA6FC:
	mov r0, #8
	strb r0, [r5,#8]
locret_80DA700:
	pop {r4,pc}
	.balign 4, 0x00
off_80DA704: .word byte_80DA708
byte_80DA708: .byte 0x10, 0x0, 0x80, 0x15, 0x10, 0x0, 0x80, 0x2A
.endfunc // sub_80DA68C

.func
.thumb_func
sub_80DA710:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xa8
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DA734
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DA734:
	pop {pc}
.endfunc // sub_80DA710

.func
.thumb_func
sub_80DA736:
	push {r4,lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80DA7D8 // =dword_80DA7DC 
	ldr r4, [r1,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#5]
	cmp r0, r1
	beq loc_80DA79E
	mov r2, #1
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#5]
	cmp r0, r1
	blt loc_80DA754
	neg r2, r2
loc_80DA754:
	mul r2, r4
	str r2, [r5,#0x40]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#5]
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80DA764
	neg r0, r0
loc_80DA764:
	mov r1, #0x28 
	lsl r1, r1, #0x10
	mul r0, r1
	add r1, r4, #0
	svc 6
	strh r0, [r5,#0x20]
	mov r2, #1
	ldrb r0, [r5,#0x13]
	ldrb r1, [r5,#6]
	cmp r0, r1
	blt loc_80DA77C
	neg r2, r2
loc_80DA77C:
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80DA784
	neg r0, r0
loc_80DA784:
	mov r1, #0x18
	lsl r1, r1, #0x10
	mul r0, r1
	ldrh r1, [r5,#0x20]
	svc 6
	mul r0, r2
	str r0, [r5,#0x44]
	ldr r0, [r5,#0x3c]
	ldrh r1, [r5,#0x20]
	svc 6
	neg r0, r0
	str r0, [r5,#0x48]
	b locret_80DA7D4
loc_80DA79E:
	mov r0, #0
	str r0, [r5,#0x40]
	mov r2, #1
	ldrb r0, [r5,#0x13]
	ldrb r1, [r5,#6]
	cmp r0, r1
	blt loc_80DA7AE
	neg r2, r2
loc_80DA7AE:
	mul r2, r4
	str r2, [r5,#0x44]
	ldrb r0, [r5,#0x13]
	ldrb r1, [r5,#6]
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80DA7BE
	neg r0, r0
loc_80DA7BE:
	mov r1, #0x18
	lsl r1, r1, #0x10
	mul r0, r1
	add r1, r4, #0
	svc 6
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x3c]
	ldrh r1, [r5,#0x20]
	svc 6
	neg r0, r0
	str r0, [r5,#0x48]
locret_80DA7D4:
	pop {r4,pc}
	.balign 4, 0x00
off_80DA7D8: .word dword_80DA7DC
dword_80DA7DC: .word 0x140000, 0x140000, 0x140000, 0x140000
.endfunc // sub_80DA736

.func
.thumb_func
sub_80DA7EC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DA804 // =0xa05ff01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DA808 // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80DA804: .word 0xA05FF01
dword_80DA808: .word 0x3
.endfunc // sub_80DA7EC

loc_80DA80C:
	push {lr}
	ldr r1, off_80DA824 // =off_80DA828 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl battle_isTimeStop
	bne locret_80DA822
	bl sub_801BBAC
locret_80DA822:
	pop {pc}
off_80DA824: .word off_80DA828
off_80DA828: .word sub_80DA834+1
	.word sub_80DA886+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DA834:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldr r0, dword_80DAA18 // =0x100100c 
	ldr r1, dword_80DAA1C // =0xe0f0300 
	bl sub_8011504
.endfunc // sub_80DA834

	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #1
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	ldr r0, dword_80DAA20 // =0xff80000 
	bl sub_8002FA6
	mov r0, #4
	str r0, [r5,#8]
	bl battle_getFlags
	mov r2, #0
	mov r1, #1
	tst r0, r1
	beq loc_80DA87E
	ldrb r0, [r5]
	mov r1, #4
	bic r0, r1
	strb r0, [r5]
	mov r2, #4
loc_80DA87E:
	strb r2, [r5,#9]
	bl sub_80DA886
	pop {pc}
.func
.thumb_func
sub_80DA886:
	push {lr}
	bl sub_801A00E
	.word 0xFC22F73F, 0xF7362000, 0x4200FE6A, 0x6D68DB0F, 0x49616F00
	.word 0xD10A4208, 0xFBF8F72F, 0x490BD104, 0x58097A68, 0x470846FE
	.word 0xFBB0F73F, 0x2034BD00, 0xC80E1940, 0xF0052400, 0x2085FE98
	.word 0xFE80F725, 0xFBD2F73F, 0x60A82008, 0xBD00
	.word off_80DA8DC
off_80DA8DC: .word sub_80DA8EC+1
	.word sub_80DA908+1
	.word sub_80DA956+1
	.word sub_80DA974+1
.endfunc // sub_80DA886

.func
.thumb_func
sub_80DA8EC:
	push {lr}
	bl sub_800139A
	lsr r0, r0, #2
	bcc locret_80DA906
	ldrb r0, [r5]
	mov r1, #4
	bic r0, r1
	strb r0, [r5]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DA906:
	pop {pc}
.endfunc // sub_80DA8EC

.func
.thumb_func
sub_80DA908:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	beq locret_80DA954
	bl sub_800A152
	cmp r0, #0
	beq locret_80DA954
	cmp r0, #2
	beq loc_80DA948
	mov r0, #1
	strb r0, [r5,#0x10]
	bl sub_8002F90 // () -> void
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80DA954
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DA940
	mov r0, #0xf0
	add r0, r0, r0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DA940:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DA954
loc_80DA948:
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DA954:
	pop {pc}
.endfunc // sub_80DA908

.func
.thumb_func
sub_80DA956:
	push {r7,lr}
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xa
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {r7,pc}
.endfunc // sub_80DA956

.func
.thumb_func
sub_80DA974:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DA994
	mov r0, r10
	ldr r0, [r0,#0x18]
	ldrh r1, [r5,#4]
	strh r1, [r0,#0x36]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0x5a 
	strh r0, [r5,#0x20]
	bl sub_801A074 // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DA994:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DA9A0
	mov r0, #8
	str r0, [r5,#8]
locret_80DA9A0:
	pop {pc}
.endfunc // sub_80DA974

	push {lr}
	bl sub_8000DE0
	lsl r3, r3, #2
	ldr r0, off_80DA9B4 // =byte_80DA9B8 
	ldr r0, [r0,r3]
	bl sub_8002FA6
	pop {pc}
off_80DA9B4: .word byte_80DA9B8
byte_80DA9B8: .byte 0x0, 0x0, 0xF8, 0x7, 0x0, 0x0, 0xF8, 0xB, 0x0, 0x0, 0xF8, 0xD, 0x0
	.byte 0x0, 0xF8, 0xE, 0x0, 0x0, 0x78, 0xF, 0x0, 0x0, 0xB8, 0xF, 0x0, 0x0
	.byte 0xD8, 0xF, 0x0, 0x0, 0xE8, 0xF, 0x0, 0x0, 0xF0, 0xF
.func
.thumb_func
sub_80DA9DC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xa9
	mov r3, #0
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DA9FC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80DA9FC:
	pop {pc}
.endfunc // sub_80DA9DC

.func
.thumb_func
sub_80DA9FE:
	push {r4,lr}
	lsl r0, r0, #4
	ldr r4, off_80DAA14 // =byte_80211A0 
	add r4, r4, r0
	bl sub_8001532
	mov r1, #0xe
	and r0, r1
	ldrh r0, [r4,r0]
	pop {r4,pc}
	.byte  0
	.byte  0
off_80DAA14: .word byte_80211A0
dword_80DAA18: .word 0x100100C
dword_80DAA1C: .word 0xE0F0300
dword_80DAA20: .word 0xFF80000
	.word 0x3F800000
.endfunc // sub_80DA9FE

loc_80DAA28:
	push {lr}
	ldr r1, off_80DAA38 // =off_80DAA3C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80DAA38: .word off_80DAA3C
off_80DAA3C: .word sub_80DAA48+1
	.word sub_80DAA86+1
	.word sub_80DAB8A+1
.func
.thumb_func
sub_80DAA48:
	push {r7,lr}
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [r5,#0x40]
	bl sub_8019892
	tst r0, r0
	bne loc_80DAA62
	bl object_freeMemory
	pop {r7,pc}
loc_80DAA62:
	mov r1, #0x3d 
	mov r2, #5
	mov r3, #0
	bl sub_8019FB4
	mov r0, #0
	ldr r1, [r5,#0x54]
	strb r0, [r1,#2]
	bl sub_801A018
.endfunc // sub_80DAA48

	mov r0, #0
	str r0, [r5,#0x70]
	str r0, [r5,#0x6c]
	mov r0, #2
	str r0, [r5,#0x60]
	mov r0, #4
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80DAA86:
	push {r7,lr}
	bl sub_801A00E
	.word 0x7A684908, 0x46FE5809, 0xF73F4708, 0xBD80FABF, 0xFAEAF73F
	.word 0x21027828, 0x70284388, 0x60A82008, 0xBD80
	.word off_80DAAB4
off_80DAAB4: .word sub_80DAABC+1
	.word sub_80DAB22+1
.endfunc // sub_80DAA86

.func
.thumb_func
sub_80DAABC:
	push {r7,lr}
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	tst r0, r0
	bne loc_80DAAF4
	ldr r1, [r5,#0x40]
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	strb r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80DAAEA
	ldr r0, [r5,#0x60]
	sub r0, #1
	str r0, [r5,#0x60]
	cmp r0, #1
	ble loc_80DAAF4
	b locret_80DAB20
loc_80DAAEA:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	b locret_80DAB20
loc_80DAAF4:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	mov r4, #0xff
	ldr r6, [r5,#0x2c]
	bl sub_80C67D8
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	mov r0, #1
	mov r1, #0x14
	bl sub_80302A8
	bl sub_801A074 // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DAB20:
	pop {r7,pc}
.endfunc // sub_80DAABC

.func
.thumb_func
sub_80DAB22:
	push {lr}
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #8
	blt locret_80DAB88
	mov r0, #0
	strh r0, [r5,#0x20]
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	cmp r0, #0x10
	bge loc_80DAB84
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DAB84
	bl sub_80DABC4
	tst r0, r0
	beq loc_80DAB84
	ldrb r2, [r5,#0xe]
	mov r3, #0
	mov r4, #0xff
	ldr r6, [r5,#0x2c]
	push {r0,r1}
	bl sub_80C67D8
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	pop {r0,r1}
	lsl r1, r1, #4
	orr r0, r1
	ldr r1, [r5,#0x70]
	add r1, #0x6c 
	strb r0, [r5,r1]
	ldr r1, [r5,#0x70]
	add r1, #1
	cmp r1, #3
	blt loc_80DAB78
	mov r1, #0
loc_80DAB78:
	str r1, [r5,#0x70]
	mov r0, #1
	mov r1, #0x14
	bl sub_80302A8
	b locret_80DAB88
loc_80DAB84:
	mov r0, #8
	str r0, [r5,#8]
locret_80DAB88:
	pop {pc}
.endfunc // sub_80DAB22

.func
.thumb_func
sub_80DAB8A:
	push {lr}
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq loc_80DAB96
	mov r1, #0
	strb r1, [r0]
loc_80DAB96:
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80DAB8A

.func
.thumb_func
sub_80DAB9C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xaa
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DABC2
	bl sub_801155A
	str r7, [r0,#0x64]
	tst r7, r7
	beq loc_80DABBA
	mov r1, #1
	strb r1, [r7]
loc_80DABBA:
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80DABC2:
	pop {pc}
.endfunc // sub_80DAB9C

.func
.thumb_func
sub_80DABC4:
	push {lr}
	bl change_20013F0_800151C // () -> int
	mov r1, #0xf
	and r0, r1
	cmp r0, #6
	bge loc_80DABDE
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80DABE8
	tst r0, r0
	bne locret_80DABE6
loc_80DABDE:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80DAC0C
locret_80DABE6:
	pop {pc}
.endfunc // sub_80DABC4

.func
.thumb_func
sub_80DABE8:
	push {lr}
	push {r0,r1}
	ldr r3, off_80DACD4 // =off_80DABFC 
	bl sub_81096FA
	pop {r0,r1}
	ldr r4, off_80DACD8 // =byte_80DACC0 
	bl sub_8015D80
	pop {pc}
off_80DABFC: .word LCDControl
	.word 0x0
	.word start_
	.word 0x0
.endfunc // sub_80DABE8

.func
.thumb_func
sub_80DAC0C:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x30
	str r0, [sp]
	str r1, [sp,#4]
	ldr r4, off_80DACDC // =byte_80DACC0 
	ldr r3, off_80DACE0 // =dword_80DACB0 
	bl sub_81096FA
	str r2, [sp,#0x28]
	str r3, [sp,#0x2c]
	mov r6, #0
	mov r7, #0
loc_80DAC24:
	mov r0, #0
	ldrsb r0, [r4,r0]
	cmp r0, #0x7f
	beq loc_80DAC8A
	ldr r2, [sp]
	add r0, r0, r2
	str r0, [sp,#8]
	mov r1, #0x1 // (byte_80DACC1 - 0x80dacc0)
	ldrsb r1, [r4,r1]
	ldr r2, [sp,#4]
	add r1, r1, r2
	str r1, [sp,#0xc]
	ldr r0, [sp,#8]
	ldr r1, [sp,#0xc]
	ldr r2, [sp,#0x28]
	ldr r3, [sp,#0x2c]
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_80DAC86
	ldr r0, [sp,#8]
	ldr r1, [sp,#0xc]
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x1c
	strb r0, [r1,r7]
	add r7, #1
	ldr r0, [sp,#8]
	ldr r1, [sp,#0xc]
	lsl r1, r1, #4
	orr r0, r1
	mov r1, #0x6c 
	add r1, r1, r5
	ldrb r2, [r1]
	cmp r0, r2
	beq loc_80DAC86
	ldrb r2, [r1,#1]
	cmp r0, r2
	beq loc_80DAC86
	ldrb r2, [r1,#2]
	cmp r0, r2
	beq loc_80DAC86
	ldr r0, [sp,#8]
	ldr r1, [sp,#0xc]
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x10
	strb r0, [r1,r6]
	add r6, #1
loc_80DAC86:
	add r4, #2
	b loc_80DAC24
loc_80DAC8A:
	add r4, sp, #0x10
	tst r6, r6
	bne loc_80DAC9A
	add r4, sp, #0x1c
	add r6, r7, #0
	bne loc_80DAC9A
	mov r0, #0
	b loc_80DACAC
loc_80DAC9A:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, r4, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80DACAC:
	add sp, sp, #0x30
	pop {r4,r6,r7,pc}
dword_80DACB0: .word 0x0
	.word LCDControl
	.word 0x0
	.word start_
byte_80DACC0: .byte 0x0
byte_80DACC1: .byte 0x0
	.hword 0xFF00
	.word 0x1FF01, 0x1000101, 0xFF01FF, 0x7FFFFF
off_80DACD4: .word off_80DABFC
off_80DACD8: .word byte_80DACC0
off_80DACDC: .word byte_80DACC0
off_80DACE0: .word dword_80DACB0
.endfunc // sub_80DAC0C

loc_80DACE4:
	push {lr}
	ldr r1, off_80DACFC // =off_80DAD00 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#6]
	tst r0, r0
	bne locret_80DACFA
	bl sub_801BCA6
locret_80DACFA:
	pop {pc}
off_80DACFC: .word off_80DAD00
off_80DAD00: .word sub_80DAD0C+1
	.word sub_80DAD84+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DAD0C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0x10
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#6]
	tst r0, r0
	bne loc_80DAD56
	mov r1, #8
	mov r2, #0x14
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x51 
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	ldrb r1, [r5,#5]
	lsl r1, r1, #1
	orr r0, r1
	bl sub_8002F5C
loc_80DAD56:
	bl sub_8019892
	tst r0, r0
	bne loc_80DAD64
	bl object_freeMemory
	b locret_80DAD82
loc_80DAD64:
	mov r1, #0x54 
	mov r2, #5
	mov r3, #0
	bl sub_8019FB4
	mov r0, #1
	bl sub_801A07C
	mov r0, #9
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80DAD82:
	pop {pc}
.endfunc // sub_80DAD0C

.func
.thumb_func
sub_80DAD84:
	push {lr}
	bl sub_801A00E
	.hword 0xF73F
	.byte 0xB9
	.byte 0xF9
	.byte 0x2F 
	.byte 0xF7
	.word 0x4200F9FE, 0x6D6AD114, 0x7DA86F12, 0x490D0080, 0x42105808
	.word 0xF73FD001, 0xF72FF965, 0xD104F975, 0x7A684906, 0x46FE5809
	.word 0xF73F4708, 0xE003F92D, 0xF958F73F, 0x72282008, 0xBD00
	.word off_80DADD0
off_80DADD0: .word sub_80DADE0+1
	.word dword_80DADD8
dword_80DADD8: .word 0x5800000, 0xA800000
.endfunc // sub_80DAD84

.func
.thumb_func
sub_80DADE0:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DADFE
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80DAE70
	ldrb r0, [r5,#6]
	tst r0, r0
	bne loc_80DADFE
	mov r0, #0xc7
	add r0, #0xff
	bl sound_play // () -> void
loc_80DADFE:
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldrb r4, [r5,#0x13]
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80DAE14
	bl sub_801A074 // () -> void
loc_80DAE14:
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80DAE2A
	bl sub_801A074 // () -> void
	b loc_80DAE36
loc_80DAE2A:
	ldrb r0, [r5,#0x13]
	cmp r0, r4
	beq loc_80DAE36
	mov r0, #1
	bl sub_801A07C
loc_80DAE36:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DAE46
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80DAE46:
	pop {r4,pc}
.endfunc // sub_80DADE0

.func
.thumb_func
sub_80DAE48:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xab
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DAE6E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DAE6E:
	pop {pc}
.endfunc // sub_80DAE48

.func
.thumb_func
sub_80DAE70:
	push {r4,lr}
	ldr r1, dword_80DAE90 // =0xa0000 
	add r0, r1, #0
	ldrb r2, [r5,#5]
	tst r2, r2
	bne loc_80DAE7E
	neg r0, r0
loc_80DAE7E:
	str r0, [r5,#0x44]
	mov r0, #0x18
	lsl r0, r0, #0x10
	mov r2, #4
	mul r0, r2
	svc 6
	strh r0, [r5,#0x20]
	pop {r4,pc}
	.byte 0, 0
dword_80DAE90: .word 0xA0000
.endfunc // sub_80DAE70

loc_80DAE94:
	push {lr}
	ldr r1, off_80DAEB4 // =off_80DAEB8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80DAEAC
	bl sub_801BCA6
	b locret_80DAEB0
loc_80DAEAC:
	bl sub_801BBF4
locret_80DAEB0:
	pop {pc}
	.balign 4, 0x00
off_80DAEB4: .word off_80DAEB8
off_80DAEB8: .word sub_80DAEC4+1
	.word loc_80DAF2A+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DAEC4:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_80DB0BC
	mov r1, #0x10
	mov r2, #0x54 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DAEC4

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_80169BE
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80DAF1C
	mov r0, #4
	strb r0, [r5,#8]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80DAF28
loc_80DAF1C:
	mov r0, #4
	strb r0, [r5,#8]
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DAF28:
	pop {pc}
loc_80DAF2A:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DAF5E
	bl sub_80169BE
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#7]
	cmp r1, #0xff
	beq loc_80DAF46
	cmp r0, r1
	bne loc_80DAF5E
loc_80DAF46:
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80DAF52
	bl battle_isTimeStop
	bne locret_80DAF66
loc_80DAF52:
	ldr r1, off_80DAF68 // =off_80DAF6C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80DAF66
loc_80DAF5E:
	bl sub_80DB0D0
	mov r0, #8
	strb r0, [r5,#8]
locret_80DAF66:
	pop {pc}
off_80DAF68: .word off_80DAF6C
off_80DAF6C: .word sub_80DAF74+1
	.word sub_80DAF98+1
.func
.thumb_func
sub_80DAF74:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DAF86
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#6]
	strh r0, [r5,#0x20]
	b locret_80DAF96
loc_80DAF86:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DAF96
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DAF96:
	pop {pc}
.endfunc // sub_80DAF74

.func
.thumb_func
sub_80DAF98:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DAFAA
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80DB04C
	b locret_80DAFFC
loc_80DAFAA:
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80DAFDC
	ldr r3, off_80DB000 // =dword_80DB004 
	ldrb r2, [r5,#4]
	lsl r2, r2, #3
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_80DAFF4
loc_80DAFDC:
	bl sub_800E2AC
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80DAFEA
	bl sub_80DB078
loc_80DAFEA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DAFFC
	b loc_80DAFF8
loc_80DAFF4:
	bl sub_80DB0D0
loc_80DAFF8:
	mov r0, #8
	str r0, [r5,#8]
locret_80DAFFC:
	pop {r4,pc}
	.byte 0, 0
off_80DB000: .word dword_80DB004
dword_80DB004: .word 0x10, 0x0
	.word 0x10, 0x0
.endfunc // sub_80DAF98

.func
.thumb_func
sub_80DB014:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xac
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DB03C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DB03C:
	pop {pc}
.endfunc // sub_80DB014

.func
.thumb_func
sub_80DB03E:
	push {r5,lr}
	add r5, r0, #0
	bl sub_80DB0D0
	mov r0, #8
	strb r0, [r5,#8]
	pop {r5,pc}
.endfunc // sub_80DB03E

.func
.thumb_func
sub_80DB04C:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x60]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #7
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80DB062
	mov r0, #0
loc_80DB062:
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	cmp r0, #0
	bge loc_80DB06C
	neg r0, r0
loc_80DB06C:
	mov r2, #0x28 
	lsl r2, r2, #0x10
	mul r0, r2
	svc 6
	strh r0, [r5,#0x20]
	pop {pc}
.endfunc // sub_80DB04C

.func
.thumb_func
sub_80DB078:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80DB096
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DB0AC // =0x6050a01 
	ldr r6, [r5,#0x2c]
	ldr r7, off_80DB0B0 // =dword_80DB0B4 
	ldr r7, [r7]
	bl sub_80C536A
	b locret_80DB0AA
loc_80DB096:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DB0AC // =0x6050a01 
	ldr r6, [r5,#0x2c]
	ldr r7, off_80DB0B0 // =dword_80DB0B4 
	ldr r7, [r7,#0x4] // (dword_80DB0B8 - 0x80db0b4)
	bl sub_80C53A6
locret_80DB0AA:
	pop {r4,r6,r7,pc}
dword_80DB0AC: .word 0x6050A01
off_80DB0B0: .word dword_80DB0B4
dword_80DB0B4: .word 0x1
dword_80DB0B8: .word 0x3
.endfunc // sub_80DB078

.func
.thumb_func
sub_80DB0BC:
	push {lr}
	ldrb r0, [r5,#5]
	add r0, #1
	ldrh r1, [r5,#0x3e]
	sub r1, r1, r0
	strh r1, [r5,#0x3e]
	ldrh r1, [r5,#0x3a]
	sub r1, r1, r0
	strh r1, [r5,#0x3a]
	pop {pc}
.endfunc // sub_80DB0BC

.func
.thumb_func
sub_80DB0D0:
	push {r4,lr}
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0x10
	lsl r3, r3, #0x10
	mov r4, #0x12
	bl sub_80E05F6
	pop {r4,pc}
	.balign 4, 0x00
.endfunc // sub_80DB0D0

loc_80DB0E4:
	push {lr}
	ldr r1, off_80DB0F8 // =off_80DB0FC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80DB0F8: .word off_80DB0FC
off_80DB0FC: .word sub_80DB108+1
	.word sub_80DB148+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DB108:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldr r0, dword_80DB2F0 // =0x1000c00 
	ldr r1, dword_80DB2F4 // =0x13140300 
	bl sub_8011504
.endfunc // sub_80DB108

	tst r0, r0
	bne loc_80DB11E
loc_80DB11E:
	bl sub_801A018
	ldr r0, dword_80DB2F8 // =0x708 
	strh r0, [r5,#0x20]
	mov r0, #0xcf
	strh r0, [r5,#0x28]
	mov r0, #0x64 
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #0xcf
	strh r0, [r5,#0x28]
	mov r0, #0xff
	str r0, [r5,#0x60]
	mov r0, #0
	str r0, [r5,#0x68]
	str r0, [r5,#0x64]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DB148
	pop {pc}
.func
.thumb_func
sub_80DB148:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_8002DD8
	bl sub_801AD6A
	bl sub_800F672
	ldr r0, off_80DB170 // =off_80DB174 
	bl sub_801B610
	bl sub_801BBAC
	bl sub_801A018
.endfunc // sub_80DB148

	pop {pc}
	.byte 0, 0
off_80DB170: .word off_80DB174
off_80DB174: .word sub_80DB198+1
	.word sub_80165B8+1
	.word sub_80DB252+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word loc_8017E26+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_80DB1E0+1
.func
.thumb_func
sub_80DB198:
	push {r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DB1C8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x10
	ldr r3, dword_80DB2FC // =0xf800000 
	bl object_checkPanelParameters
	tst r0, r0
	bne loc_80DB1BA
	mov r0, #2
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r7,pc}
loc_80DB1BA:
	mov r0, #5
	strh r0, [r5,#0x22]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DB1C8:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80DB1DE
	mov r0, #1
	bl sub_801A07C
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DB1DE:
	pop {r7,pc}
.endfunc // sub_80DB198

.func
.thumb_func
sub_80DB1E0:
	push {r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DB1F4
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r5,#0x22]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DB1F4:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80DB250
	mov r0, #5
	strh r0, [r5,#0x22]
	ldr r0, [r5,#0x4c]
	bl sub_800ED90
	bl getChip_8021DA8 // (int chip_idx) -> ChipData*
	ldrb r1, [r0,#9]
	mov r2, #2
	tst r1, r2
	beq locret_80DB250
	ldrb r0, [r5,#0x16]
	bl sub_8010018
	add r7, r0, #0
	ldrb r0, [r7]
	ldr r1, [r5,#0x60]
	str r0, [r5,#0x60]
	mov r2, #0x3e 
	add r2, r2, r0
	ldrb r2, [r7,r2]
	ldr r3, [r5,#0x64]
	str r2, [r5,#0x64]
	cmp r0, r1
	bne loc_80DB23A
	cmp r2, r3
	bne loc_80DB23A
	ldr r1, [r5,#0x68]
	cmp r1, #0x32 
	blt loc_80DB23E
	b locret_80DB250
loc_80DB23A:
	mov r1, #0
	str r1, [r5,#0x68]
loc_80DB23E:
	add r0, r0, r0
	add r0, #0x1a
	add r7, r7, r0
	ldrh r1, [r7]
	add r1, #1
	strh r1, [r7]
	ldr r1, [r5,#0x68]
	add r1, #1
	str r1, [r5,#0x68]
locret_80DB250:
	pop {r7,pc}
.endfunc // sub_80DB1E0

.func
.thumb_func
sub_80DB252:
	push {r4,lr}
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
.endfunc // sub_80DB252

	bl sub_802EF5C
	bl sub_800F656
	bl sub_801A180
	ldr r1, dword_80DB300 // =0x300000 
	tst r0, r1
	beq loc_80DB27A
	mov r0, #0xe
	bl sub_800F90E
	b loc_80DB2B8
loc_80DB27A:
	bl sub_800F8CE
	cmp r0, #0
	beq locret_80DB2C4
	cmp r0, #1
	beq loc_80DB2B8
	ldrh r0, [r5,#0x24]
	tst r0, r0
	beq loc_80DB2A0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0xc
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80DB2B8
loc_80DB2A0:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #2
	bl sub_80E05F6
	mov r0, #0x90
	bl sound_play // () -> void
loc_80DB2B8:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80DB2C4:
	pop {r4,pc}
.func
.thumb_func
sub_80DB2C6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xad
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DB2EC
	mov r3, #0
	bl sub_801155A
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	ldrb r1, [r5,#0x16]
	mov r2, #0
	bl sub_800F614
locret_80DB2EC:
	pop {pc}
	.byte 0, 0
dword_80DB2F0: .word 0x1000C00
dword_80DB2F4: .word 0x13140300
dword_80DB2F8: .word 0x708
dword_80DB2FC: .word 0xF800000
dword_80DB300: .word 0x300000
.endfunc // sub_80DB2C6

loc_80DB304:
	push {lr}
	ldr r1, off_80DB314 // =off_80DB318 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80DB314: .word off_80DB318
off_80DB318: .word sub_80DB324+1
	.word sub_80DB376+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DB324:
	push {r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, dword_80DB554 // =0xc62 
	ldr r1, dword_80DB558 // =0x15050300 
	bl sub_8011504
.endfunc // sub_80DB324

	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x10
	lsl r1, r1, #0x10
	mul r1, r0
	str r1, [r5,#0x40]
	mov r1, #0x10
	lsl r1, r1, #0x10
	str r1, [r5,#0x48]
	neg r0, r0
	ldr r1, dword_80DB55C // =0x1000000 
	mul r1, r0
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, dword_80DB55C // =0x1000000 
	str r0, [r5,#0x3c]
	mov r0, #0x10
	strh r0, [r5,#0x20]
	mov r0, #0xc4
	bl sound_play // () -> void
	mov r0, #0xa
	bl sub_801A140
	bl sub_801A074 // () -> void
	mov r0, #4
	strb r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80DB376:
	push {lr}
	bl sub_801A00E
	.word 0xFEAAF73E, 0x7A684909, 0x46FE5809, 0xF7404708, 0xF73EFC0F
	.word 0xBD00FE43, 0xFE6EF73E, 0x60A82008, 0x21027828, 0x70284388
	.word 0xBD00
	.word off_80DB3AC
off_80DB3AC: .word sub_80DB3B4+1
	.byte 0x1D
	.byte 0xB4
	.byte 0xD
	.byte  8
.endfunc // sub_80DB376

.func
.thumb_func
sub_80DB3B4:
	push {r7,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80DB404
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80DB418 // =0xf800010 
	tst r0, r1
	beq loc_80DB3FA
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #5
	bl sub_80E05F6
	mov r0, #0x70 
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r3, #0xf
	bl sub_80DB48A
	bl sub_80DB4CE
	mov r0, #1
	bl sub_801A07C
loc_80DB3FA:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r7,pc}
loc_80DB404:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	pop {r7,pc}
	.balign 4, 0x00
dword_80DB418: .word 0xF800010
.endfunc // sub_80DB3B4

	push {lr}
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80DB42A
	bl sub_801A074 // () -> void
loc_80DB42A:
	bl object_isCurrentPanelSolid
	bne loc_80DB43E
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	bl sub_80E05F6
	b loc_80DB46A
loc_80DB43E:
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DB44C
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DB44C:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #2
	bcc loc_80DB462
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80DB462:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DB472
loc_80DB46A:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80DB472:
	pop {pc}
.func
.thumb_func
sub_80DB474:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xae
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DB488
	bl sub_801155A
locret_80DB488:
	pop {pc}
.endfunc // sub_80DB474

.func
.thumb_func
sub_80DB48A:
	push {r4-r7,lr}
	add r5, r2, #0
	add r6, r0, #0
	add r7, r1, #0
	ldr r4, off_80DB560 // =off_8019B78 
	lsl r3, r3, #2
	ldr r4, [r4,r3]
loc_80DB498:
	mov r0, #0
	ldrsb r0, [r4,r0]
	mov r1, #1
	ldrsb r1, [r4,r1]
	cmp r0, #0x7f
	beq locret_80DB4B2
	add r0, r0, r6
	add r1, r1, r7
	add r2, r5, #0
	bl object_crackPanelDup1
	add r4, #2
	b loc_80DB498
locret_80DB4B2:
	pop {r4-r7,pc}
.endfunc // sub_80DB48A

	push {lr}
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	mov r1, #3
	mul r0, r1
	neg r0, r0
	add r0, #5
	mov r1, #2
	mov r2, #0x10
	bl sub_80DB474
	pop {pc}
.func
.thumb_func
sub_80DB4CE:
	push {r4,r6,r7,lr}
	mov r0, #3
	mov r1, #0x2d 
	bl sub_80302A8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80DB564 // =0x405ff0a 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DB568 // =0xfffff000 
	and r6, r7
	add r6, #0x64 
	mov r7, #3
	bl sub_80C53A6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80DB56C // =0x405ff0c 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DB568 // =0xfffff000 
	and r6, r7
	add r6, #0x64 
	mov r7, #3
	bl sub_80C53A6
	mov r6, #0
	ldr r7, off_80DB53C // =byte_80DB540 
loc_80DB50C:
	bl object_getFlipDirection_800E2CA // () -> int
	mov r2, #0
	ldrsb r2, [r7,r2]
	mul r2, r0
	ldrb r0, [r5,#0x12]
	add r0, r0, r2
	mov r2, #1
	ldrsb r2, [r7,r2]
	ldrb r1, [r5,#0x13]
	add r1, r1, r2
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0
	bl sub_80E05F6
	add r7, #2
	add r6, #1
	cmp r6, #9
	blt loc_80DB50C
	pop {r4,r6,r7,pc}
off_80DB53C: .word byte_80DB540
byte_80DB540: .byte 0xFF
byte_80DB541: .byte 0xFF
	.hword 0xFF
	.word 0xFF0001FF, 0x1000000, 0x1FF01, 0x101
dword_80DB554: .word 0xC62
dword_80DB558: .word 0x15050300
dword_80DB55C: .word 0x1000000
off_80DB560: .word off_8019B78
dword_80DB564: .word 0x405FF0A
dword_80DB568: .word 0xFFFFF000
dword_80DB56C: .word 0x405FF0C
.endfunc // sub_80DB4CE

.func
.thumb_func
sub_80DB570:
	push {lr}
	ldr r1, off_80DB580 // =jt_80DB584 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80DB580: .word jt_80DB584
jt_80DB584: .word sub_80DB590+1
	.word sub_80DB5E8+1
	.word sub_8016C8A+1
.endfunc // sub_80DB570

.func
.thumb_func
sub_80DB590:
	push {r7,lr}
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80DB5A2
	bl object_freeMemory
	pop {r7,pc}
loc_80DB5A2:
	mov r3, #1
	ldrb r1, [r5,#5]
	cmp r1, #0
	beq loc_80DB5AC
	mov r3, #3
loc_80DB5AC:
	mov r1, #6
	mov r2, #5
	bl sub_8019FB4
	mov r0, #0xa
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80DB5BE
	mov r0, #1
loc_80DB5BE:
	bl sub_801A140
	bl sub_80DB684
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl sub_801A018
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80DB5DE
	ldr r0, [r5,#0x64]
	mov r1, #1
	str r1, [r0]
loc_80DB5DE:
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DB5E8
	pop {r7,pc}
.endfunc // sub_80DB590

.func
.thumb_func
sub_80DB5E8:
	push {r4,lr}
	ldr r4, [r5,#0x54]
	bl sub_801A00E
	bl sub_801A0D4
	ldrb r0, [r4,#1]
	cmp r0, #0
	bne loc_80DB60A
	ldr r0, [r5,#0x60]
	ldrh r1, [r5,#0x12]
	cmp r0, r1
	beq loc_80DB60A
	mov r0, #1
	bl sub_801A07C
	b loc_80DB614
loc_80DB60A:
	mov r0, #0x1a
	ldrb r1, [r5,#5]
	cmp r1, #0
	beq loc_80DB614
	mov r0, #0x56 
loc_80DB614:
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1,#9]
	cmp r0, r1
	bne loc_80DB64A
	ldr r0, [r4,#0x70]
	tst r0, r0
	beq loc_80DB630
	bl sub_801A074 // () -> void
	ldrh r0, [r5,#0x12]
	str r0, [r5,#0x60]
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne loc_80DB64A
loc_80DB630:
	bl sub_80DB684
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80DB64A
	bl sub_801A018
	pop {r4,pc}
loc_80DB64A:
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80DB656
	ldr r0, [r5,#0x64]
	mov r1, #0
	str r1, [r0]
loc_80DB656:
	bl sub_801A074 // () -> void
	ldr r0, [r5,#0x54]
	bl sub_80198CE
	bl object_freeMemory
	pop {r4,pc}
.endfunc // sub_80DB5E8

.func
.thumb_func
sub_80DB666:
	push {lr}
	push {r2,r5}
	mov r0, #0xaf
	bl object_spawnType3
	add r0, r5, #0
	pop {r3,r5}
	beq locret_80DB682
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x64]
locret_80DB682:
	pop {pc}
.endfunc // sub_80DB666

.func
.thumb_func
sub_80DB684:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#4]
	ldr r2, dword_80DB6A0 // =0x3a0000 
	mul r1, r2
	mul r0, r1
	ldr r3, [r5,#0x4c]
	ldr r1, [r3,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r3,#0x38]
	str r0, [r5,#0x38]
	pop {pc}
dword_80DB6A0: .word 0x3A0000
.endfunc // sub_80DB684

.func
.thumb_func
sub_80DB6A4:
	push {lr}
	ldr r1, off_80DB6C4 // =off_80DB6C8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80DB6BC
	bl sub_801BCA6
	b locret_80DB6C0
loc_80DB6BC:
	bl sub_801BBF4
locret_80DB6C0:
	pop {pc}
	.balign 4, 0x00
off_80DB6C4: .word off_80DB6C8
off_80DB6C8: .word sub_80DB6D4+1
	.word loc_80DB726+1
	.word sub_8016C8A+1
.endfunc // sub_80DB6A4

.func
.thumb_func
sub_80DB6D4:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x12
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	mov r1, #8
	mov r2, #0xa
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x19
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DB6D4

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80DB726:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DB748
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80DB73C
	bl battle_isTimeStop
	bne locret_80DB74C
loc_80DB73C:
	ldr r1, off_80DB750 // =off_80DB754 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80DB74C
loc_80DB748:
	mov r0, #8
	strb r0, [r5,#8]
locret_80DB74C:
	pop {pc}
	.byte 0, 0
off_80DB750: .word off_80DB754
off_80DB754: .word sub_80DB75C+1
	.word sub_80DB7B2+1
.func
.thumb_func
sub_80DB75C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DB774
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80DB828
	bl sub_80DB864
	tst r0, r0
	bne loc_80DB7A8
loc_80DB774:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80DB7A8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r0, #0
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	cmp r2, r1
	beq loc_80DB7A2
	bl sub_800E708
	cmp r0, #0
	beq loc_80DB7A2
	bl sub_80DB864
	tst r0, r0
	bne loc_80DB7A8
loc_80DB7A2:
	bl sub_800E2AC
	b locret_80DB7B0
loc_80DB7A8:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80DB7B0:
	pop {pc}
.endfunc // sub_80DB75C

.func
.thumb_func
sub_80DB7B2:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DB7C8
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0x1a
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80DB7FE
loc_80DB7C8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x19
	beq loc_80DB7DC
	cmp r0, #0
	bgt locret_80DB7FE
	mov r0, #8
	str r0, [r5,#8]
	b locret_80DB7FE
loc_80DB7DC:
	bl sub_80DB890
	bl object_isCurrentPanelSolid
	tst r0, r0
	beq locret_80DB7FE
	mov r0, #2
	mov r1, #0x14
	bl sub_80302A8
	mov r0, #0xc0
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
locret_80DB7FE:
	pop {pc}
.endfunc // sub_80DB7B2

.func
.thumb_func
sub_80DB800:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xb0
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DB826
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DB826:
	pop {pc}
.endfunc // sub_80DB800

.func
.thumb_func
sub_80DB828:
	push {r4,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r4, dword_80DB8C8 // =0x60000 
	mul r0, r4
	str r0, [r5,#0x40]
	mov r0, #6
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80DB83E
	mov r0, #1
loc_80DB83E:
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	bne loc_80DB84C
	mov r0, #0
	str r0, [r5,#0x40]
	strh r0, [r5,#0x20]
	b locret_80DB862
loc_80DB84C:
	mov r1, #1
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r1, [r5,#0x34]
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80DB85C
	neg r0, r0
loc_80DB85C:
	add r1, r4, #0
	svc 6
	strh r0, [r5,#0x20]
locret_80DB862:
	pop {r4,pc}
.endfunc // sub_80DB828

.func
.thumb_func
sub_80DB864:
	push {r4,lr}
	mov r4, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80DB864

	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80DB884 // =dword_80DB888 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80DB87E
	mov r4, #1
loc_80DB87E:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80DB884: .word dword_80DB888
dword_80DB888: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80DB890:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80DB8AC
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DB8C0 // =0x15050a01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DB8C4 // =0x3 
	bl sub_80C536A
	b locret_80DB8BE
loc_80DB8AC:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DB8C0 // =0x15050a01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DB8C4 // =0x3 
	bl sub_80C53A6
locret_80DB8BE:
	pop {r4,r6,r7,pc}
dword_80DB8C0: .word 0x15050A01
dword_80DB8C4: .word 0x3
dword_80DB8C8: .word 0x60000
.endfunc // sub_80DB890

loc_80DB8CC:
	push {lr}
	ldr r1, off_80DB8DC // =off_80DB8E0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80DB8DC: .word off_80DB8E0
off_80DB8E0: .word sub_80DB8EC+1
	.word sub_80DB934+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DB8EC:
	push {r7,lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80DB90C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80DB912
loc_80DB90C:
	bl object_freeMemory
	pop {r7,pc}
loc_80DB912:
	mov r1, #7
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xb
	strb r0, [r7,#1]
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
.endfunc // sub_80DB8EC

	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DB934
	pop {r7,pc}
.func
.thumb_func
sub_80DB934:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80DB934

	bl sub_801A0D4
	ldr r7, [r5,#0x54]
	ldr r0, [r7,#0x70]
	tst r0, r0
	beq loc_80DB952
	ldr r1, dword_80DB990 // =0xc000000 
	tst r0, r1
	beq loc_80DB960
	bl sub_80E8912
	b loc_80DB960
loc_80DB952:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80DB960
	bl sub_801A018
	pop {pc}
loc_80DB960:
	bl sub_801A074 // () -> void
	ldr r0, [r5,#0x54]
	bl sub_80198CE
	bl object_freeMemory
	pop {pc}
.func
.thumb_func
sub_80DB970:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xb1
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DB98C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80DB98C:
	pop {pc}
	.byte 0, 0
dword_80DB990: .word 0xC000000
.endfunc // sub_80DB970

loc_80DB994:
	push {lr}
	ldr r1, off_80DB9A8 // =off_80DB9AC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80DB9A8: .word off_80DB9AC
off_80DB9AC: .word sub_80DB9B8+1
	.word sub_80DBA50+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DB9B8:
	push {r7,lr}
	mov r0, #0x10
	mov r1, #0x47 
	bl sprite_decompress
	bl sub_800E2AC
	mov r1, #0x10
	mov r2, #0x47 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DB9B8

	mov r0, #0
	strb r0, [r5,#4]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r7, #0x60 
	add r7, r7, r5
	bl sub_80DC38A
	str r0, [r5,#0x50]
	tst r0, r0
	bne loc_80DBA10
	bl object_freeMemory
	b locret_80DBA48
loc_80DBA10:
	bl sub_8019892
	tst r0, r0
	bne loc_80DBA1E
	bl object_freeMemory
	b locret_80DBA48
loc_80DBA1E:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80DBB3C // =0x30000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	ldrh r0, [r5,#0x2c]
	ldr r1, dword_80DBA4C // =0xfff 
	and r0, r1
	str r0, [r5,#0x64]
	mov r0, #4
	str r0, [r5,#8]
locret_80DBA48:
	pop {r7,pc}
	.balign 4, 0x00
dword_80DBA4C: .word 0xFFF
.func
.thumb_func
sub_80DBA50:
	push {lr}
	bl sub_801A00E
	.hword 0xF73E
	.word 0x4906FB3D, 0x58097A68, 0x470846FE, 0xFAD8F73E, 0xF73EBD00
	.word 0x2008FB03, 0xBD0060A8
	.word off_80DBA78
off_80DBA78: .word sub_80DBA7C+1
.endfunc // sub_80DBA50

.func
.thumb_func
sub_80DBA7C:
	push {r4,lr}
	sub sp, sp, #0x10
	ldr r4, [r5,#0x54]
	ldr r0, [r4,#0x70]
	tst r0, r0
	beq loc_80DBA8C
	bl sub_801A074 // () -> void
loc_80DBA8C:
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80DBABC
	ldr r0, [r5,#0x50]
	ldrb r0, [r0,#4]
	tst r0, r0
	beq loc_80DBABC
	mov r0, #0x97
	add r0, #0xff
	bl sound_play // () -> void
	ldrh r0, [r4,#0x2e]
	ldr r1, [r5,#0x64]
	add r0, r0, r1
	strh r0, [r4,#0x2e]
	ldrb r0, [r5,#4]
	add r0, #1
	strb r0, [r5,#4]
	cmp r0, #3
	bge loc_80DBABC
	sub r0, #1
	ldr r1, off_80DBB04 // =dword_80DBB08 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
loc_80DBABC:
	ldrb r4, [r5,#0x12]
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80DBADA
	mov r0, #1
	bl sub_801A07C
loc_80DBADA:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80DBA7C

	mov r2, #0x10
	tst r0, r2
	beq loc_80DBAF0
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80DBAF8
loc_80DBAF0:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
loc_80DBAF8:
	add sp, sp, #0x10
	pop {r4,pc}
	.word 0x3F000000, 0x800000
off_80DBB04: .word dword_80DBB08
dword_80DBB08: .word 0x101
.func
.thumb_func
sub_80DBB0C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xb2
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DBB38
	str r1, [r0,#0x34]
	str r2, [r0,#0x38]
	mov r1, #0
	str r1, [r0,#0x3c]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrb r3, [r5,#0x16]
	strb r3, [r0,#0x16]
	ldrb r3, [r5,#0x17]
	strb r3, [r0,#0x17]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DBB38:
	pop {pc}
	.balign 4, 0x00
dword_80DBB3C: .word 0x30000
.endfunc // sub_80DBB0C

loc_80DBB40:
	push {lr}
	ldr r1, off_80DBB54 // =off_80DBB58 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80DBB54: .word off_80DBB58
off_80DBB58: .word sub_80DBB64+1
	.word sub_80DBC0A+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DBB64:
	push {r4,lr}
	sub sp, sp, #0x14
	ldr r0, [r5,#0x60]
	bl sub_800F26C
	cmp r0, #0xff
	beq loc_80DBC02
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	str r4, [sp,#0x10]
	ldr r1, [sp]
	ldr r2, [sp,#4]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [sp,#0x10]
	tst r0, r0
	bne loc_80DBB9A
	bl sub_8002F90 // () -> void
	b loc_80DBB9E
loc_80DBB9A:
	bl sub_8002E3C
loc_80DBB9E:
	ldr r0, [sp,#8]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	ldr r0, [sp,#0xc]
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x60]
	cmp r0, #0xd8
	beq loc_80DBBBC
	cmp r0, #0xd9
	bne loc_80DBBC2
loc_80DBBBC:
	bl sub_8002EAC
	b loc_80DBBC8
loc_80DBBC2:
	ldrb r0, [r5,#0x16]
	bl sub_8002F5C
loc_80DBBC8:
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x12
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	mov r0, #0x10
	strh r0, [r5,#0x3e]
	bl sub_8019892
	tst r0, r0
	beq loc_80DBC02
	mov r1, #6
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xa
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	b loc_80DBC06
loc_80DBC02:
	bl object_freeMemory
loc_80DBC06:
	add sp, sp, #0x14
	pop {r4,pc}
.endfunc // sub_80DBB64

.func
.thumb_func
sub_80DBC0A:
	push {lr}
	bl sub_801A00E
	.word 0xFA60F73E, 0xFABBF72E, 0xD10B4200, 0x6F006D68, 0xD1074200
	.word 0x7A684906, 0x46FE5809, 0xF73E4708, 0xE003F9F3, 0xFA1EF73E
	.word 0x60A82008, 0xBD00
	.word off_80DBC44
off_80DBC44: .word sub_80DBC48+1
.endfunc // sub_80DBC0A

.func
.thumb_func
sub_80DBC48:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DBC58
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80DBCBA
loc_80DBC58:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80DBC86
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	bne loc_80DBC86
	bl object_isCurrentPanelValid
	tst r0, r0
	bne locret_80DBC8E
	bl sub_801A074 // () -> void
	b locret_80DBC8E
loc_80DBC86:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80DBC8E:
	pop {pc}
.endfunc // sub_80DBC48

.func
.thumb_func
sub_80DBC90:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xb3
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DBCB8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DBCB8:
	pop {pc}
.endfunc // sub_80DBC90

.func
.thumb_func
sub_80DBCBA:
	push {r4,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r4, dword_80DBCE8 // =0x60000 
	mul r0, r4
	str r0, [r5,#0x40]
	mov r0, #7
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80DBCD0
	mov r0, #0
loc_80DBCD0:
	mov r1, #1
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r1, [r5,#0x34]
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80DBCE0
	neg r0, r0
loc_80DBCE0:
	add r1, r4, #0
	svc 6
	strh r0, [r5,#0x20]
	pop {r4,pc}
dword_80DBCE8: .word 0x60000
.endfunc // sub_80DBCBA

loc_80DBCEC:
	push {lr}
	ldr r1, off_80DBD00 // =off_80DBD04 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80DBD00: .word off_80DBD04
off_80DBD04: .word sub_80DBD10+1
	.word sub_80DBDA0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DBD10:
	push {lr}
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80DBD80 // =0x860000 
	mul r1, r0
	ldr r0, [r5,#0x34]
	sub r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, dword_80DBD84 // =0x100000 
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, off_80DBD88 // =dword_80DBD8C 
	ldrb r1, [r5,#5]
	ldr r0, [r0,r1]
	str r0, [r5,#0x48]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, off_80DBD94 // =dword_80DBD98 
	ldrb r2, [r5,#5]
	ldr r1, [r1,r2]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r1, #0xc
	mov r2, #0x62 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DBD10

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0xc4
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
dword_80DBD80: .word 0x860000
dword_80DBD84: .word 0x100000
off_80DBD88: .word dword_80DBD8C
dword_80DBD8C: .word 0x60000, 0xE0000
off_80DBD94: .word dword_80DBD98
dword_80DBD98: .word 0xA0000, 0x118000
.func
.thumb_func
sub_80DBDA0:
	push {r7,lr}
	ldr r1, off_80DBDB0 // =off_80DBDB4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_80DBDB0: .word off_80DBDB4
off_80DBDB4: .word sub_80DBDBC+1
	.word sub_80DBE4C+1
.endfunc // sub_80DBDA0

.func
.thumb_func
sub_80DBDBC:
	push {r4,r6,lr}
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, [r5,#0x48]
	ldr r1, off_80DBE40 // =dword_80DBE44 
	ldrb r2, [r5,#5]
	ldr r1, [r1,r2]
	add r0, r0, r1
	str r0, [r5,#0x48]
	ldr r1, [r5,#0x3c]
	sub r1, r1, r0
	bpl loc_80DBE3C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r0, #3
	bl sub_801BDDE
	mov r4, #5
	bl sub_80E05F6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80DBEBA
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	push {r0}
	ldrb r1, [r5,#5]
	cmp r1, #0
	bne loc_80DBE22
	mov r1, #0x40 
	tst r0, r1
	bne loc_80DBE2A
	bl sub_8001532
	mov r1, #1
	tst r0, r1
	bne loc_80DBE2A
loc_80DBE22:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
loc_80DBE2A:
	pop {r0}
	mov r1, #0x10
	tst r0, r1
	beq loc_80DBE3A
	mov r0, #1
	mov r1, #5
	bl sub_80302A8
loc_80DBE3A:
	mov r1, #0
loc_80DBE3C:
	str r1, [r5,#0x3c]
	pop {r4,r6,pc}
off_80DBE40: .word dword_80DBE44
dword_80DBE44: .word 0x7800, 0xD200
.endfunc // sub_80DBDBC

.func
.thumb_func
sub_80DBE4C:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_80DBE5E
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #7
	strh r0, [r5,#0x20]
	b locret_80DBE80
loc_80DBE5E:
	ldrh r0, [r5,#0x20]
	cmp r0, #4
	bgt loc_80DBE74
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	sub r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, [r5,#0x48]
	ldr r1, [r5,#0x3c]
	add r1, r1, r0
	str r1, [r5,#0x3c]
loc_80DBE74:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80DBE80
	mov r0, #8
	str r0, [r5,#8]
locret_80DBE80:
	pop {pc}
.endfunc // sub_80DBE4C

.func
.thumb_func
sub_80DBE82:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xb4
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DBEA0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r5, [r0,#0x4c]
locret_80DBEA0:
	pop {pc}
.endfunc // sub_80DBE82

.func
.thumb_func
sub_80DBEA2:
	push {lr}
	bl sub_80DBE82
	cmp r0, #0
	beq locret_80DBEB8
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	mov r1, #4
	strb r1, [r0,#5]
locret_80DBEB8:
	pop {pc}
.endfunc // sub_80DBEA2

.func
.thumb_func
sub_80DBEBA:
	push {r4-r7,lr}
	ldr r4, dword_80DBEDC // =0x15050001 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	bl sub_80C536A
	cmp r0, #0
	beq locret_80DBEDA
	ldrb r1, [r5]
	mov r2, #0x10
	and r1, r2
	ldrb r2, [r0]
	orr r2, r1
	strb r2, [r0]
locret_80DBEDA:
	pop {r4-r7,pc}
dword_80DBEDC: .word 0x15050001
	.word 0x50A0031
	.hword 0x1
.endfunc // sub_80DBEBA

.func
.thumb_func
sub_80DBEE6:
	push {lr}
	ldr r1, off_80DBEF4 // =off_80DBEF8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80DBEF4: .word off_80DBEF8
off_80DBEF8: .word sub_80DBF04+1
	.word sub_80DBFC0+1
	.word sub_8016C8A+1
.endfunc // sub_80DBEE6

.func
.thumb_func
sub_80DBF04:
	push {r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	mov r1, #6
	mul r0, r1
	ldr r7, dword_80DBFBC // = 
	add r7, r7, r0
	str r7, [r5,#0x60]
	mov r1, #0xc
	mov r0, #0x80
	ldrb r2, [r7]
	bl sprite_load // (int a1, int a2, int a3) ->
	ldrb r0, [r7,#1]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DBF04

	bl sprite_update
	bl sub_8002F90 // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x14
	lsl r1, r1, #0x10
	ldr r2, [r5,#0x3c]
	sub r2, r2, r1
	str r2, [r5,#0x3c]
	mul r1, r0
	ldr r2, [r5,#0x34]
	add r2, r2, r1
	str r2, [r5,#0x34]
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r2, [r5,#0x34]
	sub r0, r0, r2
	mov r1, #0x10
	svc 6
	str r0, [r5,#0x40]
	ldr r0, [r5,#0x3c]
	neg r0, r0
	mov r1, #0x10
	svc 6
	str r0, [r5,#0x48]
	mov r0, #1
	strh r0, [r5,#0x20]
	bl sub_8019892
	tst r0, r0
	bne loc_80DBF90
	bl object_freeMemory
	pop {pc}
loc_80DBF90:
	ldr r7, [r5,#0x60]
	ldrb r1, [r7,#2]
	ldrb r2, [r7,#3]
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A146
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #0xc4
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#8]
	pop {r7,pc}
	.word 0x1000000, 0x1000000
dword_80DBFBC: .word 0x80DBEE0
.func
.thumb_func
sub_80DBFC0:
	push {lr}
	bl sub_801A00E
	.hword 0xF73E
	.word 0x4909F885, 0x58097A68, 0x470846FE, 0xFDEAF73F, 0xF81EF73E
	.word 0xF73EBD00, 0x2008F849, 0x782860A8, 0x43882102, 0xBD007028
	.word off_80DBFF4
off_80DBFF4: .word sub_80DC000+1
	.word sub_80DC018+1
	.word sub_80DC0AC+1
.endfunc // sub_80DBFC0

.func
.thumb_func
sub_80DC000:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80DC016
	mov r0, #0x10
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DC016:
	pop {pc}
.endfunc // sub_80DC000

.func
.thumb_func
sub_80DC018:
	push {r7,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80DC08E
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80DC0A8 // =0xf800010 
	tst r0, r1
	beq loc_80DC06E
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #5
	bl sub_80E05F6
	mov r0, #0x70 
	bl sound_play // () -> void
	ldr r7, [r5,#0x60]
	ldrb r0, [r7,#4]
	tst r0, r0
	beq loc_80DC05A
	mov r0, #1
	mov r1, #0xf
	bl sub_80302A8
loc_80DC05A:
	ldrb r0, [r7,#5]
	tst r0, r0
	beq loc_80DC076
	cmp r0, #1
	bne loc_80DC06E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
	b loc_80DC076
loc_80DC06E:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_breakPanel
loc_80DC076:
	mov r0, #1
	ldr r7, [r5,#0x54]
	strb r0, [r7,#1]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	pop {r7,pc}
loc_80DC08E:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bl sub_800E2AC
	bl sub_801A04C
	pop {r7,pc}
dword_80DC0A8: .word 0xF800010
.endfunc // sub_80DC018

.func
.thumb_func
sub_80DC0AC:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80DC0AC

.func
.thumb_func
sub_80DC0C0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xb5
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DC0E4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80DC0E4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80DC0C0

loc_80DC0E8:
	push {lr}
	ldr r1, off_80DC0F8 // =off_80DC0FC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80DC0F8: .word off_80DC0FC
off_80DC0FC: .word sub_80DC108+1
	.word sub_80DC160+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DC108:
	push {r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x64 
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #4
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DC108

	bl sprite_update
	bl sub_8002F90 // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x28 
	mul r1, r0
	lsl r1, r1, #0x10
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #0
	str r0, [r5,#0x60]
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80DC160
	pop {r7,pc}
.func
.thumb_func
sub_80DC160:
	push {lr}
	ldr r1, off_80DC174 // =off_80DC178 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80DC174: .word off_80DC178
off_80DC178: .word sub_80DC180+1
	.word sub_80DC1A2+1
.endfunc // sub_80DC160

.func
.thumb_func
sub_80DC180:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DC190
	mov r0, #3
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DC190:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DC1A0
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DC1A0:
	pop {pc}
.endfunc // sub_80DC180

.func
.thumb_func
sub_80DC1A2:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DC1D2
	mov r0, #0x64 
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80DC254 // =0x1705ff01 
	ldr r6, dword_80DC258 // =0x2000 
	mov r7, #0
	bl sub_80C53A6
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DC1D2:
	ldr r0, [r5,#0x60]
	cmp r0, #0
	bne loc_80DC1E0
	mov r0, #0x12
	add r0, #0xff
	bl sound_play // () -> void
loc_80DC1E0:
	ldr r0, [r5,#0x60]
	add r0, #1
	str r0, [r5,#0x60]
	cmp r0, #8
	blt loc_80DC1EE
	mov r0, #0
	str r0, [r5,#0x60]
loc_80DC1EE:
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80DC25C // =0x3005ff01 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C53A6
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DC216
	mov r0, #8
	str r0, [r5,#8]
locret_80DC216:
	pop {r4,r6,r7,pc}
	.byte 0x1C
	.byte 0xC2
	.byte 0xD
	.byte  8
	.byte  1
	.byte  0
	.byte 0x23 
	.byte  0
	.byte  1
	.byte  0
	.byte 0x1B
	.byte  0
	.byte  1
	.byte  0
	.byte 0x1C
	.byte  0
	.byte  1
	.byte  0
	.byte 0x1D
	.byte  0
.endfunc // sub_80DC1A2

.func
.thumb_func
sub_80DC22C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xb6
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DC250
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80DC250:
	pop {pc}
	.balign 4, 0x00
dword_80DC254: .word 0x1705FF01
dword_80DC258: .word 0x2000
dword_80DC25C: .word 0x3005FF01
.endfunc // sub_80DC22C

loc_80DC260:
	push {lr}
	ldr r1, off_80DC270 // =off_80DC274 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80DC270: .word off_80DC274
off_80DC274: .word sub_80DC280+1
	.word sub_80DC2D4+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DC280:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #4
	mul r0, r1
	ldr r2, [r5,#0x4c]
	ldrh r1, [r2,#0x36]
	add r0, r0, r1
	strh r0, [r5,#0x36]
	ldrh r0, [r2,#0x3a]
	strh r0, [r5,#0x3a]
	ldrh r0, [r2,#0x3e]
	strh r0, [r5,#0x3e]
	bl sub_800E2AC
	mov r0, #0
	str r0, [r5,#0x2c]
	mov r0, #0
	strb r0, [r5,#4]
	bl sub_8019892
	tst r0, r0
	beq loc_80DC2C8
	mov r1, #0x58 
	mov r2, #0x49 
	mov r3, #0
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	b locret_80DC2D2
loc_80DC2C8:
	ldr r7, [r5,#0x60]
	mov r0, #0
	str r0, [r7]
	bl object_freeMemory
locret_80DC2D2:
	pop {pc}
.endfunc // sub_80DC280

.func
.thumb_func
sub_80DC2D4:
	push {lr}
	bl sub_801A00E
	.hword 0xF73D
	.word 0xF72DFEFB, 0x4200FF56, 0x4908D107, 0x58097A68, 0x470846FE
	.word 0xFE92F73D, 0xF73DBD00, 0x6E2FFEBD, 0x60382000, 0x60A82008
	.word 0xBD00
	.word off_80DC30C
off_80DC30C: .word sub_80DC310+1
.endfunc // sub_80DC2D4

.func
.thumb_func
sub_80DC310:
	push {r4,r6,lr}
	sub sp, sp, #0x10
	mov r0, #0
	strb r0, [r5,#4]
	ldr r4, [r5,#0x54]
	ldr r6, [r4,#0x70]
	tst r6, r6
	beq loc_80DC33C
	bl sub_80DC3B2
	tst r0, r0
	bne loc_80DC32E
	bl sub_801A074 // () -> void
	b loc_80DC33C
loc_80DC32E:
	ldr r0, [r5,#0x50]
	bl sub_800F884
	bl sub_801A074 // () -> void
	mov r0, #1
	strb r0, [r5,#4]
loc_80DC33C:
	ldrb r4, [r5,#0x12]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x14
	mul r0, r1
	ldr r2, [r5,#0x4c]
	ldrh r1, [r2,#0x36]
	add r0, r0, r1
	strh r0, [r5,#0x36]
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80DC362
	mov r0, #1
	bl sub_801A07C
loc_80DC362:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80DC310

	mov r2, #0x10
	tst r0, r2
	beq loc_80DC378
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80DC386
loc_80DC378:
	bl sub_801A074 // () -> void
	ldr r7, [r5,#0x60]
	mov r0, #0
	str r0, [r7]
	mov r0, #8
	str r0, [r5,#8]
loc_80DC386:
	add sp, sp, #0x10
	pop {r4,r6,pc}
.func
.thumb_func
sub_80DC38A:
	push {lr}
	push {r5}
	mov r0, #0xb7
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80DC3B0
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrb r3, [r5,#0x16]
	strb r3, [r0,#0x16]
	ldrb r3, [r5,#0x17]
	strb r3, [r0,#0x17]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DC3B0:
	pop {pc}
.endfunc // sub_80DC38A

.func
.thumb_func
sub_80DC3B2:
	push {r4,r6,lr}
	sub sp, sp, #0x10
	add r0, sp, #0
	mov r1, #0x10
	bl sub_801A4DC
	add r4, r0, #0
	tst r0, r0
	beq loc_80DC3F4
	mov r3, #0
	add r6, sp, #0
loc_80DC3C8:
	ldr r1, [r6]
	ldr r0, [r1,#0x28]
	mov r2, #0xcd
	cmp r0, r2
	blt loc_80DC3EA
	mov r2, #0xff
	cmp r0, r2
	bgt loc_80DC3EA
	push {r0,r1}
	bl sub_800F486
	tst r0, r0
	pop {r0,r1}
	beq loc_80DC3EA
	str r1, [r5,#0x50]
	mov r0, #1
	b loc_80DC3F4
loc_80DC3EA:
	add r6, #4
	add r3, #1
	cmp r3, r4
	blt loc_80DC3C8
	mov r0, #0
loc_80DC3F4:
	add sp, sp, #0x10
	pop {r4,r6,pc}
.endfunc // sub_80DC3B2

loc_80DC3F8:
	push {lr}
	ldr r1, off_80DC40C // =off_80DC410 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80DC40C: .word off_80DC410
off_80DC410: .word sub_80DC41C+1
	.word loc_80DC45E+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DC41C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x14
	mov r2, #0x14
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DC41C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80DC45E:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DC474
	ldr r1, off_80DC47C // =off_80DC480 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80DC478
loc_80DC474:
	mov r0, #8
	str r0, [r5,#8]
locret_80DC478:
	pop {pc}
	.balign 4, 0x00
off_80DC47C: .word off_80DC480
off_80DC480: .word sub_80DC484+1
.func
.thumb_func
sub_80DC484:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DC4AA
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80DC4DE
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_breakPanel_dup2
	mov r0, #0x2f 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r5,#0x20]
	b locret_80DC4B6
loc_80DC4AA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DC4B6
	mov r0, #8
	str r0, [r5,#8]
locret_80DC4B6:
	pop {pc}
.endfunc // sub_80DC484

.func
.thumb_func
sub_80DC4B8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xb8
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DC4DC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DC4DC:
	pop {pc}
.endfunc // sub_80DC4B8

.func
.thumb_func
sub_80DC4DE:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DC4F4 // =0xa050301 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DC4F8 // =0x3 
	bl sub_80C53A6
	pop {r4,r6,r7,pc}
dword_80DC4F4: .word 0xA050301
dword_80DC4F8: .word 0x3
.endfunc // sub_80DC4DE

loc_80DC4FC:
	push {lr}
	ldr r1, off_80DC510 // =off_80DC514 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
off_80DC510: .word off_80DC514
off_80DC514: .word sub_80DC520+1
	.word loc_80DC562+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DC520:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0x10
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DC520

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80DC562:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DC578
	ldr r1, off_80DC580 // =off_80DC584 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80DC57C
loc_80DC578:
	mov r0, #8
	str r0, [r5,#8]
locret_80DC57C:
	pop {pc}
	.byte 0, 0
off_80DC580: .word off_80DC584
off_80DC584: .word sub_80DC588+1
.func
.thumb_func
sub_80DC588:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DC5A6
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80DC5DA
	mov r0, #0x82
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80DC5B2
loc_80DC5A6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DC5B2
	mov r0, #8
	str r0, [r5,#8]
locret_80DC5B2:
	pop {pc}
.endfunc // sub_80DC588

.func
.thumb_func
sub_80DC5B4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xb9
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DC5D8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DC5D8:
	pop {pc}
.endfunc // sub_80DC5B4

.func
.thumb_func
sub_80DC5DA:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DC5F0 // =0xa050401 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DC5F4 // =0x1 
	bl sub_80C53A6
	pop {r4,r6,r7,pc}
dword_80DC5F0: .word 0xA050401
dword_80DC5F4: .word 0x1
.endfunc // sub_80DC5DA

loc_80DC5F8:
	push {lr}
	ldr r1, off_80DC60C // =off_80DC610 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80DC60C: .word off_80DC610
off_80DC610: .word sub_80DC61C+1
	.word sub_80DC668+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DC61C:
	push {lr}
	ldr r0, dword_80DC6B0 // =0x1044 
	ldr r1, dword_80DC6B4 // =0x56050300 
	bl sub_8011504
.endfunc // sub_80DC61C

	tst r0, r0
	bne loc_80DC630
	bl object_freeMemory
	pop {pc}
loc_80DC630:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80DC6B8 // =0x280000 
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r0, #0x28 
	bl sub_801A07C
	mov r0, #0xf3
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DC668
	pop {pc}
.func
.thumb_func
sub_80DC668:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80DC668

	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DC67C
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DC67C:
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#5]
	cmp r0, r1
	bne loc_80DC69E
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x70]
	tst r1, r1
	beq loc_80DC692
	bl sub_801A074 // () -> void
loc_80DC692:
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	ldrb r1, [r5,#6]
	cmp r0, r1
	ble loc_80DC6A6
loc_80DC69E:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
loc_80DC6A6:
	bl sub_80DC6D2
	bl sub_801A018
	pop {pc}
dword_80DC6B0: .word 0x1044
dword_80DC6B4: .word 0x56050300
dword_80DC6B8: .word 0x280000
.func
.thumb_func
sub_80DC6BC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xba
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DC6D0
	bl sub_801155A
locret_80DC6D0:
	pop {pc}
.endfunc // sub_80DC6BC

.func
.thumb_func
sub_80DC6D2:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r6, off_80DC708 // =byte_80DC6FC 
loc_80DC6DC:
	mov r0, #0
	ldrsb r0, [r6,r0]
	cmp r0, #0x7f
	beq locret_80DC6FA
	mul r0, r4
	ldrb r2, [r5,#0x12]
	add r0, r0, r2
	mov r1, #1
	ldrsb r1, [r6,r1]
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	bl object_highlightPanel
	add r6, #2
	b loc_80DC6DC
locret_80DC6FA:
	pop {r4,r6,pc}
byte_80DC6FC: .byte 0x0
byte_80DC6FD: .byte 0x0
	.hword 0x1
	.word 0x1020002, 0x7FFF02
off_80DC708: .word byte_80DC6FC
.endfunc // sub_80DC6D2

loc_80DC70C:
	push {lr}
	ldr r1, off_80DC720 // =off_80DC724 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80DC720: .word off_80DC724
off_80DC724: .word sub_80DC730+1
	.word sub_80DC778+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DC730:
	push {lr}
	ldrb r0, [r5,#0x12]
	strb r0, [r5,#0x14]
	ldrb r1, [r5,#0x13]
	strb r1, [r5,#0x15]
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r1, #0x50 
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r0, #0xa0
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	ldr r0, dword_80DCB0C // =0x100d 
	ldr r1, dword_80DCB10 // =0x4050300 
	bl sub_8011504
.endfunc // sub_80DC730

	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DC778
	pop {pc}
.func
.thumb_func
sub_80DC778:
	push {r4,r7,lr}
	ldr r7, [r5,#0x54]
	bl sub_801A00E
	.word 0x42096F39, 0xF73DD006, 0x6F28FC75, 0x67283001, 0x67682008
	.word 0x28007A68, 0x280CD00B, 0x7878D009, 0xD1062800, 0x38016F68
	.word 0xDC026768, 0xF73D2001, 0x6D68FC65, 0x490C8944, 0x58097A68
	.word 0x470846FE, 0x89406D68, 0xD00742A0, 0x67282000, 0x280C7A68
	.word 0x2001D002, 0xFC52F73D, 0x7A906D6A, 0xF7307AD1, 0xF73DF9FB
	.word 0xBD90FC19
	.word off_80DC7EC
off_80DC7EC: .word sub_80DC7FC+1
	.word sub_80DC872+1
	.word sub_80DC92C+1
	.word sub_80DC964+1
.endfunc // sub_80DC778

.func
.thumb_func
sub_80DC7FC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DC81A
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80DCB14 // =0x40000 
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r1, dword_80DCB18 // =0xfff80000 
	str r1, [r5,#0x48]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DC81A:
	ldrh r0, [r5,#0x20]
	cmp r0, #0xa
	bne loc_80DC828
	mov r0, #0x41 
	add r0, #0xff
	bl sound_play // () -> void
loc_80DC828:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80DC860
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x12]
	str r0, [r5,#0x68]
	ldrb r1, [r5,#0x13]
	str r1, [r5,#0x6c]
	mov r0, #0
	str r0, [r5,#0x78]
	str r0, [r5,#0x7c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80DC9EC
	mov r1, #4
	tst r0, r0
	beq loc_80DC858
	mov r1, #8
loc_80DC858:
	strb r1, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
loc_80DC860:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	pop {pc}
.endfunc // sub_80DC7FC

.func
.thumb_func
sub_80DC872:
	push {r7,lr}
	ldr r2, [r5,#0x54]
	ldrb r0, [r2,#0xa]
	ldrb r1, [r2,#0xb]
	bl object_isPanelSolid
.endfunc // sub_80DC872

	beq loc_80DC91E
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DC89E
	bl sub_80DCA38
	str r2, [r5,#0x78]
	str r3, [r5,#0x7c]
	str r0, [r5,#0x60]
	str r1, [r5,#0x64]
	bl sub_801A04C
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DC89E:
	ldrb r7, [r5,#7]
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	lsr r1, r7, #1
	cmp r0, r1
	bne loc_80DC8BE
	push {r0}
	ldr r0, [r5,#0x60]
	ldr r1, [r5,#0x64]
	bl sub_800E258
	ldr r2, [r5,#0x54]
	strb r0, [r2,#0xa]
	strb r1, [r2,#0xb]
	pop {r0}
loc_80DC8BE:
	cmp r0, r7
	bne loc_80DC8F8
	ldrb r0, [r5,#0x12]
	str r0, [r5,#0x68]
	ldrb r1, [r5,#0x13]
	str r1, [r5,#0x6c]
	bl sub_80DCA38
	str r2, [r5,#0x78]
	str r3, [r5,#0x7c]
	str r0, [r5,#0x60]
	str r1, [r5,#0x64]
	bl sub_801A04C
	mov r0, #0
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80DC9EC
	tst r0, r0
	beq loc_80DC8F8
	bl sub_800E29C // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r7,pc}
loc_80DC8F8:
	ldr r0, [r5,#0x68]
	ldr r1, [r5,#0x6c]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r2, [r5,#0x60]
	ldr r3, [r5,#0x64]
	ldrh r6, [r5,#0x20]
	bl sub_80DCACC
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	bl sub_800E2AC
	ldr r2, [r5,#0x54]
	ldrb r0, [r2,#0xa]
	ldrb r1, [r2,#0xb]
	bl object_isValidPanel
	bne locret_80DC92A
loc_80DC91E:
	bl sub_801A074 // () -> void
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DC92A:
	pop {r7,pc}
.func
.thumb_func
sub_80DC92C:
	push {lr}
	ldr r2, [r5,#0x54]
	ldrb r0, [r2,#0xa]
	ldrb r1, [r2,#0xb]
	bl object_isPanelSolid
.endfunc // sub_80DC92C

	bne loc_80DC948
	bl sub_801A074 // () -> void
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
loc_80DC948:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80DC9EC
	tst r0, r0
	beq loc_80DC95A
	ldr r0, [r5,#0x70]
	cmp r0, #3
	blt locret_80DC962
loc_80DC95A:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DC962:
	pop {pc}
.func
.thumb_func
sub_80DC964:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DC978
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80DC978:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DC984
	mov r0, #8
	str r0, [r5,#8]
locret_80DC984:
	pop {pc}
.endfunc // sub_80DC964

.func
.thumb_func
sub_80DC986:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xbb
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DC99A
	bl sub_801155A
locret_80DC99A:
	pop {pc}
.endfunc // sub_80DC986

	push {r4,lr}
	sub sp, sp, #0x14
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	str r4, [sp,#0xc]
	str r6, [sp,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r0, [sp]
	ldr r1, [sp,#4]
	ldrb r3, [r5,#0x16]
	lsl r3, r3, #3
	ldr r2, off_80DC9D8 // =dword_80DC9DC 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D0BC
	tst r0, r0
	beq loc_80DC9D2
	ldr r2, [sp,#8]
	ldr r4, [sp,#0xc]
	ldr r6, [sp,#0x10]
	bl sub_80DC986
loc_80DC9D2:
	add sp, sp, #0x14
	pop {r4,pc}
	.balign 4, 0x00
off_80DC9D8: .word dword_80DC9DC
dword_80DC9DC: .word 0x20, 0x0, 0x0
	.word 0x20
.func
.thumb_func
sub_80DC9EC:
	mov r0, #0
	mov pc, lr
.endfunc // sub_80DC9EC

	push {r5-r7,lr}
	add r6, r0, #0
	add r7, r1, #0
	bl object_getPanelParameters
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80DCA2C // =dword_80DCA30 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80DCA26
	add r0, r6, #0
	add r1, r7, #0
	ldrb r2, [r5,#0x16]
	mov r3, #1
	eor r2, r3
	bl sub_800AE54
	add r5, r0, #0
	beq loc_80DCA26
	bl object_getFlag // () -> int
	mov r1, #6
	tst r0, r1
	bne loc_80DCA26
	mov r0, #1
	pop {r5-r7,pc}
loc_80DCA26:
	mov r0, #0
	pop {r5-r7,pc}
	.balign 4, 0x00
off_80DCA2C: .word dword_80DCA30
dword_80DCA30: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80DCA38:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x14
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	tst r0, r0
	beq loc_80DCAAA
	ldrb r1, [r0,#0x12]
	str r1, [sp]
	ldrb r1, [r0,#0x13]
	str r1, [sp,#4]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp,#8]
	ldr r0, [sp]
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	str r0, [sp,#0xc]
	ldr r1, [sp,#4]
	ldrb r2, [r5,#0x13]
	sub r1, r1, r2
	str r1, [sp,#0x10]
	ldr r0, [sp,#8]
	ldr r1, [sp,#0xc]
	mul r0, r1
	ble loc_80DCAAA
	ldr r0, [sp,#0xc]
	cmp r0, #0
	bge loc_80DCA78
	neg r0, r0
loc_80DCA78:
	ldr r1, [sp,#0x10]
	cmp r1, #0
	bge loc_80DCA80
	neg r1, r1
loc_80DCA80:
	cmp r0, r1
	bne loc_80DCAAA
	ldr r0, [sp,#0x10]
	tst r0, r0
	beq loc_80DCAAA
	bgt loc_80DCA9C
	ldr r0, [sp,#8]
	ldrb r6, [r5,#0x12]
	add r6, r6, r0
	ldrb r7, [r5,#0x13]
	mov r4, #1
	neg r4, r4
	add r7, r7, r4
	b loc_80DCAB4
loc_80DCA9C:
	ldr r0, [sp,#8]
	ldrb r6, [r5,#0x12]
	add r6, r6, r0
	ldrb r7, [r5,#0x13]
	mov r4, #1
	add r7, r7, r4
	b loc_80DCAB4
loc_80DCAAA:
	ldr r0, [sp,#8]
	ldrb r6, [r5,#0x12]
	add r6, r6, r0
	ldrb r7, [r5,#0x13]
	mov r4, #0
loc_80DCAB4:
	add r0, r6, #0
	add r1, r7, #0
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	pop {r0,r1}
	add r3, r4, #0
	add sp, sp, #0x14
	pop {r4,r6,r7,pc}
.endfunc // sub_80DCA38

.func
.thumb_func
sub_80DCACC:
	push {lr}
	push {r0,r1}
	sub r2, r2, r0
	sub r3, r3, r1
	mul r2, r6
	mul r3, r6
	push {r3}
	add r0, r2, #0
	add r1, r7, #0
	svc 6
	pop {r3}
	push {r0}
	add r0, r3, #0
	add r1, r7, #0
	svc 6
	add r1, r0, #0
	pop {r0}
	add r2, r0, #0
	add r3, r1, #0
	pop {r0,r1}
	add r0, r0, r2
	add r1, r1, r3
	pop {pc}
.endfunc // sub_80DCACC

	push {lr}
	ldrb r2, [r5,#0x12]
	add r0, r0, r2
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	pop {pc}
	.balign 4, 0x00
dword_80DCB0C: .word 0x100D
dword_80DCB10: .word 0x4050300
dword_80DCB14: .word 0x40000
dword_80DCB18: .word 0xFFF80000
loc_80DCB1C:
	push {lr}
	ldr r1, off_80DCB3C // =off_80DCB40 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne loc_80DCB34
	bl sub_801BCA6
	b locret_80DCB38
loc_80DCB34:
	bl sub_801BBF4
locret_80DCB38:
	pop {pc}
	.balign 4, 0x00
off_80DCB3C: .word off_80DCB40
off_80DCB40: .word sub_80DCB4C+1
	.word loc_80DCB9C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DCB4C:
	push {r4,lr}
	ldr r4, dword_80DCCD0 // =0xc00000 
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mul r0, r4
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	str r4, [r5,#0x3c]
	mov r1, #0xc
	mov r2, #0x67 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DCB4C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,pc}
loc_80DCB9C:
	push {lr}
	ldrb r0, [r5,#5]
	cmp r0, #1
	beq loc_80DCBB2
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DCBBE
	bl battle_isTimeStop
	bne locret_80DCBC2
loc_80DCBB2:
	ldr r1, off_80DCBC4 // =off_80DCBC8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80DCBC2
loc_80DCBBE:
	mov r0, #8
	str r0, [r5,#8]
locret_80DCBC2:
	pop {pc}
off_80DCBC4: .word off_80DCBC8
off_80DCBC8: .word sub_80DCBCC+1
.func
.thumb_func
sub_80DCBCC:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DCBFC
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xc4
	bl sound_play // () -> void
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80DCC48 // =dword_80DCC4C 
	ldr r4, [r1,r0]
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	str r0, [r5,#0x40]
	str r4, [r5,#0x48]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80DCC5C // =byte_80DCC60 
	ldr r0, [r1,r0]
	strh r0, [r5,#0x20]
	b loc_80DCC32
loc_80DCBFC:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80DCC32
	bl sub_80DCC96
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #7
	bl sub_80E05F6
	mov r0, #2
	mov r1, #0xf
	bl sub_80302A8
	mov r0, #8
	str r0, [r5,#8]
	b locret_80DCC44
loc_80DCC32:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs locret_80DCC44
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
locret_80DCC44:
	pop {r4,pc}
	.balign 4, 0x00
off_80DCC48: .word dword_80DCC4C
dword_80DCC4C: .word 0xC0000, 0xC0000, 0xC0000, 0xC0000
off_80DCC5C: .word byte_80DCC60
byte_80DCC60: .byte 0x10, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x10
	.byte 0x0, 0x0, 0x0
.endfunc // sub_80DCBCC

.func
.thumb_func
sub_80DCC70:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xbc
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DCC94
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DCC94:
	pop {pc}
.endfunc // sub_80DCC70

.func
.thumb_func
sub_80DCC96:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#5]
	cmp r0, #1
	beq loc_80DCCB2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DCCC8 // =0xa050701 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DCCCC // =0x3 
	bl sub_80C536A
	beq locret_80DCCC4
loc_80DCCB2:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DCCC8 // =0xa050701 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DCCCC // =0x3 
	bl sub_80C53A6
locret_80DCCC4:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80DCCC8: .word 0xA050701
dword_80DCCCC: .word 0x3
dword_80DCCD0: .word 0xC00000
.endfunc // sub_80DCC96

loc_80DCCD4:
	push {lr}
	ldr r1, off_80DCCE8 // =off_80DCCEC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80DCCE8: .word off_80DCCEC
off_80DCCEC: .word sub_80DCCF8+1
	.word loc_80DCD48+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DCCF8:
	push {r4,lr}
	ldr r4, dword_80DCE30 // =0x300000 
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mul r0, r4
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	str r4, [r5,#0x3c]
	mov r1, #8
	mov r2, #0x15
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x29 
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DCCF8

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,pc}
loc_80DCD48:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DCD64
	bl battle_isTimeStop
	bne locret_80DCD68
	ldr r1, off_80DCD6C // =off_80DCD70 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80DCD68
loc_80DCD64:
	mov r0, #8
	str r0, [r5,#8]
locret_80DCD68:
	pop {pc}
	.balign 4, 0x00
off_80DCD6C: .word off_80DCD70
off_80DCD70: .word sub_80DCD74+1
.func
.thumb_func
sub_80DCD74:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DCD9A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x80
	add r0, #0xff
	bl sound_play // () -> void
	ldr r4, dword_80DCE34 // =0x80000 
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	str r0, [r5,#0x40]
	str r4, [r5,#0x48]
	mov r0, #6
	strh r0, [r5,#0x20]
	b loc_80DCDC0
loc_80DCD9A:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80DCDC0
	bl sub_80DCDFA
	bl sub_80DCE18
	mov r0, #8
	str r0, [r5,#8]
	b locret_80DCDD2
loc_80DCDC0:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs locret_80DCDD2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
locret_80DCDD2:
	pop {r4,pc}
.endfunc // sub_80DCD74

.func
.thumb_func
sub_80DCDD4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xbd
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DCDF8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DCDF8:
	pop {pc}
.endfunc // sub_80DCDD4

.func
.thumb_func
sub_80DCDFA:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DCE10 // =0x15050601 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DCE14 // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_80DCE10: .word 0x15050601
dword_80DCE14: .word 0x3
.endfunc // sub_80DCDFA

.func
.thumb_func
sub_80DCE18:
	push {r4,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x34 
	bl sub_80E05F6
	pop {r4,pc}
dword_80DCE30: .word 0x300000
dword_80DCE34: .word 0x80000
.endfunc // sub_80DCE18

loc_80DCE38:
	push {lr}
	ldr r1, off_80DCE4C // =off_80DCE50 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80DCE4C: .word off_80DCE50
off_80DCE50: .word sub_80DCE5C+1
	.word sub_80DCE9E+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DCE5C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0x15
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x2a 
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DCE5C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80DCE9E:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DCEC0
	bl battle_isTimeStop
	bne loc_80DCEB6
	ldrb r0, [r5,#4]
	sub r0, #1
	strb r0, [r5,#4]
	ble loc_80DCEC0
loc_80DCEB6:
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#5]
	cmp r0, r1
	beq locret_80DCEC4
loc_80DCEC0:
	mov r0, #8
	strb r0, [r5,#8]
locret_80DCEC4:
	pop {pc}
.endfunc // sub_80DCE9E

.func
.thumb_func
sub_80DCEC6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xbe
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DCEE8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r5, [r0,#0x4c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DCEE8:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80DCEC6

	// <mkdata>
	.hword 0x3 // mov r3, r0
	// <mkdata>
	.hword 0x3 // mov r3, r0
	// <mkdata>
	.hword 0xA // mov r2, r1
	// <mkdata>
	.hword 0xA // mov r2, r1
loc_80DCEF4:
	push {lr}
	ldr r1, off_80DCF08 // =off_80DCF0C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80DCF08: .word off_80DCF0C
off_80DCF0C: .word sub_80DCF18+1
	.word sub_80DCF88+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DCF18:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #8
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0x15
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x2b 
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DCF18

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80DCF62
	bl object_freeMemory
	b locret_80DCF86
loc_80DCF62:
	mov r1, #0x3b 
	mov r2, #0xd
	mov r3, #3
	bl sub_8019FB4
	mov r0, #1
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, dword_80DD0A8 // = 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #4
	str r0, [r5,#8]
locret_80DCF86:
	pop {pc}
.func
.thumb_func
sub_80DCF88:
	push {lr}
	bl sub_801A00E
	.hword 0xF73D
	.word 0xF72DF8A1, 0x4200F8FC, 0x2000D11D, 0xFAE5F734, 0xDB124200
	.word 0x6F126D6A, 0x807DA8, 0x5808490E, 0xD10A4210, 0xF870F72D
	.word 0x4909D104, 0x58097A68, 0x470846FE, 0xF828F73D, 0x2034E009
	.word 0xC80E1940, 0xF003240E, 0xF73DFB10, 0x2008F84D, 0xBD007228
	.word off_80DCFE4
off_80DCFE4: .word sub_80DCFF4+1
	.word dword_80DCFEC
dword_80DCFEC: .word 0x5800000, 0xA800000
.endfunc // sub_80DCF88

.func
.thumb_func
sub_80DCFF4:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DD00C
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0xc3
	add r0, #0xff
	bl sound_play // () -> void
	bl sub_80DD062
loc_80DD00C:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80DD028
	bl sub_801A074 // () -> void
loc_80DD028:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80DD038
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80DD038:
	pop {r4,pc}
.endfunc // sub_80DCFF4

.func
.thumb_func
sub_80DD03A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xbf
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DD060
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DD060:
	pop {pc}
.endfunc // sub_80DD03A

.func
.thumb_func
sub_80DD062:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r2, off_80DD094 // =dword_80DD098 
	ldr r1, [r2,r1]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #7
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80DD07E
	mov r0, #0
loc_80DD07E:
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	cmp r0, #0
	bge loc_80DD088
	neg r0, r0
loc_80DD088:
	mov r2, #0x28 
	lsl r2, r2, #0x10
	mul r0, r2
	svc 6
	strh r0, [r5,#0x20]
	pop {pc}
off_80DD094: .word dword_80DD098
dword_80DD098: .word 0x38000, 0x38000, 0x38000, 0x38000
dword_80DD0A8: .word 0x80DCEEC
.endfunc // sub_80DD062

loc_80DD0AC:
	push {lr}
	ldr r1, off_80DD0C0 // =off_80DD0C4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80DD0C0: .word off_80DD0C4
off_80DD0C4: .word sub_80DD0D0+1
	.word sub_80DD15C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DD0D0:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r1, #0x10
	mov r2, #0x16
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DD0D0

	mov r0, #1
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80DD112
	bl object_freeMemory
	b locret_80DD13C
loc_80DD112:
	mov r1, #4
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #3
	bl sub_801A140
	ldr r0, off_80DD140 // =dword_80DD144 
	mov r1, #0x64 
	ldrb r1, [r5,r1]
	lsl r1, r1, #2
	ldr r0, [r0,r1]
	bl sub_801A258
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DD15C
locret_80DD13C:
	pop {pc}
	.byte 0, 0
off_80DD140: .word dword_80DD144
dword_80DD144: .word 0x10, 0x10, 0x10, 0x10, 0x11, 0x12
.func
.thumb_func
sub_80DD15C:
	push {lr}
	bl battle_isTimeStop
	bne locret_80DD198
	bl sub_801A00E
	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DD18C
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	bne loc_80DD18C
	ldr r1, off_80DD19C // =off_80DD1A0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801A018
	b locret_80DD198
loc_80DD18C:
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #8
	str r0, [r5,#8]
locret_80DD198:
	pop {pc}
	.balign 4, 0x00
off_80DD19C: .word off_80DD1A0
off_80DD1A0: .word sub_80DD1AC+1
	.word sub_80DD204+1
	.word sub_80DD22E+1
.endfunc // sub_80DD15C

.func
.thumb_func
sub_80DD1AC:
	push {lr}
	bl sub_80DD322
	tst r0, r0
	bne loc_80DD1F6
	bl sub_80DD2E0
	tst r0, r0
	bne loc_80DD1D0
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	b locret_80DD202
loc_80DD1D0:
	mov r0, #4
	strb r0, [r5,#9]
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq locret_80DD202
	ldrh r1, [r0,#0x24]
	cmp r0, #0
	beq locret_80DD202
	ldrb r1, [r0,#0x13]
	ldrb r2, [r5,#0x13]
	ldr r3, [r5,#0x44]
	sub r1, r1, r2
	cmp r1, #0
	bge loc_80DD1F4
	mov r1, #1
	neg r1, r1
	mul r3, r1
	str r3, [r5,#0x44]
loc_80DD1F4:
	b locret_80DD202
loc_80DD1F6:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
	mov r0, #0
	str r0, [r5,#0x44]
locret_80DD202:
	pop {pc}
.endfunc // sub_80DD1AC

.func
.thumb_func
sub_80DD204:
	push {lr}
	bl sub_80DD322
	tst r0, r0
	bne loc_80DD220
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	b locret_80DD22C
loc_80DD220:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
	mov r0, #0
	str r0, [r5,#0x40]
locret_80DD22C:
	pop {pc}
.endfunc // sub_80DD204

.func
.thumb_func
sub_80DD22E:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DD23E
	mov r0, #1
	strb r0, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0x10]
loc_80DD23E:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80DD25C
	mov r0, #8
	str r0, [r5,#8]
locret_80DD25C:
	pop {pc}
.endfunc // sub_80DD22E

	push {lr}
	push {r3-r5}
	add r3, r2, #0
	add r2, r1, #0
	add r1, r0, #0
	mov r0, #0xc0
	bl object_spawnType3
	add r0, r5, #0
	pop {r3-r5}
	tst r0, r0
	beq locret_80DD2B4
	mov r3, #3
	strb r3, [r0,#0xe]
	mov r1, #0x64 
	add r3, r4, #0
	lsl r3, r3, #0x18
	lsr r3, r3, #0x18
	strb r3, [r0,r1]
	lsr r4, r4, #8
	strh r4, [r0,#0x16]
	str r5, [r0,#0x60]
	str r6, [r0,#0x2c]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	push {r0}
	add r5, r0, #0
	bl sub_800E2AC
	mov r0, #0x64 
	ldrb r0, [r5,r0]
	lsl r0, r0, #2
	ldr r1, off_80DD344 // =dword_8113DC0 
	ldr r0, [r1,r0]
	add r3, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r3
	str r0, [r5,#0x40]
	str r3, [r5,#0x44]
	pop {r0}
locret_80DD2B4:
	pop {pc}
	push {r5,lr}
	cmp r0, #0
	beq locret_80DD2DE
	add r5, r0, #0
	ldrb r0, [r5,#9]
	cmp r0, #8
	beq locret_80DD2DE
	cmp r0, #4
	beq loc_80DD2CE
	mov r0, #0
	str r0, [r5,#0x44]
	b loc_80DD2D2
loc_80DD2CE:
	mov r0, #0
	str r0, [r5,#0x40]
loc_80DD2D2:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
	mov r0, #8
	str r0, [r5,#8]
locret_80DD2DE:
	pop {r5,pc}
.func
.thumb_func
sub_80DD2E0:
	push {r4-r7,lr}
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq locret_80DD320
	ldrb r1, [r0,#0x12]
	ldrb r2, [r5,#0x12]
	sub r3, r2, r1
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r3
	blt loc_80DD31E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r1, [r5,#0x34]
	sub r0, r0, r1
	cmp r0, #0
	bgt loc_80DD308
	neg r0, r0
loc_80DD308:
	ldr r1, dword_80DD348 // =0x30000 
	cmp r0, r1
	bgt loc_80DD31E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	mov r0, #1
	b locret_80DD320
loc_80DD31E:
	mov r0, #0
locret_80DD320:
	pop {r4-r7,pc}
.endfunc // sub_80DD2E0

.func
.thumb_func
sub_80DD322:
	push {r4-r7,lr}
	mov r0, #7
	ldrb r1, [r5,#0x16]
	mul r0, r1
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	beq loc_80DD33E
	ldrb r0, [r5,#0x13]
	cmp r0, #0
	beq loc_80DD33E
	cmp r0, #4
	beq loc_80DD33E
	mov r0, #0
	b locret_80DD340
loc_80DD33E:
	mov r0, #1
locret_80DD340:
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80DD344: .word dword_8113DC0
dword_80DD348: .word 0x30000
.endfunc // sub_80DD322

loc_80DD34C:
	push {lr}
	ldr r1, off_80DD360 // =off_80DD364 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80DD360: .word off_80DD364
off_80DD364: .word sub_80DD382+1
	.word sub_80DD438+1
	.word sub_80DD370+1
.func
.thumb_func
sub_80DD370:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80DD380
	bl sub_8016C8A
locret_80DD380:
	pop {pc}
.endfunc // sub_80DD370

.func
.thumb_func
sub_80DD382:
	push {r7,lr}
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r2, #0x18
	mul r2, r0
	ldrh r1, [r5,#0x36]
	add r1, r1, r2
	strh r1, [r5,#0x36]
	ldr r1, dword_80DD430 // =0x38000 
	mul r1, r0
	mov r0, #0
	sub r0, #1
	mul r1, r0
	str r1, [r5,#0x40]
	ldr r0, dword_80DD434 // =0xc000 
	mov r1, #5
	ldrsb r1, [r5,r1]
	mul r0, r1
	ldrb r1, [r5,#4]
	cmp r1, #3
	bne loc_80DD3B2
	lsl r0, r0, #1
loc_80DD3B2:
	str r0, [r5,#0x44]
	mov r1, #0x10
	mov r2, #0xd
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DD382

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	add r7, r0, #0
	bne loc_80DD3F4
	bl object_freeMemory
	pop {r7,pc}
loc_80DD3F4:
	mov r1, #0xa
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#6]
	str r0, [r5,#0x64]
	mov r0, #0x20 
	ldrb r1, [r5,#4]
	cmp r1, #3
	bne loc_80DD416
	lsr r0, r0, #1
loc_80DD416:
	strh r0, [r5,#0x20]
	mov r0, #0x1c
	lsl r1, r1, #1
	add r0, r0, r1
	strh r0, [r5,#0x22]
	mov r0, #0x41 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	pop {r7,pc}
	.byte 0, 0
dword_80DD430: .word 0x38000
dword_80DD434: .word 0xC000
.func
.thumb_func
sub_80DD438:
	push {lr}
	bl sub_801A00E
	.hword 0xF73C
	.word 0xF72CFE49, 0xD103FE29, 0xFEA1F72C, 0xD1224200, 0x6F006D68
	.word 0x420849C2, 0xF73CD003, 0x8A68FE0B, 0x490E6628, 0x58097A68
	.word 0x470846FE, 0x28087A28, 0x6D68D00A, 0x29007841, 0x8A68D106
	.word 0x42886E29, 0x2001D002, 0xFDFAF73C, 0xFBEDF72F, 0xD0024200
	.word 0xFDC2F73C, 0xF000BD00, 0xBD00F875
	.word off_80DD4A0
off_80DD4A0: .word sub_80DD4B0+1
	.word sub_80DD4E8+1
	.word sub_80DD538+1
	.word sub_80DD584+1
.endfunc // sub_80DD438

.func
.thumb_func
sub_80DD4B0:
	push {r4,r6,lr}
	bl sub_80DD6F4
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	bl sub_80DD738
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80DD4E2
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80DD4E2:
	bl sub_80DD5C8
.endfunc // sub_80DD4B0

	pop {r4,r6,pc}
.func
.thumb_func
sub_80DD4E8:
	push {r4,r6,lr}
	bl sub_80DD6F4
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	bl sub_80DD738
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r0, #0
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	sub r1, r1, r0
	ldr r0, [r5,#0x34]
	bl sub_800E6E8
	tst r0, r0
	beq loc_80DD52E
	ldrb r0, [r5,#7]
	cmp r0, #0
	beq loc_80DD52E
	strh r0, [r5,#0x20]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80DD536
loc_80DD52E:
	bl sub_80DD5C8
	bl sub_80DD5E2
locret_80DD536:
	pop {r4,r6,pc}
.endfunc // sub_80DD4E8

.func
.thumb_func
sub_80DD538:
	push {r4,r6,lr}
	bl sub_80DD6F4
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80DD57E
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r1, r1, r0
	strb r1, [r5,#0x12]
	mov r0, #1
	ldr r1, [r5,#0x44]
	lsl r1, r1, #1
	bcc loc_80DD56A
	sub r0, #2
loc_80DD56A:
	ldrb r1, [r5,#0x13]
	add r1, r1, r0
	strb r1, [r5,#0x13]
	bl sub_801A04C
	mov r0, #0xa
	ldrb r1, [r5,#4]
	sub r0, r0, r1
	sub r0, r0, r1
	strh r0, [r5,#0x20]
loc_80DD57E:
	bl sub_80DD5C8
.endfunc // sub_80DD538

	pop {r4,r6,pc}
.func
.thumb_func
sub_80DD584:
	push {lr}
	bl sub_801A074 // () -> void
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80DD584

.func
.thumb_func
sub_80DD594:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xc1
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DD5B2
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	str r5, [r0,#0x4c]
locret_80DD5B2:
	pop {pc}
.endfunc // sub_80DD594

.func
.thumb_func
sub_80DD5B4:
	push {lr}
	bl sub_80DD594
	cmp r0, #0
	beq locret_80DD5C6
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80DD5C6:
	pop {pc}
.endfunc // sub_80DD5B4

.func
.thumb_func
sub_80DD5C8:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80DD5C8

	mov r1, #0x10
	tst r0, r1
	bne locret_80DD5E0
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DD5E0:
	pop {pc}
.func
.thumb_func
sub_80DD5E2:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#6]
	cmp r0, #0
	beq locret_80DD6A2
	cmp r0, #1
	beq loc_80DD63A
	bl battle_isBattleOver
	tst r0, r0
	beq loc_80DD60C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x20 
	ldrb r2, [r5,#0x16]
	mul r2, r1
	and r0, r1
	cmp r0, r2
	beq locret_80DD6A2
	b loc_80DD628
loc_80DD60C:
	ldr r4, off_80DD6E0 // =dword_80DD6E8 
	ldrb r0, [r5,#5]
	cmp r0, #1
	beq loc_80DD616
	ldr r4, dword_80DD6E4 // =dword_80DD6E8 
loc_80DD616:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r3, off_80DD6B8 // =off_80DD6BC 
	bl sub_800EC48
	bl sub_8015D80
	cmp r0, #0
	beq locret_80DD6A2
loc_80DD628:
	ldrb r2, [r5,#4]
	lsl r2, r2, #2
	ldr r1, off_80DD6A4 // =dword_80DD6A8 
	ldr r1, [r1,r2]
	mov r2, #5
	ldrsb r0, [r5,r2]
	neg r0, r0
	mul r1, r0
	b loc_80DD688
loc_80DD63A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x20 
	tst r0, r1
	bne locret_80DD6A2
	bl sub_800D06A
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r0, r2
	bgt locret_80DD6A2
	cmp r1, r3
	beq loc_80DD69E
	sub r0, r0, r2
	sub r1, r1, r3
	lsr r2, r0, #0x1e
	mov r3, #1
	bic r2, r3
	sub r3, r3, r2
	mul r0, r3
	lsr r2, r1, #0x1e
	mov r3, #1
	bic r2, r3
	sub r3, r3, r2
	mul r1, r3
	cmp r0, r1
	bne locret_80DD6A2
	ldrb r2, [r5,#4]
	lsl r2, r2, #2
	ldr r1, off_80DD6A4 // =dword_80DD6A8 
	ldr r1, [r1,r2]
	ldrb r0, [r5,#0x13]
	cmp r0, #1
	beq loc_80DD688
	mov r0, #0
	sub r0, #1
	mul r1, r0
loc_80DD688:
	str r1, [r5,#0x44]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r2, [r5,#4]
	lsl r2, r2, #2
	ldr r1, off_80DD6CC // =dword_80DD6D0 
	ldr r1, [r1,r2]
	mul r1, r0
	str r1, [r5,#0x40]
	mov r0, #5
	strb r0, [r5,#7]
loc_80DD69E:
	mov r0, #0
	strb r0, [r5,#6]
locret_80DD6A2:
	pop {r4,r6,r7,pc}
off_80DD6A4: .word dword_80DD6A8
dword_80DD6A8: .word 0x26666, 0x2B333, 0x30000, 0x78000
off_80DD6B8: .word off_80DD6BC
off_80DD6BC: .word LCDControl
	.word 0x0
	.word start_
	.word 0x0
off_80DD6CC: .word dword_80DD6D0
dword_80DD6D0: .word 0x38000, 0x48000, 0x50000, 0xC8000
off_80DD6E0: .word dword_80DD6E8
dword_80DD6E4: .word 0x80DD6ED
dword_80DD6E8: .word 0xFE02FF01, 0x201017F, 0x7F02
.endfunc // sub_80DD5E2

.func
.thumb_func
sub_80DD6F4:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x64]
	cmp r0, #2
	bne locret_80DD72C
	ldr r0, [r5,#0x68]
	add r0, #1
	cmp r0, #6
	blt loc_80DD72A
	ldrb r4, [r5,#0x16]
	ldrb r0, [r5,#0x17]
	eor r4, r0
	lsl r4, r4, #8
	ldrb r1, [r5,#0x10]
	add r4, r4, r1
	lsl r4, r4, #8
	mov r1, #0xd
	add r4, r4, r1
	lsl r4, r4, #8
	add r4, #0x10
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	ldr r6, dword_80DD730 // =0xa94a 
	ldr r7, dword_80DD734 // =0xc 
	bl sub_80E33FA
	mov r0, #0
loc_80DD72A:
	str r0, [r5,#0x68]
locret_80DD72C:
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80DD730: .word 0xA94A
dword_80DD734: .word 0xC
.endfunc // sub_80DD6F4

.func
.thumb_func
sub_80DD738:
	push {lr}
	ldrh r0, [r5,#0x22]
	cmp r0, #0
	beq locret_80DD75C
	sub r0, #1
	strh r0, [r5,#0x22]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x40 
	lsl r1, r1, #8
	ldrb r2, [r5,#4]
	cmp r2, #3
	bne loc_80DD754
	lsl r1, r1, #1
loc_80DD754:
	mul r1, r0
	ldr r0, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x40]
locret_80DD75C:
	pop {pc}
	.byte 0, 0
	.word 0x1E800000
.endfunc // sub_80DD738

loc_80DD764:
	push {lr}
	ldr r1, off_80DD774 // =off_80DD778 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80DD774: .word off_80DD778
off_80DD778: .word sub_80DD784+1
	.word sub_80DD7FC+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DD784:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DD7F6
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80DD7F6
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x2f 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r1, #0xff
	strb r1, [r5,#0x11]
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1,r2}
	str r1, [r5,#0x60]
	str r2, [r5,#0x64]
	ldr r0, [r5,#0x3c]
	str r0, [r5,#0x68]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x6c]
	str r1, [r5,#0x70]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	beq loc_80DD7F6
	mov r1, #0x1c
	mov r2, #5
	ldrb r3, [r5,#4]
	bl sub_8019FB4
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DD7FC
	b locret_80DD7FA
loc_80DD7F6:
	bl object_freeMemory
locret_80DD7FA:
	pop {pc}
.endfunc // sub_80DD784

.func
.thumb_func
sub_80DD7FC:
	push {lr}
	bl sub_801A00E
aImO_0: .asciz "imo"
	.byte 0x42
	.word 0xF73CD001, 0xF72CFC33, 0x4200FCBE, 0xF73CD004, 0x2008FC2D
	.word 0xE0087228, 0x7A684904, 0x46FE5809, 0xF73E4708, 0xF73CF9BF
	.word 0xBD00FBF3
	.word off_80DD838
off_80DD838: .word sub_80DD848+1
	.word sub_80DD87C+1
	.word sub_80DD8D2+1
	.word sub_80DD8F0+1
.endfunc // sub_80DD7FC

.func
.thumb_func
sub_80DD848:
	push {r4,r6,r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x60]
	ldr r1, [r5,#0x68]
	ldr r2, [r5,#0x6c]
	mov r3, #0
	mov r6, #0
	mov r7, #0xf
	bl sub_801164C
	str r0, [r5,#0x34]
	str r1, [r5,#0x3c]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #2
	bl sub_80E05F6
	mov r0, #4
	strb r0, [r5,#9]
	pop {r4,r6,r7,pc}
.endfunc // sub_80DD848

.func
.thumb_func
sub_80DD87C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xf
	ble loc_80DD8AA
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x97
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	pop {r4,r6,r7,pc}
loc_80DD8AA:
	ldr r0, [r5,#0x60]
	ldr r1, [r5,#0x68]
	ldr r2, [r5,#0x6c]
	mov r3, #0
	ldrh r6, [r5,#0x20]
	mov r7, #0xf
	bl sub_801164C
	str r0, [r5,#0x34]
	str r1, [r5,#0x3c]
	ldr r0, [r5,#0x64]
	ldr r1, [r5,#0x68]
	ldr r2, [r5,#0x70]
	mov r3, #0
	ldrh r6, [r5,#0x20]
	mov r7, #0xf
	bl sub_801164C
	str r0, [r5,#0x38]
	pop {r4,r6,r7,pc}
.endfunc // sub_80DD87C

.func
.thumb_func
sub_80DD8D2:
	push {lr}
	ldrh r0, [r5,#0x20]
	cmp r0, #0x1c
	bne loc_80DD8DE
	bl sub_801A074 // () -> void
loc_80DD8DE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80DD8EE
	mov r0, #0x14
	str r0, [r5,#0x20]
	mov r0, #0xc
	strb r0, [r5,#9]
locret_80DD8EE:
	pop {pc}
.endfunc // sub_80DD8D2

.func
.thumb_func
sub_80DD8F0:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80DD900
	mov r0, #8
	str r0, [r5,#8]
	b locret_80DD918
loc_80DD900:
	mov r1, #2
	tst r0, r1
	beq loc_80DD910
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	b locret_80DD918
loc_80DD910:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
locret_80DD918:
	pop {pc}
.endfunc // sub_80DD8F0

.func
.thumb_func
sub_80DD91A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xc2
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DD92E
	bl sub_801155A
locret_80DD92E:
	pop {pc}
.endfunc // sub_80DD91A

	push {lr}
	bl sub_80DD91A
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
	pop {pc}
loc_80DD940:
	push {lr}
	ldr r1, off_80DD960 // =off_80DD964 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#6]
	cmp r0, #0
	beq loc_80DD958
	bl sub_801BCA6
	b locret_80DD95C
loc_80DD958:
	bl sub_801BBF4
locret_80DD95C:
	pop {pc}
	.byte 0, 0
off_80DD960: .word off_80DD964
off_80DD964: .word sub_80DD970+1
	.word sub_80DDA08+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DD970:
	push {lr}
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#4]
	ldr r1, off_80DD9F8 // =dword_80DD9FC 
	ldrb r0, [r1,r0]
	strh r0, [r5,#0x3e]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r1, #8
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r1, #0x10
	mov r2, #0x51 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	ldr r1, off_80DDA00 // =byte_80DDA04 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DD970

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80DD9D4
	bl object_freeMemory
	b locret_80DD9F6
loc_80DD9D4:
	mov r1, #0x16
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #0x10
	bl sub_801A258
	mov r0, #0xc
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
locret_80DD9F6:
	pop {pc}
off_80DD9F8: .word dword_80DD9FC
dword_80DD9FC: .word 0x2D2823
off_80DDA00: .word byte_80DDA04
byte_80DDA04: .byte 0x1, 0x0, 0x2, 0x0
.func
.thumb_func
sub_80DDA08:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80DDA08

	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DDA50
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80DDA26
	bl sub_801A074 // () -> void
loc_80DDA26:
	ldrb r0, [r5,#6]
	cmp r0, #0
	beq loc_80DDA36
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xa
	cmp r0, r1
	bne loc_80DDA50
loc_80DDA36:
	ldrb r0, [r5,#6]
	cmp r0, #0
	beq loc_80DDA42
	bl battle_isTimeStop
	bne locret_80DDA58
loc_80DDA42:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80DDA50
	bl sub_801A018
	b locret_80DDA58
loc_80DDA50:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80DDA58:
	pop {pc}
.func
.thumb_func
sub_80DDA5A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xc3
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DDA80
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DDA80:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80DDA5A

loc_80DDA84:
	push {lr}
	ldr r1, off_80DDA98 // =off_80DDA9C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80DDA98: .word off_80DDA9C
off_80DDA9C: .word sub_80DDAA8+1
	.word sub_80DDB24+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DDAA8:
	push {r7,lr}
	mov r1, #0x10
	mov r2, #9
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DDAA8

	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80DDC00 // =0xc0000 
	mul r0, r1
	str r0, [r5,#0x40]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	sub r1, r1, r0
	strb r1, [r5,#0x12]
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	bne loc_80DDAFC
	bl object_freeMemory
	pop {r7,pc}
loc_80DDAFC:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0xa
	str r0, [r5,#0x64]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DDB24
	pop {r7,pc}
.func
.thumb_func
sub_80DDB24:
	push {lr}
	bl sub_801A00E
	.hword 0xF73C
	.word 0xF72CFAD3, 0x4200FB2E, 0x6D69D126, 0x42006F08, 0xF73CD009
	.word 0x8A68FA99, 0x20346628, 0xC80E1940, 0xF0022453, 0x490FFD52
	.word 0x58097A68, 0x470846FE, 0xF835F000, 0x78416D68, 0xD1062900
	.word 0x6E298A68, 0xD0024288, 0xF73C2001, 0xF72FFA83, 0x4200F876
	.word 0xF73CD002, 0xBD00FA4B, 0xFA76F73C, 0x60A82008, 0xBD00
	.word off_80DDB94
off_80DDB94: .word sub_80DDB98+1
.endfunc // sub_80DDB24

.func
.thumb_func
sub_80DDB98:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	pop {r4,r6,r7,pc}
.endfunc // sub_80DDB98

.func
.thumb_func
sub_80DDBAC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xc4
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DDBC8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80DDBC8:
	pop {pc}
.endfunc // sub_80DDBAC

	push {lr}
	ldr r0, [r5,#0x64]
	sub r0, #1
	str r0, [r5,#0x64]
	bgt locret_80DDBDC
	mov r0, #5
	str r0, [r5,#0x64]
	bl sub_80DDBDE
locret_80DDBDC:
	pop {pc}
.func
.thumb_func
sub_80DDBDE:
	push {r4,r6,r7,lr}
	ldr r4, dword_80DDC04 // =0x910 
	bl sub_800E456 // () -> int
	lsl r0, r0, #0x18
	add r4, r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80DDC08 // =0x10000 
	sub r2, r2, r6
	sub r3, r3, r6
	ldr r6, dword_80DDC0C // =0xca8f 
	mov r7, #0x14
	bl sub_80E33FA
	pop {r4,r6,r7,pc}
dword_80DDC00: .word 0xC0000
dword_80DDC04: .word 0x910
dword_80DDC08: .word 0x10000
dword_80DDC0C: .word 0xCA8F
.endfunc // sub_80DDBDE

loc_80DDC10:
	push {lr}
	ldr r1, off_80DDC20 // =off_80DDC24 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80DDC20: .word off_80DDC24
off_80DDC24: .word sub_80DDC30+1
	.word sub_80DDCF4+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DDC30:
	push {r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #0x56 
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #2
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DDC30

	bl sprite_update
	bl sub_8002E3C
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80DDCEC // =0x80000 
	mul r1, r0
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, dword_80DDCF0 // =0x80000 
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	push {r1}
	ldr r1, [r5,#0x34]
	sub r0, r0, r1
	mov r1, #0xa
	svc 6
	str r0, [r5,#0x40]
	pop {r0}
	ldr r1, [r5,#0x38]
	sub r0, r0, r1
	mov r1, #0xa
	svc 6
	str r0, [r5,#0x44]
	ldr r0, [r5,#0x3c]
	ldr r2, dword_80DDDEC // =0xd0000 
	add r0, r0, r2
	mov r1, #0xa
	svc 6
	str r0, [r5,#0x48]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_8019892
	tst r0, r0
	bne loc_80DDCCA
	bl object_freeMemory
	pop {pc}
loc_80DDCCA:
	mov r1, #0x15
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A146
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#8]
	pop {r7,pc}
dword_80DDCEC: .word 0x80000
dword_80DDCF0: .word 0x80000
.func
.thumb_func
sub_80DDCF4:
	push {lr}
	bl sub_801A00E
	.hword 0xF73C
	.word 0x4909F9EB, 0x58097A68, 0x470846FE, 0xFF50F73D, 0xF984F73C
	.word 0xF73CBD00, 0x2008F9AF, 0x782860A8, 0x43882102, 0xBD007028
	.word off_80DDD28
off_80DDD28: .word sub_80DDD30+1
	.word sub_80DDDB8+1
.endfunc // sub_80DDCF4

.func
.thumb_func
sub_80DDD30:
	push {r7,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80DDD8A
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80DDDB4 // =0xf800010 
	tst r0, r1
	beq loc_80DDD78
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #5
	bl sub_80E05F6
	mov r0, #0x70 
	bl sound_play // () -> void
	mov r0, #1
	mov r1, #0xf
	bl sub_80302A8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanel
	mov r0, #1
	bl sub_801A07C
loc_80DDD78:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	pop {r7,pc}
loc_80DDD8A:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	mov r1, #4
	tst r0, r1
	bne locret_80DDDB2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
locret_80DDDB2:
	pop {r7,pc}
dword_80DDDB4: .word 0xF800010
.endfunc // sub_80DDD30

.func
.thumb_func
sub_80DDDB8:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80DDDB8

.func
.thumb_func
sub_80DDDCC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xc5
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DDDE8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80DDDE8:
	pop {pc}
	.balign 4, 0x00
dword_80DDDEC: .word 0xD0000
.endfunc // sub_80DDDCC

loc_80DDDF0:
	push {lr}
	ldr r1, off_80DDE04 // =off_80DDE08 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80DDE04: .word off_80DDE08
off_80DDE08: .word sub_80DDE14+1
	.word sub_80DDE82+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DDE14:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #9
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	ldr r1, off_80DDE7C // =byte_80DDE80 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DDE14

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80DDE62
	bl object_freeMemory
	b locret_80DDE7A
loc_80DDE62:
	mov r1, #6
	mov r2, #5
	mov r3, #1
	bl sub_8019FB4
	mov r0, #0xa
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
locret_80DDE7A:
	pop {pc}
off_80DDE7C: .word byte_80DDE80
byte_80DDE80: .byte 0x15, 0x17
.func
.thumb_func
sub_80DDE82:
	push {lr}
	bl sub_801A00E
	.word 0xF924F73C, 0xF97FF72C, 0xD11C4200, 0x7A406CE8, 0xD1182809
	.word 0x6F126D6A, 0x807DA8, 0x58084910, 0xD0054210, 0xF8E2F73C
	.word 0x72682008, 0x72A82000, 0xF8EEF72C, 0x4906D104, 0x58097A68
	.word 0x470846FE, 0xF8A6F73C, 0xF73CE003, 0x2008F8D1, 0xBD007228
	.word off_80DDEDC
off_80DDEDC: .word sub_80DDEF4+1
	.word sub_80DDF18+1
	.word sub_80DDF86+1
	.word dword_80DDEEC
dword_80DDEEC: .word 0x5800000, 0xA800000
.endfunc // sub_80DDE82

.func
.thumb_func
sub_80DDEF4:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DDF06
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	b locret_80DDF16
loc_80DDF06:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DDF16
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80DDF16:
	pop {pc}
.endfunc // sub_80DDEF4

.func
.thumb_func
sub_80DDF18:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DDF48
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#4]
	ldr r1, off_80DDF80 // =byte_80DDF84 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	mov r0, #0xf0
	bl sound_play // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80DDFFC // =0x80000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0x28 
	lsl r0, r0, #0x10
	mov r2, #2
	mul r0, r2
	svc 6
	strh r0, [r5,#0x20]
loc_80DDF48:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80DDF76
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DDF7E
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
	b locret_80DDF7E
loc_80DDF76:
	bl sub_801A074 // () -> void
	mov r0, #8
	str r0, [r5,#8]
locret_80DDF7E:
	pop {r4,pc}
off_80DDF80: .word byte_80DDF84
byte_80DDF84: .byte 0x16, 0x18
.endfunc // sub_80DDF18

.func
.thumb_func
sub_80DDF86:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DDF98
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80DDFB4
loc_80DDF98:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0xa
	beq loc_80DDFB0
	cmp r0, #0x14
	beq loc_80DDFB0
	cmp r0, #0
	bgt locret_80DDFB4
	mov r0, #8
	str r0, [r5,#8]
	b locret_80DDFB4
loc_80DDFB0:
	bl sub_80DDFDE
locret_80DDFB4:
	pop {pc}
.endfunc // sub_80DDF86

.func
.thumb_func
sub_80DDFB6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xc6
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DDFDC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DDFDC:
	pop {pc}
.endfunc // sub_80DDFB6

.func
.thumb_func
sub_80DDFDE:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80DDFF4 // =0x6050a01 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DDFF8 // =0x1 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_80DDFF4: .word 0x6050A01
dword_80DDFF8: .word 0x1
dword_80DDFFC: .word 0x80000
.endfunc // sub_80DDFDE

loc_80DE000:
	push {lr}
	ldr r1, off_80DE014 // =off_80DE018 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80DE014: .word off_80DE018
off_80DE018: .word sub_80DE024+1
	.word sub_80DE080+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DE024:
	push {r4,r6,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x4d 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DE024

	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x14
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80DE138 // =0xffff7778 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#8]
	pop {r4,r6,pc}
	.byte 0, 0
.func
.thumb_func
sub_80DE080:
	push {lr}
	bl sub_80DE088
	pop {pc}
.endfunc // sub_80DE080

.func
.thumb_func
sub_80DE088:
	push {r6,r7,lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq loc_80DE098
	mov r0, #1
	strh r0, [r5,#0x10]
loc_80DE098:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80DE0EE
	ldr r0, [r5,#0x4c]
	mov r1, #0
	strb r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #6
	bl sub_80E05F6
	push {r5}
	ldrb r0, [r5,#0x16]
	bl sub_80103BC
	add r5, r0, #0
	mov r0, #0x96
	lsl r0, r0, #1
	bl object_addHP
	mov r0, #0x8a
	bl sound_play // () -> void
	mov r0, #5
	add r4, r0, #0
	bl sub_801A7CC
	ldr r6, [r5,#0x58]
	ldr r0, [r6,#0x60]
	tst r0, r0
	beq loc_80DE0E2
	bl sub_80E0DC0
loc_80DE0E2:
	mov r7, #0x60 
	add r7, r7, r6
	bl sub_80E0D98
	pop {r5}
	b locret_80DE110
loc_80DE0EE:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80DE138 // =0xffff7778 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
locret_80DE110:
	pop {r6,r7,pc}
.endfunc // sub_80DE088

.func
.thumb_func
sub_80DE112:
	push {lr}
	push {r5}
	mov r0, #0xc7
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	beq locret_80DE134
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r7, [r0,#0x4c]
	mov r1, #1
	strb r1, [r7]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DE134:
	pop {pc}
	.balign 4, 0x00
dword_80DE138: .word 0xFFFF7778
.endfunc // sub_80DE112

loc_80DE13C:
	push {lr}
	ldr r1, off_80DE150 // =off_80DE154 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80DE150: .word off_80DE154
off_80DE154: .word sub_80DE168+1
	.word sub_80DE1B8+1
	.word sub_80DE160+1
.func
.thumb_func
sub_80DE160:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80DE160

.func
.thumb_func
sub_80DE168:
	push {lr}
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x10
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #7
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DE168

	mov r0, #3
	ldrb r1, [r5,#4]
	mul r0, r1
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	ldrh r0, [r5,#0x3e]
	sub r0, #0x24 
	strh r0, [r5,#0x3e]
	bl sub_80DE30E
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DE1B8
	pop {pc}
.func
.thumb_func
sub_80DE1B8:
	push {r4,r7,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DE1D4
	bl battle_isTimeStop
	bne locret_80DE1D2
	ldr r1, off_80DE1DC // =off_80DE1E0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80DE1D2:
	pop {r4,r7,pc}
loc_80DE1D4:
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r7,pc}
	.balign 4, 0x00
off_80DE1DC: .word off_80DE1E0
off_80DE1E0: .word sub_80DE1F4+1
	.word sub_80DE21A+1
	.word sub_80DE266+1
	.word sub_80DE2B0+1
	.word 0xFF800000
.endfunc // sub_80DE1B8

.func
.thumb_func
sub_80DE1F4:
	push {r4,lr}
	mov r0, #0x60 
	ldrb r1, [r5,r0]
	sub r1, #1
	strb r1, [r5,r0]
	cmp r1, #0
	bne locret_80DE218
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #1
	bl sub_80DE38C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80DE218:
	pop {r4,pc}
.endfunc // sub_80DE1F4

.func
.thumb_func
sub_80DE21A:
	push {r4,lr}
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	mov r0, #0x62 
	ldrb r0, [r5,r0]
	mov r1, #1
	eor r0, r1
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x13]
	cmp r0, r1
	beq loc_80DE240
	b locret_80DE264
loc_80DE240:
	mov r0, #0x62 
	ldrb r0, [r5,r0]
	cmp r0, #1
	beq loc_80DE258
	mov r0, #0x65 
	mov r1, #0
	strb r1, [r5,r0]
	ldr r0, [r5,#0x38]
	str r0, [r5,#0x68]
	mov r0, #8
	strb r0, [r5,#9]
	b locret_80DE264
loc_80DE258:
	bl sub_80DE3B0
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80DE264:
	pop {r4,pc}
.endfunc // sub_80DE21A

.func
.thumb_func
sub_80DE266:
	push {r4,lr}
	mov r0, #0x60 
	mov r1, #0x63 
	ldrb r2, [r5,r0]
	add r2, #1
	strb r2, [r5,r0]
	ldrb r3, [r5,r1]
	cmp r2, r3
	beq loc_80DE28A
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	bl sub_80DE350
	bl sub_800E2AC
	b locret_80DE2AE
loc_80DE28A:
	mov r0, #0x62 
	ldrb r1, [r5,r0]
	mov r2, #1
	eor r1, r2
	strb r1, [r5,r0]
	ldr r0, [r5,#0x44]
	neg r0, r0
	str r0, [r5,#0x44]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	mov r0, #0x60 
	mov r1, #0
	strb r1, [r5,r0]
	mov r0, #4
	strb r0, [r5,#9]
locret_80DE2AE:
	pop {r4,pc}
.endfunc // sub_80DE266

.func
.thumb_func
sub_80DE2B0:
	push {r4,lr}
	mov r0, #0x60 
	ldrb r1, [r5,r0]
	cmp r1, #0
	beq loc_80DE2D0
	sub r1, #1
	strb r1, [r5,r0]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	b locret_80DE2EE
loc_80DE2D0:
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DE2E2
	mov r0, #1
	strb r0, [r5,#0xa]
	mov r0, #0x62 
	ldrb r0, [r5,r0]
	bl sub_80DE38C
loc_80DE2E2:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80DE2EE:
	pop {r4,pc}
.endfunc // sub_80DE2B0

.func
.thumb_func
sub_80DE2F0:
	push {lr}
	push {r0-r3,r5}
	mov r0, #0xc8
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r5}
	beq locret_80DE30C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	mov r1, #0x60 
	strb r4, [r0,r1]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80DE30C:
	pop {pc}
.endfunc // sub_80DE2F0

.func
.thumb_func
sub_80DE30E:
	push {lr}
	ldrb r1, [r5,#4]
	ldr r0, off_80DE348 // =dword_80DE3DC 
	lsl r2, r1, #2
	ldr r0, [r0,r2]
	str r0, [r5,#0x44]
	add r2, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r2
	str r0, [r5,#0x40]
	add r1, r2, #0
	ldr r0, dword_80DE34C // =0x280000 
	svc 6
	mov r1, #0x63 
	strb r0, [r5,r1]
	cmp r0, #0
	beq loc_80DE33C
	add r1, r0, #0
	mov r0, #0x80
	svc 6
	mov r1, #0x64 
	strb r0, [r5,r1]
loc_80DE33C:
	mov r0, #0
	mov r1, #0x62 
	strb r0, [r5,r1]
	mov r1, #0x61 
	strb r0, [r5,r1]
	pop {pc}
off_80DE348: .word dword_80DE3DC
dword_80DE34C: .word 0x280000
.endfunc // sub_80DE30E

.func
.thumb_func
sub_80DE350:
	push {r4-r7,lr}
	mov r0, #0x64 
	ldrb r1, [r5,r0]
	mov r2, #0x65 
	ldrb r3, [r5,r2]
	add r3, r3, r1
	strb r3, [r5,r2]
	lsl r3, r3, #1
	ldr r2, off_80DE3D8 // =byte_80065E0 
	ldrh r0, [r2,r3]
	mov r1, #0xc
	mul r0, r1
	lsl r0, r0, #8
	mov r1, #0x62 
	ldrb r1, [r5,r1]
	lsl r1, r1, #2
	ldr r2, off_80DE380 // =dword_80DE384 
	ldr r1, [r2,r1]
	mul r0, r1
	ldr r1, [r5,#0x68]
	add r1, r1, r0
	str r1, [r5,#0x38]
	pop {r4-r7,pc}
	.byte 0, 0
off_80DE380: .word dword_80DE384
dword_80DE384: .word 0x1, 0xFFFFFFFF
.endfunc // sub_80DE350

.func
.thumb_func
sub_80DE38C:
	push {r4-r7,lr}
	tst r0, r0
	beq locret_80DE3AA
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	lsl r0, r0, #8
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	mov r3, #0
	ldr r4, dword_80DE3AC // =0x2 
	orr r4, r0
	bl sub_80E05F6
locret_80DE3AA:
	pop {r4-r7,pc}
dword_80DE3AC: .word 0x2
.endfunc // sub_80DE38C

.func
.thumb_func
sub_80DE3B0:
	push {r4-r7,lr}
	mov r0, #0x62 
	ldrb r0, [r5,r0]
	lsl r0, r0, #2
	ldr r1, off_80DE3CC // =dword_80DE3D0 
	ldr r0, [r1,r0]
	ldr r1, [r5,#0x44]
	cmp r1, #0
	bge loc_80DE3C4
	neg r1, r1
loc_80DE3C4:
	svc 6
	mov r1, #0x60 
	strb r0, [r5,r1]
	pop {r4-r7,pc}
off_80DE3CC: .word dword_80DE3D0
dword_80DE3D0: .word 0x400000, 0x100000
off_80DE3D8: .word byte_80065E0
dword_80DE3DC: .word 0x40000, 0x40000, 0x40000, 0x40000, 0x40000, 0x40000
	.word 0xC090603, 0xC090603, 0xC090603, 0xC090603
.endfunc // sub_80DE3B0

loc_80DE404:
	push {lr}
	ldr r1, off_80DE418 // =off_80DE41C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80DE418: .word off_80DE41C
off_80DE41C: .word sub_80DE430+1
	.word sub_80DE4EC+1
	.word sub_80DE428+1
.func
.thumb_func
sub_80DE428:
	push {lr}
	bl sub_8016C8A
	pop {pc}
.endfunc // sub_80DE428

.func
.thumb_func
sub_80DE430:
	push {lr}
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x10
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #2
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DE430

	mov r0, #3
	ldrb r1, [r5,#4]
	mul r0, r1
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_800E29C // () -> void
	ldrh r0, [r5,#0x3e]
	sub r0, #0x24 
	strh r0, [r5,#0x3e]
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80DE482
	bl object_freeMemory
	pop {pc}
loc_80DE482:
	ldrb r1, [r5,#4]
	ldr r2, off_80DE4C4 // =dword_80DE4C8 
	lsl r1, r1, #2
	ldr r3, [r2,r1]
	mov r1, #4
	mov r2, #5
	bl sub_8019FB4
	mov r1, #1
	strb r1, [r7,#1]
	ldr r0, off_80DE4D8 // =dword_80DE4DC 
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	ldr r0, [r0,r1]
	bl sub_801A140
	bl sub_801A018
	bl sub_80DE67E
	bl sub_80DE7C8
	mov r0, #1
	bl sub_80DE70C
	mov r0, #0xf7
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DE4EC
	pop {pc}
off_80DE4C4: .word dword_80DE4C8
dword_80DE4C8: .word 0x3, 0x3, 0x3, 0x3
off_80DE4D8: .word dword_80DE4DC
dword_80DE4DC: .word 0x1, 0x3, 0x2, 0x4
.func
.thumb_func
sub_80DE4EC:
	push {r4,r7,lr}
	bl sub_801A00E
	.hword 0xF73B
	.word 0xF72BFDEF, 0x4200FE4A, 0x4910D113, 0x6F386D6F, 0xD0014208
	.word 0xFDB4F73B, 0xFDC4F72B, 0x4907D104, 0x58097A68, 0x470846FE
	.word 0xFD7CF73B, 0xFBCDF72E, 0xF73BBD90, 0x2008FDA5, 0xBD9060A8
	.word off_80DE534
off_80DE534: .word sub_80DE544+1
	.word sub_80DE594+1
	.word sub_80DE618+1
	.word 0xFF800000
.endfunc // sub_80DE4EC

.func
.thumb_func
sub_80DE544:
	push {r4,lr}
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	bl sub_80DE730
	mov r0, #0x64 
	ldrb r0, [r5,r0]
	mov r1, #1
	eor r0, r1
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x13]
	cmp r0, r1
	beq loc_80DE56E
	b locret_80DE592
loc_80DE56E:
	mov r0, #0x64 
	ldrb r0, [r5,r0]
	cmp r0, #1
	beq loc_80DE586
	mov r0, #0x67 
	mov r1, #0
	strb r1, [r5,r0]
	ldr r0, [r5,#0x38]
	str r0, [r5,#0x68]
	mov r0, #4
	strb r0, [r5,#9]
	b locret_80DE592
loc_80DE586:
	bl sub_80DE7A0
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80DE592:
	pop {r4,pc}
.endfunc // sub_80DE544

.func
.thumb_func
sub_80DE594:
	push {r4,lr}
	mov r0, #0x62 
	mov r1, #0x65 
	ldrb r2, [r5,r0]
	add r2, #1
	strb r2, [r5,r0]
	ldrb r3, [r5,r1]
	cmp r2, r3
	beq loc_80DE5D8
	add r0, r2, #0
	add r1, r3, #0
	bl sub_810FA4C
	mov r1, #0x64 
	ldrb r1, [r5,r1]
	ldr r2, off_80DE604 // =dword_80DE608 
	ldrb r2, [r2,r1]
	lsl r1, r1, #2
	ldr r3, off_80DE60C // =dword_80DE610 
	ldr r1, [r3,r1]
	mul r0, r1
	add r0, r0, r2
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	bl sub_80DE6D0
	bl sub_800E2AC
	bl sub_80DE730
	b loc_80DE5FC
loc_80DE5D8:
	mov r0, #0x64 
	ldrb r1, [r5,r0]
	mov r2, #1
	eor r1, r2
	strb r1, [r5,r0]
	ldr r0, [r5,#0x44]
	neg r0, r0
	str r0, [r5,#0x44]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [r5,#0x34]
	mov r0, #0x62 
	mov r1, #0
	strb r1, [r5,r0]
	mov r0, #0
	strb r0, [r5,#9]
loc_80DE5FC:
	bl sub_801A04C
	pop {r4,pc}
	.balign 4, 0x00
off_80DE604: .word dword_80DE608
dword_80DE608: .word 0x602
off_80DE60C: .word dword_80DE610
dword_80DE610: .word 0x1, 0xFFFFFFFF
.endfunc // sub_80DE594

.func
.thumb_func
sub_80DE618:
	push {r4,lr}
	mov r0, #0x62 
	ldrb r1, [r5,r0]
	cmp r1, #0
	beq loc_80DE63C
	sub r1, #1
	strb r1, [r5,r0]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	bl sub_80DE730
	b locret_80DE65E
loc_80DE63C:
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DE64E
	mov r0, #1
	strb r0, [r5,#0xa]
	mov r0, #0x64 
	ldrb r0, [r5,r0]
	bl sub_80DE70C
loc_80DE64E:
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
locret_80DE65E:
	pop {r4,pc}
.endfunc // sub_80DE618

.func
.thumb_func
sub_80DE660:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xc9
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DE67C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80DE67C:
	pop {pc}
.endfunc // sub_80DE660

.func
.thumb_func
sub_80DE67E:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x60 
	strb r0, [r5,r2]
	mov r2, #0x61 
	strb r1, [r5,r2]
	ldrb r1, [r5,#4]
	ldr r0, off_80DE6C8 // =dword_80DE3DC 
	lsl r2, r1, #2
	ldr r0, [r0,r2]
	str r0, [r5,#0x44]
	add r2, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r2
	str r0, [r5,#0x40]
	add r1, r2, #0
	ldr r0, dword_80DE6CC // =0x280000 
	svc 6
	mov r1, #0x65 
	strb r0, [r5,r1]
	cmp r0, #0
	beq loc_80DE6B8
	add r1, r0, #0
	mov r0, #0x80
	svc 6
	mov r1, #0x66 
	strb r0, [r5,r1]
loc_80DE6B8:
	mov r0, #0
	mov r1, #0x64 
	strb r0, [r5,r1]
	mov r1, #0x62 
	strb r0, [r5,r1]
	mov r1, #0x63 
	strb r0, [r5,r1]
	pop {pc}
off_80DE6C8: .word dword_80DE3DC
dword_80DE6CC: .word 0x280000
.endfunc // sub_80DE67E

.func
.thumb_func
sub_80DE6D0:
	push {r4-r7,lr}
	mov r0, #0x66 
	ldrb r1, [r5,r0]
	mov r2, #0x67 
	ldrb r3, [r5,r2]
	add r3, r3, r1
	strb r3, [r5,r2]
	lsl r3, r3, #1
	ldr r2, off_80DE7EC // =byte_80065E0 
	ldrh r0, [r2,r3]
	mov r1, #0xc
	mul r0, r1
	lsl r0, r0, #8
	mov r1, #0x64 
	ldrb r1, [r5,r1]
	lsl r1, r1, #2
	ldr r2, off_80DE700 // =dword_80DE704 
	ldr r1, [r2,r1]
	mul r0, r1
	ldr r1, [r5,#0x68]
	add r1, r1, r0
	str r1, [r5,#0x38]
	pop {r4-r7,pc}
	.byte 0, 0
off_80DE700: .word dword_80DE704
dword_80DE704: .word 0x1, 0xFFFFFFFF
.endfunc // sub_80DE6D0

.func
.thumb_func
sub_80DE70C:
	push {r4-r7,lr}
	tst r0, r0
	beq locret_80DE72A
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	lsl r0, r0, #8
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	mov r3, #0
	ldr r4, dword_80DE72C // =0x2 
	orr r4, r0
	bl sub_80E05F6
locret_80DE72A:
	pop {r4-r7,pc}
dword_80DE72C: .word 0x2
.endfunc // sub_80DE70C

.func
.thumb_func
sub_80DE730:
	push {r4-r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x60 
	ldrb r2, [r5,r2]
	mov r3, #0x61 
	ldrb r3, [r5,r3]
	cmp r0, r2
	bne loc_80DE748
	cmp r1, r3
	bne loc_80DE748
	b locret_80DE766
loc_80DE748:
	mov r2, #0x60 
	ldrb r0, [r5,r2]
	mov r2, #0x61 
	ldrb r1, [r5,r2]
	bl sub_80DE768
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x60 
	strb r0, [r5,r2]
	mov r2, #0x61 
	strb r1, [r5,r2]
	mov r0, #1
	bl sub_801A07C
locret_80DE766:
	pop {r4-r7,pc}
.endfunc // sub_80DE730

.func
.thumb_func
sub_80DE768:
	push {r4-r7,lr}
	cmp r0, #0
	ble locret_80DE794
	cmp r0, #7
	bge locret_80DE794
	cmp r1, #0
	ble locret_80DE794
	cmp r1, #4
	bge locret_80DE794
	push {r0,r1}
	bl object_isPanelSolid
	tst r0, r0
	pop {r0,r1}
	beq locret_80DE794
	ldrb r2, [r5,#4]
	ldr r3, off_80DE798 // =byte_80DE79C 
	ldrb r2, [r3,r2]
	cmp r2, #0xff
	beq locret_80DE794
	bl object_setPanelType
locret_80DE794:
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80DE798: .word byte_80DE79C
byte_80DE79C: .byte 0xFF, 0x3, 0x7, 0x6
.endfunc // sub_80DE768

.func
.thumb_func
sub_80DE7A0:
	push {r4-r7,lr}
	mov r0, #0x64 
	ldrb r0, [r5,r0]
	lsl r0, r0, #2
	ldr r1, off_80DE7BC // =dword_80DE7C0 
	ldr r0, [r1,r0]
	ldr r1, [r5,#0x44]
	cmp r1, #0
	bge loc_80DE7B4
	neg r1, r1
loc_80DE7B4:
	svc 6
	mov r1, #0x62 
	strb r0, [r5,r1]
	pop {r4-r7,pc}
off_80DE7BC: .word dword_80DE7C0
dword_80DE7C0: .word 0x400000, 0x100000
.endfunc // sub_80DE7A0

.func
.thumb_func
sub_80DE7C8:
	push {r4-r7,lr}
	mov r2, #0
	ldr r0, off_80DE7F0 // =dword_80DE3DC+24 
	ldrb r1, [r5,#4]
	lsl r1, r1, #2
	add r0, r0, r1
loc_80DE7D4:
	push {r0,r2}
	ldrb r3, [r0,r2]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r4, [r5,#4]
	bl sub_80DE2F0
	pop {r0,r2}
	add r2, #1
	cmp r2, #4
	bne loc_80DE7D4
	pop {r4-r7,pc}
off_80DE7EC: .word byte_80065E0
off_80DE7F0: .word dword_80DE3DC+0x18
.endfunc // sub_80DE7C8

loc_80DE7F4:
	push {lr}
	ldr r1, off_80DE808 // =off_80DE80C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80DE808: .word off_80DE80C
off_80DE80C: .word sub_80DE818+1
	.word sub_80DE8C0+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DE818:
	push {lr}
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	lsl r0, r0, #2
	ldr r1, off_80DE888 // =off_80DE88C 
	ldrb r2, [r5,#5]
	lsl r2, r2, #2
	ldr r1, [r1,r2]
	add r1, r1, r0
	ldrb r2, [r5,#4]
	ldrb r0, [r1,r2]
	lsl r0, r0, #8
	strh r0, [r5,#0x20]
	add r2, #2
	ldrb r0, [r1,r2]
	strh r0, [r5,#0x22]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80DEA28 // =0xff880000 
	mul r0, r1
	str r0, [r5,#0x60]
	ldr r0, dword_80DEA2C // =0x300000 
	str r0, [r5,#0x64]
	bl sub_80DE8A4
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, dword_80DEA30 // =0xc45 
	ldrb r1, [r5,#4]
	tst r1, r1
	beq loc_80DE85E
	ldr r0, dword_80DEA34 // =0x10c45 
loc_80DE85E:
	ldr r1, dword_80DEA38 // =0x6050300 
	bl sub_8011504
.endfunc // sub_80DE818

	ldrb r0, [r5,#5]
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#6]
	bl sub_801A140
	bl sub_801A074 // () -> void
	mov r0, #0x59 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DE8C0
	pop {pc}
	.balign 4, 0x00
off_80DE888: .word off_80DE88C
off_80DE88C: .word dword_80DE894
	.word dword_80DE89C
dword_80DE894: .word 0x1E1EF516, 0x1E1E8B6A
dword_80DE89C: .word 0x1E1ED216, 0x1E1E8A6A
.func
.thumb_func
sub_80DE8A4:
	push {lr}
	ldrb r3, [r5,#0x16]
	ldrb r2, [r5,#0x17]
	eor r3, r2
	mov r2, #4
	sub r2, r2, r3
	ldrb r0, [r5,#0x12]
	sub r0, r0, r2
	ldr r1, dword_80DEA3C // =0x280000 
	mul r1, r0
	ldr r0, [r5,#0x60]
	add r0, r0, r1
	str r0, [r5,#0x60]
	pop {pc}
.endfunc // sub_80DE8A4

.func
.thumb_func
sub_80DE8C0:
	push {r7,lr}
	bl sub_801A00E
	.hword 0xF73B
	.word 0xF73BFC05, 0x6D68FBD3, 0x42096F01, 0x4C5AD002, 0xFC82F002
	.word 0x490F8A6F, 0x58097A68, 0x470846FE, 0x28087A28, 0x8A68D00B
	.word 0xD00842B8, 0x7CE97CA8, 0xF9BBF72E, 0xD0024200, 0xF73B2002
	.word 0x6D6FFBBB, 0x7AF97AB8, 0x8AEB787A, 0xF9E0F72E, 0xFB80F73B
	.word 0xBD80
	.word off_80DE920
off_80DE920: .word sub_80DE924+1
.endfunc // sub_80DE8C0

.func
.thumb_func
sub_80DE924:
	push {lr}
	ldr r0, [r5,#0x68]
	cmp r0, #1
	bne loc_80DE930
	bl sub_80DE9E4
loc_80DE930:
	ldr r0, [r5,#0x68]
	add r0, #1
	mov r1, #4
	ldrb r2, [r5,#5]
	cmp r2, #0
	beq loc_80DE93E
	mov r1, #6
loc_80DE93E:
	cmp r0, r1
	blt loc_80DE944
	mov r0, #0
loc_80DE944:
	str r0, [r5,#0x68]
	bl sub_80DE984
	cmp r0, #0
	bne loc_80DE956
	mov r0, #8
	str r0, [r5,#8]
	bl sub_801A074 // () -> void
loc_80DE956:
	bl sub_800E2AC
	bl sub_801A04C
	pop {pc}
.endfunc // sub_80DE924

.func
.thumb_func
sub_80DE960:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xca
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DE982
	bl sub_801155A
	ldrb r1, [r0,#5]
	cmp r1, #1
	bne locret_80DE982
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80DE982:
	pop {pc}
.endfunc // sub_80DE960

.func
.thumb_func
sub_80DE984:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #8
	lsl r0, r0, #1
	ldr r1, off_80DE9D4 // =byte_8006660 
	ldrsh r6, [r1,r0]
	ldr r1, off_80DE9D0 // =byte_80065E0 
	ldrsh r7, [r1,r0]
	ldr r0, dword_80DEA44 // =0xa000 
	mul r0, r6
	ldr r1, dword_80DEA44 // =0xa000 
	mul r1, r7
	ldr r2, [r5,#0x60]
	add r0, r0, r2
	ldr r2, [r5,#0x64]
	add r1, r1, r2
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	bl object_getFlipDirection_800E2CA // () -> int
	add r3, r0, #0
	ldrh r0, [r5,#0x20]
	ldr r1, off_80DE9D8 // =off_80DE9DC 
	ldrb r2, [r5,#5]
	lsl r2, r2, #2
	ldr r1, [r1,r2]
	ldrh r2, [r5,#4]
	lsl r2, r2, #1
	sub r2, #1
	mul r1, r2
	mul r1, r3
	add r0, r0, r1
	strh r0, [r5,#0x20]
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80DE9D0: .word byte_80065E0
off_80DE9D4: .word byte_8006660
off_80DE9D8: .word off_80DE9DC
off_80DE9DC: .word 0x380
	.word 0x280
.endfunc // sub_80DE984

.func
.thumb_func
sub_80DE9E4:
	push {r4,r6,r7,lr}
	bl sub_800E456 // () -> int
	lsl r4, r0, #0x18
	ldr r0, dword_80DEA24 // =0x450c 
	orr r4, r0
	ldrb r0, [r5,#0x10]
	lsl r0, r0, #0x10
	orr r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	ldr r6, dword_80DEA18 // =0x83e0 
	ldrb r0, [r5,#5]
	cmp r0, #0
	beq loc_80DEA06
	ldr r6, dword_80DEA1C // =0xa1ef 
loc_80DEA06:
	ldr r7, dword_80DEA20 // =0xe 
	bl sub_80E33FA
	ldrb r1, [r5,#5]
	cmp r1, #1
	bne locret_80DEA16
	bl sub_80E3428
locret_80DEA16:
	pop {r4,r6,r7,pc}
dword_80DEA18: .word 0x83E0
dword_80DEA1C: .word 0xA1EF
dword_80DEA20: .word 0xE
dword_80DEA24: .word 0x450C
dword_80DEA28: .word 0xFF880000
dword_80DEA2C: .word 0x300000
dword_80DEA30: .word 0xC45
dword_80DEA34: .word 0x10C45
dword_80DEA38: .word 0x6050300
dword_80DEA3C: .word 0x280000
	.word 0x10A00
dword_80DEA44: .word 0xA000
	.word 0
	.byte 0, 0, 0, 0
dword_80DEA50: .word 0x100010, 0x10, 0x15100B06, 0x6FFFF1A, 0x1A15100B
	.word 0xB06FFFF, 0xFF1A1510, 0xFF, 0x140014, 0x140014
	.word 0x140014
.endfunc // sub_80DE9E4

loc_80DEA7C:
	push {lr}
	ldr r1, off_80DEA90 // =off_80DEA94 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80DEA90: .word off_80DEA94
off_80DEA94: .word sub_80DEAA8+1
	.word sub_80DEB1C+1
	.word sub_80DEAA0+1
.func
.thumb_func
sub_80DEAA0:
	push {r4-r7,lr}
	bl sub_8016C8A
	pop {r4-r7,pc}
.endfunc // sub_80DEAA0

.func
.thumb_func
sub_80DEAA8:
	push {r4-r7,lr}
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x1a
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #1
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DEAA8

	mov r0, #1
	mov r2, #0x62 
	ldrb r2, [r5,r2]
	mul r0, r2
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E29C // () -> void
	bl sub_8019892
	add r7, r0, #0
	tst r0, r0
	bne loc_80DEAEE
	bl object_freeMemory
	pop {r4-r7,pc}
loc_80DEAEE:
	mov r1, #0xa
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r1, #1
	strb r1, [r7,#1]
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	bl sub_80DECBC
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DEB1C
	pop {r4-r7,pc}
.func
.thumb_func
sub_80DEB1C:
	push {r4-r7,lr}
	bl sub_801A00E
	.hword 0xF73B
	.word 0xF72BFAD7, 0x4200FB32, 0x490FD113, 0x6F386D6F, 0xD0014208
	.word 0xFA9CF73B, 0xFAACF72B, 0x4906D108, 0x58097A68, 0x470846FE
	.word 0xFA64F73B, 0xF8B5F72E, 0x2008BDF0, 0xBDF060A8
	.word off_80DEB60
off_80DEB60: .word sub_80DEB70+1
	.word sub_80DEB94+1
	.word sub_80DEC3C+1
	.word 0xFF800000
.endfunc // sub_80DEB1C

.func
.thumb_func
sub_80DEB70:
	push {r4-r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	add r2, r5, #0
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_80BC998
	pop {r5}
	str r0, [r5,#0x70]
	mov r0, #0xe1
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
	pop {r4-r7,pc}
.endfunc // sub_80DEB70

.func
.thumb_func
sub_80DEB94:
	push {r4-r7,lr}
	mov r0, #0x78 
	ldrh r1, [r5,r0]
	sub r1, #1
	strh r1, [r5,r0]
	cmp r1, #0
	bgt loc_80DEBB0
	mov r1, #0
	strh r1, [r5,r0]
	ldr r0, [r5,#0x70]
	bl sub_80BC9BE
	mov r0, #0
	str r0, [r5,#0x70]
loc_80DEBB0:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, off_80DEE54 // =byte_80065E0 
	mov r1, #0x6a 
	ldrh r1, [r5,r1]
	lsr r1, r1, #8
	lsl r1, r1, #1
	ldrh r0, [r0,r1]
	ldr r1, dword_80DEE58 // =0x160000 
	lsr r1, r1, #0x10
	mul r0, r1
	lsl r0, r0, #8
	str r0, [r5,#0x3c]
	mov r1, #0x64 
	ldrh r0, [r5,r1]
	mov r1, #0x66 
	ldrh r1, [r5,r1]
	bl sub_8114F52
	add r0, #1
	mov r1, #0x63 
	ldrb r2, [r5,r1]
	cmp r0, r2
	beq loc_80DEBE8
	strb r0, [r5,#0x10]
	strb r0, [r5,r1]
loc_80DEBE8:
	mov r0, #0x68 
	ldrh r0, [r5,r0]
	mov r1, #0x6a 
	ldrh r2, [r5,r1]
	add r0, r0, r2
	strh r0, [r5,r1]
	mov r1, #0x64 
	ldrh r0, [r5,r1]
	add r0, #1
	strh r0, [r5,r1]
	mov r1, #0x66 
	ldrh r1, [r5,r1]
	cmp r0, r1
	bne loc_80DEC2E
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	add r2, r5, #0
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_80BC998
	pop {r5}
	str r0, [r5,#0x74]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xbf
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
loc_80DEC2E:
	bl sub_800E2AC
	bl sub_80DED58
	bl sub_801A04C
	pop {r4-r7,pc}
.endfunc // sub_80DEB94

.func
.thumb_func
sub_80DEC3C:
	push {r4-r7,lr}
	mov r0, #0x78 
	ldrh r1, [r5,r0]
	sub r1, #1
	strh r1, [r5,r0]
	cmp r1, #0
	bgt loc_80DEC58
	mov r1, #0
	strh r1, [r5,r0]
	ldr r0, [r5,#0x70]
	bl sub_80BC9BE
	mov r0, #0
	str r0, [r5,#0x70]
loc_80DEC58:
	bl sub_801A074 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0x7a 
	ldrh r1, [r5,r0]
	sub r1, #1
	strh r1, [r5,r0]
	cmp r1, #0
	bgt locret_80DEC82
	mov r1, #0
	strh r1, [r5,r0]
	ldr r0, [r5,#0x74]
	bl sub_80BC9BE
	mov r0, #0
	str r0, [r5,#0x74]
	mov r0, #8
	str r0, [r5,#8]
locret_80DEC82:
	pop {r4-r7,pc}
.endfunc // sub_80DEC3C

	push {lr}
	push {r0-r3,r5}
	mov r0, #0xcb
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r5}
	beq locret_80DECBA
	str r5, [r0,#0x4c]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0,#4]
	mov r1, #0x62 
	strb r2, [r0,r1]
	mov r1, #0x6e 
	ldrb r2, [r0,#0x12]
	strb r2, [r0,r1]
	mov r1, #0x6f 
	ldrb r2, [r0,#0x13]
	strb r2, [r0,r1]
	mov r1, #0
	str r1, [r0,#0x70]
	str r1, [r0,#0x74]
locret_80DECBA:
	pop {pc}
.func
.thumb_func
sub_80DECBC:
	push {r4-r7,lr}
	mov r1, #0x62 
	ldrb r1, [r5,r1]
	lsl r1, r1, #2
	ldr r0, off_80DED54 // =dword_80DEA50+32 
	add r0, r0, r1
	ldrh r1, [r0]
	mov r2, #0x78 
	strh r1, [r5,r2]
	ldrh r1, [r0,#2]
	mov r2, #0x7a 
	strh r1, [r5,r2]
	mov r0, #1
	strb r0, [r5,#0x17]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r1, r1, r0
	mov r2, #0x60 
	strb r1, [r5,r2]
	ldrb r0, [r5,#0x13]
	mov r1, #0x61 
	strb r0, [r5,r1]
	ldr r0, off_80DED50 // =dword_80DEA50 
	mov r1, #0x62 
	ldrb r1, [r5,r1]
	lsl r1, r1, #1
	ldrh r0, [r0,r1]
	mov r1, #0x6c 
	strh r0, [r5,r1]
	mov r2, #0x60 
	ldrb r0, [r5,r2]
	mov r2, #0x61 
	ldrb r1, [r5,r2]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r0, #0x34 
	add r0, r0, r5
	mov r4, #0x6c 
	ldrh r4, [r5,r4]
	bl sub_8114F6A
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	mov r0, #0x68 
	strh r3, [r5,r0]
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #0
	mov r1, #0x64 
	strh r0, [r5,r1]
	mov r0, #0x6c 
	ldrh r0, [r5,r0]
	mov r1, #0x66 
	strh r0, [r5,r1]
	mov r0, #0x6a 
	mov r1, #0
	strh r1, [r5,r0]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r1, #0x63 
	strb r0, [r5,r1]
	bl sub_80DED80
	pop {r4-r7,pc}
	.word 0, 0
	.byte 0, 0
off_80DED50: .word dword_80DEA50
off_80DED54: .word dword_80DEA50+0x20
.endfunc // sub_80DECBC

.func
.thumb_func
sub_80DED58:
	push {r4-r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x6e 
	ldrb r2, [r5,r2]
	mov r3, #0x6f 
	ldrb r3, [r5,r3]
	cmp r0, r2
	bne loc_80DED70
	cmp r1, r3
	bne loc_80DED70
	b locret_80DED7E
loc_80DED70:
	mov r2, #0x6e 
	strb r0, [r5,r2]
	mov r2, #0x6f 
	strb r1, [r5,r2]
	mov r0, #1
	bl sub_801A07C
locret_80DED7E:
	pop {r4-r7,pc}
.endfunc // sub_80DED58

.func
.thumb_func
sub_80DED80:
	push {r4-r7,lr}
	mov r0, #0x62 
	ldrb r0, [r5,r0]
	add r7, r0, #0
	mov r0, #0
loc_80DED8A:
	push {r0}
	ldr r2, off_80DEDD4 // =dword_80DEDD8 
	ldrb r4, [r2,r0]
	cmp r4, #0xff
	beq loc_80DEDBC
	ldr r2, off_80DEDD0 // =dword_80DEA50+8 
	mov r3, #7
	mul r3, r7
	add r3, r3, r0
	ldrb r2, [r2,r3]
	add r0, r4, #0
	add r1, r4, #0
	lsl r0, r0, #0x1c
	lsr r0, r0, #0x14
	lsl r1, r1, #0x18
	lsr r1, r1, #0x1c
	lsl r1, r1, #0x10
	add r4, r7, #0
	orr r4, r0
	orr r4, r1
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r3, #0
	bl sub_80DEFD6
loc_80DEDBC:
	pop {r0}
	add r0, #1
	cmp r0, #7
	blt loc_80DED8A
	pop {r4-r7,pc}
	.word 0, 0
	.byte 0, 0
off_80DEDD0: .word dword_80DEA50+8
off_80DEDD4: .word dword_80DEDD8
dword_80DEDD8: .word 0x10000000, 0xFFFF01, 0xB084B5D0, 0x603A466F, 0x60BC607B
	.word 0x465660FE, 0x368069B6, 0x21017DA8, 0x21104048, 0x18364348
	.word 0x68322404, 0xD0162A00, 0xFA5FF72F, 0x7C916832, 0x7CD11840
	.word 0x4B0AB403, 0xFC6FF02A, 0xFF33F72D, 0xBC032800, 0xB450D007
	.word 0x687B683A, 0x68FE68BC, 0xFF28F7FF, 0x3604BC50, 0xD1E23C01
	.word 0xBDD0B004, 0x80DEE44, 0x10000, 0x5800000, 0x10000
	.word 0xA800000
off_80DEE54: .word byte_80065E0
dword_80DEE58: .word 0x160000
	.byte 0, 0, 0, 0
.endfunc // sub_80DED80

loc_80DEE60:
	push {lr}
	ldr r1, off_80DEE74 // =off_80DEE78 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80DEE74: .word off_80DEE78
off_80DEE78: .word sub_80DEE8C+1
	.word sub_80DEEE8+1
	.word sub_80DEE84+1
.func
.thumb_func
sub_80DEE84:
	push {r4-r7,lr}
	bl sub_8016C8A
	pop {r4-r7,pc}
.endfunc // sub_80DEE84

.func
.thumb_func
sub_80DEE8C:
	push {r4-r7,lr}
	mov r0, #0x80
	mov r1, #4
	mov r2, #0x1a
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E52
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0x6e 
	ldrb r0, [r5,r0]
	ldr r1, off_80DEEE0 // =dword_80DEEE4 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DEE8C

	mov r0, #1
	mov r2, #0x62 
	ldrb r2, [r5,r2]
	mul r0, r2
	bl sprite_setPallete // (int pallete) -> void
	bl sub_80DF016
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DEEE8
	pop {r4-r7,pc}
	.word 0
	.byte 0, 0
off_80DEEE0: .word dword_80DEEE4
dword_80DEEE4: .word 0x509
.func
.thumb_func
sub_80DEEE8:
	push {r4-r7,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DEF04
	bl battle_isTimeStop
	bne locret_80DEF02
	ldr r1, off_80DEF0C // =off_80DEF10 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80DEF02:
	pop {r4-r7,pc}
loc_80DEF04:
	mov r0, #8
	str r0, [r5,#8]
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80DEF0C: .word off_80DEF10
off_80DEF10: .word sub_80DEF1C+1
	.word sub_80DEF3C+1
	.word sub_80DEFC6+1
.endfunc // sub_80DEEE8

.func
.thumb_func
sub_80DEF1C:
	push {r4-r7,lr}
	mov r0, #0x64 
	ldrh r1, [r5,r0]
	sub r1, #1
	strh r1, [r5,r0]
	cmp r1, #0
	bne locret_80DEF3A
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80DEF3A:
	pop {r4-r7,pc}
.endfunc // sub_80DEF1C

.func
.thumb_func
sub_80DEF3C:
	push {r4-r7,lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, off_80DF09C // =byte_80065E0 
	mov r1, #0x6a 
	ldrh r1, [r5,r1]
	lsr r1, r1, #8
	lsl r1, r1, #1
	ldrh r0, [r0,r1]
	ldr r1, dword_80DF0A0 // =0x160000 
	lsr r1, r1, #0x10
	mul r0, r1
	lsl r0, r0, #8
	str r0, [r5,#0x3c]
	mov r1, #0x64 
	ldrh r0, [r5,r1]
	mov r1, #0x66 
	ldrh r1, [r5,r1]
	bl sub_8114F52
	mov r1, #0x6e 
	ldrb r1, [r5,r1]
	ldr r2, off_80DEFC0 // =byte_80DEFC4 
	ldrb r1, [r2,r1]
	add r0, r0, r1
	mov r1, #0x63 
	ldrb r2, [r5,r1]
	cmp r0, r2
	beq loc_80DEF7E
	strb r0, [r5,#0x10]
	strb r0, [r5,r1]
loc_80DEF7E:
	mov r0, #0x68 
	ldrh r0, [r5,r0]
	mov r1, #0x6a 
	ldrh r2, [r5,r1]
	add r0, r0, r2
	strh r0, [r5,r1]
	mov r1, #0x64 
	ldrh r0, [r5,r1]
	add r0, #1
	strh r0, [r5,r1]
	mov r1, #0x66 
	ldrh r1, [r5,r1]
	cmp r0, r1
	bne loc_80DEFAA
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
loc_80DEFAA:
	bl sub_800E2AC
	bl sub_801A04C
	pop {r4-r7,pc}
	.word 0, 0
	.byte 0, 0, 0, 0
off_80DEFC0: .word byte_80DEFC4
byte_80DEFC4: .byte 0x9, 0x5
.endfunc // sub_80DEF3C

.func
.thumb_func
sub_80DEFC6:
	push {r4-r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	pop {r4-r7,pc}
.endfunc // sub_80DEFC6

.func
.thumb_func
sub_80DEFD6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xcc
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DF014
	str r5, [r0,#0x4c]
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	mov r1, #0x6e 
	ldrb r2, [r0,#5]
	strb r2, [r0,r1]
	mov r1, #0x6f 
	ldrb r2, [r0,#6]
	strb r2, [r0,r1]
	mov r1, #0x64 
	strh r3, [r0,r1]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0,#4]
	mov r1, #0x62 
	strb r2, [r0,r1]
	ldr r1, [r5,#0x34]
	str r1, [r0,#0x34]
	ldr r1, [r5,#0x38]
	sub r1, #1
	str r1, [r0,#0x38]
	ldr r1, [r5,#0x3c]
	str r1, [r0,#0x3c]
locret_80DF014:
	pop {pc}
.endfunc // sub_80DEFD6

.func
.thumb_func
sub_80DF016:
	push {r4-r7,lr}
	mov r0, #1
	strb r0, [r5,#0x17]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r1, r1, r0
	mov r2, #0x60 
	strb r1, [r5,r2]
	ldrb r0, [r5,#0x13]
	mov r1, #0x61 
	strb r0, [r5,r1]
	ldr r0, off_80DF090 // =dword_80DEA50 
	mov r1, #0x62 
	ldrb r1, [r5,r1]
	lsl r1, r1, #1
	ldrh r0, [r0,r1]
	mov r1, #0x6c 
	strh r0, [r5,r1]
	mov r2, #0x60 
	ldrb r0, [r5,r2]
	mov r2, #0x61 
	ldrb r1, [r5,r2]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r0, #0x34 
	add r0, r0, r5
	mov r4, #0x6c 
	ldrh r4, [r5,r4]
	bl sub_8114F6A
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	mov r0, #0x68 
	strh r3, [r5,r0]
	mov r0, #0x6c 
	ldrh r0, [r5,r0]
	mov r1, #0x66 
	strh r0, [r5,r1]
	mov r0, #0x6a 
	mov r1, #0
	strh r1, [r5,r0]
	mov r0, #0x6e 
	ldrb r0, [r5,r0]
	ldr r1, off_80DF094 // =dword_80DF098 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	mov r1, #0x63 
	strb r0, [r5,r1]
	pop {r4-r7,pc}
	.word 0, 0, 0
	.byte 0, 0
off_80DF090: .word dword_80DEA50
off_80DF094: .word dword_80DF098
dword_80DF098: .word 0x509
off_80DF09C: .word byte_80065E0
dword_80DF0A0: .word 0x160000
.endfunc // sub_80DF016

loc_80DF0A4:
	push {lr}
	ldr r1, off_80DF0B8 // =off_80DF0BC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80DF0B8: .word off_80DF0BC
off_80DF0BC: .word sub_80DF0C8+1
	.word sub_80DF132+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DF0C8:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #8
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r1, #0xc
	mov r2, #0x1c
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DF0C8

	mov r0, #4
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sub_8019892
	tst r0, r0
	bne loc_80DF114
	bl object_freeMemory
	b locret_80DF15E
loc_80DF114:
	mov r1, #4
	mov r2, #5
	mov r3, #3
	bl sub_8019FB4
	mov r0, #6
	bl sub_801A140
	bl sub_801A018
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80DF132:
	push {lr}
	bl sub_801A00E
.endfunc // sub_80DF132

	bl sub_801A0D4
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80DF148
	bl sub_801A074 // () -> void
loc_80DF148:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80DF156
	bl sub_801A018
	b locret_80DF15E
loc_80DF156:
	bl sub_801A074 // () -> void
	mov r0, #8
	strb r0, [r5,#8]
locret_80DF15E:
	pop {pc}
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xcd
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DF184
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DF184:
	pop {pc}
	.balign 4, 0x00
loc_80DF188:
	push {lr}
	ldr r1, off_80DF19C // =off_80DF1A0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.balign 4, 0x00
off_80DF19C: .word off_80DF1A0
off_80DF1A0: .word sub_80DF1AC+1
	.word sub_80DF1FC+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DF1AC:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	str r0, [r5,#0x3c]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80DF324 // =0x280000 
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r1, #0x10
	mov r2, #0x44 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DF1AC

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80DF1FC:
	push {lr}
	ldr r1, off_80DF210 // =off_80DF214 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80DF20E
.endfunc // sub_80DF1FC

	mov r0, #8
	strb r0, [r5,#8]
locret_80DF20E:
	pop {pc}
off_80DF210: .word off_80DF214
off_80DF214: .word sub_80DF218+1
.func
.thumb_func
sub_80DF218:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DF236
	mov r1, #4
	strb r1, [r5,#0xb]
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#4]
	mov r1, #3
	svc 6
	str r0, [r5,#0x60]
	mov r0, #0
	str r0, [r5,#0x64]
	strh r0, [r5,#0x22]
loc_80DF236:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80DF254
	ldr r0, [r5,#0x64]
	cmp r0, #3
	bge loc_80DF254
	ldr r0, [r5,#0x64]
	bl sub_80DF288
	ldr r0, [r5,#0x60]
	strh r0, [r5,#0x22]
	ldr r0, [r5,#0x64]
	add r0, #1
	str r0, [r5,#0x64]
loc_80DF254:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF260
	mov r0, #8
	str r0, [r5,#8]
locret_80DF260:
	pop {pc}
.endfunc // sub_80DF218

	push {lr}
	push {r0-r2,r5}
	mov r0, #0xce
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DF286
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DF286:
	pop {pc}
.func
.thumb_func
sub_80DF288:
	push {r4,lr}
	mov r4, #0
	lsl r0, r0, #2
	ldr r1, off_80DF2C8 // =off_80DF2CC 
	ldr r0, [r1,r0]
loc_80DF292:
	bl sub_80DF2A0
	add r0, #8
	add r4, #1
	cmp r4, #3
	blt loc_80DF292
	pop {r4,pc}
.endfunc // sub_80DF288

.func
.thumb_func
sub_80DF2A0:
	push {r0,r4,r6,r7,lr}
	add r7, r0, #0
	ldrb r0, [r7,#1]
	tst r0, r0
	beq locret_80DF2C6
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r7]
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, [r7,#4]
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DF320 // =0x3 
	bl sub_80C53A6
locret_80DF2C6:
	pop {r0,r4,r6,r7,pc}
off_80DF2C8: .word off_80DF2CC
off_80DF2CC: .word off_80DF2D8
	.word dword_80DF2F0
	.word dword_80DF308
off_80DF2D8: .word 0x100
	.word 0x4050601, 0x101, 0x4050601, 0x102, 0x4050604
dword_80DF2F0: .word 0x0, 0x0
	.word 0x101, 0x4050601, 0x102, 0x4050604
dword_80DF308: .word 0x0, 0x0, 0x0, 0x0
	.word 0x102, 0x4050604
dword_80DF320: .word 0x3
dword_80DF324: .word 0x280000
.endfunc // sub_80DF2A0

loc_80DF328:
	push {lr}
	ldr r1, off_80DF33C // =off_80DF340 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80DF33C: .word off_80DF340
off_80DF340: .word sub_80DF34C+1
	.word loc_80DF390+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DF34C:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0xff
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r1, #0x10
	mov r2, #0x1d
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #3
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DF34C

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80DF390:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DF3AC
	bl battle_isTimeStop
	bne locret_80DF3B0
	ldr r1, off_80DF3B4 // =off_80DF3B8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80DF3B0
loc_80DF3AC:
	mov r0, #8
	str r0, [r5,#8]
locret_80DF3B0:
	pop {pc}
	.balign 4, 0x00
off_80DF3B4: .word off_80DF3B8
off_80DF3B8: .word sub_80DF3CC+1
	.word sub_80DF3F0+1
	.word sub_80DF41C+1
	.word sub_80DF488+1
	.word sub_80DF4B0+1
.func
.thumb_func
sub_80DF3CC:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DF3DE
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	b locret_80DF3EE
loc_80DF3DE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF3EE
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DF3EE:
	pop {pc}
.endfunc // sub_80DF3CC

.func
.thumb_func
sub_80DF3F0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DF40A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80DF41A
loc_80DF40A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF41A
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DF41A:
	pop {pc}
.endfunc // sub_80DF3F0

.func
.thumb_func
sub_80DF41C:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DF434
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r5,#0x22]
	mov r0, #0
	strh r0, [r5,#0x20]
loc_80DF434:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF47C
	mov r0, #0xa
	strh r0, [r5,#0x20]
	bl sub_8001532
	mov r1, #3
	and r0, r1
	ldr r1, off_80DF480 // =byte_80DF484 
	ldrb r3, [r1,r0]
	lsl r3, r3, #0x10
	push {r3}
	bl object_getFlipDirection_800E2CA // () -> int
	pop {r3}
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r4, #0x12
	ldr r6, [r5,#0x2c]
	bl sub_80C6ADA
	mov r0, #0xb9
	bl sound_play // () -> void
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80DF47C
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DF47C:
	pop {r4,r6,pc}
	.byte 0, 0
off_80DF480: .word byte_80DF484
byte_80DF484: .byte 0x8, 0x10, 0x18, 0x20
.endfunc // sub_80DF41C

.func
.thumb_func
sub_80DF488:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DF49E
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	b locret_80DF4AE
loc_80DF49E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF4AE
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DF4AE:
	pop {pc}
.endfunc // sub_80DF488

.func
.thumb_func
sub_80DF4B0:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80DF4C6
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #0xd
	strh r0, [r5,#0x20]
	b locret_80DF4D2
loc_80DF4C6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF4D2
	mov r0, #8
	str r0, [r5,#8]
locret_80DF4D2:
	pop {pc}
.endfunc // sub_80DF4B0

.func
.thumb_func
sub_80DF4D4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xcf
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DF4F8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DF4F8:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80DF4D4

loc_80DF4FC:
	push {lr}
	ldr r1, off_80DF510 // =off_80DF514 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
off_80DF510: .word off_80DF514
off_80DF514: .word sub_80DF520+1
	.word sub_80DF574+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80DF520:
	push {lr}
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#7]
	tst r0, r0
	beq loc_80DF534
	ldrb r0, [r5,#4]
	ldrb r1, [r5,#5]
	bl sprite_decompress
loc_80DF534:
	ldrb r1, [r5,#4]
	ldrb r2, [r5,#5]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DF520

	bl sub_8002F90 // () -> void
	ldrb r0, [r5,#6]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, off_80DF8F0 // =0x100 
	strh r0, [r5,#0x28]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80DF574:
	push {lr}
	ldr r1, off_80DF584 // =off_80DF588 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80DF584: .word off_80DF588
off_80DF588: .word sub_80DF5A0+1
	.word sub_80DF5A4+1
	.word sub_80DF66A+1
	.word sub_80DF6CE+1
	.word sub_80DF742+1
	.word sub_80DF7D6+1
.endfunc // sub_80DF574

.func
.thumb_func
sub_80DF5A0:
	push {lr}
	pop {pc}
.endfunc // sub_80DF5A0

.func
.thumb_func
sub_80DF5A4:
	push {lr}
	ldr r1, off_80DF5B4 // =off_80DF5B8 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80DF5B4: .word off_80DF5B8
off_80DF5B8: .word sub_80DF5C0+1
	.word sub_80DF626+1
.endfunc // sub_80DF5A4

.func
.thumb_func
sub_80DF5C0:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DF5F6
	mov r0, #4
	strb r0, [r5,#0xb]
	bl sub_800E2C0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0xa
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80DF8F4 // =0xffffa000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	mov r0, #0xa
	str r0, [r5,#0x20]
loc_80DF5F6:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80DF8F4 // =0xffffa000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF624
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80DF624:
	pop {r4,r6,pc}
.endfunc // sub_80DF5C0

.func
.thumb_func
sub_80DF626:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DF64C
	mov r1, #4
	strb r1, [r5,#0xb]
	bl sub_800E2C0
	ldr r1, dword_80DF8F8 // =0x60000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0x28 
	lsl r0, r0, #0x10
	mov r1, #7
	mul r0, r1
	ldr r1, dword_80DF8F8 // =0x60000 
	svc 6
	str r0, [r5,#0x20]
	b locret_80DF668
loc_80DF64C:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF668
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DF668:
	pop {pc}
.endfunc // sub_80DF626

.func
.thumb_func
sub_80DF66A:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DF69E
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #2
	strb r0, [r5,#0x10]
	ldrh r0, [r5,#0x36]
	strh r0, [r5,#0x30]
	ldrh r0, [r5,#0x3e]
	strh r0, [r5,#0x32]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x18
	lsl r3, r3, #0x10
	mov r4, #0xc
	bl sub_80E05F6
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	b locret_80DF6CC
loc_80DF69E:
	ldrh r1, [r5,#0x30]
	lsl r1, r1, #0x10
	ldr r2, [r5,#0x38]
	ldrh r3, [r5,#0x32]
	lsl r3, r3, #0x10
	mov r0, #3
	bl sub_801BDDE
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF6CC
	ldrh r0, [r5,#0x30]
	strh r0, [r5,#0x36]
	ldrh r0, [r5,#0x32]
	strh r0, [r5,#0x3e]
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DF6CC:
	pop {r4,pc}
.endfunc // sub_80DF66A

.func
.thumb_func
sub_80DF6CE:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DF6FE
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0xe
	strb r0, [r5,#0x10]
	ldr r4, dword_80DF8FC // =0x10006 
	mov r7, #0x60 
	add r7, r7, r5
	bl sub_80B8E30
	ldr r4, dword_80DF900 // =0x10005 
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80B8E30
	mov r0, #0x6a 
	bl sound_play // () -> void
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	b locret_80DF740
loc_80DF6FE:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80DF720
	mov r0, #0xa
	strh r0, [r5,#0x22]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldr r0, [r5,#0x60]
	bl sub_80B8E7C
	ldr r0, [r5,#0x64]
	bl sub_80B8E7C
	mov r0, #0x6a 
	bl sound_play // () -> void
loc_80DF720:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF740
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldr r0, [r5,#0x60]
	bl sub_80B8E58
	ldr r0, [r5,#0x64]
	bl sub_80B8E58
locret_80DF740:
	pop {r4,r7,pc}
.endfunc // sub_80DF6CE

.func
.thumb_func
sub_80DF742:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DF7A6
	mov r1, #4
	strb r1, [r5,#0xb]
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	mov r0, #0xa
	strh r0, [r5,#0x22]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0xf8
	bl sound_play // () -> void
	mov r0, #0xf9
	bl sound_play // () -> void
	mov r0, #0xb
	str r0, [r5,#0x68]
	ldr r4, dword_80DF904 // =0x1090b 
	mov r7, #0x60 
	add r7, r7, r5
	bl sub_80B8E30
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x5d 
	add r4, r4, r0
	bl sub_800E2C0
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldr r6, dword_80DF908 // =0x180000 
	add r2, r2, r6
	add r3, r3, r6
	bl sub_80E05F6
	ldrh r1, [r5,#0x20]
	strh r1, [r0,#0x20]
	b locret_80DF7D4
loc_80DF7A6:
	ldr r0, [r5,#0x68]
	sub r0, #1
	str r0, [r5,#0x68]
	cmp r0, #0
	bgt loc_80DF7BA
	mov r0, #0xf9
	bl sound_play // () -> void
	mov r0, #0xb
	str r0, [r5,#0x68]
loc_80DF7BA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF7D4
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	ldr r0, [r5,#0x60]
	bl sub_80B8E58
locret_80DF7D4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80DF742

.func
.thumb_func
sub_80DF7D6:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80DF802
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #2
	strb r0, [r5,#0x10]
	ldrh r0, [r5,#0x36]
	strh r0, [r5,#0x30]
	ldrh r0, [r5,#0x3e]
	strh r0, [r5,#0x32]
	bl sub_80DF8D2
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	mov r0, #0x6d 
	bl sound_play // () -> void
	mov r0, #8
	strh r0, [r5,#0x22]
	b locret_80DF846
loc_80DF802:
	ldrh r1, [r5,#0x30]
	lsl r1, r1, #0x10
	ldr r2, [r5,#0x38]
	ldrh r3, [r5,#0x32]
	lsl r3, r3, #0x10
	mov r0, #3
	bl sub_801BDDE
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80DF82E
	bl sub_80DF8D2
	mov r0, #8
	strh r0, [r5,#0x22]
	mov r0, #0x6d 
	bl sound_play // () -> void
loc_80DF82E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DF846
	ldrh r0, [r5,#0x30]
	strh r0, [r5,#0x36]
	ldrh r0, [r5,#0x32]
	strh r0, [r5,#0x3e]
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80DF846:
	pop {pc}
.endfunc // sub_80DF7D6

	push {lr}
	push {r0-r2,r5}
	mov r0, #0xd0
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DF874
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r6, [r0,#0x3c]
	str r5, [r0,#0x4c]
	strh r3, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
	push {r0,r5}
	add r5, r0, #0
	bl sub_80DF520
	pop {r0,r5}
locret_80DF874:
	pop {pc}
	tst r0, r0
	beq locret_80DF87E
	mov r1, #8
	str r1, [r0,#8]
locret_80DF87E:
	mov pc, lr
	tst r0, r0
	beq locret_80DF88A
	strb r1, [r0,#0x10]
	mov r1, #0xff
	strb r1, [r0,#0x11]
locret_80DF88A:
	mov pc, lr
	tst r0, r0
	beq locret_80DF898
	mov r1, #4
	strb r1, [r0,#9]
	mov r1, #0
	strh r1, [r0,#0xa]
locret_80DF898:
	mov pc, lr
	tst r0, r0
	beq locret_80DF8A6
	mov r1, #8
	strb r1, [r0,#9]
	mov r1, #0
	strh r1, [r0,#0xa]
locret_80DF8A6:
	mov pc, lr
	tst r0, r0
	beq locret_80DF8B4
	mov r1, #0xc
	strb r1, [r0,#9]
	mov r1, #0
	strh r1, [r0,#0xa]
locret_80DF8B4:
	mov pc, lr
	tst r0, r0
	beq locret_80DF8C2
	mov r1, #0x10
	strb r1, [r0,#9]
	mov r1, #0
	strh r1, [r0,#0xa]
locret_80DF8C2:
	mov pc, lr
	tst r0, r0
	beq locret_80DF8D0
	mov r1, #0x14
	strb r1, [r0,#9]
	mov r1, #0
	strh r1, [r0,#0xa]
locret_80DF8D0:
	mov pc, lr
.func
.thumb_func
sub_80DF8D2:
	push {r4,lr}
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	mov r0, #0x20 
	lsl r0, r0, #0x10
	add r3, r3, r0
	mov r0, #0x1f
	bl sub_801BDDE
	mov r4, #0xc
	bl sub_80E05F6
	pop {r4,pc}
	.byte 0, 0
off_80DF8F0: .word 0x100
dword_80DF8F4: .word 0xFFFFA000
dword_80DF8F8: .word 0x60000
dword_80DF8FC: .word 0x10006
dword_80DF900: .word 0x10005
dword_80DF904: .word 0x1090B
dword_80DF908: .word 0x180000
.endfunc // sub_80DF8D2

loc_80DF90C:
	push {lr}
	ldr r1, off_80DF920 // =off_80DF924 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80DF920: .word off_80DF924
off_80DF924: .word sub_80DF930+1
	.word sub_80DFA58+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DF930:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r1, #0x10
	mov r2, #0x56 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	ldr r2, [r5,#0x64]
	ldrh r0, [r2,#0x26]
	ldrh r1, [r2,#0x24]
	svc 6
	cmp r0, #2
	blt loc_80DF968
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	ldr r1, off_80DFA44 // =dword_80DFA48 
	ldrb r0, [r1,r0]
	cmp r0, #0xff
	beq loc_80DF968
	mov r1, #0x60 
	strb r0, [r5,r1]
loc_80DF968:
	ldr r0, off_80DF9F0 // =dword_80DF9F4 
	mov r1, #0x60 
	ldrb r1, [r5,r1]
	ldrb r0, [r0,r1]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80DF930

	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	ldr r1, off_80DFA0C // =dword_80DFA10 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x13]
	mov r0, #7
	strb r0, [r5,#0x12]
	bl sub_800E29C // () -> void
	ldr r0, off_80DF9FC // =dword_80DFA00 
	mov r1, #0x61 
	ldrb r1, [r5,r1]
	lsl r1, r1, #2
	ldr r0, [r0,r1]
	str r0, [r5,#0x40]
	ldr r0, off_80DFA20 // =dword_80DFA24 
	mov r1, #0x60 
	ldrb r1, [r5,r1]
	mov r2, #0
	ldrb r2, [r0,r1]
	strh r2, [r5,#0x2c]
	bl sub_8019892
	tst r0, r0
	bne loc_80DF9BE
	bl object_freeMemory
	b locret_80DF9EC
loc_80DF9BE:
	mov r1, #4
	mov r2, #5
	mov r3, #2
	bl sub_8019FB4
	ldr r0, off_80DFA2C // =dword_80DFA30 
	mov r1, #0x60 
	ldrb r1, [r5,r1]
	lsl r1, r1, #2
	ldr r0, [r0,r1]
	ldr r1, [r5,#0x54]
	ldr r2, [r1,#0x30]
	orr r0, r2
	str r0, [r1,#0x30]
	mov r0, #0xff
	bl sub_801A140
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DFA58
locret_80DF9EC:
	pop {pc}
	.byte 0, 0
off_80DF9F0: .word dword_80DF9F4
dword_80DF9F4: .word 0x3020100, 0xFFFFFF04
off_80DF9FC: .word dword_80DFA00
dword_80DFA00: .word 0xFFFE8000, 0xFFFE0000, 0xFFFD8000
off_80DFA0C: .word dword_80DFA10
dword_80DFA10: .word 0x1030201, 0x2010302, 0x3020103, 0x1030201
off_80DFA20: .word dword_80DFA24
dword_80DFA24: .word 0x3214000A, 0x46
off_80DFA2C: .word dword_80DFA30
dword_80DFA30: .word 0x2, 0x8, 0x10, 0x20, 0x400
off_80DFA44: .word dword_80DFA48
dword_80DFA48: .word 0x1FFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
.func
.thumb_func
sub_80DFA58:
	push {lr}
	bl sub_801A00E
	.hword 0xF73A
	.word 0xF72AFB39, 0x4200FB94, 0x6D68D111, 0x42006F00, 0xF000D002
	.word 0xE00AF885, 0xFB0EF72A, 0x4907D10D, 0x58097A68, 0x470846FE
	.word 0xFAC6F73A, 0xF73AE005, 0xF73AFAF1, 0x2008FAC1, 0xBD0060A8
	.word off_80DFAA0
off_80DFAA0: .word sub_80DFAA8+1
	.word sub_80DFACE+1
.endfunc // sub_80DFA58

.func
.thumb_func
sub_80DFAA8:
	push {lr}
	bl sub_80DFB2C
	tst r0, r0
	bne loc_80DFAC4
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	b locret_80DFACC
loc_80DFAC4:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80DFACC:
	pop {pc}
.endfunc // sub_80DFAA8

.func
.thumb_func
sub_80DFACE:
	push {lr}
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80DFACE

.func
.thumb_func
sub_80DFAD6:
	push {r4-r7,lr}
	push {r0-r2,r5}
	mov r0, #0xd1
	mov r1, #0
	mov r2, #0
	mov r3, #0
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	tst r0, r0
	beq locret_80DFB1E
	push {r1-r3}
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r1, #0
	strb r1, [r0,#0xe]
	pop {r1-r3}
	mov r4, #0x60 
	strb r1, [r0,r4]
	cmp r1, #3
	beq loc_80DFB0A
	cmp r1, #4
	beq loc_80DFB0E
	b loc_80DFB10
loc_80DFB0A:
	mov r2, #0
	b loc_80DFB10
loc_80DFB0E:
	mov r2, #1
loc_80DFB10:
	mov r4, #0x61 
	strb r2, [r0,r4]
	str r3, [r0,#0x64]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DFB1E:
	pop {r4-r7,pc}
.endfunc // sub_80DFAD6

	push {r5,lr}
	cmp r0, #0
	beq locret_80DFB2A
	mov r1, #8
	str r1, [r0,#8]
locret_80DFB2A:
	pop {r5,pc}
.func
.thumb_func
sub_80DFB2C:
	push {r4-r7,lr}
	ldr r0, [r5,#0x34]
	ldr r1, dword_80DFC2C // =0xff740000 
	cmp r1, r0
	bge loc_80DFB3A
	mov r0, #0
	b locret_80DFB54
loc_80DFB3A:
	mov r0, #0x60 
	ldrb r0, [r5,r0]
	cmp r0, #3
	beq loc_80DFB48
	cmp r0, #4
	beq loc_80DFB48
	b loc_80DFB52
loc_80DFB48:
	bl sub_80DFB56
	mov r0, #0xc3
	bl sound_play // () -> void
loc_80DFB52:
	mov r0, #1
locret_80DFB54:
	pop {r4-r7,pc}
.endfunc // sub_80DFB2C

.func
.thumb_func
sub_80DFB56:
	push {r4-r7,lr}
	mov r0, #2
	mov r1, #2
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80DFB78 // =0x405ff81 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80DFB7C // =0x2 
	bl sub_80C536A
	ldr r0, dword_80DFB78 // =0x405ff81 
	mov r1, #0
	mov r3, #0
	mov r4, #1
	bl sub_80E2FE8
	pop {r4-r7,pc}
dword_80DFB78: .word 0x405FF81
dword_80DFB7C: .word 0x2
.endfunc // sub_80DFB56

.func
.thumb_func
sub_80DFB80:
	push {r4-r7,lr}
	mov r0, #0x60 
	ldrb r0, [r5,r0]
	lsl r0, r0, #2
	ldr r1, off_80DFBBC // =dword_80DFBC0 
	ldr r0, [r1,r0]
	ldr r1, [r5,#0x54]
	ldr r1, [r1,#0x70]
	and r0, r1
	beq loc_80DFBB4
	mov r0, #0x60 
	ldrb r0, [r5,r0]
	lsl r0, r0, #1
	ldr r1, off_80DFBD4 // =dword_80DFBD8 
	ldrh r0, [r1,r0]
	ldr r1, [r5,#0x4c]
	mov r2, #0x60 
	ldrh r2, [r1,r2]
	mov r3, #0x62 
	ldrh r3, [r1,r3]
	add r0, r0, r2
	cmp r0, r3
	ble loc_80DFBB0
	add r0, r3, #0
loc_80DFBB0:
	mov r2, #0x60 
	strh r0, [r1,r2]
loc_80DFBB4:
	bl sub_80DFBE4
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80DFBBC: .word dword_80DFBC0
dword_80DFBC0: .word 0x1000, 0x1000, 0x1000, 0x2000, 0x2000
off_80DFBD4: .word dword_80DFBD8
dword_80DFBD8: .word 0x2, 0x2, 0x0
.endfunc // sub_80DFB80

.func
.thumb_func
sub_80DFBE4:
	push {r4-r7,lr}
	ldr r0, dword_80DFC30 // =0x2000 
	ldr r1, [r5,#0x54]
	ldr r1, [r1,#0x70]
	and r0, r1
	beq locret_80DFC10
	mov r0, #0x60 
	ldrb r0, [r5,r0]
	lsl r0, r0, #2
	ldr r1, off_80DFC14 // =dword_80DFC18 
	ldr r4, [r1,r0]
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	ldr r0, dword_80DFC34 // =0x180000 
	add r3, r3, r0
	bl sub_80E05F6
	mov r0, #0xa3
	add r0, #0xff
	bl sound_play // () -> void
locret_80DFC10:
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80DFC14: .word dword_80DFC18
dword_80DFC18: .word 0x21, 0x21, 0x21, 0x0, 0x0
dword_80DFC2C: .word 0xFF740000
dword_80DFC30: .word 0x2000
dword_80DFC34: .word 0x180000
.endfunc // sub_80DFBE4

loc_80DFC38:
	push {lr}
	ldr r1, off_80DFC48 // =off_80DFC4C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80DFC48: .word off_80DFC4C
off_80DFC4C: .word sub_80DFC58+1
	.word sub_80DFC8C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DFC58:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	bl sub_8019892
	tst r0, r0
	bne loc_80DFC70
	bl object_freeMemory
	b locret_80DFC8A
loc_80DFC70:
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_8019FB4
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80DFC8C
locret_80DFC8A:
	pop {pc}
.endfunc // sub_80DFC58

.func
.thumb_func
sub_80DFC8C:
	push {lr}
	bl sub_80DFDC8
	tst r0, r0
	beq loc_80DFCC0
	bl sub_801A00E
	bl sub_801A0D4
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80DFCC0
	bl sub_80DFDD6
	bl battle_isTimeStop
	bne locret_80DFCCC
	ldr r1, off_80DFCD0 // =off_80DFCD4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801A018
	b locret_80DFCCC
loc_80DFCC0:
	bl sub_801A074 // () -> void
	bl sub_801A018
.endfunc // sub_80DFC8C

	mov r0, #8
	str r0, [r5,#8]
locret_80DFCCC:
	pop {pc}
	.byte 0, 0
off_80DFCD0: .word off_80DFCD4
off_80DFCD4: .word sub_80DFCE0+1
	.word sub_80DFD38+1
	.word sub_80DFD56+1
.func
.thumb_func
sub_80DFCE0:
	push {lr}
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x30]
	ldr r2, dword_80DFE34 // =0x3000 
	bic r1, r2
	str r1, [r0,#0x30]
	bl sub_80DFDAC
	ldr r0, [r5,#0x60]
	cmp r0, #0
	beq loc_80DFD00
	cmp r0, #1
	beq loc_80DFD06
	cmp r0, #2
	beq loc_80DFD1C
	b loc_80DFD32
loc_80DFD00:
	bl sub_801A074 // () -> void
	b loc_80DFD32
loc_80DFD06:
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x30]
	ldr r2, dword_80DFE38 // =0x1000 
	orr r1, r2
	str r1, [r0,#0x30]
	mov r0, #0
	str r0, [r5,#0x60]
	b loc_80DFD32
loc_80DFD1C:
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x30]
	ldr r2, dword_80DFE3C // =0x2000 
	orr r1, r2
	str r1, [r0,#0x30]
	mov r0, #0
	str r0, [r5,#0x60]
	b loc_80DFD32
loc_80DFD32:
	bl object_highlightCurrentCollisionPanels
	pop {pc}
.endfunc // sub_80DFCE0

.func
.thumb_func
sub_80DFD38:
	push {lr}
	mov r0, #0
	str r0, [r5,#0x60]
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x30]
	ldr r2, dword_80DFE38 // =0x1000 
	eor r1, r2
	str r1, [r0,#0x30]
	bl sub_801A074 // () -> void
	mov r0, #0
	strb r0, [r5,#9]
	bl object_highlightCurrentCollisionPanels
	pop {pc}
.endfunc // sub_80DFD38

.func
.thumb_func
sub_80DFD56:
	push {lr}
	mov r0, #0
	str r0, [r5,#0x60]
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x30]
	ldr r2, dword_80DFE3C // =0x2000 
	eor r1, r2
	str r1, [r0,#0x30]
	bl sub_801A074 // () -> void
	mov r0, #0
	strb r0, [r5,#9]
	bl object_highlightCurrentCollisionPanels
	pop {pc}
.endfunc // sub_80DFD56

.func
.thumb_func
sub_80DFD74:
	push {r4-r7,lr}
	push {r5}
	mov r0, #0xd2
	mov r1, #0
	mov r2, #0
	mov r3, #0
	bl object_spawnType3
	add r0, r5, #0
	pop {r5}
	tst r0, r0
	beq locret_80DFD9E
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r1, #0
	strb r1, [r0,#0xe]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80DFD9E:
	pop {r4-r7,pc}
.endfunc // sub_80DFD74

	push {r5,lr}
	cmp r0, #0
	beq locret_80DFDAA
	mov r1, #8
	str r1, [r0,#8]
locret_80DFDAA:
	pop {r5,pc}
.func
.thumb_func
sub_80DFDAC:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x4c]
	ldrb r2, [r1,#0x12]
	add r2, r2, r0
	strb r2, [r5,#0x12]
	ldrb r2, [r1,#0x13]
	strb r2, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	pop {pc}
.endfunc // sub_80DFDAC

.func
.thumb_func
sub_80DFDC8:
	push {r4-r7,lr}
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x24]
	cmp r0, #0
	bne locret_80DFDD4
	mov r0, #0
locret_80DFDD4:
	pop {r4-r7,pc}
.endfunc // sub_80DFDC8

.func
.thumb_func
sub_80DFDD6:
	push {r4-r7,lr}
	ldr r0, [r5,#0x4c]
	mov r1, #0x74 
	mov r2, #0
	strb r2, [r0,r1]
	ldr r1, [r5,#0x54]
	ldr r1, [r1,#0x70]
	mov r0, #0
loc_80DFDE6:
	ldr r2, off_80DFE04 // =byte_80DFE08 
	lsl r3, r0, #2
	ldr r2, [r2,r3]
	tst r1, r2
	bne loc_80DFDF8
	add r0, #1
	cmp r0, #5
	beq locret_80DFE00
	b loc_80DFDE6
loc_80DFDF8:
	add r0, #1
	ldr r1, [r5,#0x4c]
	mov r2, #0x74 
	strb r0, [r1,r2]
locret_80DFE00:
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80DFE04: .word byte_80DFE08
byte_80DFE08: .byte 0x2, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0
	.byte 0x0, 0x0, 0x4, 0x0, 0x0
.endfunc // sub_80DFDD6

.func
.thumb_func
sub_80DFE1C:
	push {r4-r7,lr}
	tst r0, r0
	beq locret_80DFE26
	mov r1, #1
	str r1, [r0,#0x60]
locret_80DFE26:
	pop {r4-r7,pc}
.endfunc // sub_80DFE1C

.func
.thumb_func
sub_80DFE28:
	push {r4-r7,lr}
	tst r0, r0
	beq locret_80DFE32
	mov r1, #2
	str r1, [r0,#0x60]
locret_80DFE32:
	pop {r4-r7,pc}
dword_80DFE34: .word 0x3000
dword_80DFE38: .word 0x1000
dword_80DFE3C: .word 0x2000
.endfunc // sub_80DFE28

loc_80DFE40:
	push {lr}
	ldr r1, off_80DFE54 // =off_80DFE58 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80DFE54: .word off_80DFE58
off_80DFE58: .word sub_80DFE64+1
	.word sub_80DFEA8+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DFE64:
	push {r7,lr}
	bl sub_800E29C // () -> void
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
	bl sub_8019892
	add r7, r0, #0
	bne loc_80DFE7C
	bl object_freeMemory
	pop {r7,pc}
loc_80DFE7C:
	mov r3, #3
	ldrb r1, [r5,#6]
	cmp r1, #0
	beq loc_80DFE8C
	mov r3, #1
	cmp r1, #1
	beq loc_80DFE8C
	mov r3, #0
loc_80DFE8C:
	mov r1, #0xa
	mov r2, #5
	bl sub_8019FB4
	mov r0, #0
	bl sub_801A140
	bl sub_801A074 // () -> void
	bl sub_801A018
.endfunc // sub_80DFE64

	mov r0, #4
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80DFEA8:
	push {r4,r7,lr}
	bl sub_801A00E
	.hword 0xF73A
	.word 0x7828F911, 0x42082110, 0xF72AD103, 0x4200F968, 0x4906D107
	.word 0x58097A68, 0x470846FE, 0xF8A4F73A, 0xF73ABD90, 0x2008F8CF
	.word 0xBD9060A8
	.word off_80DFEE0
off_80DFEE0: .word sub_80DFEE8+1
	.word loc_80DFF64+1
.endfunc // sub_80DFEA8

.func
.thumb_func
sub_80DFEE8:
	push {lr}
	ldrh r0, [r5,#0x20]
	mov r1, #4
	tst r0, r1
	bne loc_80DFEFA
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
loc_80DFEFA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80DFF82
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	beq loc_80DFF18
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
loc_80DFF18:
	mov r1, #0x10
	mov r2, #0x26 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#4]
	cmp r0, #0
	beq loc_80DFF50
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_8109794
loc_80DFF50:
	mov r0, #0xb9
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
	.word 0xF800000
loc_80DFF64:
	push {lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80DFF74
	mov r0, #1
	strb r0, [r5,#0xa]
	bl sub_801A074 // () -> void
loc_80DFF74:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80DFF82
	mov r0, #8
	str r0, [r5,#8]
locret_80DFF82:
	pop {pc}
.endfunc // sub_80DFEE8

.func
.thumb_func
sub_80DFF84:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xd3
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80DFFA0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80DFFA0:
	pop {pc}
.endfunc // sub_80DFF84

	push {lr}
	bl sub_80DFF84
	cmp r0, #0
	beq locret_80DFFB4
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80DFFB4:
	pop {pc}
	.balign 4, 0x00
loc_80DFFB8:
	push {lr}
	ldr r1, off_80DFFCC // =off_80DFFD0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80DFFCC: .word off_80DFFD0
off_80DFFD0: .word sub_80DFFDC+1
	.word sub_80E002C+1
	.word sub_8016C8A+1
.func
.thumb_func
sub_80DFFDC:
	push {lr}
	ldrb r0, [r5,#0x12]
	strb r0, [r5,#0x14]
	ldrb r1, [r5,#0x13]
	strb r1, [r5,#0x15]
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r1, #0x50 
	lsl r1, r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	mov r0, #0xa0
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	ldr r0, dword_80E0388 // =0x100d 
	ldr r1, dword_80E038C // =0x4050100 
	bl sub_8011504
.endfunc // sub_80DFFDC

	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_801A074 // () -> void
	bl sub_801A018
	mov r0, #0x41 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E002C
	pop {pc}
.func
.thumb_func
sub_80E002C:
	push {r4,r7,lr}
	ldr r7, [r5,#0x54]
	bl sub_801A00E
	.word 0x42096F39, 0xF73AD006, 0x6F28F81B, 0x67283001, 0x67682008
	.word 0x28007A68, 0x280CD00B, 0x7878D009, 0xD1062800, 0x38016F68
	.word 0xDC026768, 0xF73A2001, 0x6D68F80B, 0x490C8944, 0x58097A68
	.word 0x470846FE, 0x89406D68, 0xD00742A0, 0x67282000, 0x280C7A68
	.word 0x2001D002, 0xFFF8F739, 0x7A906D6A, 0xF72C7AD1, 0xF739FDA1
	.word 0xBD90FFBF
	.word off_80E00A0
off_80E00A0: .word sub_80E00B0+1
	.word sub_80E0118+1
	.word sub_80E01EE+1
	.word sub_80E0226+1
.endfunc // sub_80E002C

.func
.thumb_func
sub_80E00B0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E00CE
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80E0390 // =0x40000 
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r1, dword_80E0394 // =0xfff80000 
	str r1, [r5,#0x48]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E00CE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80E0106
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x12]
	str r0, [r5,#0x68]
	ldrb r1, [r5,#0x13]
	str r1, [r5,#0x6c]
	mov r0, #0
	str r0, [r5,#0x78]
	str r0, [r5,#0x7c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80E02AC
	mov r1, #4
	tst r0, r0
	beq loc_80E00FE
	mov r1, #8
loc_80E00FE:
	strb r1, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
loc_80E0106:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	pop {pc}
.endfunc // sub_80E00B0

.func
.thumb_func
sub_80E0118:
	push {r7,lr}
	ldr r2, [r5,#0x54]
	ldrb r0, [r2,#0xa]
	ldrb r1, [r2,#0xb]
	bl object_isPanelSolid
.endfunc // sub_80E0118

	beq loc_80E01E0
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E0152
	ldr r0, [r5,#0x78]
	ldr r1, [r5,#0x7c]
	tst r1, r1
	bne loc_80E013E
	bl sub_80E02F4
	str r2, [r5,#0x78]
	str r3, [r5,#0x7c]
	b loc_80E0142
loc_80E013E:
	bl sub_80E0376
loc_80E0142:
	str r0, [r5,#0x60]
	str r1, [r5,#0x64]
	bl sub_801A04C
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E0152:
	mov r7, #6
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	lsr r1, r7, #1
	cmp r0, r1
	bne loc_80E0172
	push {r0}
	ldr r0, [r5,#0x60]
	ldr r1, [r5,#0x64]
	bl sub_800E258
	ldr r2, [r5,#0x54]
	strb r0, [r2,#0xa]
	strb r1, [r2,#0xb]
	pop {r0}
loc_80E0172:
	cmp r0, r7
	bne loc_80E01BA
	ldrb r0, [r5,#0x12]
	str r0, [r5,#0x68]
	ldrb r1, [r5,#0x13]
	str r1, [r5,#0x6c]
	ldr r0, [r5,#0x78]
	ldr r1, [r5,#0x7c]
	tst r1, r1
	bne loc_80E0190
	bl sub_80E02F4
	str r2, [r5,#0x78]
	str r3, [r5,#0x7c]
	b loc_80E0194
loc_80E0190:
	bl sub_80E0376
loc_80E0194:
	str r0, [r5,#0x60]
	str r1, [r5,#0x64]
	bl sub_801A04C
	mov r0, #0
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80E02AC
	tst r0, r0
	beq loc_80E01BA
	bl sub_800E29C // () -> void
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r7,pc}
loc_80E01BA:
	ldr r0, [r5,#0x68]
	ldr r1, [r5,#0x6c]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r2, [r5,#0x60]
	ldr r3, [r5,#0x64]
	ldrh r6, [r5,#0x20]
	bl sub_80E0348
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	bl sub_800E2AC
	ldr r2, [r5,#0x54]
	ldrb r0, [r2,#0xa]
	ldrb r1, [r2,#0xb]
	bl object_isValidPanel
	bne locret_80E01EC
loc_80E01E0:
	bl sub_801A074 // () -> void
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E01EC:
	pop {r7,pc}
.func
.thumb_func
sub_80E01EE:
	push {lr}
	ldr r2, [r5,#0x54]
	ldrb r0, [r2,#0xa]
	ldrb r1, [r2,#0xb]
	bl object_isPanelSolid
.endfunc // sub_80E01EE

	bne loc_80E020A
	bl sub_801A074 // () -> void
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
loc_80E020A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80E02AC
	tst r0, r0
	beq loc_80E021C
	ldr r0, [r5,#0x70]
	cmp r0, #3
	blt locret_80E0224
loc_80E021C:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E0224:
	pop {pc}
.func
.thumb_func
sub_80E0226:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E023A
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #5
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E023A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E0246
	mov r0, #8
	str r0, [r5,#8]
locret_80E0246:
	pop {pc}
.endfunc // sub_80E0226

.func
.thumb_func
sub_80E0248:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0xd4
	bl object_spawnType3
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E025C
	bl sub_801155A
locret_80E025C:
	pop {pc}
.endfunc // sub_80E0248

.func
.thumb_func
sub_80E025E:
	push {r4,lr}
	sub sp, sp, #0x14
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	str r4, [sp,#0xc]
	str r6, [sp,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r0, [sp]
	ldr r1, [sp,#4]
	ldrb r3, [r5,#0x16]
	lsl r3, r3, #3
	ldr r2, off_80E0298 // =dword_80E029C 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D0BC
.endfunc // sub_80E025E

	tst r0, r0
	beq loc_80E0294
	ldr r2, [sp,#8]
	ldr r4, [sp,#0xc]
	ldr r6, [sp,#0x10]
	bl sub_80E0248
loc_80E0294:
	add sp, sp, #0x14
	pop {r4,pc}
off_80E0298: .word dword_80E029C
dword_80E029C: .word 0x20, 0x0, 0x0
	.word 0x20
.func
.thumb_func
sub_80E02AC:
	push {r5-r7,lr}
	add r6, r0, #0
	add r7, r1, #0
	bl object_getPanelParameters
.endfunc // sub_80E02AC

	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80E02E8 // =dword_80E02EC 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80E02E2
	add r0, r6, #0
	add r1, r7, #0
	ldrb r2, [r5,#0x16]
	mov r3, #1
	eor r2, r3
	bl sub_800AE54
	add r5, r0, #0
	beq loc_80E02E2
	bl object_getFlag // () -> int
	mov r1, #6
	tst r0, r1
	bne loc_80E02E2
	mov r0, #1
	pop {r5-r7,pc}
loc_80E02E2:
	mov r0, #0
	pop {r5-r7,pc}
	.balign 4, 0x00
off_80E02E8: .word dword_80E02EC
dword_80E02EC: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80E02F4:
	push {r4,r6,r7,lr}
	mov r4, #0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	add r6, r0, #0
	add r7, r1, #0
	bl sub_80E02AC
.endfunc // sub_80E02F4

	tst r0, r0
	bne loc_80E0332
	add r0, r6, #0
	sub r1, r7, #1
	bl sub_80E02AC
	tst r0, r0
	beq loc_80E0322
	mov r4, #1
	neg r4, r4
	sub r7, #1
	b loc_80E0332
loc_80E0322:
	add r0, r6, #0
	add r1, r7, #1
	bl sub_80E02AC
	tst r0, r0
	beq loc_80E0332
	add r7, #1
	mov r4, #1
loc_80E0332:
	add r0, r6, #0
	add r1, r7, #0
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	pop {r0,r1}
	add r3, r4, #0
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E0348:
	push {lr}
	push {r0,r1}
	sub r2, r2, r0
	sub r3, r3, r1
	mul r2, r6
	mul r3, r6
	push {r3}
	add r0, r2, #0
	add r1, r7, #0
	svc 6
	pop {r3}
	push {r0}
	add r0, r3, #0
	add r1, r7, #0
	svc 6
	add r1, r0, #0
	pop {r0}
	add r2, r0, #0
	add r3, r1, #0
	pop {r0,r1}
	add r0, r0, r2
	add r1, r1, r3
	pop {pc}
.endfunc // sub_80E0348

.func
.thumb_func
sub_80E0376:
	push {lr}
	ldrb r2, [r5,#0x12]
	add r0, r0, r2
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	pop {pc}
	.balign 4, 0x00
dword_80E0388: .word 0x100D
dword_80E038C: .word 0x4050100
dword_80E0390: .word 0x40000
dword_80E0394: .word 0xFFF80000
dword_80E0398: .word 0x14, 0x214, 0x10214, 0x314, 0x2D0C, 0xA14, 0x120C
	.word 0x514, 0x20514, 0x30514, 0x40514, 0x50514, 0x10514, 0x90514
	.word 0x114, 0x614, 0x10414, 0x10514, 0xD14, 0x10D14, 0x20D14
	.word 0x30D14, 0x140C, 0x1140C, 0x2140C, 0x500140C, 0x501140C, 0x150C
off_80E0408: .word unk_200150C
	.word 0x14, 0x714, 0x1A0C, 0xF14, 0x414, 0x1114, 0x1001214
	.word 0x1000014, 0x3140C, 0xF10, 0x140C, 0x10B0514, 0xC0C08, 0x2310
	.word 0x150D08, 0x190D08, 0x601140C, 0x50C, 0x2710, 0xE14, 0x1B14
	.word 0xA0D04, 0x1150C, 0x2C10, 0x2F10, 0x12F10, 0x22F10, 0x32F10
	.word 0x3810, 0x13810, 0x1130C, 0x801130C, 0x2000414, 0x1050C, 0x2050C
	.word 0x3050C, 0x101280C, 0x14, 0x3C10, 0x280C, 0x1414, 0x70514
	.word 0x1314, 0xC0514, 0x4510, 0x2000014, 0x10521408, 0x23810, 0x33810
	.word 0x814, 0x20814, 0x4810, 0x180A08, 0x4110, 0x6010514, 0x2610
	.word 0xC1904, 0x44510, 0x80514, 0x12710, 0x170C, 0x1E14, 0x1F14
	.word 0x1031514, 0x3C0C, 0x1E0A08, 0x4110, 0xA10, 0xB10, 0x52F10
	.word 0x5910, 0x600140C, 0x401140C, 0x400140C, 0x403140C, 0x1414, 0x11E14
	.word 0x1000F14, 0x14
.endfunc // sub_80E0376

loc_80E0548:
	push {lr}
	ldr r1, off_80E0558 // =off_80E055C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E0558: .word off_80E055C
off_80E055C: .word sub_80E0568+1
	.word sub_80E05C4+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E0568:
	push {r7,lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r7, off_80E0634 // =dword_80E0398 
	add r7, r7, r0
	ldrb r1, [r7]
	ldrb r2, [r7,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E0568

	bl sub_8002F90 // () -> void
	ldrb r0, [r7,#2]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	ldrb r0, [r7,#3]
	ldrb r1, [r5,#6]
	add r0, r0, r1
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#5]
	bl sub_8002F5C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#7]
	tst r0, r0
	beq loc_80E05BA
	mov r0, #0
	bl sub_8002E14
loc_80E05BA:
	bl sub_80E0616
	mov r0, #4
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80E05C4:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	beq loc_80E05E4
	bl sub_80E0616
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq loc_80E05F0
	mov r0, #0x20 
	ldrsh r0, [r5,r0]
	tst r0, r0
	bgt loc_80E05F0
loc_80E05E4:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
loc_80E05F0:
	bl sprite_update
.endfunc // sub_80E05C4

	pop {pc}
.func
.thumb_func
sub_80E05F6:
	push {r5,lr}
	mov r0, #0
	bl object_spawnType4
	add r0, r5, #0
	pop {r5,pc}
.endfunc // sub_80E05F6

	push {r4-r7,lr}
	tst r0, r0
	beq locret_80E060C
	mov r1, #1
	strh r1, [r0,#0x20]
locret_80E060C:
	pop {r4-r7,pc}
	mov r1, #1
	str r1, [r0,#0x60]
	str r5, [r0,#0x4c]
	mov pc, lr
.func
.thumb_func
sub_80E0616:
	ldr r0, [r5,#0x60]
	cmp r0, #0
	beq locret_80E0630
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
locret_80E0630:
	mov pc, lr
	.balign 4, 0x00
off_80E0634: .word dword_80E0398
.endfunc // sub_80E0616

loc_80E0638:
	push {lr}
	ldr r1, off_80E0648 // =off_80E064C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E0648: .word off_80E064C
off_80E064C: .word sub_80E0654+1
	.word sub_80E0668+1
.func
.thumb_func
sub_80E0654:
	push {lr}
	ldrb r0, [r5]
	mov r1, #8
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E0668
	pop {pc}
.endfunc // sub_80E0654

.func
.thumb_func
sub_80E0668:
	push {lr}
	ldr r1, off_80E0678 // =off_80E067C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E0678: .word off_80E067C
off_80E067C: .word sub_80E0684+1
	.word sub_80E06E0+1
.endfunc // sub_80E0668

.func
.thumb_func
sub_80E0684:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E06C8
	mov r0, #0x10
	bl sub_8001382
	bl get_802D246 // () -> int
	mov r2, r10
	ldr r2, [r2,#0x18]
	ldr r1, off_80E070C // =0x400 
	tst r0, r1
	beq loc_80E06AC
	mov r0, #0
	ldrb r1, [r2,#0x1a]
	cmp r1, #1
	ble loc_80E06B8
	mov r0, #8
	b loc_80E06B8
loc_80E06AC:
	mov r0, #0
	ldr r1, [r2,#0x3c]
	ldrb r2, [r1,#5]
	cmp r2, #2
	blt loc_80E06B8
	mov r0, #8
loc_80E06B8:
	mov r1, #0x10
	bl engine_setScreeneffect // (int a1, int a2) -> void
	mov r0, #1
	ldr r1, off_80E06DC // =byte_2036740 
	strb r0, [r1]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E06C8:
	bl engine_isScreeneffectAnimating // () -> zf
	tst r0, r0
	bne locret_80E06DA
	mov r0, #1
	bl sub_8001382
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E06DA:
	pop {pc}
off_80E06DC: .word byte_2036740
.endfunc // sub_80E0684

.func
.thumb_func
sub_80E06E0:
	push {lr}
	mov r0, #0
	bl sub_800AA92
	tst r0, r0
	bne locret_80E06F6
	mov r0, #2
	bl sub_8001382
	bl object_freeMemory
locret_80E06F6:
	pop {pc}
.endfunc // sub_80E06E0

.func
.thumb_func
sub_80E06F8:
	push {r4,r5,lr}
	mov r0, #2
	bl object_spawnType4
	ldrb r0, [r5]
	mov r1, #4
	orr r0, r1
	strb r0, [r5]
	add r0, r5, #0
	pop {r4,r5,pc}
off_80E070C: .word 0x400
.endfunc // sub_80E06F8

loc_80E0710:
	push {lr}
	ldr r1, off_80E0720 // =off_80E0724 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E0720: .word off_80E0724
off_80E0724: .word sub_800B916+1
	.word sub_80E0730+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E0730:
	push {lr}
	ldr r1, off_80E0740 // =off_80E0744 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E0740: .word off_80E0744
off_80E0744: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E0754+1
	.word sub_800BC88+1
.endfunc // sub_80E0730

.func
.thumb_func
sub_80E0754:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E07B8
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80E0784
	bl sub_800D4C2
	beq loc_80E0782
	ldrb r4, [r5,#0x16]
	ldr r6, [r5,#0x2c]
	ldrh r2, [r5,#0x32]
	add r6, r6, r2
	ldrb r2, [r5,#0xe]
	bl sub_80C6548
	tst r0, r0
	beq loc_80E0782
	ldrb r3, [r0]
	mov r4, #0x10
	orr r3, r4
	strb r3, [r0]
loc_80E0782:
	b loc_80E07B0
loc_80E0784:
	bl sub_800D58C
	beq loc_80E07B0
	ldrb r4, [r5,#0x16]
	ldr r6, [r5,#0x2c]
	ldrh r2, [r5,#0x32]
	add r6, r6, r2
	mov r1, #1
	ldrb r2, [r5,#0xe]
loc_80E0796:
	push {r0-r2}
	bl sub_80C6548
	tst r0, r0
	beq loc_80E07A8
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
loc_80E07A8:
	pop {r0-r2}
	add r1, #1
	cmp r1, #3
	ble loc_80E0796
loc_80E07B0:
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E07B8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E07C8
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E07C8:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
	.word dword_80E07D0
dword_80E07D0: .word 0x0
	.word 0x20, 0x20, 0x0
.endfunc // sub_80E0754

.func
.thumb_func
sub_80E07E0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #3
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E0800
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E0800:
	pop {pc}
	.balign 4, 0x00
off_80E0804: .word 0x514
	.byte 0x14
	.byte  5
	.byte  2
	.byte  0
	.byte 0x14
	.byte  5
	.byte  3
	.byte  0
	.byte 0x14
	.byte  5
	.byte  4
	.byte  0
	.byte 0x14
	.byte  5
	.byte  5
	.byte  0
	.byte 0x14
	.byte  4
	.byte  0
	.byte  0
	.byte 0x14
	.byte  5
	.byte  8
	.byte  0
	.byte 0x14
	.byte  1
	.byte  0
	.byte  0
	.byte 0x14
	.byte  6
	.byte  0
	.byte  0
	.byte 0x14
	.byte 0xC
	.byte  0
	.byte  0
	.byte 0x14
	.byte  5
	.byte  1
	.byte  0
	.byte 0x14
	.byte  0
	.byte  0
	.byte  0
	.byte 0x14
	.byte  4
	.byte  0
	.byte  2
	.byte 0x14
	.byte  7
	.byte  1
	.byte  0
	.byte 0x14
	.byte 0x18
	.byte  0
byte_80E083F: .byte 0x0, 0x14, 0x18, 0x0, 0x0
.endfunc // sub_80E07E0

loc_80E0844:
	push {lr}
	ldr r1, off_80E0854 // =off_80E0858 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E0854: .word off_80E0858
off_80E0858: .word sub_80E0864+1
	.word sub_80E08A6+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E0864:
	push {r7,lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r7, off_80E08DC // =off_80E0804 
	add r7, r7, r0
	ldrb r1, [r7]
	ldrb r2, [r7,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E0864

	bl sub_8002F90 // () -> void
	ldrb r0, [r7,#2]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	ldrb r0, [r7,#3]
	bl sprite_setPallete // (int pallete) -> void
	bl sprite_update
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	pop {r7,pc}
.func
.thumb_func
sub_80E08A6:
	push {lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq loc_80E08BE
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
loc_80E08BE:
	bl sprite_update
.endfunc // sub_80E08A6

	pop {pc}
.func
.thumb_func
sub_80E08C4:
	push {lr}
	push {r5}
	mov r0, #4
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E08DA
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
locret_80E08DA:
	pop {pc}
off_80E08DC: .word off_80E0804
.endfunc // sub_80E08C4

locret_80E08E0:
	mov pc, lr
	.balign 4, 0x00
dword_80E08E4: .word 0xB14, 0x8000, 0x914, 0x2000, 0x10, 0x4000
loc_80E08FC:
	push {lr}
	ldr r1, off_80E090C // =off_80E0910 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E090C: .word off_80E0910
off_80E0910: .word sub_80E091C+1
	.word sub_80E0954+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80E091C:
	push {r4,lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #3
	ldr r4, off_80E0A10 // =dword_80E08E4 
	add r4, r4, r0
	str r4, [r5,#0x60]
	ldrb r1, [r4]
	ldrb r2, [r4,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E091C

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E0954
	pop {r4,pc}
.func
.thumb_func
sub_80E0954:
	push {r4,r6,r7,lr}
	bl battle_isTimeStop
	bne locret_80E09EC
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80E0976
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E0976:
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80E098E
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80E098E
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #0x88
	bl sound_play // () -> void
loc_80E098E:
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	mov r1, #5
	ldrb r2, [r4,#0x16]
	ldrb r3, [r4,#0x17]
	bl sub_8018810
	lsl r7, r0, #0x10
	lsl r6, r1, #0x10
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	add r1, r1, r7
	add r3, r3, r6
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_800E2AC
	bl object_isCurrentPanelValid
	bne loc_80E09C2
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E09C2:
	ldr r0, [r5,#0x64]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80E09DC
	push {r5}
	ldr r5, [r5,#0x4c]
	bl object_getFlag // () -> int
	pop {r5}
	ldr r3, [r5,#0x60]
	ldr r1, [r3,#4]
	tst r0, r1
	bne loc_80E09E8
loc_80E09DC:
	ldr r0, [r5,#0x64]
	mov r1, #0
	str r1, [r0]
	bl object_freeMemory
	pop {r4,r6,r7,pc}
loc_80E09E8:
	bl sub_801BBF4
locret_80E09EC:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E0954

.func
.thumb_func
sub_80E09EE:
	push {lr}
	push {r5}
	mov r0, #6
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E0A08
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x64]
	str r0, [r7]
locret_80E0A08:
	pop {pc}
.endfunc // sub_80E09EE

	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
off_80E0A10: .word dword_80E08E4
dword_80E0A14: .word 0x70C, 0x2, 0x0
	.word 0x3D0C, 0x2, 0x0
	.word 0x3D0C, 0x2, 0x0
	.word 0x3D0C, 0x2, 0x0
	.word 0x3D0C, 0x2, 0x0
	.word unk_3003D0C
	.word 0x2, 0x0
	.word unk_3003D0C
	.word 0x2, 0x0
	.word 0x6003D0C, 0x2, 0x0
	.word 0x200C, 0x15, 0x0
	.word 0x70C, 0x1, 0x0
	.word 0xC, 0x2, 0x0
	.word unk_202070C
	.word 0x2, 0x2000000, 0x102070C, 0x2, 0x2000000, 0x402070C, 0x2
	.word 0x2000000, 0x302070C, 0x2, 0x2000000, 0x2070C, 0x1, 0x0
loc_80E0AD4:
	push {lr}
	ldr r1, off_80E0AF8 // =off_80E0AFC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl battle_getFlags
	mov r1, #1
	tst r0, r1
	beq loc_80E0AF0
	bl battle_isPaused
	bne locret_80E0AF4
loc_80E0AF0:
	bl sub_801BC64
locret_80E0AF4:
	pop {pc}
	.balign 4, 0x00
off_80E0AF8: .word off_80E0AFC
off_80E0AFC: .word sub_80E0B08+1
	.word loc_80E0B8C+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80E0B08:
	push {r4,lr}
	ldrb r0, [r5,#4]
	mov r1, #0xc
	mul r0, r1
	ldr r4, off_80E0DD8 // =dword_80E0A14 
	add r4, r4, r0
	str r4, [r5,#0x60]
	ldrb r1, [r4]
	ldrb r2, [r4,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E0B08

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r4,#2]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	ldrb r0, [r4,#3]
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r4,#8]
	ldrb r1, [r5,#4]
	cmp r1, #9
	bne loc_80E0B6C
	ldr r1, [r5,#0x4c]
	ldr r1, [r1,#0x58]
	ldrb r2, [r1]
	cmp r2, #2
	bne loc_80E0B6A
	ldrb r2, [r1,#1]
	cmp r2, #0
	bne loc_80E0B6A
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	beq loc_80E0B6C
loc_80E0B6A:
	ldr r0, off_80E0DDC // =timer_2000000 
loc_80E0B6C:
	bl sub_8002FA6
	bl sub_8002EAC
	mov r0, #0x89
	ldrb r1, [r5,#4]
	cmp r1, #8
	bne loc_80E0B7E
	ldr r0, off_80E0DE0 // =0x12d 
loc_80E0B7E:
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80E0B8C
	pop {r4,pc}
loc_80E0B8C:
	push {r4,r6,lr}
	ldr r4, [r5,#0x4c]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80E0BAC
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	b loc_80E0BC2
loc_80E0BAC:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0xc]
	tst r0, r0
	bne loc_80E0BC2
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E0BC2:
	ldrb r0, [r4,#0x12]
	ldrb r1, [r4,#0x13]
	bl object_isValidPanel
	bne loc_80E0BD4
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E0BD4:
	bl nullsub_10
	ldrb r0, [r5,#9]
	cmp r0, #8
	beq loc_80E0BF6
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3a]
	sub r0, #2
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	sub r0, #2
	strh r0, [r5,#0x3e]
loc_80E0BF6:
	ldrb r0, [r4,#0x16]
	ldrb r1, [r4,#0x17]
	bl object_getFlipDirection // (int a1, int a2) -> int
	add r6, r0, #0
	ldrh r0, [r4,#0x28]
	bl sub_800F26C
	ldr r2, [r5,#0x60]
	ldrb r2, [r2,#4]
	bl sub_8018842
	mul r0, r6
	lsl r0, r0, #0x10
	lsl r1, r1, #0x10
	ldr r2, [r5,#0x34]
	add r2, r2, r0
	str r2, [r5,#0x34]
	ldr r2, [r5,#0x3c]
	add r2, r2, r1
	str r2, [r5,#0x3c]
	ldr r1, off_80E0C64 // =off_80E0C68 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80E0C3E
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	b loc_80E0C4C
loc_80E0C3E:
	ldrb r0, [r5,#0xc]
	tst r0, r0
	bne loc_80E0C4C
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E0C4C:
	ldrb r0, [r4,#0x12]
	ldrb r1, [r4,#0x13]
	bl object_isValidPanel
	bne loc_80E0C5E
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E0C5E:
	bl nullsub_10
	pop {r4,r6,pc}
off_80E0C64: .word off_80E0C68
off_80E0C68: .word sub_80E0C74+1
	.word sub_80E0CAA+1
	.word sub_80E0D38+1
.func
.thumb_func
sub_80E0C74:
	push {lr}
	ldr r0, [r5,#0x64]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80E0C92
	ldr r0, [r5,#0x4c]
	ldr r3, [r0,#0x54]
	ldrb r0, [r3,#6]
	cmp r0, #0
	beq loc_80E0C92
	cmp r0, #0x10
	beq loc_80E0C9C
	ldrb r0, [r3,#0x16]
	tst r0, r0
	bne locret_80E0CA8
loc_80E0C92:
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80E0CA8
loc_80E0C9C:
	ldrb r0, [r3,#0x15]
	str r0, [r5,#0x68]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E0CA8:
	pop {pc}
.endfunc // sub_80E0C74

.func
.thumb_func
sub_80E0CAA:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E0CCA
	ldrb r0, [r5,#0x10]
	add r0, #1
	strb r0, [r5,#0x10]
	ldrb r1, [r5,#4]
	cmp r1, #8
	bne loc_80E0CC6
	mov r0, #0x25 
	add r0, #0xff
	bl sound_play // () -> void
loc_80E0CC6:
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E0CCA:
	ldr r0, [r5,#0x4c]
	ldr r3, [r0,#0x54]
	ldrb r0, [r3,#6]
	cmp r0, #0
	beq loc_80E0D1C
	ldrb r0, [r3,#0x16]
	tst r0, r0
	beq loc_80E0D08
	ldr r0, [r3,#0x3c]
	ldr r1, dword_80E0DE4 // =0x80000000 
	tst r0, r1
	bne loc_80E0D08
	ldrb r0, [r5,#0x10]
	sub r0, #1
	strb r0, [r5,#0x10]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x89
	ldrb r1, [r5,#4]
	cmp r1, #8
	bne loc_80E0CFA
	ldr r0, off_80E0DE0 // =0x12d 
loc_80E0CFA:
	bl sound_play // () -> void
	mov r0, #0
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80E0D36
loc_80E0D08:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80E0D36
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	b locret_80E0D36
loc_80E0D1C:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80E0D36
	ldr r0, [r5,#0x64]
	ldr r1, [r0]
	cmp r1, r5
	bne loc_80E0D32
	mov r2, #0
	str r2, [r0]
loc_80E0D32:
	bl object_freeMemory
locret_80E0D36:
	pop {pc}
.endfunc // sub_80E0CAA

.func
.thumb_func
sub_80E0D38:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E0D66
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80E0DE8 // =0xfff80000 
	mul r0, r1
	ldr r2, [r5,#0x68]
	mov r3, #0x14
	tst r2, r3
	beq loc_80E0D52
	neg r0, r0
loc_80E0D52:
	str r0, [r5,#0x40]
	ldr r0, dword_80E0DEC // =0xfffd8000 
	str r0, [r5,#0x44]
	ldrb r0, [r5,#0x10]
	add r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E0D66:
	ldr r1, [r5,#0x34]
	ldr r0, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	ldr r0, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E0D96
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x64]
	ldr r1, [r0]
	cmp r1, r5
	bne loc_80E0D92
	mov r2, #0
	str r2, [r0]
loc_80E0D92:
	bl object_freeMemory
locret_80E0D96:
	pop {pc}
.endfunc // sub_80E0D38

.func
.thumb_func
sub_80E0D98:
	push {lr}
	push {r5}
	mov r0, #7
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E0DBE
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x64]
	str r0, [r7]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
	mov r1, #1
	strb r1, [r0,#0xc]
locret_80E0DBE:
	pop {pc}
.endfunc // sub_80E0D98

.func
.thumb_func
sub_80E0DC0:
	tst r0, r0
	beq locret_80E0DC8
	mov r1, #8
	str r1, [r0,#8]
locret_80E0DC8:
	mov pc, lr
.endfunc // sub_80E0DC0

.func
.thumb_func
sub_80E0DCA:
	mov r1, #0
	strb r1, [r0,#0xc]
	mov pc, lr
.endfunc // sub_80E0DCA

.func
.thumb_func
sub_80E0DD0:
	mov r1, #1
	strb r1, [r0,#0xc]
	mov pc, lr
	.balign 4, 0x00
off_80E0DD8: .word dword_80E0A14
off_80E0DDC: .word timer_2000000
off_80E0DE0: .word 0x12D
dword_80E0DE4: .word 0x80000000
dword_80E0DE8: .word 0xFFF80000
dword_80E0DEC: .word 0xFFFD8000
.endfunc // sub_80E0DD0

loc_80E0DF0:
	push {lr}
	ldr r1, off_80E0E00 // =off_80E0E04 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E0E00: .word off_80E0E04
off_80E0E04: .word sub_80E0E10+1
	.word sub_80E0E20+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E0E10:
	push {lr}
	mov r0, #1
	str r0, [r5,#0x64]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E0E20
	pop {pc}
.endfunc // sub_80E0E10

.func
.thumb_func
sub_80E0E20:
	push {r4,r6,r7,lr}
	ldr r4, [r5,#0x4c]
	bl battle_isPaused
	beq loc_80E0E3C
	ldr r0, [r4,#0x58]
	ldrb r0, [r0,#0x1e]
	cmp r0, #0
	bne loc_80E0E3A
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E0E3A:
	b locret_80E0F00
loc_80E0E3C:
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	cmp r0, #0
	bne loc_80E0E4A
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
loc_80E0E4A:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r4,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80E0E66
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	b loc_80E0E98
loc_80E0E66:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x64]
	tst r0, r0
	bne loc_80E0E7E
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	b loc_80E0E98
loc_80E0E7E:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r4,#0x12]
	ldrb r1, [r4,#0x13]
	bl object_isValidPanel
	bne loc_80E0E98
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E0E98:
	ldr r6, [r4,#0x58]
	ldrb r0, [r6,#0x1e]
	cmp r0, #0
	push {r0}
	beq loc_80E0EB4
	cmp r0, #1
	beq loc_80E0EAA
	cmp r0, #2
	beq loc_80E0EBC
loc_80E0EAA:
	ldrb r0, [r4,#0x16]
	bl battle_networkInvert
	tst r0, r0
	beq loc_80E0EBC
loc_80E0EB4:
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E0EBC:
	pop {r0}
	bl sub_80E0F2E
	ldr r1, [r5,#0x74]
	str r1, [r5,#0x78]
	ldrb r0, [r6,#0x1d]
	str r0, [r5,#0x74]
	strb r0, [r5,#0x10]
	cmp r0, #0
	bne loc_80E0ED8
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E0ED8:
	bl sub_80E0F5E
	ldrh r0, [r4,#0x28]
	mov r1, #0
	ldrb r2, [r4,#0x16]
	ldrb r3, [r4,#0x17]
	bl sub_8018810
	lsl r6, r0, #0x10
	lsl r7, r1, #0x10
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	add r1, r1, r6
	add r3, r3, r7
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_801BBAC
locret_80E0F00:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E0E20

.func
.thumb_func
sub_80E0F02:
	push {lr}
	push {r5}
	mov r0, #8
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E0F20
	str r5, [r0,#0x4c]
	str r0, [r7]
	str r7, [r0,#0x60]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80E0F20:
	pop {pc}
.endfunc // sub_80E0F02

.func
.thumb_func
sub_80E0F22:
	mov r1, #0
	str r1, [r0,#0x64]
	mov pc, lr
.endfunc // sub_80E0F22

.func
.thumb_func
sub_80E0F28:
	mov r1, #1
	str r1, [r0,#0x64]
	mov pc, lr
.endfunc // sub_80E0F28

.func
.thumb_func
sub_80E0F2E:
	push {lr}
	mov r2, #0x15
	cmp r0, #1
	beq loc_80E0F38
	mov r2, #8
loc_80E0F38:
	ldr r3, [r5,#0x6c]
	str r2, [r5,#0x6c]
	cmp r3, r2
	beq locret_80E0F5C
	mov r0, #0x80
	mov r1, #0x14
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002F90 // () -> void
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5]
	mov r1, #8
	bic r0, r1
	strb r0, [r5]
locret_80E0F5C:
	pop {pc}
.endfunc // sub_80E0F2E

.func
.thumb_func
sub_80E0F5E:
	push {lr}
	ldr r1, [r5,#0x4c]
	ldr r2, [r1,#0x58]
	ldrb r0, [r2,#0x1e]
	cmp r0, #1
	beq loc_80E0F6E
	cmp r0, #2
	beq loc_80E0F78
loc_80E0F6E:
	ldrb r0, [r1,#0x16]
	bl battle_networkInvert
	tst r0, r0
	bne locret_80E0F9E
loc_80E0F78:
	ldr r0, [r5,#0x74]
	cmp r0, #1
	bne loc_80E0F8C
	ldr r0, [r5,#0x78]
	cmp r0, #0
	bne locret_80E0F9E
	mov r0, #0x71 
	bl sound_play // () -> void
	pop {pc}
loc_80E0F8C:
	ldr r0, [r5,#0x74]
	cmp r0, #2
	bne locret_80E0F9E
	ldr r0, [r5,#0x78]
	cmp r0, #1
	bne locret_80E0F9E
	mov r0, #0x72 
	bl sound_play // () -> void
locret_80E0F9E:
	pop {pc}
.endfunc // sub_80E0F5E

loc_80E0FA0:
	push {lr}
	ldr r1, off_80E0FB0 // =off_80E0FB4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E0FB0: .word off_80E0FB4
off_80E0FB4: .word sub_80E0FC0+1
	.word loc_80E100A+1
	.word sub_80E107C+1
.func
.thumb_func
sub_80E0FC0:
	push {lr}
	ldrb r0, [r5]
	mov r1, #3
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #5
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002E3C
	mov r0, #1
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E0FC0

	bl sprite_update
	ldrb r0, [r5,#0xc]
	bl sub_8002E14
	mov r0, #0xa
	strh r0, [r5,#0x20]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80E100A
	b locret_80E1008
	bl object_freeMemory
locret_80E1008:
	pop {pc}
loc_80E100A:
	push {lr}
	ldr r1, off_80E101C // =off_80E1020 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
off_80E101C: .word off_80E1020
off_80E1020: .word sub_80E1028+1
	.word sub_80E1054+1
.func
.thumb_func
sub_80E1028:
	push {lr}
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, [r5,#0x48]
	ldr r1, dword_80E1050 // =0xffffd000 
	add r0, r0, r1
	str r0, [r5,#0x48]
	ldr r1, [r5,#0x3c]
	add r1, r1, r0
	str r1, [r5,#0x3c]
	tst r1, r1
	bge locret_80E104C
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E104C:
	pop {pc}
	.byte 0, 0
dword_80E1050: .word 0xFFFFD000
.endfunc // sub_80E1028

.func
.thumb_func
sub_80E1054:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrh r1, [r5,#0x20]
	mov r2, #2
	tst r1, r2
	beq loc_80E106E
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
loc_80E106E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80E107A
	bl sub_80E107C
locret_80E107A:
	pop {pc}
.endfunc // sub_80E1054

.func
.thumb_func
sub_80E107C:
	push {lr}
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E107C

.func
.thumb_func
sub_80E1084:
	push {r5,lr}
	push {r0,r5}
	mov r0, #9
	bl object_spawnType4
	add r2, r5, #0
	pop {r0,r5}
	beq loc_80E109E
	strb r0, [r2,#0xc]
	str r6, [r2,#0x40]
	mov r1, #0
	str r1, [r2,#0x44]
	str r7, [r2,#0x48]
loc_80E109E:
	add r0, r7, #0
	pop {r5,pc}
	.balign 4, 0x00
.endfunc // sub_80E1084

loc_80E10A4:
	push {lr}
	ldr r1, off_80E10B4 // =off_80E10B8 
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80E10B4: .word off_80E10B8
off_80E10B8: .word sub_80E10C0+1
	.word sub_80E114C+1
.func
.thumb_func
sub_80E10C0:
	push {lr}
	ldrb r0, [r5,#6]
	mov r1, #2
	tst r0, r1
	bne loc_80E10EE
	bl battle_isPaused
	bne loc_80E10DE
	ldrb r0, [r5,#6]
	mov r1, #1
	tst r0, r1
	bne loc_80E10EE
	bl battle_isTimeStop
	beq loc_80E10EE
loc_80E10DE:
	mov r0, #0
	mov r1, #0
	mov r2, #9
	mov r3, #0x14
	ldr r4, off_80E1148 // =unk_3001B60 
	bl sub_8002378
	b locret_80E1136
loc_80E10EE:
	ldrb r0, [r5,#8]
	tst r0, r0
	bne loc_80E1100
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x22]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#8]
loc_80E1100:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	blt loc_80E112C
	ldr r1, dword_80E1144 // =0x0 
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	mov r2, #4
	tst r0, r2
	bne loc_80E111E
	ldr r1, off_80E1138 // =dword_80E113C 
	ldrb r0, [r5,#7]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
loc_80E111E:
	mov r0, #0
	mov r2, #9
	mov r3, #0x14
	ldr r4, off_80E1148 // =unk_3001B60 
	bl sub_8002378
	b locret_80E1136
loc_80E112C:
	mov r0, #0x14
	bl sub_800239A
	bl object_freeMemory
locret_80E1136:
	pop {pc}
off_80E1138: .word dword_80E113C
dword_80E113C: .word 0x7FFF, 0x1F
dword_80E1144: .word 0x0
off_80E1148: .word unk_3001B60
.endfunc // sub_80E10C0

.func
.thumb_func
sub_80E114C:
	push {lr}
	ldrb r0, [r5,#6]
	mov r1, #2
	tst r0, r1
	bne loc_80E1188
	bl battle_isPaused
	bne loc_80E116A
	ldrb r0, [r5,#6]
	mov r1, #2
	tst r0, r1
	bne loc_80E1188
	bl battle_isTimeStop
	beq loc_80E1188
loc_80E116A:
	mov r0, #0
	mov r1, #0
	mov r2, #9
	mov r3, #0x14
	ldr r4, off_80E11D8 // =unk_3001B60 
	bl sub_8002378
	mov r0, #0
	mov r1, #0
	mov r2, #9
	mov r3, #0x15
	ldr r4, off_80E11DC // =byte_3001750 
	bl sub_8002378
	b locret_80E11D0
loc_80E1188:
	ldrb r0, [r5,#8]
	tst r0, r0
	bne loc_80E119A
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x22]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#8]
loc_80E119A:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	blt loc_80E11C0
	ldr r1, dword_80E11D4 // =0x7fff 
	mov r0, #0
	mov r2, #0xf
	mov r3, #0x14
	ldr r4, off_80E11D8 // =unk_3001B60 
	bl sub_8002378
	ldr r1, dword_80E11D4 // =0x7fff 
	mov r0, #0
	mov r2, #0xf
	mov r3, #0x15
	ldr r4, off_80E11DC // =byte_3001750 
	bl sub_8002378
	b locret_80E11D0
loc_80E11C0:
	mov r0, #0x14
	bl sub_800239A
	mov r0, #0x15
	bl sub_800239A
	bl object_freeMemory
locret_80E11D0:
	pop {pc}
	.balign 4, 0x00
dword_80E11D4: .word 0x7FFF
off_80E11D8: .word unk_3001B60
off_80E11DC: .word byte_3001750
.endfunc // sub_80E114C

.func
.thumb_func
sub_80E11E0:
	push {lr}
	push {r5,r7}
	mov r0, #0xa
	bl object_spawnType4
	add r0, r5, #0
	pop {r5,r7}
	beq locret_80E11FA
	str r7, [r0,#0x60]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80E11FA:
	pop {pc}
.endfunc // sub_80E11E0

loc_80E11FC:
	push {lr}
	ldr r1, off_80E120C // =off_80E1210 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E120C: .word off_80E1210
off_80E1210: .word sub_80E121C+1
	.word sub_80E12BA+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E121C:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80E12B0
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	bl sub_800FC9E
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002E3C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r3, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r3
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	push {r5}
	add r5, r4, #0
	bl sub_801002C
	pop {r5}
	bl sprite_setPallete // (int pallete) -> void
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80E129C
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x2c 
	bl sub_8013774
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	pop {r1}
	pop {r5}
	mov r2, #1
	bl sub_8011420
loc_80E129C:
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #3
	ldrb r1, [r5,#7]
	add r0, r0, r1
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
loc_80E12B0:
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E12BA
	pop {r4,pc}
.endfunc // sub_80E121C

.func
.thumb_func
sub_80E12BA:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E12E8
	ldrb r0, [r5,#7]
	tst r0, r0
	beq loc_80E12E4
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80E12DE
	add r0, r4, #0
	mov r1, #0
	bl sub_80E1352
	b loc_80E12E4
loc_80E12DE:
	add r0, r4, #0
	bl sub_80E146C
loc_80E12E4:
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E12E8:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq loc_80E132C
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	ldrb r0, [r5,#7]
	tst r0, r0
	bne loc_80E1328
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	bl sub_800F29C
	cmp r0, #2
	bne loc_80E1322
	add r0, r4, #0
	bl sub_80E13DC
	b loc_80E1328
loc_80E1322:
	add r0, r4, #0
	bl sub_80E14AC
loc_80E1328:
	mov r0, #8
	str r0, [r5,#8]
loc_80E132C:
	bl sub_801BBF4
	pop {r4,pc}
.endfunc // sub_80E12BA

.func
.thumb_func
sub_80E1332:
	push {lr}
	bl sub_80C0F52
	pop {pc}
.endfunc // sub_80E1332

	push {r0,r1,r5}
	mov r0, #0xc
	bl object_spawnType4
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80E1350
	str r1, [r0,#0x4c]
	strb r2, [r0,#7]
	ldrh r2, [r1,#0x16]
	strh r2, [r0,#0x16]
locret_80E1350:
	pop {pc}
.func
.thumb_func
sub_80E1352:
	push {r4,r6,r7,lr}
	add r7, r0, #0
	add r6, r1, #0
	ldr r4, [r7,#0x54]
	ldrb r2, [r7]
	mov r3, #2
	bic r2, r3
	strb r2, [r7]
	push {r5}
	add r5, r7, #0
	ldr r0, dword_80E1518 // =0x100000 
	bl sub_8010312
	pop {r5}
	lsr r6, r6, #1
	bcs loc_80E1380
	ldr r2, [r7,#0x58]
	ldr r1, [r2,#0x60]
	tst r1, r1
	beq loc_80E1380
	add r0, r1, #0
	bl sub_80E0DCA
loc_80E1380:
	lsr r6, r6, #1
	bcs loc_80E1392
	ldr r1, [r4,#0x48]
	tst r1, r1
	beq loc_80E1392
	ldrb r2, [r1]
	mov r3, #2
	bic r2, r3
	strb r2, [r1]
loc_80E1392:
	lsr r6, r6, #1
	bcs loc_80E13A6
	mov r2, #0x4c 
	ldr r1, [r4,r2]
	tst r1, r1
	beq loc_80E13A6
	ldrb r2, [r1]
	mov r3, #2
	bic r2, r3
	strb r2, [r1]
loc_80E13A6:
	lsr r6, r6, #1
	bcs loc_80E13BA
	ldrb r0, [r7,#0x16]
	bl battle_networkInvert
	cmp r0, #1
	beq loc_80E13BA
	mov r0, #2
	bl sub_801DACC
loc_80E13BA:
	lsr r6, r6, #1
	bcs loc_80E13CA
	ldr r0, [r7,#0x58]
	ldr r0, [r0,#0x58]
	tst r0, r0
	beq loc_80E13CA
	bl sub_80E0F22
loc_80E13CA:
	lsr r6, r6, #1
	bcs locret_80E13DA
	ldr r0, [r7,#0x58]
	ldr r0, [r0,#0x5c]
	tst r0, r0
	beq locret_80E13DA
	bl sub_80C4C46
locret_80E13DA:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E1352

.func
.thumb_func
sub_80E13DC:
	push {r4,r7,lr}
	add r7, r0, #0
	ldr r4, [r7,#0x54]
	push {r5}
	add r5, r0, #0
	bl object_getFlag // () -> int
	mov r1, #4
	tst r0, r1
	pop {r5}
	bne loc_80E140A
	push {r5}
	add r5, r7, #0
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	pop {r5}
	beq loc_80E140A
	ldrb r2, [r7]
	mov r3, #2
	orr r2, r3
	strb r2, [r7]
loc_80E140A:
	push {r5}
	add r5, r7, #0
	ldr r0, dword_80E1518 // =0x100000 
	bl sub_801031C
	pop {r5}
	ldr r2, [r7,#0x58]
	ldr r1, [r2,#0x60]
	tst r1, r1
	beq loc_80E1424
	add r0, r1, #0
	bl sub_80E0DD0
loc_80E1424:
	ldr r1, [r4,#0x48]
	tst r1, r1
	beq loc_80E1432
	ldrb r2, [r1]
	mov r3, #2
	orr r2, r3
	strb r2, [r1]
loc_80E1432:
	mov r2, #0x4c 
	ldr r1, [r4,r2]
	tst r1, r1
	beq loc_80E1442
	ldrb r2, [r1]
	mov r3, #2
	orr r2, r3
	strb r2, [r1]
loc_80E1442:
	ldrb r0, [r7,#0x16]
	bl battle_networkInvert
	cmp r0, #1
	beq loc_80E1452
	mov r0, #2
	bl sub_801DA48
loc_80E1452:
	ldr r0, [r7,#0x58]
	ldr r0, [r0,#0x58]
	tst r0, r0
	beq loc_80E145E
	bl sub_80E0F28
loc_80E145E:
	ldr r0, [r7,#0x58]
	ldr r0, [r0,#0x5c]
	tst r0, r0
	beq locret_80E146A
	bl sub_80C4C4C
locret_80E146A:
	pop {r4,r7,pc}
.endfunc // sub_80E13DC

.func
.thumb_func
sub_80E146C:
	push {r4,lr}
	ldr r4, [r0,#0x54]
	ldrb r2, [r0]
	mov r3, #2
	bic r2, r3
	strb r2, [r0]
	ldr r2, [r0,#0x58]
	ldr r1, [r2,#0x60]
	tst r1, r1
	beq loc_80E1486
	add r0, r1, #0
	bl sub_80E0DCA
loc_80E1486:
	ldr r1, [r4,#0x48]
	tst r1, r1
	beq loc_80E1494
	ldrb r2, [r1]
	mov r3, #2
	bic r2, r3
	strb r2, [r1]
loc_80E1494:
	mov r2, #0x4c 
	ldr r1, [r4,r2]
	tst r1, r1
	beq loc_80E14A4
	ldrb r2, [r1]
	mov r3, #2
	bic r2, r3
	strb r2, [r1]
loc_80E14A4:
	mov r0, #1
	bl sub_801DACC
	pop {r4,pc}
.endfunc // sub_80E146C

.func
.thumb_func
sub_80E14AC:
	push {r4,lr}
	ldr r4, [r0,#0x54]
	ldrb r2, [r0]
	mov r3, #2
	orr r2, r3
	strb r2, [r0]
	ldr r2, [r0,#0x58]
	ldr r1, [r2,#0x60]
	tst r1, r1
	beq loc_80E14C6
	add r0, r1, #0
	bl sub_80E0DD0
loc_80E14C6:
	ldr r1, [r4,#0x48]
	tst r1, r1
	beq loc_80E14D4
	ldrb r2, [r1]
	mov r3, #2
	orr r2, r3
	strb r2, [r1]
loc_80E14D4:
	mov r2, #0x4c 
	ldr r1, [r4,r2]
	tst r1, r1
	beq loc_80E14E4
	ldrb r2, [r1]
	mov r3, #2
	orr r2, r3
	strb r2, [r1]
loc_80E14E4:
	mov r0, #1
	bl sub_801DA48
	pop {r4,pc}
.endfunc // sub_80E14AC

	push {lr}
	ldr r2, [r0,#0x58]
	ldrb r3, [r2]
	cmp r3, #2
	bne loc_80E14FC
	bl sub_80E1352
	pop {pc}
loc_80E14FC:
	bl sub_80E146C
	pop {pc}
	push {lr}
	ldr r2, [r0,#0x58]
	ldrb r3, [r2]
	cmp r3, #2
	bne loc_80E1512
	bl sub_80E13DC
	pop {pc}
loc_80E1512:
	bl sub_80E14AC
	pop {pc}
dword_80E1518: .word 0x100000
	.byte 0, 0, 0, 0
loc_80E1520:
	push {lr}
	ldr r1, off_80E1530 // =off_80E1534 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E1530: .word off_80E1534
off_80E1534: .word sub_80E1540+1
	.word sub_80E1566+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80E1540:
	push {r4,lr}
	mov r1, #0xc
	mov r2, #9
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E1540

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E1566
	pop {r4,pc}
.func
.thumb_func
sub_80E1566:
	push {r4,r6,r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r1, #0x29 
	bl sub_8013774
	cmp r0, #0
	bne loc_80E159A
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0xb
	blt loc_80E159A
	cmp r0, #0x18
	bgt loc_80E159A
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	cmp r0, #0
	bne loc_80E159A
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
loc_80E159A:
	bl battle_isTimeStop
	bne locret_80E161E
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E160E
	ldr r0, [r5,#0x64]
	cmp r0, #0
	bne loc_80E15F4
	bl sub_80E1670
	add r4, r0, #0
	ldrh r0, [r4,#0x28]
	ldr r1, dword_80E17DC // =0x173 
	cmp r0, r1
	blt loc_80E15CE
	ldr r1, off_80E17E0 // =0x178 
	cmp r0, r1
	bgt loc_80E15CE
	ldrb r1, [r4,#0x10]
	cmp r1, #0x4f 
	bne loc_80E15CE
	mov r0, #0
	mov r1, #0
	b loc_80E15D8
loc_80E15CE:
	mov r1, #0x11
	ldrb r2, [r4,#0x16]
	ldrb r3, [r4,#0x17]
	bl sub_8018810
loc_80E15D8:
	lsl r7, r0, #0x10
	lsl r6, r1, #0x10
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	add r1, r1, r7
	add r3, r3, r6
	mov r7, #8
	lsl r7, r7, #0x10
	add r2, r2, r7
	add r3, r3, r7
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
loc_80E15F4:
	bl sub_800E2AC
	bl object_isCurrentPanelValid
	bne loc_80E1606
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E1606:
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	tst r0, r0
	bne loc_80E161A
loc_80E160E:
	ldr r0, [r5,#0x60]
	mov r1, #0
	str r1, [r0]
	bl object_freeMemory
	pop {r4,r6,r7,pc}
loc_80E161A:
	bl sub_801BBF4
locret_80E161E:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E1566

.func
.thumb_func
sub_80E1620:
	push {lr}
	push {r5}
	mov r0, #0xf
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E1642
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80E1642:
	pop {pc}
.endfunc // sub_80E1620

	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
.func
.thumb_func
sub_80E164A:
	ldr r1, [r5,#0x58]
	ldr r1, [r1,#0x40]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	mov pc, lr
.endfunc // sub_80E164A

.func
.thumb_func
sub_80E1654:
	ldr r1, [r5,#0x58]
	ldr r1, [r1,#0x40]
	mov r0, #1
	str r0, [r1,#0x64]
	mov r0, #1
	strb r0, [r1,#0x10]
	mov pc, lr
.endfunc // sub_80E1654

.func
.thumb_func
sub_80E1662:
	ldr r1, [r5,#0x58]
	ldr r1, [r1,#0x40]
	mov r0, #0
	str r0, [r1,#0x64]
	mov r0, #0
	strb r0, [r1,#0x10]
	mov pc, lr
.endfunc // sub_80E1662

.func
.thumb_func
sub_80E1670:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x34
	mov r4, sp
	ldrb r3, [r5,#0x16]
	mov r0, #1
	eor r3, r0
	add r0, r4, #0
	mov r1, #0
	ldr r2, dword_80E17E4 // =0x1c3 
	bl object_getEnemyByNameRange
	add r6, r0, #0
	lsl r3, r0, #2
	add r3, r3, r4
	mov r0, #0
	str r0, [r3]
	mov r0, #0
	ldr r1, [r5,#0x4c]
	add r2, r4, #0
	bl sub_80E16CC
	cmp r0, #0
	bne loc_80E16BA
	mov r0, #1
	ldr r1, [r5,#0x4c]
	add r2, r4, #0
	bl sub_80E16CC
	cmp r0, #0
	bne loc_80E16BA
	mov r0, #2
	ldr r1, [r5,#0x4c]
	add r2, r4, #0
	bl sub_80E16CC
	cmp r0, #0
	bne loc_80E16BA
loc_80E16BA:
	add sp, sp, #0x34
	pop {r4,r6,r7,pc}
	.byte 0, 0
	.word dword_80E16C4
dword_80E16C4: .word 0xB0ACA4A0, 0xFFBCB8B4
.endfunc // sub_80E1670

.func
.thumb_func
sub_80E16CC:
	push {r4,r6,r7,lr}
	add r6, r1, #0
	add r7, r2, #0
	cmp r0, #2
	bne loc_80E16DE
	ldrb r4, [r6,#0x12]
	lsl r1, r4, #8
	orr r4, r1
	b loc_80E16FE
loc_80E16DE:
	ldrb r1, [r6,#0x16]
	ldrb r2, [r6,#0x17]
	eor r1, r2
	eor r0, r1
	bne loc_80E16F4
	ldrb r4, [r6,#0x12]
	add r4, #1
	mov r1, #6
	lsl r1, r1, #8
	orr r4, r1
	b loc_80E16FE
loc_80E16F4:
	ldrb r4, [r6,#0x12]
	sub r4, #1
	lsl r4, r4, #8
	mov r1, #1
	orr r4, r1
loc_80E16FE:
	bl sub_80E1704
	pop {r4,r6,r7,pc}
.endfunc // sub_80E16CC

.func
.thumb_func
sub_80E1704:
	push {r4,r6,r7,lr}
	mov r0, #0
loc_80E1708:
	ldr r3, [r7]
	cmp r3, #0
	beq locret_80E172E
	ldrb r1, [r3,#0x12]
	lsl r2, r4, #0x18
	lsr r2, r2, #0x18
	cmp r1, r2
	blt loc_80E172A
	lsr r2, r4, #8
	cmp r1, r2
	bgt loc_80E172A
	cmp r0, #0
	beq loc_80E1728
	bl sub_80E1730
	b loc_80E172A
loc_80E1728:
	add r0, r3, #0
loc_80E172A:
	add r7, #4
	b loc_80E1708
locret_80E172E:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E1704

.func
.thumb_func
sub_80E1730:
	push {r4,r7,lr}
	add r4, r0, #0
	add r7, r3, #0
	ldrb r0, [r6,#0x13]
	ldrb r1, [r4,#0x13]
	ldrb r2, [r7,#0x13]
	cmp r0, r1
	beq loc_80E1748
	cmp r0, r2
	bne loc_80E174C
	add r4, r7, #0
	b loc_80E1758
loc_80E1748:
	cmp r0, r2
	bne loc_80E1758
loc_80E174C:
	add r0, r7, #0
	add r1, r4, #0
	add r2, r6, #0
	bl sub_80E175C
	add r4, r0, #0
loc_80E1758:
	add r0, r4, #0
	pop {r4,r7,pc}
.endfunc // sub_80E1730

.func
.thumb_func
sub_80E175C:
	push {r4,r6,r7,lr}
	add r4, r2, #0
	add r6, r0, #0
	add r7, r1, #0
	ldrb r0, [r4,#0x12]
	ldrb r2, [r7,#0x12]
	sub r3, r2, r0
	bpl loc_80E176E
	neg r3, r3
loc_80E176E:
	ldrb r1, [r6,#0x12]
	sub r0, r1, r0
	bpl loc_80E1776
	neg r0, r0
loc_80E1776:
	cmp r0, r3
	blt loc_80E17A4
	bgt loc_80E17A8
	ldrb r2, [r6,#0x12]
	ldrb r3, [r7,#0x12]
	cmp r2, r3
	beq loc_80E1798
	ldrb r0, [r4,#0x16]
	ldrb r1, [r4,#0x17]
	eor r0, r1
	beq loc_80E1792
	cmp r2, r3
	bgt loc_80E17A8
	b loc_80E17A4
loc_80E1792:
	cmp r2, r3
	bgt loc_80E17A4
	b loc_80E17A8
loc_80E1798:
	add r0, r6, #0
	add r1, r7, #0
	add r2, r4, #0
	bl sub_80E17AC
	b locret_80E17AA
loc_80E17A4:
	add r0, r6, #0
	b locret_80E17AA
loc_80E17A8:
	add r0, r7, #0
locret_80E17AA:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E175C

.func
.thumb_func
sub_80E17AC:
	push {r4,r6,r7,lr}
	add r4, r2, #0
	add r6, r0, #0
	add r7, r1, #0
	ldrb r1, [r6,#0x13]
	ldrb r2, [r7,#0x13]
	ldrb r0, [r4,#0x13]
	sub r3, r2, r0
	bpl loc_80E17C0
	neg r3, r3
loc_80E17C0:
	sub r0, r1, r0
	bpl loc_80E17C6
	neg r0, r0
loc_80E17C6:
	cmp r0, r3
	blt loc_80E17D4
	bgt loc_80E17D8
	ldrb r0, [r4,#0x13]
	ldrb r1, [r6,#0x13]
	cmp r0, r1
	blt loc_80E17D8
loc_80E17D4:
	add r0, r6, #0
	b locret_80E17DA
loc_80E17D8:
	add r0, r7, #0
locret_80E17DA:
	pop {r4,r6,r7,pc}
dword_80E17DC: .word 0x173
off_80E17E0: .word 0x178
dword_80E17E4: .word 0x1C3
.endfunc // sub_80E17AC

loc_80E17E8:
	push {lr}
	ldr r1, off_80E17F8 // =off_80E17FC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E17F8: .word off_80E17FC
off_80E17FC: .word sub_800B916+1
	.word sub_80E1808+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E1808:
	push {lr}
	ldr r1, off_80E1818 // =off_80E181C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E1818: .word off_80E181C
off_80E181C: .word sub_800B94C+1
	.word sub_800BDB2+1
	.word sub_800BA8A+1
	.word sub_80E1830+1
	.word sub_800BC88+1
.endfunc // sub_80E1808

.func
.thumb_func
sub_80E1830:
	push {r4,r6,r7,lr}
	ldr r1, off_80E1840 // =off_80E1844 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80E1840: .word off_80E1844
off_80E1844: .word sub_80E1854+1
	.word loc_80E1880+1
	.word sub_80E18DA+1
	.word sub_80E18F8+1
.endfunc // sub_80E1830

.func
.thumb_func
sub_80E1854:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E1872
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	ldrb r0, [r5,#0x19]
	cmp r0, #0x17
	beq loc_80E1872
	ldr r0, [r5,#0x4c]
	mov r1, #1
	bl sub_80E1332
loc_80E1872:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E187E
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E187E:
	pop {pc}
.endfunc // sub_80E1854

loc_80E1880:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E18CE
	ldrb r0, [r5,#0x19]
	lsl r0, r0, #2
	ldr r3, off_80E19B0 // =off_802CD5C 
	ldr r3, [r3,r0]
	ldr r6, [r5,#0x2c]
	ldrh r0, [r5,#0x32]
	add r6, r6, r0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r4, [r5,#4]
	mov r7, #0x18
	add r7, r7, r5
	push {r5}
	ldr r5, [r5,#0x4c]
	mov lr, pc
	bx r3
	pop {r5}
	ldrh r0, [r5,#0x30]
	sub r0, #0xdd
	cmp r0, #0x3b 
	bhi loc_80E18CA
	ldr r7, off_80E19B4 // =byte_203C960 
	ldrb r0, [r5,#0x19]
	strb r0, [r7]
	ldrb r0, [r5,#0xe]
	strb r0, [r7,#0x1] // (byte_203C961 - 0x203c960)
	ldr r0, [r5,#0x2c]
	str r0, [r7,#0x4] // (dword_203C964 - 0x203c960)
	ldr r0, [r5,#4]
	str r0, [r7,#0x8] // (byte_203C968 - 0x203c960)
	ldrh r0, [r5,#0x32]
	strh r0, [r7,#0x2] // (word_203C962 - 0x203c960)
loc_80E18CA:
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E18CE:
	ldrb r0, [r5,#0x18]
	tst r0, r0
	bne locret_80E18D8
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80E18D8:
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E18DA:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E18EA
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E18EA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E18F6
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80E18F6:
	pop {pc}
.endfunc // sub_80E18DA

.func
.thumb_func
sub_80E18F8:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E191A
	ldrb r0, [r5,#0x19]
	cmp r0, #0
	beq loc_80E1922
	cmp r0, #0x17
	beq loc_80E1922
	ldr r0, [r5,#0x4c]
	mov r1, #0
	bl sub_80E1332
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E191A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E192A
loc_80E1922:
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E192A:
	pop {pc}
.endfunc // sub_80E18F8

.func
.thumb_func
sub_80E192C:
	push {lr}
	cmp r3, #0
	bne loc_80E1944
	push {r0-r3}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_802CE78
	cmp r0, #0xbd
	pop {r0-r3}
	beq loc_80E1968
loc_80E1944:
	push {r0-r2,r5}
	mov r0, #0x10
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E1998
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldr r1, [r0,#0x3c]
	strb r1, [r0,#0x19]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
	pop {pc}
loc_80E1968:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800ABC6
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_802CEA6
	pop {r0,r1}
	push {r0,r1}
	add r0, r6, #0
	bl sub_80E199A
	add r6, r0, #0
	pop {r0,r1}
	mov r2, #0x1e
	lsl r2, r2, #0x10
	add r6, r6, r2
	mov r2, #0
	mov r7, #0xbd
	bl sub_80E37D2
locret_80E1998:
	pop {pc}
.endfunc // sub_80E192C

.func
.thumb_func
sub_80E199A:
	ldr r1, dword_80E19B8 // =0x87ff 
	and r0, r1
	lsl r0, r0, #0x11
	bcc loc_80E19A6
	lsr r0, r0, #0x10
	b loc_80E19A8
loc_80E19A6:
	lsr r0, r0, #0x11
loc_80E19A8:
	mov r1, #3
	mul r0, r1
	mov pc, lr
	.byte 0, 0
off_80E19B0: .word off_802CD5C
off_80E19B4: .word byte_203C960
dword_80E19B8: .word 0x87FF
.endfunc // sub_80E199A

loc_80E19BC:
	push {lr}
	ldr r1, dword_80E19D8 // = 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
	.byte 0xDD
	.byte 0x19
	.byte 0xE
	.byte  8
	.byte 0xF5
	.byte 0x19
	.byte 0xE
	.byte  8
	.byte 0x5F 
	.byte 0x1A
	.byte 0xE
	.byte  8
dword_80E19D8: .word 0x80E19CC
	push {lr}
	ldr r7, off_80E19EC // =dword_80E19F0 
	ldrb r0, [r5,#4]
	ldrb r1, [r7,r0]
	strh r1, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
off_80E19EC: .word dword_80E19F0
dword_80E19F0: .word 0x205A20, 0x4903B500, 0x58097A68, 0x470846FE, 0xBD00
	.word off_80E1A08
off_80E1A08: .word sub_80E1A0C+1
.func
.thumb_func
sub_80E1A0C:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80E1A1A
	ldr r1, [r0]
	tst r1, r1
	beq loc_80E1A22
loc_80E1A1A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bhi loc_80E1A28
loc_80E1A22:
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
loc_80E1A28:
	mov r1, #0xf
	ldrb r2, [r5,#4]
	bne loc_80E1A30
	mov r1, #3
loc_80E1A30:
	and r0, r1
	cmp r0, r1
	bne locret_80E1A5C
	ldr r7, [r5,#0x4c]
	mov r0, #0x1f
	ldr r1, [r7,#0x34]
	ldr r2, [r7,#0x38]
	ldr r3, [r7,#0x3c]
	bl sub_801BDDE
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	ldrb r4, [r5,#5]
	bl sub_80E05F6
	ldrb r0, [r5,#6]
	tst r0, r0
	bne locret_80E1A5C
	mov r0, #0x6f 
	bl sound_play // () -> void
locret_80E1A5C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E1A0C

	push {lr}
	mov r0, #1
	strb r0, [r5,#0xb]
	bl object_freeMemory
	pop {pc}
.func
.thumb_func
sub_80E1A6A:
	push {lr}
	push {r5}
	mov r0, #0x11
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E1A84
	str r5, [r0,#0x4c]
	tst r7, r7
	beq loc_80E1A82
	str r0, [r7]
loc_80E1A82:
	str r7, [r0,#0x60]
locret_80E1A84:
	pop {pc}
.endfunc // sub_80E1A6A

.func
.thumb_func
sub_80E1A86:
	tst r0, r0
	beq locret_80E1A8E
	mov r1, #8
	str r1, [r0,#8]
locret_80E1A8E:
	mov pc, lr
.endfunc // sub_80E1A86

loc_80E1A90:
	push {lr}
	ldr r1, off_80E1AA4 // =off_80E1AA8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80E1AA4: .word off_80E1AA8
off_80E1AA8: .word sub_80E1AB4+1
	.word sub_80E1AFA+1
	.word sub_80E1B0A+1
.func
.thumb_func
sub_80E1AB4:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #8
	mov r2, #0xc
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E1AB4

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0xe
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E1AFA:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	beq locret_80E1B08
	mov r0, #8
	str r0, [r5,#8]
locret_80E1B08:
	pop {pc}
.endfunc // sub_80E1AFA

.func
.thumb_func
sub_80E1B0A:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne loc_80E1B18
	mov r0, #0
	str r0, [r1]
loc_80E1B18:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E1B0A

.func
.thumb_func
sub_80E1B1E:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x12
	bl object_spawnType4
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80E1B3A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E1B3A:
	pop {pc}
.endfunc // sub_80E1B1E

.func
.thumb_func
sub_80E1B3C:
	push {lr}
	tst r0, r0
	beq locret_80E1B46
	mov r1, #8
	str r1, [r0,#8]
locret_80E1B46:
	pop {pc}
.endfunc // sub_80E1B3C

loc_80E1B48:
	push {lr}
	ldr r1, off_80E1B58 // =off_80E1B5C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E1B58: .word off_80E1B5C
off_80E1B5C: .word sub_80E1B68+1
	.word loc_80E1BBE+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E1B68:
	push {r4,r7,lr}
	mov r1, #8
	ldrb r2, [r5,#4]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E1B68

	bl sub_8002E3C
	bl sub_8002E52
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x8c
	bl sound_play // () -> void
	mov r0, #1
	ldrb r1, [r5,#4]
	mov r2, #1
	bl sub_8010DF6
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,r7,pc}
loc_80E1BBE:
	push {lr}
	ldr r1, off_80E1BCC // =off_80E1BD0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80E1BCC: .word off_80E1BD0
off_80E1BD0: .word sub_80E1BDC+1
	.word sub_80E1C24+1
	.word sub_80E1C66+1
.func
.thumb_func
sub_80E1BDC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E1BF2
	mov r0, #0
	bl sub_8002E14
	mov r0, #0x16
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E1BF2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80E1C04
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80E1C1C
loc_80E1C04:
	ldrh r1, [r5,#0x20]
	lsl r0, r1, #2
	ldrh r1, [r5,#0x20]
	mov r2, #0x70 
	mul r1, r2
	mov r2, #0xff
	and r1, r2
	bl sub_80E1CB0
	ldr r0, dword_80E1C20 // =0x2108 
	bl sub_8002ED0
locret_80E1C1C:
	pop {pc}
	.byte 0, 0
dword_80E1C20: .word 0x2108
.endfunc // sub_80E1BDC

.func
.thumb_func
sub_80E1C24:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E1C34
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E1C34:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80E1C4E
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80E1C64
loc_80E1C4E:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #2
	bcc locret_80E1C64
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
locret_80E1C64:
	pop {pc}
.endfunc // sub_80E1C24

.func
.thumb_func
sub_80E1C66:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E1C84
	mov r0, #0
	mov r1, #0
	bl sub_80E1CB0
	mov r0, #2
	bl sub_8002E14
	mov r0, #8
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E1C84:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80E1CA6
	bl sub_8002CCE
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #1
	ldrb r1, [r5,#4]
	bl loc_8011044
	mov r0, #8
	str r0, [r5,#8]
	b locret_80E1CAE
loc_80E1CA6:
	ldrh r0, [r5,#0x20]
	add r0, r0, r0
	bl sub_8002C7A
locret_80E1CAE:
	pop {pc}
.endfunc // sub_80E1C66

.func
.thumb_func
sub_80E1CB0:
	push {r6,r7,lr}
	ldr r2, off_80E1CF0 // =byte_8006660 
	add r3, r1, r1
	ldrsh r6, [r2,r3]
	mul r6, r0
	lsl r6, r6, #8
	ldr r2, off_80E1CF4 // =byte_80065E0 
	ldrsh r7, [r2,r3]
	mul r7, r0
	lsl r7, r7, #8
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	add r1, r1, r6
	add r3, r3, r7
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	pop {r6,r7,pc}
.endfunc // sub_80E1CB0

	push {lr}
	push {r5}
	mov r0, #0x13
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E1CEC
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
locret_80E1CEC:
	pop {pc}
	.byte 0, 0
off_80E1CF0: .word byte_8006660
off_80E1CF4: .word byte_80065E0
loc_80E1CF8:
	push {lr}
	ldr r1, off_80E1D08 // =off_80E1D0C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E1D08: .word off_80E1D0C
off_80E1D0C: .word sub_80E1D18+1
	.word sub_80E1D54+1
	.word sub_80E1D72+1
.func
.thumb_func
sub_80E1D18:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0x14
	mov r2, #2
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #1
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E1D18

	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #2
	lsl r0, r0, #0x10
	str r0, [r5,#0x48]
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80E1D54
	pop {pc}
.func
.thumb_func
sub_80E1D54:
	push {lr}
	bl sprite_update
.endfunc // sub_80E1D54

	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80E1D70
	mov r0, #8
	str r0, [r5,#8]
locret_80E1D70:
	pop {pc}
.func
.thumb_func
sub_80E1D72:
	push {lr}
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E1D72

.func
.thumb_func
sub_80E1D7A:
	push {r5,lr}
	mov r0, #0x14
	bl object_spawnType4
	add r0, r5, #0
	pop {r5,pc}
	.balign 4, 0x00
.endfunc // sub_80E1D7A

loc_80E1D88:
	push {lr}
	ldr r1, off_80E1D9C // =off_80E1DA0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80E1D9C: .word off_80E1DA0
off_80E1DA0: .word sub_80E1DAC+1
	.word sub_80E1DFC+1
	.word sub_80E1E0C+1
.func
.thumb_func
sub_80E1DAC:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	ldrb r0, [r5,#0x13]
	cmp r0, #3
	beq loc_80E1DC8
	ldrh r0, [r5,#0x3a]
	add r0, #0x30 
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	add r0, #0x30 
	strh r0, [r5,#0x3e]
loc_80E1DC8:
	mov r1, #0x10
	mov r2, #0x13
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E1DAC

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #2
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E1DFC:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	beq locret_80E1E0A
	mov r0, #8
	str r0, [r5,#8]
locret_80E1E0A:
	pop {pc}
.endfunc // sub_80E1DFC

.func
.thumb_func
sub_80E1E0C:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne loc_80E1E1A
	mov r0, #0
	str r0, [r1]
loc_80E1E1A:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E1E0C

.func
.thumb_func
sub_80E1E20:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x15
	bl object_spawnType4
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80E1E3C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E1E3C:
	pop {pc}
.endfunc // sub_80E1E20

.func
.thumb_func
sub_80E1E3E:
	push {lr}
	tst r0, r0
	beq locret_80E1E48
	mov r1, #8
	str r1, [r0,#8]
locret_80E1E48:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E1E3E

loc_80E1E4C:
	push {lr}
	ldr r1, off_80E1E5C // =off_80E1E60 
	ldrb r0, [r5,#5]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80E1E5C: .word off_80E1E60
off_80E1E60: .word sub_80E1E70+1
	.word sub_80E1EC6+1
	.word sub_80E1F32+1
	.word sub_80E1FB6+1
.func
.thumb_func
sub_80E1E70:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	ldrb r1, [r5,#6]
	cmp r0, r1
	bge loc_80E1EAA
	lsr r0, r0, #3
	bcs locret_80E1EC4
	mov r7, #3
loc_80E1E84:
	mov r6, #6
loc_80E1E86:
	add r0, r6, #0
	add r1, r7, #0
	bl sub_800C90A
	ldrb r1, [r0,#2]
	tst r1, r1
	beq loc_80E1EA0
	ldrb r3, [r0,#3]
	add r0, r6, #0
	add r1, r7, #0
	ldrb r2, [r5,#4]
	bl object_setPanelTypeBlink
loc_80E1EA0:
	sub r6, #1
	bge loc_80E1E86
	sub r7, #1
	bge loc_80E1E84
	b locret_80E1EC4
loc_80E1EAA:
	mov r7, #3
loc_80E1EAC:
	mov r6, #6
loc_80E1EAE:
	add r0, r6, #0
	add r1, r7, #0
	ldrb r2, [r5,#4]
	bl object_setPanelType
	sub r6, #1
	bge loc_80E1EAE
	sub r7, #1
	bge loc_80E1EAC
	bl object_freeMemory
locret_80E1EC4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E1E70

.func
.thumb_func
sub_80E1EC6:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	ldrb r1, [r5,#6]
	cmp r0, r1
	bge loc_80E1F06
	lsr r0, r0, #3
	bcs locret_80E1F30
	mov r7, #3
loc_80E1EDA:
	mov r6, #6
loc_80E1EDC:
	add r0, r6, #0
	add r1, r7, #0
	bl sub_800C90A
	ldrb r3, [r0,#3]
	ldrb r2, [r5,#0x16]
	eor r2, r3
	beq loc_80E1EFC
	ldrb r1, [r0,#2]
	tst r1, r1
	beq loc_80E1EFC
	add r0, r6, #0
	add r1, r7, #0
	ldrb r2, [r5,#4]
	bl object_setPanelTypeBlink
loc_80E1EFC:
	sub r6, #1
	bge loc_80E1EDC
	sub r7, #1
	bge loc_80E1EDA
	b locret_80E1F30
loc_80E1F06:
	mov r7, #3
loc_80E1F08:
	mov r6, #6
loc_80E1F0A:
	add r0, r6, #0
	add r1, r7, #0
	bl sub_800C90A
	ldrb r1, [r0,#3]
	ldrb r2, [r5,#0x16]
	eor r1, r2
	beq loc_80E1F24
	add r0, r6, #0
	add r1, r7, #0
	mov r2, #3
	bl object_setPanelType
loc_80E1F24:
	sub r6, #1
	bge loc_80E1F0A
	sub r7, #1
	bge loc_80E1F08
	bl object_freeMemory
locret_80E1F30:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E1EC6

.func
.thumb_func
sub_80E1F32:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	ldrb r1, [r5,#6]
	cmp r0, r1
	bge loc_80E1F7C
	lsr r0, r0, #3
	bcs locret_80E1FB4
	mov r7, #3
loc_80E1F46:
	mov r6, #6
loc_80E1F48:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x16]
	tst r1, r1
	bne loc_80E1F54
	cmp r6, r0
	b loc_80E1F56
loc_80E1F54:
	cmp r0, r6
loc_80E1F56:
	ble loc_80E1F72
	add r0, r6, #0
	add r1, r7, #0
	bl sub_800C90A
	ldrb r1, [r0,#2]
	tst r1, r1
	beq loc_80E1F72
	ldrb r3, [r0,#3]
	add r0, r6, #0
	add r1, r7, #0
	ldrb r2, [r5,#4]
	bl object_setPanelTypeBlink
loc_80E1F72:
	sub r6, #1
	bge loc_80E1F48
	sub r7, #1
	bge loc_80E1F46
	b locret_80E1FB4
loc_80E1F7C:
	mov r7, #3
loc_80E1F7E:
	mov r6, #6
loc_80E1F80:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x16]
	tst r1, r1
	bne loc_80E1F8C
	cmp r6, r0
	b loc_80E1F8E
loc_80E1F8C:
	cmp r0, r6
loc_80E1F8E:
	ble loc_80E1FA8
	add r0, r6, #0
	add r1, r7, #0
	bl sub_800C90A
	ldrb r1, [r0,#2]
	tst r1, r1
	beq loc_80E1FA8
	add r0, r6, #0
	add r1, r7, #0
	ldrb r2, [r5,#4]
	bl object_setPanelType
loc_80E1FA8:
	sub r6, #1
	bge loc_80E1F80
	sub r7, #1
	bge loc_80E1F7E
	bl object_freeMemory
locret_80E1FB4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E1F32

.func
.thumb_func
sub_80E1FB6:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	add r0, #1
	strh r0, [r5,#0x20]
	ldrb r1, [r5,#6]
	cmp r0, r1
	bge loc_80E2010
	lsr r0, r0, #3
	bcs locret_80E2058
	mov r6, #6
loc_80E1FCA:
	add r0, r6, #0
	mov r1, #2
	bl sub_800C90A
	ldrb r1, [r0,#2]
	tst r1, r1
	beq loc_80E1FE4
	ldrb r3, [r0,#3]
	add r0, r6, #0
	mov r1, #2
	ldrb r2, [r5,#4]
	bl object_setPanelTypeBlink
loc_80E1FE4:
	sub r6, #1
	bge loc_80E1FCA
	mov r6, #0
	ldr r7, off_80E205C // =byte_80E2060 
loc_80E1FEC:
	ldrb r0, [r7]
	ldrb r1, [r7,#0x1] // (byte_80E2061 - 0x80e2060)
	bl sub_800C90A
	ldrb r1, [r0,#2]
	tst r1, r1
	beq loc_80E2006
	ldrb r3, [r0,#3]
	ldrb r0, [r7]
	ldrb r1, [r7,#1]
	ldrb r2, [r5,#4]
	bl object_setPanelTypeBlink
loc_80E2006:
	add r7, #2
	add r6, #1
	cmp r6, #4
	blt loc_80E1FEC
	b locret_80E2058
loc_80E2010:
	mov r6, #6
loc_80E2012:
	add r0, r6, #0
	mov r1, #2
	bl sub_800C90A
	ldrb r1, [r0,#2]
	tst r1, r1
	beq loc_80E202A
	add r0, r6, #0
	mov r1, #2
	ldrb r2, [r5,#4]
	bl object_setPanelType
loc_80E202A:
	sub r6, #1
	bge loc_80E2012
	mov r6, #0
	ldr r7, off_80E205C // =byte_80E2060 
loc_80E2032:
	ldrb r0, [r7]
	ldrb r1, [r7,#0x1] // (byte_80E2061 - 0x80e2060)
	bl sub_800C90A
	ldrb r1, [r0,#2]
	tst r1, r1
	beq loc_80E204C
	ldrb r3, [r0,#3]
	ldrb r0, [r7]
	ldrb r1, [r7,#1]
	ldrb r2, [r5,#4]
	bl object_setPanelType
loc_80E204C:
	add r7, #2
	add r6, #1
	cmp r6, #4
	blt loc_80E2032
	bl object_freeMemory
locret_80E2058:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80E205C: .word byte_80E2060
byte_80E2060: .byte 0x2
byte_80E2061: .byte 0x1
.endfunc // sub_80E1FB6

	lsl r2, r0, #0xc
	lsl r5, r0, #4
	lsl r5, r0, #0xc
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x16
	bl object_spawnType4
	add r0, r5, #0
	pop {r1,r2,r5}
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	pop {pc}
loc_80E2080:
	push {lr}
	ldr r1, off_80E20A0 // =off_80E20A4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#5]
	cmp r0, #2
	beq loc_80E2098
	bl sub_801BCA6
	b locret_80E209C
loc_80E2098:
	bl sub_801BBF4
locret_80E209C:
	pop {pc}
	.byte 0, 0
off_80E20A0: .word off_80E20A4
off_80E20A4: .word sub_80E20B0+1
	.word sub_80E213C+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E20B0:
	push {r4,lr}
	bl sub_800E29C // () -> void
	bl sub_8001532
	mov r1, #0xf
	svc 6
	add r4, r1, #0
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	add r3, r0, #0
	ldr r1, dword_80E21C8 // =0x140000 
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	ldr r2, dword_80E21CC // =0x15555 
	lsl r2, r2, #1
	mul r2, r3
	mul r2, r4
	sub r1, r1, r2
	str r1, [r5,#0x34]
	ldr r0, dword_80E21D0 // =0x800000 
	ldr r1, dword_80E21D4 // =0xfff77778 
	mul r1, r4
	add r0, r0, r1
	str r0, [r5,#0x3c]
	mov r0, #0xf
	sub r0, r0, r4
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x22]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80E21CC // =0x15555 
	lsl r1, r1, #1
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80E21D4 // =0xfff77778 
	str r0, [r5,#0x48]
	mov r1, #0x10
	mov r2, #0x10
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E20B0

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,pc}
.func
.thumb_func
sub_80E213C:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E219E
	ldrb r0, [r5,#5]
	cmp r0, #2
	beq loc_80E2160
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#5]
	ldr r2, off_80E21A4 // =byte_80E21A8 
	ldrb r1, [r2,r1]
	cmp r0, r1
	bne loc_80E219E
	bl battle_isTimeStop
	bne locret_80E21A2
loc_80E2160:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	ble loc_80E219E
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E21A2
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldr r1, dword_80E21C8 // =0x140000 
	mul r0, r1
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	ldr r0, dword_80E21D0 // =0x800000 
	str r0, [r5,#0x3c]
	mov r0, #0xf
	strh r0, [r5,#0x20]
	b locret_80E21A2
loc_80E219E:
	bl object_freeMemory
locret_80E21A2:
	pop {pc}
off_80E21A4: .word byte_80E21A8
byte_80E21A8: .byte 0xD, 0xE, 0x0, 0x5E
.endfunc // sub_80E213C

.func
.thumb_func
sub_80E21AC:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x19
	bl object_spawnType4
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80E21C6
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r7, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E21C6:
	pop {pc}
dword_80E21C8: .word 0x140000
dword_80E21CC: .word 0x15555
dword_80E21D0: .word 0x800000
dword_80E21D4: .word 0xFFF77778
.endfunc // sub_80E21AC

loc_80E21D8:
	push {lr}
	ldr r1, off_80E21E8 // =off_80E21EC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E21E8: .word off_80E21EC
off_80E21EC: .word sub_80E21F8+1
	.word sub_80E2208+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E21F8:
	push {lr}
	mov r0, #1
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x22]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80E21F8

.func
.thumb_func
sub_80E2208:
	push {r4,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E223E
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xc
	cmp r0, r1
	bne loc_80E223E
	bl battle_isTimeStop
	bne locret_80E2242
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	ble loc_80E223E
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E2242
	ldrb r4, [r5,#4]
	bl sub_80E2388
	mov r0, #0xa
	strh r0, [r5,#0x20]
	b locret_80E2242
loc_80E223E:
	bl object_freeMemory
locret_80E2242:
	pop {r4,pc}
.endfunc // sub_80E2208

.func
.thumb_func
sub_80E2244:
	push {lr}
	push {r5}
	mov r0, #0x1a
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E225A
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E225A:
	pop {pc}
.endfunc // sub_80E2244

loc_80E225C:
	push {lr}
	ldr r1, off_80E2270 // =off_80E2274 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80E2270: .word off_80E2274
off_80E2274: .word sub_80E2280+1
	.word sub_80E2358+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E2280:
	push {lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r1, off_80E2338 // =dword_80E233C 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #0x28 
	strh r0, [r5,#0x3e]
	bl sub_8001532
	ldrb r2, [r5,#4]
	cmp r2, #2
	bge loc_80E22B0
	mov r1, #0x48 
	svc 6
	ldrh r0, [r5,#0x3a]
	add r0, r0, r1
	strh r0, [r5,#0x3a]
	b loc_80E22BA
loc_80E22B0:
	mov r1, #0xf0
	svc 6
	ldrh r0, [r5,#0x36]
	add r0, r0, r1
	strh r0, [r5,#0x36]
loc_80E22BA:
	bl sub_800E2AC
	bl sub_8001532
	ldr r1, dword_80E23A0 // =0x3ffff 
	and r1, r0
	mov r0, #4
	lsl r0, r0, #0x10
	add r0, r0, r1
	ldrb r2, [r5,#4]
	lsl r2, r2, #1
	ldr r3, off_80E2344 // =dword_80E2348 
	add r3, r3, r2
	mov r1, #0
	ldrsb r2, [r3,r1]
	mov r1, #1
	ldrsb r3, [r3,r1]
	mul r2, r0
	mul r3, r0
	str r2, [r5,#0x40]
	str r3, [r5,#0x44]
	mov r0, #0x46 
	ldrb r1, [r5,#4]
	cmp r1, #2
	blt loc_80E22EE
	mov r0, #0x1e
loc_80E22EE:
	strh r0, [r5,#0x20]
	mov r1, #8
	mov r2, #0xc
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E2280

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0xf
	ldrb r1, [r5,#4]
	cmp r1, #2
	blt loc_80E2314
	mov r0, #0x10
loc_80E2314:
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#4]
	ldr r1, off_80E2350 // =byte_80E2354 
	ldrb r0, [r1,r0]
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
	.balign 4, 0x00
off_80E2338: .word dword_80E233C
dword_80E233C: .word 0x1000107, 0x10401
off_80E2344: .word dword_80E2348
dword_80E2348: .word 0x100FF, 0x100FF00
off_80E2350: .word byte_80E2354
byte_80E2354: .byte 0x1, 0x0, 0x0, 0x2
.func
.thumb_func
sub_80E2358:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E2382
	bl battle_isTimeStop
	bne locret_80E2386
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80E2382
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	b locret_80E2386
loc_80E2382:
	bl object_freeMemory
locret_80E2386:
	pop {pc}
.endfunc // sub_80E2358

.func
.thumb_func
sub_80E2388:
	push {lr}
	push {r5}
	mov r0, #0x1b
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E239C
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E239C:
	pop {pc}
	.byte 0, 0
dword_80E23A0: .word 0x3FFFF
.endfunc // sub_80E2388

loc_80E23A4:
	push {lr}
	ldr r1, off_80E23B4 // =off_80E23B8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E23B4: .word off_80E23B8
off_80E23B8: .word sub_800B916+1
	.word sub_80E23C4+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E23C4:
	push {lr}
	ldr r1, off_80E23D4 // =off_80E23D8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E23D4: .word off_80E23D8
off_80E23D8: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E23E8+1
	.word sub_800BC88+1
.endfunc // sub_80E23C4

.func
.thumb_func
sub_80E23E8:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E2460
	mov r0, #0x10
	ldrb r1, [r5,#4]
	tst r1, r1
	beq loc_80E23FA
	mov r0, #0x40 
loc_80E23FA:
	bl sub_801DF8C
	ldrb r0, [r5,#0x16]
	bl sub_802E070
	ldr r1, off_80E24DC // =0x1e0 
	mov r2, #0
	ldrb r3, [r5,#4]
	tst r3, r3
	bne loc_80E2414
	strh r1, [r0,#0x3c]
	strh r2, [r0,#0x3a]
	b loc_80E2418
loc_80E2414:
	strh r1, [r0,#0x3a]
	strh r2, [r0,#0x3c]
loc_80E2418:
	bl sub_800A8F8
	tst r0, r0
	beq loc_80E2448
	bl get_802D246 // () -> int
	mov r1, #8
	tst r0, r1
	bne loc_80E2448
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_802E070
	ldr r1, off_80E24E0 // =0x438 
	mov r2, #0
	ldrb r3, [r5,#4]
	tst r3, r3
	bne loc_80E2444
	strh r1, [r0,#0x3c]
	strh r2, [r0,#0x3a]
	b loc_80E2448
loc_80E2444:
	strh r1, [r0,#0x3a]
	strh r2, [r0,#0x3c]
loc_80E2448:
	ldr r3, off_80E2498 // =dword_80E24A0 
	ldmia r3!, {r0-r2}
	bl loc_8000AC8
	ldr r3, off_80E249C // =dword_80E24AC 
	ldmia r3!, {r0-r2}
	bl loc_8000AC8
	mov r0, #0x46 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E2460:
	bl sub_800A8F8
	tst r0, r0
	beq loc_80E247C
	bl get_802D246 // () -> int
	mov r1, #8
	tst r0, r1
	beq loc_80E247C
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	bne loc_80E2484
loc_80E247C:
	mov r0, #0x78 
	mov r1, #0xc
	bl sub_800AE90
loc_80E2484:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E2494
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E2494:
	pop {pc}
	.balign 4, 0x00
off_80E2498: .word dword_80E24A0
off_80E249C: .word dword_80E24AC
dword_80E24A0: .word 0x86E55FC, 0x6017940, 0x100
dword_80E24AC: .word 0x86E56FC, 0x30016F0, 0x20
.endfunc // sub_80E23E8

.func
.thumb_func
sub_80E24B8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1c
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E24D8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E24D8:
	pop {pc}
	.balign 4, 0x00
off_80E24DC: .word 0x1E0
off_80E24E0: .word 0x438
.endfunc // sub_80E24B8

loc_80E24E4:
	push {lr}
	ldr r1, off_80E24F4 // =off_80E24F8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E24F4: .word off_80E24F8
off_80E24F8: .word sub_800B916+1
	.word sub_80E2504+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E2504:
	push {lr}
	ldr r1, off_80E2514 // =off_80E2518 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2514: .word off_80E2518
off_80E2518: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E2528+1
	.word sub_800BC88+1
.endfunc // sub_80E2504

.func
.thumb_func
sub_80E2528:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E254C
	ldr r1, [r5,#0x4c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	bl sub_801BB1C
	mov r3, #5
	add r3, r3, r5
	mov r0, #1
	strb r0, [r3]
	ldrb r4, [r5,#4]
	bl sub_80E2712
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E254C:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80E2564
	ldr r1, [r5,#0x4c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	bl sub_801BB46
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E2564:
	pop {r4,pc}
.endfunc // sub_80E2528

.func
.thumb_func
sub_80E2566:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x1d
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E2586
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E2586:
	pop {pc}
dword_80E2588: .word 0x0
	.word 0x10, 0x0
	.word 0x10, 0x0
	.word object_crackPanelDup1+1
	.word 0x0
	.word 0x10, 0x0
	.word 0x10, 0x0
	.word object_breakPanel_dup3+1
	.word 0x0
	.word 0x10, 0x0
	.word 0x10, 0x0
	.word object_panel_setPoison+1
.endfunc // sub_80E2566

loc_80E25D0:
	push {lr}
	ldr r1, off_80E25E0 // =off_80E25E4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E25E0: .word off_80E25E4
off_80E25E4: .word sub_80E25F0+1
	.word sub_80E2628+1
	.word sub_80E268C+1
.func
.thumb_func
sub_80E25F0:
	push {lr}
	ldrb r0, [r5,#4]
	mov r1, #0x18
	mul r0, r1
	ldr r2, off_80E2618 // =dword_80E2588 
	add r2, r2, r0
	str r2, [r5,#0x60]
	ldrb r0, [r2,#1]
	ldr r1, off_80E261C // =off_80E2620 
	ldr r0, [r1,r0]
	mov lr, pc
	bx r0
	mov r0, #8
.endfunc // sub_80E25F0

	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80E2628
	pop {pc}
	.balign 4, 0x00
off_80E2618: .word dword_80E2588
off_80E261C: .word off_80E2620
off_80E2620: .word sub_80E269A+1
	.word sub_80E26D8+1
.func
.thumb_func
sub_80E2628:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80E2684
	mov r0, #8
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x64]
	sub r0, #1
	str r0, [r5,#0x64]
	bmi loc_80E2686
	mov r6, #0x68 
	add r6, r6, r5
	ldrb r0, [r6,r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	push {r0,r1}
	ldr r7, [r5,#0x60]
	ldr r7, [r7,#0x14]
	mov lr, pc
	bx r7
	tst r0, r0
	pop {r0,r1}
	beq locret_80E2684
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r4, [r5,#4]
	cmp r4, #2
	beq loc_80E2678
	mov r4, #2
	bl sub_80E05F6
	mov r0, #0x97
	bl sound_play // () -> void
	b locret_80E2684
loc_80E2678:
	mov r4, #1
	bl sub_80E1D7A
	mov r0, #0x90
	bl sound_play // () -> void
locret_80E2684:
	pop {r4,r6,r7,pc}
loc_80E2686:
	mov r0, #8
	strb r0, [r5,#8]
	pop {r4,r6,r7,pc}
.endfunc // sub_80E2628

.func
.thumb_func
sub_80E268C:
	push {lr}
	mov r0, #0
	ldr r1, [r5,#0x4c]
	strb r0, [r1]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E268C

.func
.thumb_func
sub_80E269A:
	push {r4,r6,r7,lr}
	mov r1, #3
	ldr r7, [r5,#0x60]
	ldr r2, [r7,#4]
	ldr r3, [r7,#8]
	mov r6, #0
	mov r7, #0x68 
	add r7, r7, r5
loc_80E26AA:
	mov r0, #6
loc_80E26AC:
	push {r0-r3,r6,r7}
	bl object_checkPanelParameters
.endfunc // sub_80E269A

	tst r0, r0
	pop {r0-r3,r6,r7}
	beq loc_80E26C0
	lsl r4, r1, #4
	orr r4, r0
	strb r4, [r7,r6]
	add r6, #1
loc_80E26C0:
	sub r0, #1
	bne loc_80E26AC
	sub r1, #1
	bne loc_80E26AA
	str r6, [r5,#0x64]
	add r1, r6, #0
	beq locret_80E26D6
	add r2, r1, #0
	add r0, r7, #0
	bl sub_8000C72
locret_80E26D6:
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E26D8:
	push {r4,r6,r7,lr}
	ldrb r1, [r5,#0x13]
	ldr r7, [r5,#0x60]
	ldr r2, [r7,#4]
	ldr r3, [r7,#8]
	mov r6, #0
	mov r7, #0x68 
	add r7, r7, r5
	mov r0, #6
loc_80E26EA:
	push {r0,r1,r6,r7}
	bl object_checkPanelParameters
.endfunc // sub_80E26D8

	tst r0, r0
	pop {r0,r1,r6,r7}
	beq loc_80E26FE
	lsl r4, r1, #4
	orr r4, r0
	strb r4, [r7,r6]
	add r6, #1
loc_80E26FE:
	sub r0, #1
	bne loc_80E26EA
	str r6, [r5,#0x64]
	add r1, r6, #0
	beq locret_80E2710
	add r2, r1, #0
	add r0, r7, #0
	bl sub_8000C72
locret_80E2710:
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E2712:
	push {lr}
	push {r3,r5}
	mov r0, #0x1e
	bl object_spawnType4
	add r0, r5, #0
	pop {r3,r5}
	beq locret_80E2728
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r3, [r0,#0x4c]
locret_80E2728:
	pop {pc}
	.balign 4, 0x00
dword_80E272C: .word 0x40030002, 0x0
	.word 0x8020, 0x20, 0x8000, 0x40030008, 0x0
	.word 0x8000, 0x0
	.word 0x8000, 0x40030007, 0x0
	.word 0x8000, 0x0
	.word 0x8000, 0x40030006, 0x0
	.word 0x8000, 0x0
	.word 0x8000, 0x40030805, 0x0
	.word 0x8000, 0x0
	.word 0x8000, 0x40030005, 0x0
	.word 0x8020, 0x20, 0x8000, 0x40030C04, 0x0
	.word 0x8020, 0x20, 0x8000, 0x40000802, 0x0
	.word 0x8000, 0x0
	.word 0x8000, 0x40000402, 0x0
	.word 0x8000, 0x0
	.word 0x8000, 0x1E030C02, 0x0
	.word 0x8020, 0x20, 0x8000, 0x1E000002, 0x0
	.word 0x8020, 0x20, 0x8000, 0x1E030004, 0x20, 0x8000, 0x0
	.word 0x8020, 0x1E030002, 0x2000, 0x8020, 0x2020, 0x8000
	.word 0x1E030002, 0x1000, 0x8000, 0x1000, 0x8000, 0x1E030002
	.word 0x800, 0x8000, 0x800, 0x8000, 0x1E030002, 0x200
	.word 0x8000, 0x200, 0x8000, 0x1E030002, 0x400, 0x8000
	.word 0x400, 0x8000, 0x4003040B, 0x20, 0x8000, 0x0
	.word 0x8020, 0x4003040C, 0x20, 0x8000, 0x0
	.word 0x8020
.endfunc // sub_80E2712

loc_80E28A8:
	push {lr}
	ldr r1, off_80E28B8 // =off_80E28BC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E28B8: .word off_80E28BC
off_80E28BC: .word sub_80E28C8+1
	.word sub_80E292C+1
	.word sub_80E29E6+1
.func
.thumb_func
sub_80E28C8:
	push {r4,lr}
	ldrb r0, [r5,#0x16]
	cmp r0, #0
	beq loc_80E28E0
	ldrb r0, [r5,#4]
	mov r1, #0x12
	cmp r0, #0x11
	beq loc_80E28DE
	cmp r0, #0x12
	bne loc_80E28E0
	mov r1, #0x11
loc_80E28DE:
	strb r1, [r5,#4]
loc_80E28E0:
	ldrb r0, [r5,#4]
	mov r1, #0x14
	mul r0, r1
	ldr r4, off_80E2914 // =dword_80E272C 
	add r4, r4, r0
	str r4, [r5,#0x60]
	ldrb r0, [r5,#4]
	cmp r0, #8
	beq loc_80E28FA
	cmp r0, #7
	beq loc_80E28FA
	cmp r0, #0xa
	bne loc_80E28FA
loc_80E28FA:
	ldrb r0, [r4,#1]
	ldr r1, off_80E2918 // =off_80E291C 
	ldr r0, [r1,r0]
	mov lr, pc
	bx r0
	ldrb r0, [r4,#3]
.endfunc // sub_80E28C8

	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80E292C
	pop {r4,pc}
	.balign 4, 0x00
off_80E2914: .word dword_80E272C
off_80E2918: .word off_80E291C
off_80E291C: .word sub_80E29F8+1
	.word sub_80E2A30+1
	.word sub_80E2A64+1
	.word sub_80E2A9A+1
.func
.thumb_func
sub_80E292C:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	beq loc_80E2990
	mov r1, #3
	tst r0, r1
	bne loc_80E2954
	push {r0}
	ldrb r0, [r5,#4]
	cmp r0, #8
	beq loc_80E2952
	cmp r0, #7
	beq loc_80E2952
	cmp r0, #0xc
	beq loc_80E2952
	mov r0, #0xa3
	bl sound_play // () -> void
loc_80E2952:
	pop {r0}
loc_80E2954:
	ldr r1, [r5,#0x60]
	ldrb r1, [r1,#2]
	tst r1, r1
	beq loc_80E2960
	lsr r0, r0, #3
	bcc locret_80E298E
loc_80E2960:
	ldr r7, [r5,#0x60]
	ldrb r2, [r7]
	mov r7, #0x68 
	add r7, r7, r5
	ldr r6, [r5,#0x64]
loc_80E296A:
	sub r6, #1
	bmi locret_80E298E
	push {r2,r6,r7}
	push {r2}
	ldrb r0, [r7,r6]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	pop {r2}
	push {r0-r2}
	bl sub_800C90A
	ldrb r3, [r0,#3]
	pop {r0-r2}
	bl object_setPanelTypeBlink
	pop {r2,r6,r7}
	b loc_80E296A
locret_80E298E:
	pop {r4,r6,r7,pc}
loc_80E2990:
	ldr r7, [r5,#0x60]
	ldrb r2, [r7]
	mov r7, #0x68 
	add r7, r7, r5
	ldr r6, [r5,#0x64]
loc_80E299A:
	sub r6, #1
	bmi loc_80E29C6
	push {r2,r6,r7}
	push {r2}
	ldrb r0, [r7,r6]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	pop {r2}
	push {r0-r2}
	bl sub_800C90A
	ldrb r3, [r0,#3]
	pop {r0-r2}
	push {r0-r3}
	bl object_setPanelType
	pop {r0-r3}
	bl object_setPanelTypeBlink
	pop {r2,r6,r7}
	b loc_80E299A
loc_80E29C6:
	ldrb r1, [r5,#4]
	cmp r1, #8
	beq loc_80E29E0
	cmp r1, #7
	beq loc_80E29E0
	mov r0, #0xa4
	cmp r1, #6
	beq loc_80E29DA
	cmp r1, #0xb
	bne loc_80E29DC
loc_80E29DA:
	mov r0, #0x90
loc_80E29DC:
	bl sound_play // () -> void
loc_80E29E0:
	mov r0, #8
	strb r0, [r5,#8]
	pop {r4,r6,r7,pc}
.endfunc // sub_80E292C

.func
.thumb_func
sub_80E29E6:
	push {lr}
	mov r0, #0
	ldr r1, [r5,#0x4c]
	tst r1, r1
	beq loc_80E29F2
	str r0, [r1]
loc_80E29F2:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E29E6

.func
.thumb_func
sub_80E29F8:
	push {r4,r6,r7,lr}
	mov r1, #3
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r7, [r5,#0x60]
	add r0, r0, r7
	ldr r2, [r0,#4]
	ldr r3, [r0,#8]
	mov r6, #0
	mov r7, #0x68 
	add r7, r7, r5
loc_80E2A0E:
	mov r0, #6
loc_80E2A10:
	push {r0-r3}
	bl object_checkPanelParameters
.endfunc // sub_80E29F8

	tst r0, r0
	pop {r0-r3}
	beq loc_80E2A24
	lsl r4, r1, #4
	orr r4, r0
	strb r4, [r7,r6]
	add r6, #1
loc_80E2A24:
	sub r0, #1
	bne loc_80E2A10
	sub r1, #1
	bne loc_80E2A0E
	str r6, [r5,#0x64]
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E2A30:
	push {r4,r6,r7,lr}
	ldrb r1, [r5,#0x13]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r7, [r5,#0x60]
	add r0, r0, r7
	ldr r2, [r0,#4]
	ldr r3, [r0,#8]
	mov r6, #0
	mov r7, #0x68 
	add r7, r7, r5
	mov r0, #6
loc_80E2A48:
	push {r0-r3}
	bl object_checkPanelParameters
.endfunc // sub_80E2A30

	tst r0, r0
	pop {r0-r3}
	beq loc_80E2A5C
	lsl r4, r1, #4
	orr r4, r0
	strb r4, [r7,r6]
	add r6, #1
loc_80E2A5C:
	sub r0, #1
	bne loc_80E2A48
	str r6, [r5,#0x64]
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E2A64:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r7, [r5,#0x60]
	ldrb r4, [r5,#0x16]
	lsl r4, r4, #3
	add r4, r4, r7
	ldr r2, [r4,#4]
	ldr r3, [r4,#8]
	mov r6, #0
	mov r7, #0x68 
	add r7, r7, r5
	push {r0,r1,r6,r7}
	bl object_checkPanelParameters
.endfunc // sub_80E2A64

	tst r0, r0
	pop {r0,r1,r6,r7}
	beq loc_80E2A96
	lsl r4, r1, #4
	orr r4, r0
	strb r4, [r7,r6]
	add r6, #1
loc_80E2A96:
	str r6, [r5,#0x64]
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E2A9A:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r7, [r5,#0x60]
	ldrb r4, [r5,#0x16]
	lsl r4, r4, #3
	add r4, r4, r7
	ldr r2, [r4,#4]
	ldr r3, [r4,#8]
	mov r6, #0
	mov r7, #0x68 
	add r7, r7, r5
	push {r0,r1,r6,r7}
	bl object_checkPanelParameters
.endfunc // sub_80E2A9A

	tst r0, r0
	pop {r0,r1,r6,r7}
	beq loc_80E2AC6
	lsl r4, r1, #4
	orr r4, r0
	strb r4, [r7,r6]
	add r6, #1
loc_80E2AC6:
	str r6, [r5,#0x64]
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E2ACA:
	push {lr}
	push {r0,r1,r3,r5}
	mov r0, #0x1f
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E2AE4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r3, [r0,#0x4c]
locret_80E2AE4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E2ACA

loc_80E2AE8:
	push {lr}
	ldr r1, off_80E2AF8 // =off_80E2AFC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2AF8: .word off_80E2AFC
off_80E2AFC: .word sub_800B916+1
	.word sub_80E2B08+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E2B08:
	push {lr}
	ldr r1, off_80E2B18 // =off_80E2B1C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2B18: .word off_80E2B1C
off_80E2B1C: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E2B2C+1
	.word sub_800BC88+1
.endfunc // sub_80E2B08

.func
.thumb_func
sub_80E2B2C:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E2B4A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r3, #5
	add r3, r3, r5
	mov r4, #1
	strb r4, [r3]
	ldrb r4, [r5,#4]
	bl sub_80E2ACA
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E2B4A:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80E2B58
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E2B58:
	pop {r4,pc}
.endfunc // sub_80E2B2C

.func
.thumb_func
sub_80E2B5A:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x20 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E2B7A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E2B7A:
	pop {pc}
.endfunc // sub_80E2B5A

loc_80E2B7C:
	push {lr}
	ldr r1, off_80E2B8C // =off_80E2B90 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2B8C: .word off_80E2B90
off_80E2B90: .word sub_800B916+1
	.word sub_80E2B9C+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E2B9C:
	push {lr}
	ldr r1, off_80E2BAC // =off_80E2BB0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2BAC: .word off_80E2BB0
off_80E2BB0: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E2BC0+1
	.word sub_800BC88+1
.endfunc // sub_80E2B9C

.func
.thumb_func
sub_80E2BC0:
	push {lr}
	ldr r1, off_80E2BD0 // =off_80E2BD4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E2BD0: .word off_80E2BD4
off_80E2BD4: .word sub_80E2BE0+1
	.word sub_80E2C08+1
	.word loc_80E2C70+1
.endfunc // sub_80E2BC0

.func
.thumb_func
sub_80E2BE0:
	push {lr}
	mov r0, #3
	str r0, [r5,#0x60]
	mov r0, #0
	str r0, [r5,#0x68]
	ldr r0, dword_80E2C04 // =0x30201 
	str r0, [r5,#0x64]
	add r0, r5, #0
	add r0, #0x64 
	mov r1, #3
	mov r2, #4
	bl sub_8000C72
	mov r0, #0xc
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
dword_80E2C04: .word 0x30201
.endfunc // sub_80E2BE0

.func
.thumb_func
sub_80E2C08:
	push {r4,r6,r7,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E2C58
	ldr r1, [r5,#0x60]
	sub r1, #1
	str r1, [r5,#0x60]
	blt loc_80E2C54
	ldr r7, [r5,#0x60]
	mov r2, #0x64 
	add r2, r2, r5
	ldrb r2, [r2,r7]
	add r7, #0x68 
	add r7, r7, r5
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	bl sub_800D4D0
	tst r0, r0
	beq loc_80E2C4E
	ldr r6, [r5,#0x2c]
	ldrh r2, [r5,#0x32]
	add r6, r6, r2
	ldrb r2, [r5,#0xe]
	push {r0-r2}
	bl sub_80CCC26
	tst r0, r0
	beq loc_80E2C4C
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
loc_80E2C4C:
	pop {r0-r2}
loc_80E2C4E:
	mov r0, #0xc
	strh r0, [r5,#0x20]
	pop {r4,r6,r7,pc}
loc_80E2C54:
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80E2C58:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
	.word dword_80E2C60
dword_80E2C60: .word 0x0
	.word 0x20, 0x20, 0x0
.endfunc // sub_80E2C08

loc_80E2C70:
	ldr r0, [r5,#0x68]
	tst r0, r0
	bne locret_80E2C7E
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E2C7E:
	mov pc, lr
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x21 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E2CA0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E2CA0:
	pop {pc}
	.balign 4, 0x00
loc_80E2CA4:
	push {lr}
	ldr r1, off_80E2CB4 // =off_80E2CB8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2CB4: .word off_80E2CB8
off_80E2CB8: .word sub_800B916+1
	.word sub_80E2CC4+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E2CC4:
	push {lr}
	ldr r1, off_80E2CD4 // =off_80E2CD8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2CD4: .word off_80E2CD8
off_80E2CD8: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E2CE8+1
	.word sub_800BC88+1
.endfunc // sub_80E2CC4

.func
.thumb_func
sub_80E2CE8:
	push {lr}
	ldr r1, off_80E2CF8 // =off_80E2CFC 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2CF8: .word off_80E2CFC
off_80E2CFC: .word sub_80E2D08+1
	.word sub_80E2D30+1
	.word sub_80E2D54+1
.endfunc // sub_80E2CE8

.func
.thumb_func
sub_80E2D08:
	push {lr}
	bl sub_80E2D98
.endfunc // sub_80E2D08

	tst r0, r0
	beq loc_80E2D22
	mov r0, #0x91
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
loc_80E2D22:
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {pc}
.func
.thumb_func
sub_80E2D30:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E2D52
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	bl sub_80E2DE0
	tst r0, r0
	beq loc_80E2D4E
	ldr r0, [r5,#0x60]
	sub r0, #1
	str r0, [r5,#0x60]
	bne locret_80E2D52
loc_80E2D4E:
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80E2D52:
	pop {pc}
.endfunc // sub_80E2D30

.func
.thumb_func
sub_80E2D54:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E2D64
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E2D64:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E2D74
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E2D74:
	pop {pc}
.endfunc // sub_80E2D54

.func
.thumb_func
sub_80E2D76:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x22 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E2D96
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E2D96:
	pop {pc}
.endfunc // sub_80E2D76

.func
.thumb_func
sub_80E2D98:
	push {r4,r6,r7,lr}
	mov r4, #0
	mov r6, #1
loc_80E2D9E:
	mov r7, #1
loc_80E2DA0:
	add r0, r6, #0
	add r1, r7, #0
	ldrb r2, [r5,#0x16]
	bl sub_800D618
.endfunc // sub_80E2D98

	tst r0, r0
	beq loc_80E2DCE
	add r0, r6, #0
	add r1, r7, #0
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	push {r4}
	mov r4, #0x3b 
	bl sub_80E05F6
	pop {r4}
	add r0, r6, #0
	bl object_setPanelAllianceTimerShort
	add r4, #1
loc_80E2DCE:
	add r7, #1
	cmp r7, #3
	ble loc_80E2DA0
	add r6, #1
	cmp r6, #6
	ble loc_80E2D9E
	str r4, [r5,#0x60]
	add r0, r4, #0
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E2DE0:
	push {r4,r6,r7,lr}
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r7, off_80E2E20 // =dword_80E2E24 
	add r7, r7, r1
	ldr r2, [r7]
	ldr r3, [r7,#4]
	mov r4, #0
	mov r0, #6
loc_80E2DF2:
	mov r1, #3
loc_80E2DF4:
	push {r0-r4}
	bl object_checkPanelParameters
.endfunc // sub_80E2DE0

	tst r0, r0
	pop {r0-r4}
	beq loc_80E2E12
	push {r0-r4}
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	bl sub_80CCD4A
	pop {r0-r4}
	add r4, #1
loc_80E2E12:
	sub r1, #1
	bne loc_80E2DF4
	sub r0, #1
	bne loc_80E2DF2
	add r0, r4, #0
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80E2E20: .word dword_80E2E24
dword_80E2E24: .word 0x200000, 0x0
	.word 0x400000, 0x0
loc_80E2E34:
	push {lr}
	ldr r1, off_80E2E44 // =off_80E2E48 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2E44: .word off_80E2E48
off_80E2E48: .word sub_800B916+1
	.word sub_80E2E54+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E2E54:
	push {lr}
	ldr r1, off_80E2E64 // =off_80E2E68 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2E64: .word off_80E2E68
off_80E2E68: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E2E78+1
	.word sub_800BC88+1
.endfunc // sub_80E2E54

.func
.thumb_func
sub_80E2E78:
	push {lr}
	ldr r1, off_80E2E88 // =off_80E2E8C 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E2E88: .word off_80E2E8C
off_80E2E8C: .word sub_80E2E94+1
	.word sub_80E2EBC+1
.endfunc // sub_80E2E78

.func
.thumb_func
sub_80E2E94:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E2EA4
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E2EA4:
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sprite_forceWhitePallete
	pop {r5}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E2EBA
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E2EBA:
	pop {pc}
.endfunc // sub_80E2E94

.func
.thumb_func
sub_80E2EBC:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E2EF0
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	ldr r4, dword_80E2F10 // =0x13c00 
	bl sub_80E11E0
	mov r0, #0xbc
	bl sound_play // () -> void
	ldr r4, off_80E2F14 // =dword_80E2F18 
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r4, [r4,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	mov r6, #0
	ldr r7, dword_80E2F20 // =0x3000 
	bl sub_80C53A6
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E2EF0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80E2F02
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r4,pc}
loc_80E2F02:
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sprite_forceWhitePallete
	pop {r5}
	pop {r4,pc}
	.byte 0, 0
dword_80E2F10: .word 0x13C00
off_80E2F14: .word dword_80E2F18
dword_80E2F18: .word 0x3405FF82, 0x3405FF81
dword_80E2F20: .word 0x3000
.endfunc // sub_80E2EBC

.func
.thumb_func
sub_80E2F24:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x23 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E2F44
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E2F44:
	pop {pc}
	.balign 4, 0x00
dword_80E2F48: .word 0x1F, 0x220045, 0x6B000B
	.hword 0x24
.endfunc // sub_80E2F24

.func
.thumb_func
sub_80E2F56:
	push {lr}
	ldr r1, off_80E2F64 // =off_80E2F68 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80E2F64: .word off_80E2F68
off_80E2F68: .word sub_80E2F74+1
	.word sub_80E2F8C+1
	.word sub_80E2FE0+1
.endfunc // sub_80E2F56

.func
.thumb_func
sub_80E2F74:
	push {lr}
	mov r0, #0x60 
	add r0, r0, r5
	ldrb r1, [r5,#5]
	add r2, r1, #0
	bl sub_8000C72
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80E2F8C
	pop {pc}
.endfunc // sub_80E2F74

.func
.thumb_func
sub_80E2F8C:
	push {r7,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bcs locret_80E2FD4
	ldrh r0, [r5,#0x22]
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#5]
	sub r0, #1
	strb r0, [r5,#5]
	bmi loc_80E2FD6
	mov r7, #0x60 
	add r7, r7, r5
	ldrb r0, [r7,r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	ldr r3, [r5,#0x3c]
	ldrb r4, [r5,#4]
	lsl r4, r4, #1
	ldr r7, off_80E2FDC // =dword_80E2F48 
	add r7, r7, r4
	ldrb r4, [r7]
	push {r7}
	bl sub_80E05F6
	pop {r7}
	ldrb r0, [r7,#1]
	tst r0, r0
	beq locret_80E2FD4
	bl sound_play // () -> void
locret_80E2FD4:
	pop {r7,pc}
loc_80E2FD6:
	mov r0, #8
	str r0, [r5,#8]
	pop {r7,pc}
off_80E2FDC: .word dword_80E2F48
.endfunc // sub_80E2F8C

.func
.thumb_func
sub_80E2FE0:
	push {lr}
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E2FE0

.func
.thumb_func
sub_80E2FE8:
	push {r4,r6,r7,lr}
	push {r0,r1,r5}
	mov r0, #0x24 
	bl object_spawnType4
	add r7, r5, #0
	pop {r0,r1,r5}
	beq locret_80E3032
	strh r1, [r7,#0x22]
	add r4, r0, #0
	lsl r0, r0, #0x19
	bcc loc_80E301C
	mov r1, #0
	strh r1, [r7,#0x12]
	push {r5,r7}
	add r5, r7, #0
	lsr r0, r0, #0x16
	ldr r6, off_80E3034 // =dword_8019C34 
	add r6, r6, r0
	ldr r2, [r6]
	ldr r3, [r6,#4]
	add r7, #0x60 
	bl object_getPanelsExceptCurrentFilterred
	pop {r5,r7}
	b loc_80E3030
loc_80E301C:
	push {r5,r7}
	ldrb r0, [r7,#6]
	ldrb r1, [r7,#7]
	ldr r2, dword_80E3098 // =0x10000 
	mov r3, #0
	ldrb r6, [r5,#0x16]
	add r7, #0x60 
	bl sub_80E3038
	pop {r5,r7}
loc_80E3030:
	strb r0, [r7,#5]
locret_80E3032:
	pop {r4,r6,r7,pc}
off_80E3034: .word dword_8019C34
.endfunc // sub_80E2FE8

.func
.thumb_func
sub_80E3038:
	push {r4,r6,lr}
	sub sp, sp, #0x1c
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	ldr r0, off_80E3094 // =off_8019B78 
	lsl r4, r4, #2
	ldr r4, [r0,r4]
	add r0, r6, #0
	bl sub_800E2C2
	str r0, [sp,#0x10]
	mov r6, #0
loc_80E3054:
	mov r0, #0
	ldrsb r0, [r4,r0]
	cmp r0, #0x7f
	beq loc_80E308C
	mov r1, #1
	ldrsb r1, [r4,r1]
	ldr r2, [sp,#0x10]
	mul r0, r2
	ldr r2, [sp]
	add r0, r0, r2
	str r0, [sp,#0x14]
	ldr r2, [sp,#4]
	add r1, r1, r2
	str r1, [sp,#0x18]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_80E3088
	ldr r0, [sp,#0x14]
	ldr r1, [sp,#0x18]
	lsl r1, r1, #4
	orr r0, r1
	strb r0, [r7,r6]
	add r6, #1
loc_80E3088:
	add r4, #2
	b loc_80E3054
loc_80E308C:
	add r0, r6, #0
	add sp, sp, #0x1c
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80E3094: .word off_8019B78
dword_80E3098: .word 0x10000
.endfunc // sub_80E3038

loc_80E309C:
	push {lr}
	ldr r1, off_80E30AC // =off_80E30B0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E30AC: .word off_80E30B0
off_80E30B0: .word sub_800B916+1
	.word sub_80E30BC+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E30BC:
	push {lr}
	ldr r1, off_80E30CC // =off_80E30D0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E30CC: .word off_80E30D0
off_80E30D0: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E30E0+1
	.word sub_800BC88+1
.endfunc // sub_80E30BC

.func
.thumb_func
sub_80E30E0:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E3116
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	mov r2, #0x10
	ldr r3, dword_80E314C // =0xf880080 
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E310E
	ldrh r2, [r5,#0x16]
	mov r3, #0
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	bl sub_80CD2B4
loc_80E310E:
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E3116:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E3126
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E3126:
	pop {r4,r6,pc}
.endfunc // sub_80E30E0

.func
.thumb_func
sub_80E3128:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x25 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E3148
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E3148:
	pop {pc}
	.balign 4, 0x00
dword_80E314C: .word 0xF880080
.endfunc // sub_80E3128

loc_80E3150:
	push {lr}
	ldr r1, off_80E3164 // =off_80E3168 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80E3164: .word off_80E3168
off_80E3168: .word sub_80E3174+1
	.word sub_80E318E+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E3174:
	push {lr}
	ldr r0, [r5,#4]
	bl sub_801BE2A
.endfunc // sub_80E3174

	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E318E
	pop {pc}
.func
.thumb_func
sub_80E318E:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E319E
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E319E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80E31B2
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
loc_80E31B2:
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	pop {pc}
.endfunc // sub_80E318E

	push {lr}
	push {r5}
	mov r0, #0x26 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E31D6
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E31D6:
	pop {pc}
loc_80E31D8:
	push {lr}
	ldr r1, off_80E31E8 // =off_80E31EC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E31E8: .word off_80E31EC
off_80E31EC: .word sub_800B916+1
	.word sub_80E31F8+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E31F8:
	push {lr}
	ldr r1, off_80E3208 // =off_80E320C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E3208: .word off_80E320C
off_80E320C: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E321C+1
	.word sub_800BC88+1
.endfunc // sub_80E31F8

.func
.thumb_func
sub_80E321C:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E3230
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	bl sub_80E3290
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E3230:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E3240
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E3240:
	pop {r4,r6,pc}
.endfunc // sub_80E321C

.func
.thumb_func
sub_80E3242:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x27 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E3262
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E3262:
	pop {pc}
.endfunc // sub_80E3242

.func
.thumb_func
sub_80E3264:
	push {r4,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r3, off_80E327C // =off_80E3280 
	bl sub_81096FA
	bl sub_800D0BC
.endfunc // sub_80E3264

	pop {r4,pc}
off_80E327C: .word off_80E3280
off_80E3280: .word 0x30
	.word 0xF800000, 0x10, 0xF800020
.func
.thumb_func
sub_80E3290:
	push {r4,r6,r7,lr}
	sub sp, sp, #0xc
	ldrb r0, [r5,#0x16]
	bl sub_80E3264
.endfunc // sub_80E3290

	tst r0, r0
	beq loc_80E32AC
	ldrb r2, [r5,#0x16]
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	bl sub_80CDC7C
loc_80E32AC:
	add sp, sp, #0xc
	pop {r4,r6,r7,pc}
	.word 0x10010, 0xF800000
loc_80E32B8:
	push {lr}
	ldr r1, off_80E32C8 // =off_80E32CC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E32C8: .word off_80E32CC
off_80E32CC: .word sub_80E32D8+1
	.word sub_80E336E+1
	.word sub_80E33D2+1
.func
.thumb_func
sub_80E32D8:
	push {r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r1, [r5,#4]
	cmp r1, #0xff
	bne loc_80E3312
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x28]
	strh r0, [r5,#0x28]
	bl sub_800F26C
	add r2, r1, #0
	add r1, r0, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #0
	bl sub_8010DF6
	ldr r0, [r5,#0x50]
	mov r1, #1
	bl sub_80C4526
	b loc_80E331A
loc_80E3312:
	mov r0, #0x80
	ldrb r2, [r5,#5]
	bl sprite_load // (int a1, int a2, int a3) ->
loc_80E331A:
	ldrb r0, [r5,#6]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E32D8

	bl sprite_update
	mov r7, #0x64 
	add r7, r7, r5
	ldrh r0, [r7]
	strh r0, [r5,#0x22]
	ldrb r0, [r7,#2]
	tst r0, r0
	bne loc_80E3340
	bl sub_8002F90 // () -> void
	b loc_80E334E
loc_80E3340:
	bl sub_8002E3C
	ldrb r0, [r7,#3]
	tst r0, r0
	bne loc_80E334E
	bl sub_8002E52
loc_80E334E:
	ldr r0, [r5,#0x70]
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#7]
	bl sub_8002F5C
	mov r0, #0
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x60]
	bl sub_8002ED0
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E336E
	pop {r7,pc}
.func
.thumb_func
sub_80E336E:
	push {lr}
	ldr r0, [r5,#0x6c]
	cmp r0, #1
	bne loc_80E3386
	ldrb r0, [r5,#0x16]
	mov r1, #0x2c 
	bl sub_80136CC
	cmp r0, #0xb
	blt loc_80E33A4
	cmp r0, #0x18
	bgt loc_80E33A4
loc_80E3386:
	ldr r0, [r5,#0x6c]
	cmp r0, #2
	bne loc_80E3394
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	cmp r0, #0x10
	blt loc_80E33A4
loc_80E3394:
	bl battle_isPaused
	bne locret_80E33D0
	ldrh r0, [r5,#0x20]
	add r0, #1
	ldrh r1, [r5,#0x22]
	cmp r0, r1
	blt loc_80E33AE
loc_80E33A4:
	mov r0, #8
	str r0, [r5,#8]
	bl sub_80E33D2
	b locret_80E33D0
loc_80E33AE:
	strh r0, [r5,#0x20]
	bl sprite_update
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x68]
	cmp r0, #0
	bne locret_80E33D0
	ldrh r0, [r5,#0x20]
	lsr r0, r0, #2
	bcs locret_80E33D0
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
locret_80E33D0:
	pop {pc}
.endfunc // sub_80E336E

.func
.thumb_func
sub_80E33D2:
	push {lr}
	ldrb r1, [r5,#4]
	cmp r1, #0xff
	bne loc_80E33E8
	ldr r0, [r5,#0x50]
	cmp r0, #0
	beq loc_80E33E8
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
loc_80E33E8:
	ldrh r0, [r5,#0x28]
	bl sub_800F29C
	mov r2, #1
	bl loc_8011044
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E33D2

.func
.thumb_func
sub_80E33FA:
	push {lr}
	push {r5-r7}
	mov r0, #0x28 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5-r7}
	beq locret_80E341C
	str r5, [r0,#0x4c]
	str r6, [r0,#0x60]
	str r7, [r0,#0x64]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80E341C:
	pop {pc}
.endfunc // sub_80E33FA

.func
.thumb_func
sub_80E341E:
	str r1, [r0,#0x6c]
	mov pc, lr
.endfunc // sub_80E341E

	mov r1, #1
	str r1, [r0,#0x68]
	mov pc, lr
.func
.thumb_func
sub_80E3428:
	str r1, [r0,#0x70]
	mov pc, lr
.endfunc // sub_80E3428

loc_80E342C:
	push {lr}
	ldr r1, off_80E343C // =off_80E3440 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E343C: .word off_80E3440
off_80E3440: .word sub_800B916+1
	.word sub_80E344C+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E344C:
	push {lr}
	ldr r1, off_80E345C // =off_80E3460 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E345C: .word off_80E3460
off_80E3460: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E3470+1
	.word sub_800BC88+1
.endfunc // sub_80E344C

.func
.thumb_func
sub_80E3470:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E348C
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x16]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	bl sub_80CDF60
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E348C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E349C
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E349C:
	pop {r4,r6,pc}
.endfunc // sub_80E3470

.func
.thumb_func
sub_80E349E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x29 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E34BE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E34BE:
	pop {pc}
.endfunc // sub_80E349E

loc_80E34C0:
	push {lr}
	ldr r1, off_80E34D0 // =off_80E34D4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E34D0: .word off_80E34D4
off_80E34D4: .word sub_800B916+1
	.word sub_80E34E0+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E34E0:
	push {lr}
	ldr r1, off_80E34F0 // =off_80E34F4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E34F0: .word off_80E34F4
off_80E34F4: .word sub_800B94C+1
	.word sub_800BBA8+1
	.word sub_80E3504+1
	.word sub_800BC88+1
.endfunc // sub_80E34E0

.func
.thumb_func
sub_80E3504:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E352C
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#0x16]
	bl sub_802CEA6
	bl loc_80E3560
	add r4, r0, #0
	ldr r0, [r5,#0x4c]
	ldrh r1, [r5,#0x30]
	ldr r2, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	bl sub_802CE8A
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E352C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E353C
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E353C:
	pop {r4,r6,pc}
.endfunc // sub_80E3504

.func
.thumb_func
sub_80E353E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x2a 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E355E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E355E:
	pop {pc}
.endfunc // sub_80E353E

loc_80E3560:
	push {lr}
	ldr r1, off_80E3570 // =off_80E3574 
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80E3570: .word off_80E3574
off_80E3574: .word sub_80E358C+1
	.word sub_80E359E+1
	.word sub_80E359E+1
	.word sub_80E359E+1
	.word sub_80E359E+1
	.word sub_80E359E+1
.func
.thumb_func
sub_80E358C:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldr r7, [r5,#0x30]
	ldr r4, [r5,#4]
	bl sub_80CE0EC
	pop {pc}
.endfunc // sub_80E358C

.func
.thumb_func
sub_80E359E:
	mov r0, #0
	mov pc, lr
	.balign 4, 0x00
.endfunc // sub_80E359E

loc_80E35A4:
	push {lr}
	ldr r1, off_80E35B4 // =off_80E35B8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E35B4: .word off_80E35B8
off_80E35B8: .word sub_800B916+1
	.word sub_80E35C4+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E35C4:
	push {lr}
	ldr r1, off_80E35D4 // =off_80E35D8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E35D4: .word off_80E35D8
off_80E35D8: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E35E8+1
	.word sub_800BC88+1
.endfunc // sub_80E35C4

.func
.thumb_func
sub_80E35E8:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E35FC
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	bl sub_80E362C
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E35FC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E360C
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E360C:
	pop {r4,r6,pc}
.endfunc // sub_80E35E8

.func
.thumb_func
sub_80E360E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x2b 
	bl sub_80033E4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E362A
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E362A:
	pop {pc}
.endfunc // sub_80E360E

.func
.thumb_func
sub_80E362C:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x34
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80E36D0 // =dword_80E36E4 
	ldr r0, [r1,r0]
	str r0, [sp,#0x30]
	mov r0, #1
	str r0, [sp,#0x28]
	mov r6, #0
loc_80E3640:
	mov r0, #1
	str r0, [sp,#0x2c]
loc_80E3644:
	ldr r0, [sp,#0x28]
	ldr r1, [sp,#0x2c]
	bl sub_800C90A
.endfunc // sub_80E362C

	ldr r1, [r0,#0x14]
	ldr r2, [sp,#0x30]
	tst r1, r2
	beq loc_80E3662
	ldr r0, [sp,#0x28]
	ldr r1, [sp,#0x2c]
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0
	strb r0, [r1,r6]
	add r6, #1
loc_80E3662:
	ldr r0, [sp,#0x2c]
	add r0, #1
	str r0, [sp,#0x2c]
	cmp r0, #3
	ble loc_80E3644
	ldr r0, [sp,#0x28]
	add r0, #1
	str r0, [sp,#0x28]
	cmp r0, #6
	ble loc_80E3640
	add r0, r6, #0
	beq loc_80E36CA
	ldrb r0, [r5,#0xe]
	add r0, r0, r0
	ldr r1, off_80E36E0 // =dword_80E3714 
	ldrh r0, [r1,r0]
	tst r0, r0
	beq loc_80E368A
	bl sound_play // () -> void
loc_80E368A:
	add r7, sp, #0
loc_80E368C:
	sub r6, #1
	blt loc_80E36BA
	str r6, [sp,#0x18]
	str r7, [sp,#0x1c]
	ldrb r0, [r7,r6]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	ldrb r2, [r5,#0xe]
	lsl r3, r2, #3
	ldr r4, off_80E36D4 // =dword_80E36EC 
	add r3, r3, r4
	ldr r4, [r3]
	ldr r7, [r3,#4]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r3, #0
	bl sub_80C53A6
	ldr r6, [sp,#0x18]
	ldr r7, [sp,#0x1c]
	b loc_80E368C
loc_80E36BA:
	mov r0, #0x80
	ldrb r1, [r5,#0xe]
	ldr r4, dword_80E36D8 // =dword_80E3714 
	ldrb r4, [r4,r1]
	mov r1, #2
	mov r3, #0
	bl sub_80E2FE8
loc_80E36CA:
	add sp, sp, #0x34
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80E36D0: .word dword_80E36E4
off_80E36D4: .word dword_80E36EC
dword_80E36D8: .word 0x80E371E
	.word 0x80E3723
off_80E36E0: .word dword_80E3714
dword_80E36E4: .word 0x1A00000, 0x2C00000
dword_80E36EC: .word 0x4050A01, 0x3, 0x4050101, 0x3, 0x4050201, 0x3, 0x4050301
	.word 0x1001, 0x4050401, 0x2001
dword_80E3714: .word 0x10F0000, 0x12E011D, 0x30300FF, 0x82040200, 0x81
loc_80E3728:
	push {lr}
	ldr r1, off_80E3738 // =off_80E373C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E3738: .word off_80E373C
off_80E373C: .word sub_800B916+1
	.word sub_80E3748+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E3748:
	push {lr}
	ldr r1, off_80E3758 // =off_80E375C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E3758: .word off_80E375C
off_80E375C: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E376C+1
	.word sub_800BC88+1
.endfunc // sub_80E3748

.func
.thumb_func
sub_80E376C:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E37C2
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	push {r5}
	ldrh r0, [r5,#0x2c]
	ldr r5, [r5,#0x4c]
	bl object_subtractHP
	pop {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #1
	push {r1-r4}
	mov r6, #0x10
	lsl r6, r6, #0x10
	add r1, r1, r6
	bl sub_80E1D7A
	pop {r1-r4}
	mov r6, #0x10
	lsl r6, r6, #0x10
	sub r1, r1, r6
	bl sub_80E1D7A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r3, #5
	add r3, r3, r5
	mov r4, #6
	bl sub_80E2ACA
	mov r0, #1
	strb r0, [r5,#5]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E37C2:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80E37D0
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E37D0:
	pop {r4,r6,pc}
.endfunc // sub_80E376C

.func
.thumb_func
sub_80E37D2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x2c 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E37F2
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E37F2:
	pop {pc}
.endfunc // sub_80E37D2

loc_80E37F4:
	push {lr}
	ldr r1, off_80E3814 // =off_80E3818 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80E380C
	bl sub_801BCA6
	b locret_80E3810
loc_80E380C:
	bl sub_801BBF4
locret_80E3810:
	pop {pc}
	.balign 4, 0x00
off_80E3814: .word off_80E3818
off_80E3818: .word sub_80E3824+1
	.word loc_80E386A+1
	.word sub_80E3962+1
.func
.thumb_func
sub_80E3824:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x1f
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E3824

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80E386A:
	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80E387C
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	bne loc_80E38A8
loc_80E387C:
	ldr r3, [r5,#0x4c]
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r3]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	cmp r0, #4
	beq loc_80E389C
	bl battle_isTimeStop
	bne locret_80E38AC
loc_80E389C:
	ldr r1, off_80E38B0 // =off_80E38B4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80E38AC
loc_80E38A8:
	mov r0, #8
	str r0, [r5,#8]
locret_80E38AC:
	pop {pc}
	.byte 0, 0
off_80E38B0: .word off_80E38B4
off_80E38B4: .word sub_80E38C8+1
	.word sub_80E38EE+1
	.word sub_80E3904+1
	.word sub_80E3930+1
	.word sub_80E3950+1
.func
.thumb_func
sub_80E38C8:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80E38D8
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #9
	strh r0, [r5,#0x20]
loc_80E38D8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E38EC
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E38EC:
	pop {pc}
.endfunc // sub_80E38C8

.func
.thumb_func
sub_80E38EE:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #1
	bne locret_80E3902
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E3902:
	pop {pc}
.endfunc // sub_80E38EE

.func
.thumb_func
sub_80E3904:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80E391A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0x1b
	strh r0, [r5,#0x20]
	b locret_80E392E
loc_80E391A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E392E
	mov r0, #2
	strb r0, [r5,#0x10]
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E392E:
	pop {pc}
.endfunc // sub_80E3904

.func
.thumb_func
sub_80E3930:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #2
	beq loc_80E394A
	cmp r0, #1
	bne locret_80E394E
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80E394E
loc_80E394A:
	mov r0, #8
	str r0, [r5,#8]
locret_80E394E:
	pop {pc}
.endfunc // sub_80E3930

.func
.thumb_func
sub_80E3950:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #1
	bne locret_80E3960
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E3960:
	pop {pc}
.endfunc // sub_80E3950

.func
.thumb_func
sub_80E3962:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1]
	cmp r0, r5
	bne loc_80E3970
	mov r0, #0
	str r0, [r1]
loc_80E3970:
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E3962

.func
.thumb_func
sub_80E3976:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x2d 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80E399C
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80E399C:
	pop {pc}
	.byte 0, 0
.endfunc // sub_80E3976

loc_80E39A0:
	push {lr}
	ldr r1, off_80E39C0 // =off_80E39C4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#6]
	cmp r0, #1
	beq loc_80E39B8
	bl sub_801BCA6
	b locret_80E39BC
loc_80E39B8:
	bl sub_801BBF4
locret_80E39BC:
	pop {pc}
	.byte 0, 0
off_80E39C0: .word off_80E39C4
off_80E39C4: .word sub_80E39D0+1
	.word loc_80E3A32+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E39D0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #2
	ldrh r1, [r5,#0x3e]
	add r1, r1, r0
	strh r1, [r5,#0x3e]
	ldrh r1, [r5,#0x3a]
	add r1, r1, r0
	strh r1, [r5,#0x3a]
	mov r1, #0x10
	mov r2, #0x20 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E39D0

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	ldr r1, off_80E3A2C // =loc_80E3A30 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80E3A32
	pop {pc}
off_80E3A2C: .word loc_80E3A30
loc_80E3A30:
	lsl r1, r0, #8
loc_80E3A32:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E3A64
	ldrb r0, [r5,#6]
	cmp r0, #1
	beq loc_80E3A4C
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	bne loc_80E3A64
loc_80E3A4C:
	ldrb r0, [r5,#6]
	cmp r0, #1
	beq loc_80E3A58
	bl battle_isTimeStop
	bne locret_80E3A68
loc_80E3A58:
	ldr r1, off_80E3A6C // =off_80E3A70 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80E3A68
loc_80E3A64:
	mov r0, #8
	str r0, [r5,#8]
locret_80E3A68:
	pop {pc}
	.balign 4, 0x00
off_80E3A6C: .word off_80E3A70
off_80E3A70: .word sub_80E3A74+1
.func
.thumb_func
sub_80E3A74:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80E3A84
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x20]
loc_80E3A84:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E3A90
	mov r0, #8
	str r0, [r5,#8]
locret_80E3A90:
	pop {pc}
.endfunc // sub_80E3A74

.func
.thumb_func
sub_80E3A92:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x2e 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80E3AB4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	str r7, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r2, [r0]
	mov r1, #0x10
	orr r2, r1
	strb r2, [r0]
locret_80E3AB4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E3A92

loc_80E3AB8:
	push {lr}
	ldr r1, off_80E3AC8 // =off_80E3ACC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E3AC8: .word off_80E3ACC
off_80E3ACC: .word sub_800B916+1
	.word sub_80E3AD8+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E3AD8:
	push {lr}
	ldr r1, off_80E3AE8 // =off_80E3AEC 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E3AE8: .word off_80E3AEC
off_80E3AEC: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E3AFC+1
	.word sub_800BC88+1
.endfunc // sub_80E3AD8

.func
.thumb_func
sub_80E3AFC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E3B2E
	push {r5}
	ldrb r4, [r5,#4]
	add r0, r4, #0
	ldr r5, [r5,#0x4c]
	bl sub_801A7CC
	ldr r6, [r5,#0x58]
	ldr r0, [r6,#0x60]
	tst r0, r0
	beq loc_80E3B1C
	bl sub_80E0DC0
loc_80E3B1C:
	mov r7, #0x60 
	add r7, r7, r6
	bl sub_80E0D98
	pop {r5}
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E3B2E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E3B3E
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E3B3E:
	pop {r4,r6,r7,pc}
	.word 0x80E3B44, 0x4030201, 0x8070605, 0xA09
.endfunc // sub_80E3AFC

.func
.thumb_func
sub_80E3B50:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x2f 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E3B6C
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E3B6C:
	pop {pc}
	.byte 0, 0
.endfunc // sub_80E3B50

loc_80E3B70:
	push {lr}
	ldr r1, off_80E3B84 // =off_80E3B88 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80E3B84: .word off_80E3B88
off_80E3B88: .word sub_80E3B94+1
	.word sub_80E3BEA+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E3B94:
	push {r4,lr}
	bl sub_800E29C // () -> void
	ldr r1, [r5,#0x64]
	ldrh r0, [r5,#0x12]
	strh r0, [r1]
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #0x27 
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E3B94

	bl sub_8002F90 // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x60]
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80E3D38 // =0x280000 
	svc 6
	strh r0, [r5,#0x22]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	str r5, [r0]
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,pc}
.func
.thumb_func
sub_80E3BEA:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_80E3D1A
	.byte 0x2A 
	.byte 0x6C 
	.byte 0x80
	.byte 0x18
	.byte  0
	.byte 0xF0
	.byte 0x8F
	.byte 0xF8
	.word 0x7A684902, 0x46FE5809, 0xBD004708
	.word off_80E3C0C
off_80E3C0C: .word sub_80E3C14+1
	.word sub_80E3CC4+1
.endfunc // sub_80E3BEA

.func
.thumb_func
sub_80E3C14:
	push {r4,lr}
	bl object_isCurrentPanelValid
	tst r0, r0
	bne loc_80E3C2A
	mov r0, #0
	ldr r1, [r5,#0x4c]
	str r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
	b locret_80E3CA8
loc_80E3C2A:
	ldr r0, [r5,#0x4c]
	ldr r0, [r0]
	cmp r0, #0
	bne loc_80E3C38
	mov r0, #8
	str r0, [r5,#8]
	b locret_80E3CA8
loc_80E3C38:
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80E3C86
	mov r0, #1
	strb r0, [r5,#0xa]
	ldrh r0, [r5,#0x22]
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x68]
	cmp r0, #0
	beq loc_80E3C56
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80E3CA8
loc_80E3C56:
	ldr r0, [r5,#0x40]
	mov r1, #1
	cmp r0, #0
	bpl loc_80E3C60
	sub r1, #2
loc_80E3C60:
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, off_80E3CB0 // =dword_80E3CB4 
	bl sub_81096FA
	bl object_checkPanelParameters
	cmp r0, #0
	bne loc_80E3C86
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne locret_80E3CA8
	ldr r0, [r5,#0x40]
	neg r0, r0
	str r0, [r5,#0x40]
	mov r0, #0
	strb r0, [r5,#0xa]
	b locret_80E3CA8
loc_80E3C86:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	ldr r1, [r5,#0x64]
	ldrh r0, [r5,#0x12]
	strh r0, [r1]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E3CA8
	bl sub_800E29C // () -> void
	mov r0, #0
	strb r0, [r5,#0xa]
locret_80E3CA8:
	pop {r4,pc}
	.word 0
	.byte 0, 0
off_80E3CB0: .word dword_80E3CB4
dword_80E3CB4: .word 0x10020, 0x0
	.word 0x10000, 0x20
.endfunc // sub_80E3C14

.func
.thumb_func
sub_80E3CC4:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80E3CDE
	mov r0, #1
	strb r0, [r5,#0xa]
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0xbd
	bl sound_play // () -> void
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
loc_80E3CDE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E3CF0
	mov r0, #1
	ldr r1, [r5,#0x4c]
	str r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
locret_80E3CF0:
	pop {r4,pc}
.endfunc // sub_80E3CC4

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x30 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E3D18
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r3, [r0,#0x60]
	str r6, [r0,#0x64]
	str r7, [r0,#0x4c]
	ldrb r1, [r0]
	mov r2, #0x10
	bic r1, r2
	strb r1, [r0]
locret_80E3D18:
	pop {pc}
.func
.thumb_func
sub_80E3D1A:
	push {r0,r1,lr}
	bl sub_800E258
	bl object_getPanelParameters
.endfunc // sub_80E3D1A

	ldr r1, off_80E3D3C // =LCDControl 
	ldrb r2, [r5,#0x16]
	cmp r2, #0
	beq loc_80E3D2E
	ldr r1, off_80E3D40 // =start_ 
loc_80E3D2E:
	tst r0, r1
	beq locret_80E3D36
	mov r0, #1
	str r0, [r5,#0x68]
locret_80E3D36:
	pop {r0,r1,pc}
dword_80E3D38: .word 0x280000
off_80E3D3C: .word LCDControl
off_80E3D40: .word start_
dword_80E3D44: .word 0x10, 0x10, 0x10, 0x2000C, 0xE10, 0x1110, 0xE380C
	.word 0xF380C, 0x14A10
loc_80E3D68:
	push {lr}
	ldr r1, off_80E3D80 // =off_80E3D84 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrh r0, [r5,#0x24]
	lsr r0, r0, #1
	bcs locret_80E3D7E
	bl sub_801BBAC
locret_80E3D7E:
	pop {pc}
off_80E3D80: .word off_80E3D84
off_80E3D84: .word sub_80E3D90+1
	.word loc_80E3DE0+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E3D90:
	push {r7,lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r7, off_80E3FCC // =dword_80E3D44 
	add r7, r7, r0
	ldrb r1, [r7]
	ldrb r2, [r7,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E3D90

	bl sub_8002F90 // () -> void
	ldrb r0, [r7,#2]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	ldrb r0, [r7,#3]
	ldrb r1, [r5,#6]
	add r0, r0, r1
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5,#5]
	bl sub_8002F5C
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strh r0, [r5,#0x24]
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80E3DE0
	pop {r7,pc}
loc_80E3DE0:
	push {lr}
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80E3E0C // =off_80E3E10 
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	pop {pc}
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
	.balign 4, 0x00
off_80E3E0C: .word off_80E3E10
off_80E3E10: .word sub_80E3E34+1
	.word sub_80E3E34+1
	.word sub_80E3E34+1
	.word sub_80E3E38+1
	.word sub_80E3EB4+1
	.word sub_80E3EDC+1
	.word sub_80E3EFC+1
	.word sub_80E3F2A+1
	.word sub_80E3F6C+1
.func
.thumb_func
sub_80E3E34:
	push {lr}
	pop {pc}
.endfunc // sub_80E3E34

.func
.thumb_func
sub_80E3E38:
	push {lr}
	ldrb r0, [r5,#9]
	tst r0, r0
	bne loc_80E3E4E
	mov r0, #1
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0x22]
	mov r0, #0xa0
	bl sound_play // () -> void
loc_80E3E4E:
	cmp r0, #1
	bne loc_80E3E9C
	ldr r3, [r5,#0x4c]
	tst r3, r3
	beq loc_80E3E6E
	mov r2, #0x10
	ldrb r0, [r5,#5]
	tst r0, r0
	beq loc_80E3E62
	neg r2, r2
loc_80E3E62:
	lsl r2, r2, #0x10
	ldr r0, [r3,#0x34]
	add r0, r0, r2
	str r0, [r5,#0x34]
	ldr r0, [r3,#0x38]
	str r0, [r5,#0x38]
loc_80E3E6E:
	ldrh r0, [r5,#0x22]
	cmp r0, #4
	beq loc_80E3E8A
	ldr r1, off_80E3EAC // =byte_80E3EB0 
	ldrsb r2, [r1,r0]
	ldrb r3, [r5,#5]
	tst r3, r3
	bne loc_80E3E80
	neg r2, r2
loc_80E3E80:
	ldrh r1, [r5,#0x36]
	add r1, r1, r2
	strh r1, [r5,#0x36]
	add r0, #1
	strh r0, [r5,#0x22]
loc_80E3E8A:
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x4c]
	tst r0, r0
	bne locret_80E3EAA
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #2
	strb r0, [r5,#9]
	b locret_80E3EAA
loc_80E3E9C:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80E3EAA
	mov r0, #8
	str r0, [r5,#8]
locret_80E3EAA:
	pop {pc}
off_80E3EAC: .word byte_80E3EB0
byte_80E3EB0: .byte 0x2, 0x3, 0x2, 0x0
.endfunc // sub_80E3E38

.func
.thumb_func
sub_80E3EB4:
	push {lr}
	ldrb r0, [r5,#9]
	tst r0, r0
	bne loc_80E3EC4
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
loc_80E3EC4:
	ldrh r0, [r5,#0x20]
	cmp r0, #0x37 
	bge loc_80E3ECE
	mov r1, #1
	strb r1, [r5,#0x10]
loc_80E3ECE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E3EDA
	mov r0, #8
	str r0, [r5,#8]
locret_80E3EDA:
	pop {pc}
.endfunc // sub_80E3EB4

.func
.thumb_func
sub_80E3EDC:
	push {lr}
	mov r0, #1
	strh r0, [r5,#0x24]
	bl battle_isTimeStop
	bne locret_80E3EFA
	mov r0, #0
	strh r0, [r5,#0x24]
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	beq locret_80E3EFA
	mov r0, #8
	str r0, [r5,#8]
locret_80E3EFA:
	pop {pc}
.endfunc // sub_80E3EDC

.func
.thumb_func
sub_80E3EFC:
	push {r4,lr}
	mov r0, #1
	strh r0, [r5,#0x24]
	bl battle_isTimeStop
	bne loc_80E3F1A
	mov r0, #0
	strh r0, [r5,#0x24]
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xd
	cmp r0, r1
	beq loc_80E3F1A
	mov r0, #8
	str r0, [r5,#8]
loc_80E3F1A:
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	pop {r4,pc}
.endfunc // sub_80E3EFC

.func
.thumb_func
sub_80E3F2A:
	push {r4,lr}
	mov r0, #1
	strh r0, [r5,#0x24]
	bl battle_isTimeStop
	bne loc_80E3F48
	mov r0, #0
	strh r0, [r5,#0x24]
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xa
	cmp r0, r1
	beq loc_80E3F48
	mov r0, #8
	str r0, [r5,#8]
loc_80E3F48:
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldr r4, [r5,#0x4c]
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	pop {r4,pc}
.endfunc // sub_80E3F2A

.func
.thumb_func
sub_80E3F6C:
	push {lr}
	mov r0, #1
	strh r0, [r5,#0x24]
	ldrb r0, [r5,#9]
	tst r0, r0
	bne loc_80E3F80
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
loc_80E3F80:
	bl battle_isTimeStop
	bne locret_80E3FA0
	mov r0, #0
	strh r0, [r5,#0x24]
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	bne loc_80E3F9C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E3FA0
loc_80E3F9C:
	mov r0, #8
	str r0, [r5,#8]
locret_80E3FA0:
	pop {pc}
.endfunc // sub_80E3F6C

	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	mov pc, lr
.func
.thumb_func
sub_80E3FB4:
	push {r5,r6,lr}
	add r6, r5, #0
	mov r0, #0x31 
	bl object_spawnType4
	add r0, r5, #0
	str r6, [r0,#0x4c]
	pop {r5,r6,pc}
.endfunc // sub_80E3FB4

.func
.thumb_func
sub_80E3FC4:
	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
	.balign 4, 0x00
off_80E3FCC: .word dword_80E3D44
.endfunc // sub_80E3FC4

loc_80E3FD0:
	push {lr}
	ldr r1, off_80E3FEC // =off_80E3FF0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl battle_isPaused
	tst r0, r0
	bne locret_80E3FE8
	bl sub_801BCA6
locret_80E3FE8:
	pop {pc}
	.balign 4, 0x00
off_80E3FEC: .word off_80E3FF0
off_80E3FF0: .word sub_80E3FFC+1
	.word sub_80E403E+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80E3FFC:
	push {lr}
	bl sub_800E2AC
	mov r1, #0x10
	mov r2, #0x2a 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E3FFC

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #6
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E403E:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0]
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E40AC
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#4]
	ldr r2, off_80E40BC // =byte_80E40C0 
	ldrb r1, [r2,r1]
	cmp r0, r1
	bne loc_80E40AC
	ldrb r0, [r5,#9]
	cmp r0, #1
	beq loc_80E409E
	cmp r0, #2
	beq loc_80E40AC
	b locret_80E40BA
loc_80E409E:
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0
	strb r0, [r5,#9]
	b locret_80E40BA
loc_80E40AC:
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80E40B6
	mov r1, #0
	str r1, [r0]
loc_80E40B6:
	mov r0, #8
	str r0, [r5,#8]
locret_80E40BA:
	pop {r4,pc}
off_80E40BC: .word byte_80E40C0
byte_80E40C0: .byte 0xC, 0xA
.endfunc // sub_80E403E

.func
.thumb_func
sub_80E40C2:
	push {lr}
	push {r5}
	mov r0, #0x32 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E40E8
	ldr r1, [r5,#0x34]
	str r1, [r0,#0x34]
	ldr r1, [r5,#0x38]
	str r1, [r0,#0x38]
	ldr r1, [r5,#0x3c]
	str r1, [r0,#0x3c]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x60]
	str r0, [r6]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E40E8:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E40C2

loc_80E40EC:
	push {lr}
	ldr r1, off_80E40FC // =off_80E4100 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E40FC: .word off_80E4100
off_80E4100: .word sub_800B916+1
	.word sub_80E410C+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E410C:
	push {lr}
	ldr r1, off_80E411C // =off_80E4120 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E411C: .word off_80E4120
off_80E4120: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E4130+1
	.word sub_800BC88+1
.endfunc // sub_80E410C

.func
.thumb_func
sub_80E4130:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E4152
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	bl sub_80CF374
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E4152:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E4162
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E4162:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E4130

.func
.thumb_func
sub_80E4164:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x33 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E4184
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E4184:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E4164

loc_80E4188:
	push {lr}
	ldr r1, off_80E4198 // =off_80E419C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E4198: .word off_80E419C
off_80E419C: .word sub_800B916+1
	.word sub_80E41A8+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E41A8:
	push {lr}
	ldr r1, off_80E41B8 // =off_80E41BC 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E41B8: .word off_80E41BC
off_80E41BC: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E41CC+1
	.word sub_800BC88+1
.endfunc // sub_80E41A8

.func
.thumb_func
sub_80E41CC:
	push {lr}
	ldr r1, off_80E41DC // =off_80E41E0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E41DC: .word off_80E41E0
off_80E41E0: .word sub_80E41F0+1
	.word sub_80E4220+1
	.word sub_800B94C+1
	.word sub_80E4266+1
.endfunc // sub_80E41CC

.func
.thumb_func
sub_80E41F0:
	push {r7,lr}
	mov r0, #0x60 
	add r0, r0, r5
	ldrb r1, [r5,#0x16]
	ldrb r2, [r5,#0x17]
	bl sub_80E42AA
.endfunc // sub_80E41F0

	str r0, [r5,#0x74]
	tst r0, r0
	beq loc_80E4216
	mov r0, #2
	strh r0, [r5,#0x20]
	mov r0, #0x1e
	strh r0, [r5,#0x22]
	mov r0, #0
	str r0, [r5,#0x78]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {r7,pc}
loc_80E4216:
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r7,pc}
.func
.thumb_func
sub_80E4220:
	push {r4,r6,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80E425E
	mov r0, #0xa
	strh r0, [r5,#0x20]
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bmi loc_80E4260
	ldr r0, [r5,#0x78]
	add r1, r0, #1
	ldr r2, [r5,#0x74]
	cmp r1, r2
	blt loc_80E4242
	mov r1, #0
loc_80E4242:
	str r1, [r5,#0x78]
	mov r1, #0x60 
	add r1, r1, r5
	ldrb r0, [r1,r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	ldrb r2, [r5,#0xe]
	mov r4, #1
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	bl sub_80CF5B2
locret_80E425E:
	pop {r4,r6,pc}
loc_80E4260:
	mov r0, #0xc
	strh r0, [r5,#0xa]
	pop {r4,r6,pc}
.endfunc // sub_80E4220

.func
.thumb_func
sub_80E4266:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E4276
	mov r0, #0x5a 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E4276:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E4286
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E4286:
	pop {pc}
.endfunc // sub_80E4266

.func
.thumb_func
sub_80E4288:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x34 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E42A8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E42A8:
	pop {pc}
.endfunc // sub_80E4288

.func
.thumb_func
sub_80E42AA:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	mov r6, #0
	add r0, r1, #0
	add r1, r2, #0
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	str r0, [sp,#0xc]
	ldr r0, [sp,#4]
	ldr r1, [sp,#8]
	eor r0, r1
	mov r1, #5
	neg r1, r1
	mul r0, r1
	add r0, #6
	str r0, [sp,#0x10]
loc_80E42D2:
	ldr r0, [sp,#0x10]
	ldr r1, [sp,#4]
	bl sub_800D5F0
	tst r0, r0
	bne loc_80E42EE
	ldr r0, [sp,#0x10]
	ldr r1, [sp,#0xc]
	add r0, r0, r1
	str r0, [sp,#0x10]
	sub r0, #1
	cmp r0, #5
	bhi loc_80E432C
	b loc_80E42D2
loc_80E42EE:
	mov r4, #1
	mov r7, #0
loc_80E42F2:
	ldr r0, [sp,#0x10]
	add r1, r4, #0
	bl sub_800C90A
	ldrb r0, [r0,#3]
	ldr r1, [sp,#4]
	cmp r0, r1
	beq loc_80E4312
	ldr r0, [sp,#0x10]
	add r1, r4, #0
	lsl r1, r1, #4
	orr r0, r1
	ldr r1, [sp]
	strb r0, [r1,r6]
	add r6, #1
	add r7, #1
loc_80E4312:
	add r4, #1
	cmp r4, #3
	ble loc_80E42F2
	cmp r7, #0
	beq loc_80E432C
	ldr r0, [sp,#0x10]
	ldr r1, [sp,#0xc]
	add r0, r0, r1
	str r0, [sp,#0x10]
	sub r0, #1
	cmp r0, #5
	bhi loc_80E432C
	b loc_80E42EE
loc_80E432C:
	add r0, r6, #0
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
	.word 0x50A2D
	.word 0x50A1E
	.word 0x50A28
	.word 0x3060F
.endfunc // sub_80E42AA

.func
.thumb_func
sub_80E4344:
	push {lr}
	ldr r1, off_80E4354 // =off_80E4358 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E4354: .word off_80E4358
off_80E4358: .word sub_80E4364+1
	.word sub_80E43A8+1
	.word object_freeMemory+1
.endfunc // sub_80E4344

.func
.thumb_func
sub_80E4364:
	push {lr}
	ldr r0, [r5,#0x34]
	strb r0, [r5,#0x12]
	ldr r1, [r5,#0x38]
	strb r1, [r5,#0x13]
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80E439E
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r7, dword_80E43A4 // = 
	add r7, r7, r0
	str r7, [r5,#0x60]
	ldrb r0, [r5,#5]
	str r0, [r5,#0x64]
	ldrb r0, [r7]
	strh r0, [r5,#0x20]
	ldrb r0, [r7,#1]
	strb r0, [r5,#5]
	ldrb r0, [r7,#2]
	strb r0, [r5,#6]
	ldrb r0, [r7,#3]
	strb r0, [r5,#7]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E43A8
	pop {pc}
loc_80E439E:
	bl object_freeMemory
	pop {pc}
dword_80E43A4: .word 0x80E4334
.endfunc // sub_80E4364

.func
.thumb_func
sub_80E43A8:
	push {lr}
	bl battle_isTimeStop
	tst r0, r0
	bne loc_80E43BA
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E43C2
loc_80E43BA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80E43C6
loc_80E43C2:
	mov r0, #8
	str r0, [r5,#8]
loc_80E43C6:
	ldrb r0, [r5,#6]
	sub r0, #1
	bmi loc_80E43DA
	strb r0, [r5,#6]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r2, [r5,#0x64]
	ldrb r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80E43DA:
	ldrb r0, [r5,#5]
	sub r0, #1
	strb r0, [r5,#5]
	bne locret_80E43F4
	ldr r7, [r5,#0x60]
	ldrb r0, [r7,#2]
	strb r0, [r5,#6]
	ldrb r0, [r7,#1]
	ldrb r1, [r5,#7]
	sub r0, r0, r1
	strb r0, [r5,#5]
	add r1, r1, r1
	strb r1, [r5,#7]
locret_80E43F4:
	pop {pc}
.endfunc // sub_80E43A8

.func
.thumb_func
sub_80E43F6:
	push {r5,lr}
	push {r5}
	mov r0, #0x35 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E440A
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
locret_80E440A:
	pop {r5,pc}
.endfunc // sub_80E43F6

loc_80E440C:
	push {lr}
	ldr r1, off_80E441C // =off_80E4420 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E441C: .word off_80E4420
off_80E4420: .word sub_800B916+1
	.word sub_80E442C+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E442C:
	push {lr}
	ldr r1, off_80E443C // =off_80E4440 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E443C: .word off_80E4440
off_80E4440: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E4450+1
	.word sub_800BC88+1
.endfunc // sub_80E442C

.func
.thumb_func
sub_80E4450:
	push {lr}
	ldr r1, off_80E4460 // =off_80E4464 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E4460: .word off_80E4464
off_80E4464: .word sub_80E4470+1
	.word sub_80E44BC+1
	.word sub_80E44E0+1
.endfunc // sub_80E4450

.func
.thumb_func
sub_80E4470:
	push {lr}
	ldr r3, off_80E449C // =dword_80E44A4 
	ldmia r3!, {r0-r2}
	bl loc_8000AC8
.endfunc // sub_80E4470

	ldr r3, off_80E44A0 // =dword_80E44B0 
	ldmia r3!, {r0-r2}
	bl loc_8000AC8
	bl sub_80E4532
	str r0, [r5,#0x60]
	tst r0, r0
	beq loc_80E4496
	mov r0, #1
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {pc}
loc_80E4496:
	mov r0, #8
	strh r0, [r5,#0xa]
	pop {pc}
off_80E449C: .word dword_80E44A4
off_80E44A0: .word dword_80E44B0
dword_80E44A4: .word 0x86E55FC, 0x6017940, 0x100
dword_80E44B0: .word 0x86E56FC, 0x30016F0, 0x20
.func
.thumb_func
sub_80E44BC:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80E44DE
	mov r0, #0xa
	strh r0, [r5,#0x20]
	bl sub_80E459C
	tst r0, r0
	beq loc_80E44DA
	ldr r0, [r5,#0x60]
	sub r0, #1
	str r0, [r5,#0x60]
	bne locret_80E44DE
loc_80E44DA:
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80E44DE:
	pop {pc}
.endfunc // sub_80E44BC

.func
.thumb_func
sub_80E44E0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E44F0
	mov r0, #0x5a 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E44F0:
	ldrh r0, [r5,#0x20]
	cmp r0, #0x14
	blt loc_80E44FA
	bl sub_80E4612
loc_80E44FA:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E450E
	bl sub_80E45F8
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E450E:
	pop {pc}
.endfunc // sub_80E44E0

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x36 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E4530
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E4530:
	pop {pc}
.func
.thumb_func
sub_80E4532:
	push {r4,r6,r7,lr}
	mov r7, r10
	ldr r7, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #0x10
	mul r0, r1
	add r7, #0x80
	add r7, r7, r0
	mov r6, #0
	mov r4, #0
loc_80E454A:
	ldr r0, [r7]
	tst r0, r0
	beq loc_80E455A
	bl sub_80E4566
	cmp r0, r4
	blt loc_80E455A
	add r4, r0, #0
loc_80E455A:
	add r7, #4
	add r6, #1
	cmp r6, #4
	blt loc_80E454A
	add r0, r4, #0
	pop {r4,r6,r7,pc}
.endfunc // sub_80E4532

.func
.thumb_func
sub_80E4566:
	push {lr}
	ldr r1, [r0,#0x58]
	tst r1, r1
	beq loc_80E4598
	ldrb r2, [r1]
	cmp r2, #2
	bne loc_80E4594
	ldrb r0, [r0,#0x16]
	bl sub_8010018
	ldrb r1, [r0]
	add r1, r1, r1
	add r1, #2
	add r1, r1, r0
	mov r0, #0
	ldr r2, dword_80E4630 // =0xffff 
loc_80E4586:
	ldrh r3, [r1]
	cmp r3, r2
	beq locret_80E4592
	add r0, #1
	add r1, #2
	b loc_80E4586
locret_80E4592:
	pop {pc}
loc_80E4594:
	ldrb r0, [r0,#0x1a]
	pop {pc}
loc_80E4598:
	mov r0, #0
	pop {pc}
.endfunc // sub_80E4566

.func
.thumb_func
sub_80E459C:
	push {r4,r6,r7,lr}
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r7, off_80E45E0 // =dword_80E45E8 
	add r7, r7, r1
	ldr r2, [r7]
	ldr r3, [r7,#4]
	mov r4, #0
	mov r0, #6
loc_80E45AE:
	mov r1, #3
loc_80E45B0:
	push {r0-r4}
	bl object_checkPanelParameters
.endfunc // sub_80E459C

	tst r0, r0
	pop {r0-r4}
	beq loc_80E45D4
	push {r0-r4}
	ldrb r2, [r5,#0xe]
	ldr r4, dword_80E45E4 // =0x1a050601 
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r3, #0
	mov r7, #3
	bl sub_80C53A6
	pop {r0-r4}
	add r4, #1
loc_80E45D4:
	sub r1, #1
	bne loc_80E45B0
	sub r0, #1
	bne loc_80E45AE
	add r0, r4, #0
	pop {r4,r6,r7,pc}
off_80E45E0: .word dword_80E45E8
dword_80E45E4: .word 0x1A050601
dword_80E45E8: .word 0x200000, 0x0
	.word 0x400000, 0x0
.func
.thumb_func
sub_80E45F8:
	push {lr}
	bl sub_800A8F8
	tst r0, r0
	beq locret_80E4610
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #0x80
	lsl r1, r1, #7
	bl sub_802E04E
locret_80E4610:
	pop {pc}
.endfunc // sub_80E45F8

.func
.thumb_func
sub_80E4612:
	push {lr}
	bl sub_800A8F8
	tst r0, r0
	beq locret_80E462E
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	beq locret_80E462E
	mov r0, #0x78 
	mov r1, #0xc
	bl sub_800AE90
locret_80E462E:
	pop {pc}
dword_80E4630: .word 0xFFFF
.endfunc // sub_80E4612

loc_80E4634:
	push {lr}
	ldr r1, off_80E4644 // =off_80E4648 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E4644: .word off_80E4648
off_80E4648: .word sub_800B916+1
	.word sub_80E4654+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E4654:
	push {lr}
	ldr r1, off_80E4664 // =off_80E4668 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E4664: .word off_80E4668
off_80E4668: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E4678+1
	.word sub_800BC88+1
.endfunc // sub_80E4654

.func
.thumb_func
sub_80E4678:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E46A4
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x16]
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	bl sub_80CFBC4
	mov r0, #0x13
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E46A4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E46B4
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E46B4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E4678

.func
.thumb_func
sub_80E46B6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x37 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E46D6
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E46D6:
	pop {pc}
.endfunc // sub_80E46B6

loc_80E46D8:
	push {lr}
	ldr r1, dword_80E46F4 // = 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
	.byte 0xF9
	.byte 0x46 
	.byte 0xE
	.byte  8
	.byte 0x5D 
	.byte 0x47 
	.byte 0xE
	.byte  8
	.byte 0x91
	.byte 0x47 
	.byte 0xE
	.byte  8
dword_80E46F4: .word 0x80E46E8
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #1
	bl sprite_load // (int a1, int a2, int a3) ->
	bl change_20013F0_800151C // () -> int
	mov r1, #1
	and r0, r1
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	bl sub_8002F90 // () -> void
	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	bl change_20013F0_800151C // () -> int
	mov r1, #0xf
	and r1, r0
	sub r1, #7
	lsl r1, r1, #0xf
	str r1, [r5,#0x40]
	lsr r0, r0, #4
	mov r1, #0xf
	and r1, r0
	sub r1, #7
	lsl r1, r1, #0xf
	str r1, [r5,#0x44]
	lsr r0, r0, #4
	mov r1, #0xf
	and r1, r0
	add r1, #0xc
	lsl r1, r1, #0xf
	str r1, [r5,#0x48]
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80E475C
	pop {pc}
	.balign 4, 0x00
.func
.thumb_func
sub_80E475C:
	push {r7,lr}
	mov r7, #0x40 
	add r7, r7, r5
	ldmia r7!, {r3,r4,r6}
	mov r7, #0x34 
	add r7, r7, r5
	ldmia r7!, {r0-r2}
	add r0, r0, r3
	add r1, r1, r4
	add r2, r2, r6
	bpl loc_80E4774
	mov r2, #0
loc_80E4774:
	sub r7, #0xc
	stmia r7!, {r0-r2}
	ldr r0, dword_80E478C // =0xfffec000 
	add r6, r6, r0
	str r6, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	tst r0, r0
	beq loc_80E4786
	pop {r7,pc}
loc_80E4786:
	bl sub_80E4790
	pop {r7,pc}
dword_80E478C: .word 0xFFFEC000
.endfunc // sub_80E475C

.func
.thumb_func
sub_80E4790:
	push {lr}
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #1
	bl sub_80E05F6
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E4790

.func
.thumb_func
sub_80E47A4:
	push {lr}
	push {r5}
	mov r0, #0x38 
	bl object_spawnType4
	add r7, r5, #0
	pop {r5}
	pop {pc}
.endfunc // sub_80E47A4

loc_80E47B4:
	push {lr}
	ldr r1, off_80E47C4 // =off_80E47C8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E47C4: .word off_80E47C8
off_80E47C8: .word sub_800B916+1
	.word sub_80E47D4+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E47D4:
	push {lr}
	ldr r1, off_80E47E4 // =off_80E47E8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E47E4: .word off_80E47E8
off_80E47E8: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E47F8+1
	.word sub_800BC88+1
.endfunc // sub_80E47D4

.func
.thumb_func
sub_80E47F8:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E4814
	mov r7, #5
	add r7, r7, r5
	bl sub_80CFCD6
	mov r0, #1
	strb r0, [r7]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E4814:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80E4822
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E4822:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E47F8

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x39 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E4844
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E4844:
	pop {pc}
	.balign 4, 0x00
loc_80E4848:
	push {lr}
	ldr r1, off_80E4858 // =off_80E485C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E4858: .word off_80E485C
off_80E485C: .word sub_80E4868+1
	.word sub_80E48C0+1
	.word sub_80E48F0+1
.func
.thumb_func
sub_80E4868:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sub_8002F90 // () -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E4868

	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80E48B8 // =0x100000 
	mul r1, r0
	str r1, [r5,#0x40]
	ldr r1, dword_80E48BC // =0xfff98000 
	str r1, [r5,#0x48]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80E48C0
	pop {pc}
dword_80E48B8: .word 0x100000
dword_80E48BC: .word 0xFFF98000
.func
.thumb_func
sub_80E48C0:
	push {lr}
	bl sprite_update
.endfunc // sub_80E48C0

	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80E48EC // =0x3c00 
	add r1, r1, r0
	str r1, [r5,#0x48]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80E48E8
	mov r0, #8
	str r0, [r5,#8]
locret_80E48E8:
	pop {pc}
	.balign 4, 0x00
dword_80E48EC: .word 0x3C00
.func
.thumb_func
sub_80E48F0:
	push {lr}
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E48F0

.func
.thumb_func
sub_80E48F8:
	push {lr}
	push {r5}
	mov r0, #0x3a 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E490C
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E490C:
	pop {pc}
	.byte 0, 0
.endfunc // sub_80E48F8

loc_80E4910:
	push {lr}
	ldr r1, off_80E4920 // =off_80E4924 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E4920: .word off_80E4924
off_80E4924: .word sub_800B916+1
	.word sub_80E4930+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E4930:
	push {lr}
	ldr r1, off_80E4940 // =off_80E4944 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E4940: .word off_80E4944
off_80E4944: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E4954+1
	.word sub_800BC88+1
.endfunc // sub_80E4930

.func
.thumb_func
sub_80E4954:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E4992
	mov r0, #5
	add r0, r0, r5
	mov r4, #0
	bl sub_80C4AEC
	ldr r0, [r5,#0x4c]
	bl sub_80E49C4
	bl sub_801E658
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r1, #0x21 
	bl sub_8013774
	cmp r0, #0
	beq loc_80E4984
	bl sub_8014446
	b loc_80E4988
loc_80E4984:
	bl sub_801443C
loc_80E4988:
	pop {r5}
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E4992:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80E49A0
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E49A0:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E4954

.func
.thumb_func
sub_80E49A2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x3b 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E49C2
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E49C2:
	pop {pc}
.endfunc // sub_80E49A2

.func
.thumb_func
sub_80E49C4:
	push {r5,lr}
	add r5, r0, #0
	mov r1, #0x31 
	mov r2, #0
	bl sub_8013754
	mov r1, #0x13
	mov r2, #0
	bl sub_8013754
	mov r1, #0x14
	mov r2, #0
	bl sub_8013754
	mov r1, #0x16
	mov r2, #0
	bl sub_8013754
	mov r1, #0x54 
	mov r2, #0
	bl sub_8013764
	mov r1, #0x24 
	mov r2, #0
	bl sub_8013754
	mov r1, #0x19
	mov r2, #0
	bl sub_8013754
	mov r1, #0x18
	mov r2, #0
	bl sub_8013754
	mov r1, #0x1a
	mov r2, #0
	bl sub_8013754
	mov r1, #0x63 
	mov r2, #0
	bl sub_8013754
	pop {r5,pc}
	.balign 4, 0x00
.endfunc // sub_80E49C4

loc_80E4A1C:
	push {lr}
	ldr r1, off_80E4A3C // =off_80E4A40 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#8]
	cmp r0, #8
	bne loc_80E4A34
	bl sub_801BCD0
	b locret_80E4A38
loc_80E4A34:
	bl sub_801BC24
locret_80E4A38:
	pop {pc}
	.balign 4, 0x00
off_80E4A3C: .word off_80E4A40
off_80E4A40: .word sub_80E4A6E+1
	.word sub_80E4AAE+1
	.word sub_80E4A4C+1
.func
.thumb_func
sub_80E4A4C:
	push {lr}
	ldrb r0, [r5,#9]
	cmp r0, #0
	bne loc_80E4A5E
	mov r0, #3
	strb r0, [r5,#9]
	mov r0, #3
	strb r0, [r5,#0x10]
	b locret_80E4A6C
loc_80E4A5E:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80E4A6C
	bl sub_8016C9C
locret_80E4A6C:
	pop {pc}
.endfunc // sub_80E4A4C

.func
.thumb_func
sub_80E4A6E:
	push {r4,lr}
	mov r1, #0xc
	mov r2, #0x20 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E4A6E

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #2
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E4AAE
	pop {r4,pc}
.func
.thumb_func
sub_80E4AAE:
	push {r4,r6,r7,lr}
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	mov r1, #0x1e
	ldrb r2, [r4,#0x16]
	ldrb r3, [r4,#0x17]
	bl sub_8018810
	lsl r7, r0, #0x10
	lsl r6, r1, #0x10
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	add r1, r1, r7
	add r3, r3, r6
	ldr r6, dword_80E4B60 // =0x20000 
	sub r2, r2, r6
	sub r3, r3, r6
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	bl sub_800E2AC
	bl object_isCurrentPanelValid
	bne loc_80E4AFE
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E4AFE:
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80E4B28
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	push {r5}
	ldr r5, [r5,#0x4c]
	bl object_getFlag // () -> int
	pop {r5}
	ldr r1, dword_80E4B64 // =0x80000000 
	tst r0, r1
	bne locret_80E4B32
loc_80E4B28:
	ldr r0, [r5,#0x60]
	mov r1, #0
	str r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
locret_80E4B32:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E4AAE

.func
.thumb_func
sub_80E4B34:
	push {lr}
	push {r5}
	mov r0, #0x3c 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E4B56
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80E4B56:
	pop {pc}
.endfunc // sub_80E4B34

	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
	.byte 0, 0
dword_80E4B60: .word 0x20000
dword_80E4B64: .word 0x80000000
	push {lr}
	ldr r1, off_80E4B78 // =off_80E4B7C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E4B78: .word off_80E4B7C
off_80E4B7C: .word sub_80E4B88+1
	.word sub_80E4B9E+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E4B88:
	push {lr}
	mov r0, #0xd3
	strh r0, [r5,#0x28]
	mov r0, #1
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E4B9E
	pop {pc}
.endfunc // sub_80E4B88

.func
.thumb_func
sub_80E4B9E:
	push {lr}
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80E4BB2
	ldr r1, off_80E4BB4 // =off_80E4BB8 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80E4BB2:
	pop {pc}
off_80E4BB4: .word off_80E4BB8
off_80E4BB8: .word sub_80E4BC0+1
	.word sub_80E4BD4+1
.endfunc // sub_80E4B9E

.func
.thumb_func
sub_80E4BC0:
	push {lr}
	mov r0, #0xb
	strh r0, [r5,#0x22]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	bl sub_80E4BD4
	pop {pc}
.endfunc // sub_80E4BC0

.func
.thumb_func
sub_80E4BD4:
	push {r4,r6,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E4C16
	ldrh r0, [r5,#0x24]
	tst r0, r0
	beq loc_80E4C1C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80E4C24
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	beq loc_80E4C16
	bl sub_80E4C26
	cmp r0, #0xff
	beq loc_80E4C16
	push {r0,r1}
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	mov r4, #1
	bl sub_80D006E
	pop {r0,r1}
	mov r0, #0x64 
	bl sound_play // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80E4C24
loc_80E4C16:
	ldr r0, [r5,#0x60]
	mov r1, #0
	str r1, [r0]
loc_80E4C1C:
	bl sub_800F656
	mov r0, #8
	str r0, [r5,#8]
locret_80E4C24:
	pop {r4,r6,pc}
.endfunc // sub_80E4BD4

.func
.thumb_func
sub_80E4C26:
	push {r4,r6,r7,lr}
	bl get_802D246 // () -> int
	mov r1, #8
	tst r0, r1
	beq loc_80E4C38
	bl sub_80E4C78
	b locret_80E4C76
loc_80E4C38:
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #0x10
	mul r0, r1
	add r0, #0x80
	mov r7, r10
	ldr r7, [r7,#0x18]
	add r7, r7, r0
	mov r4, #0
	mov r3, #0
loc_80E4C4E:
	ldr r6, [r7]
	tst r6, r6
	beq loc_80E4C64
	tst r3, r3
	beq loc_80E4C62
	ldrh r0, [r6,#0x24]
	ldrh r1, [r3,#0x24]
	cmp r0, r1
	bge loc_80E4C62
	b loc_80E4C64
loc_80E4C62:
	add r3, r6, #0
loc_80E4C64:
	add r7, #4
	add r4, #1
	cmp r4, #4
	blt loc_80E4C4E
	mov r0, #0xff
	tst r3, r3
	beq locret_80E4C76
	ldrb r0, [r3,#0x12]
	ldrb r1, [r3,#0x13]
locret_80E4C76:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E4C26

.func
.thumb_func
sub_80E4C78:
	push {r6,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	add r6, r0, #0
	ldrh r0, [r6,#0x24]
	tst r0, r0
	beq loc_80E4C92
	ldrb r0, [r6,#0x12]
	ldrb r1, [r6,#0x13]
	b locret_80E4C94
loc_80E4C92:
	mov r0, #0xff
locret_80E4C94:
	pop {r6,pc}
.endfunc // sub_80E4C78

	push {lr}
	push {r2,r5}
	mov r0, #0x6e 
	bl object_spawnType4
	add r0, r5, #0
	pop {r2,r5}
	beq locret_80E4CB4
	strb r2, [r0,#0xe]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	mov r2, #1
	bl sub_800F614
locret_80E4CB4:
	pop {pc}
	.balign 4, 0x00
loc_80E4CB8:
	push {lr}
	ldr r1, off_80E4CCC // =off_80E4CD0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80E4CCC: .word off_80E4CD0
off_80E4CD0: .word sub_80E4CDC+1
	.word sub_80E4D1E+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80E4CDC:
	push {r4,lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r1, #0xc
	mov r2, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E4CDC

	bl sub_8002E3C
	bl sub_8003006
	mov r0, #1
	bl sub_800302A
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E4D1E
	pop {r4,pc}
.func
.thumb_func
sub_80E4D1E:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r3, #0
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	mov r1, #0
	ldrb r0, [r4,#0x10]
	cmp r0, #0
	beq loc_80E4D56
	mov r1, #2
	cmp r0, #3
	beq loc_80E4D56
	mov r1, #1
	cmp r0, #4
	beq loc_80E4D56
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E4D56:
	strb r1, [r5,#0x10]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#0x16]
	bl sub_800EB6C
	tst r0, r0
	bne loc_80E4D72
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E4D72:
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne locret_80E4D88
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x5d 
	bl sub_80E05F6
	mov r0, #4
	strb r0, [r5,#0xb]
locret_80E4D88:
	pop {r4,pc}
.endfunc // sub_80E4D1E

.func
.thumb_func
sub_80E4D8A:
	push {lr}
	push {r5}
	mov r0, #0x3e 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E4DA0
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r5, [r0,#0x4c]
locret_80E4DA0:
	pop {pc}
.endfunc // sub_80E4D8A

.func
.thumb_func
sub_80E4DA2:
	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
	.word 0
	.byte 0, 0, 0, 0
.endfunc // sub_80E4DA2

loc_80E4DB0:
	push {lr}
	ldr r1, off_80E4DC0 // =off_80E4DC4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E4DC0: .word off_80E4DC4
off_80E4DC4: .word sub_80E4DD0+1
	.word loc_80E4E84+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E4DD0:
	push {lr}
	mov r0, #0x80
	mov r1, #0x10
	mov r2, #0x30 
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E4DD0

	bl sub_8002F90 // () -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#5]
	tst r0, r0
	bne loc_80E4E16
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	mov r1, #1
	eor r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, off_80E4E70 // =dword_80E4E74 
	bl sub_81096FA
	bl sub_800D086
	cmp r0, #0
	bne loc_80E4E14
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
loc_80E4E14:
	strb r0, [r5,#0x12]
loc_80E4E16:
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80E509C // =0x5f0000 
	mul r1, r0
	ldr r2, [r5,#0x34]
	sub r2, r2, r1
	str r2, [r5,#0x34]
	ldr r1, dword_80E50A0 // =0x280000 
	str r1, [r5,#0x3c]
	ldr r1, dword_80E50A4 // =0x208000 
	mul r1, r0
	str r1, [r5,#0x40]
	ldr r1, dword_80E50A8 // =0xc8000 
	str r1, [r5,#0x48]
	mov r0, #2
	strh r0, [r5,#0x20]
	ldrb r0, [r5,#4]
	bl sprite_setPallete // (int pallete) -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x89
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80E4E84
	pop {pc}
	.word 0
	.byte 0, 0
off_80E4E70: .word dword_80E4E74
dword_80E4E74: .word 0x10020, 0x0
	.word 0x10000, 0x20
loc_80E4E84:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E4E9E
	ldr r1, off_80E4EA4 // =off_80E4EA8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BC64
	pop {pc}
loc_80E4E9E:
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
off_80E4EA4: .word off_80E4EA8
off_80E4EA8: .word sub_80E4EB8+1
	.word sub_80E4EC8+1
	.word sub_80E4F18+1
	.word sub_80E4FB6+1
.func
.thumb_func
sub_80E4EB8:
	push {r4,r6,r7,lr}
	bl sub_80E4FFC
	mov r0, #4
	strb r0, [r5,#9]
	bl sub_80E4EC8
	pop {r4,r6,r7,pc}
.endfunc // sub_80E4EB8

.func
.thumb_func
sub_80E4EC8:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80E4F12
	mov r0, #2
	strh r0, [r5,#0x20]
	bl sub_800E29C // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80E50AC // =0xa0000 
	mul r1, r0
	ldr r2, [r5,#0x34]
	sub r2, r2, r1
	str r2, [r5,#0x34]
	ldr r1, dword_80E50B0 // =0x1e0000 
	str r1, [r5,#0x3c]
	ldr r1, dword_80E50B4 // =0x50000 
	mul r1, r0
	str r1, [r5,#0x40]
	ldr r1, dword_80E50B8 // =0xf0000 
	str r1, [r5,#0x48]
	mov r0, #3
	strb r0, [r5,#0x10]
	bl sub_80E5024
	mov r0, #8
	strb r0, [r5,#9]
loc_80E4F12:
	bl sub_80E4FE8
	pop {r4,r6,r7,pc}
.endfunc // sub_80E4EC8

.func
.thumb_func
sub_80E4F18:
	push {r4,r6,r7,lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80E4FB0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r2, #0
	mov r1, #0x10
	tst r0, r1
	bne loc_80E4F66
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80E50BC // =0x1505ff01 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C536A
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x15
	bl sub_80E05F6
	mov r0, #8
	str r0, [r5,#8]
	b loc_80E4FB0
loc_80E4F66:
	bl sub_80E5050
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
	mov r0, #0xc0
	bl sound_play // () -> void
	mov r0, #0xe
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80E4FA8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_crackPanelDup1
	ldrb r0, [r5,#7]
	cmp r0, #1
	bne loc_80E4FA8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	sub r1, #1
	bl object_crackPanelDup1
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	add r1, #1
	bl object_crackPanelDup1
loc_80E4FA8:
	mov r0, #0x2d 
	strh r0, [r5,#0x20]
	mov r0, #0xc
	strb r0, [r5,#9]
loc_80E4FB0:
	bl sub_80E4FE8
	pop {r4,r6,r7,pc}
.endfunc // sub_80E4F18

.func
.thumb_func
sub_80E4FB6:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne loc_80E4FC4
	mov r0, #8
	str r0, [r5,#8]
loc_80E4FC4:
	bl sub_80E4FE8
	pop {pc}
.endfunc // sub_80E4FB6

.func
.thumb_func
sub_80E4FCA:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x3f 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E4FE6
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
locret_80E4FE6:
	pop {pc}
.endfunc // sub_80E4FCA

.func
.thumb_func
sub_80E4FE8:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r3, [r5,#0x16]
	ldrb r2, [r5,#0x17]
	eor r3, r2
	mov r2, #4
	bl sub_8109660
	pop {pc}
.endfunc // sub_80E4FE8

.func
.thumb_func
sub_80E4FFC:
	push {r4,r6,r7,lr}
	bl sub_800E456 // () -> int
	lsl r4, r0, #0x18
	ldr r0, dword_80E5020 // =0x43010 
	orr r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	ldr r6, dword_80E5018 // =0x83e0 
	ldr r7, dword_80E501C // =0xe 
	bl sub_80E33FA
	pop {r4,r6,r7,pc}
dword_80E5018: .word 0x83E0
dword_80E501C: .word 0xE
dword_80E5020: .word 0x43010
.endfunc // sub_80E4FFC

.func
.thumb_func
sub_80E5024:
	push {r4,r6,r7,lr}
	bl sub_800E456 // () -> int
	lsl r4, r0, #0x18
	ldr r0, dword_80E504C // =0x33010 
	orr r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, dword_80E50C0 // =0x40000 
	add r2, r2, r3
	ldr r3, [r5,#0x3c]
	ldr r6, dword_80E5044 // =0x83e0 
	ldr r7, dword_80E5048 // =0xe 
	bl sub_80E33FA
	pop {r4,r6,r7,pc}
dword_80E5044: .word 0x83E0
dword_80E5048: .word 0xE
dword_80E504C: .word 0x33010
.endfunc // sub_80E5024

.func
.thumb_func
sub_80E5050:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80E5068
.endfunc // sub_80E5050

	sub r1, #1
	bl sub_80E5068
	add r1, #2
	bl sub_80E5068
	pop {pc}
.func
.thumb_func
sub_80E5068:
	push {r0,r1,r4,r6,r7,lr}
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_80E5068

	mov r1, #0x10
	tst r0, r1
	pop {r0,r1}
	beq locret_80E509A
	push {r0,r1}
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80E50BC // =0x1505ff01 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C536A
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x34 
	bl sub_80E05F6
locret_80E509A:
	pop {r0,r1,r4,r6,r7,pc}
dword_80E509C: .word 0x5F0000
dword_80E50A0: .word 0x280000
dword_80E50A4: .word 0x208000
dword_80E50A8: .word 0xC8000
dword_80E50AC: .word 0xA0000
dword_80E50B0: .word 0x1E0000
dword_80E50B4: .word 0x50000
dword_80E50B8: .word 0xF0000
dword_80E50BC: .word 0x1505FF01
dword_80E50C0: .word 0x40000
loc_80E50C4:
	push {lr}
	ldr r1, off_80E50D4 // =off_80E50D8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E50D4: .word off_80E50D8
off_80E50D8: .word sub_80E50E4+1
	.word sub_80E50FE+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E50E4:
	push {lr}
	bl sub_80E5174
	mov r0, #0x64 
	add r0, r0, r5
	str r0, [r5,#0x60]
	mov r0, #3
	strb r0, [r5,#5]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E50FE
	pop {pc}
.endfunc // sub_80E50E4

.func
.thumb_func
sub_80E50FE:
	push {r4,r6,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E514A
	ldrb r0, [r5,#9]
	cmp r0, #0
	bne loc_80E5134
	mov r0, #1
	strb r0, [r5,#9]
	ldr r0, [r5,#0x60]
	add r1, r0, #1
	str r1, [r5,#0x60]
	ldrb r0, [r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	ldrb r2, [r5,#0xe]
	ldrb r4, [r5,#4]
	mov r3, #0
	lsl r3, r3, #8
	orr r4, r3
	ldr r6, [r5,#0x2c]
	bl sub_80CE6E6
	mov r0, #8
	strh r0, [r5,#0x20]
loc_80E5134:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E514E
	ldrb r0, [r5,#5]
	sub r0, #1
	strb r0, [r5,#5]
	beq loc_80E514A
	mov r0, #0
	strb r0, [r5,#9]
	b locret_80E514E
loc_80E514A:
	mov r0, #8
	str r0, [r5,#8]
locret_80E514E:
	pop {r4,r6,pc}
.endfunc // sub_80E50FE

.func
.thumb_func
sub_80E5150:
	push {lr}
	push {r2,r5}
	mov r0, #0x40 
	bl object_spawnType4
	add r0, r5, #0
	pop {r2,r5}
	beq locret_80E5172
	str r5, [r0,#0x4c]
	strb r2, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	ldrb r1, [r0]
	mov r2, #0x10
	bic r1, r2
	strb r1, [r0]
locret_80E5172:
	pop {pc}
.endfunc // sub_80E5150

.func
.thumb_func
sub_80E5174:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x10
	mov r7, sp
	add r0, r7, #0
	ldrb r3, [r5,#0x16]
	mov r1, #1
	eor r3, r1
	mov r1, #0
	mov r2, #0xae
	bl object_getEnemyByNameRange
	add r4, r0, #0
	lsl r0, r0, #2
	add r0, r0, r7
	ldrb r3, [r5,#0x16]
	mov r1, #1
	eor r3, r1
	ldr r1, off_80E523C // =0x100 
	ldr r2, dword_80E5240 // =0x1c3 
	bl object_getEnemyByNameRange
	add r0, r0, r4
	cmp r0, #2
	bgt loc_80E51CC
	blt loc_80E51C6
	ldr r0, [r7]
	ldr r1, [r7,#4]
	ldrh r2, [r0,#0x24]
	ldrh r3, [r1,#0x24]
	cmp r2, r3
	blt loc_80E51C0
	bgt loc_80E51C2
	bl sub_8001532
	mov r1, #4
	and r0, r1
	ldr r0, [r7,r0]
	b loc_80E51C2
loc_80E51C0:
	add r0, r1, #0
loc_80E51C2:
	str r0, [r7,#8]
	b loc_80E51CC
loc_80E51C6:
	ldr r0, [r7]
	str r0, [r7,#4]
	str r0, [r7,#8]
loc_80E51CC:
	mov r4, #0x64 
	add r4, r4, r5
	mov r3, #0
loc_80E51D2:
	lsl r2, r3, #2
	ldr r2, [r7,r2]
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	lsl r1, r1, #4
	orr r0, r1
	strb r0, [r4,r3]
	add r3, #1
	cmp r3, #3
	blt loc_80E51D2
	mov r7, #2
loc_80E51E8:
	add r6, r4, #1
	add r3, r7, #0
loc_80E51EC:
	ldrb r0, [r4]
	ldrb r1, [r6]
	bl sub_80E5208
	strb r0, [r4]
	strb r1, [r6]
	add r6, #1
	sub r3, #1
	bne loc_80E51EC
	add r4, #1
	sub r7, #1
	bne loc_80E51E8
	add sp, sp, #0x10
	pop {r4,r6,r7,pc}
.endfunc // sub_80E5174

.func
.thumb_func
sub_80E5208:
	push {r3,lr}
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	eor r2, r3
	bne loc_80E5222
	mov r2, #0xf
	and r2, r0
	mov r3, #0xf
	and r3, r1
	cmp r2, r3
	bgt locret_80E523A
	blt loc_80E5234
	b loc_80E5230
loc_80E5222:
	mov r2, #0xf
	and r2, r0
	mov r3, #0xf
	and r3, r1
	cmp r2, r3
	blt locret_80E523A
	bgt loc_80E5234
loc_80E5230:
	cmp r0, r1
	ble locret_80E523A
loc_80E5234:
	add r2, r1, #0
	add r1, r0, #0
	add r0, r2, #0
locret_80E523A:
	pop {r3,pc}
off_80E523C: .word 0x100
dword_80E5240: .word 0x1C3
.endfunc // sub_80E5208

loc_80E5244:
	push {lr}
	ldr r1, off_80E5254 // =off_80E5258 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E5254: .word off_80E5258
off_80E5258: .word sub_80E5264+1
	.word sub_80E527A+1
	.word sub_80E5314+1
.func
.thumb_func
sub_80E5264:
	push {lr}
	mov r0, #3
	str r0, [r5,#0x6c]
	mov r0, #0xad
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E527A
	pop {pc}
.endfunc // sub_80E5264

.func
.thumb_func
sub_80E527A:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	cmp r0, #4
	beq locret_80E5294
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x54]
	ldr r0, [r0,#0x3c]
	ldr r1, dword_80E546C // =0x80010000 
	tst r0, r1
	bne locret_80E5294
	bl loc_80E5296
locret_80E5294:
	pop {pc}
.endfunc // sub_80E527A

loc_80E5296:
	push {lr}
	ldr r1, off_80E52A4 // =off_80E52A8 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80E52A4: .word off_80E52A8
off_80E52A8: .word sub_80E52B0+1
	.word sub_80E5304+1
.func
.thumb_func
sub_80E52B0:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80E52C8
	mov r0, r10
	ldr r0, [r0,#0x18]
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	add r1, #0xc0
	ldr r0, [r0,r1]
	tst r0, r0
	bne locret_80E5302
loc_80E52C8:
	mov r7, #0x60 
	add r7, r7, r5
	ldrb r0, [r7]
	tst r0, r0
	beq loc_80E52DA
	add r7, #1
	ldrb r0, [r7]
	tst r0, r0
	bne locret_80E5302
loc_80E52DA:
	ldr r1, [r5,#0x6c]
	sub r1, #1
	str r1, [r5,#0x6c]
	bne loc_80E52E6
	mov r1, #3
	str r1, [r5,#0x6c]
loc_80E52E6:
	ldr r1, [r5,#0x6c]
	bl sub_80E5386
	tst r0, r0
	beq locret_80E5302
	ldrh r2, [r5,#0x16]
	ldrb r4, [r5,#4]
	mov r6, #0
	bl sub_80CD488
	mov r0, #0xc
	strh r0, [r5,#0x22]
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E5302:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E52B0

.func
.thumb_func
sub_80E5304:
	push {lr}
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bne locret_80E5312
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E5312:
	pop {pc}
.endfunc // sub_80E5304

.func
.thumb_func
sub_80E5314:
	push {lr}
	ldrb r0, [r5,#6]
	tst r0, r0
	bne loc_80E5322
	add r0, r5, #0
	bl sub_80E544C
loc_80E5322:
	mov r0, #0
	str r0, [r5,#0x60]
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E5314

.func
.thumb_func
sub_80E532C:
	push {lr}
	ldrb r0, [r5,#0x16]
	bl sub_80E543C
	tst r0, r0
	beq loc_80E5340
	cmp r1, #1
	bge loc_80E5340
	mov r0, #0
	pop {pc}
loc_80E5340:
	push {r5}
	mov r0, #0x41 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E5366
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	ldrb r3, [r0]
	mov r2, #0x10
	bic r3, r2
	strb r3, [r0]
	push {r0}
	mov r2, #1
	bl sub_80E541A
	pop {r0}
locret_80E5366:
	pop {pc}
.endfunc // sub_80E532C

.func
.thumb_func
sub_80E5368:
	push {lr}
	push {r5}
	mov r0, #0x41 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E5384
	ldrb r1, [r0,#5]
	strb r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x10
	bic r1, r2
	strb r1, [r0]
locret_80E5384:
	pop {pc}
.endfunc // sub_80E5368

.func
.thumb_func
sub_80E5386:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x16]
	lsl r3, r0, #3
	ldrb r2, [r5,#0x17]
	eor r0, r2
	ldr r7, off_80E53F8 // =dword_80E5400 
	add r7, r7, r3
	mov r2, #1
	eor r0, r2
	ldr r2, [r7]
	ldr r3, [r7,#4]
	bl sub_800D086
.endfunc // sub_80E5386

	push {r0,r1}
	bl object_getPanelParameters
	ldr r4, dword_80E53FC // =0x800000 
	tst r0, r4
	pop {r0,r1}
	bne loc_80E53F2
	ldrb r6, [r5,#4]
	cmp r6, #0
	beq locret_80E53F0
	push {r0,r1,r4}
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	bl object_getFlipDirection // (int a1, int a2) -> int
	add r6, r0, #0
	pop {r0,r1,r4}
	push {r0,r1}
	bl object_getPanelParameters
	mov r7, #0x20 
	and r7, r0
	pop {r0,r1}
loc_80E53D0:
	add r0, r0, r6
	sub r2, r0, #1
	cmp r2, #6
	bcs loc_80E53EE
	push {r0,r1,r4,r6}
	bl object_getPanelParameters
	add r2, r0, #0
	pop {r0,r1,r4,r6}
	tst r2, r4
	bne loc_80E53EE
	mov r3, #0x20 
	and r3, r2
	cmp r3, r7
	beq loc_80E53D0
loc_80E53EE:
	sub r0, r0, r6
locret_80E53F0:
	pop {r4,r6,r7,pc}
loc_80E53F2:
	mov r0, #0
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80E53F8: .word dword_80E5400
dword_80E53FC: .word 0x800000
dword_80E5400: .word 0x20, 0x0, 0x0
	.word 0x20
.func
.thumb_func
sub_80E5410:
	mov r1, #8
	str r1, [r0,#8]
	mov r1, #0
	str r1, [r0,#0x60]
	mov pc, lr
.endfunc // sub_80E5410

.func
.thumb_func
sub_80E541A:
	push {lr}
	mov r4, r10
	ldr r4, [r4,#0x18]
	lsl r1, r1, #2
	add r1, #0xc0
	add r4, r4, r1
	ldr r3, [r4]
	tst r3, r3
	beq loc_80E5436
	push {r0,r2}
	add r0, r3, #0
	bl sub_80E5410
	pop {r0,r2}
loc_80E5436:
	str r0, [r4]
	str r2, [r4,#8]
	pop {pc}
.endfunc // sub_80E541A

.func
.thumb_func
sub_80E543C:
	mov r2, r10
	ldr r2, [r2,#0x18]
	lsl r0, r0, #2
	add r0, #0xc0
	add r2, r2, r0
	ldr r0, [r2]
	ldr r1, [r2,#8]
	mov pc, lr
.endfunc // sub_80E543C

.func
.thumb_func
sub_80E544C:
	mov r2, r10
	ldr r2, [r2,#0x18]
	add r2, #0xc0
	mov r1, #0
loc_80E5454:
	ldr r3, [r2]
	cmp r0, r3
	bne loc_80E5460
	mov r3, #0
	str r3, [r2]
	str r3, [r2,#8]
loc_80E5460:
	add r2, #4
	add r1, #1
	cmp r1, #2
	blt loc_80E5454
	mov pc, lr
	.balign 4, 0x00
dword_80E546C: .word 0x80010000
.endfunc // sub_80E544C

loc_80E5470:
	push {lr}
	ldr r1, off_80E5484 // =off_80E5488 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80E5484: .word off_80E5488
off_80E5488: .word sub_80E5494+1
	.word sub_80E54DC+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E5494:
	push {r4,lr}
	bl sub_800E29C // () -> void
	mov r0, #0x80
	mov r1, #4
	mov r2, #2
	bl sprite_load // (int a1, int a2, int a3) ->
	mov r0, #9
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E5494

	bl sub_8002F90 // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x60]
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80E55B4 // =0x280000 
	svc 6
	strh r0, [r5,#0x22]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x6c]
	str r5, [r0]
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,pc}
.func
.thumb_func
sub_80E54DC:
	push {lr}
	ldr r1, off_80E54EC // =off_80E54F0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E54EC: .word off_80E54F0
off_80E54F0: .word sub_80E54FC+1
	.word sub_80E5546+1
	.word sub_80E557A+1
.endfunc // sub_80E54DC

.func
.thumb_func
sub_80E54FC:
	push {r4,lr}
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl object_isCurrentPanelValid
	cmp r0, #0
	beq loc_80E551A
	ldr r0, [r5,#0x6c]
	ldr r0, [r0]
	cmp r0, #0
	bne loc_80E5526
loc_80E551A:
	ldr r0, [r5,#0x6c]
	mov r1, #0
	str r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
	b locret_80E5544
loc_80E5526:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, off_80E55B8 // =LCDControl 
	ldrb r2, [r5,#0x16]
	cmp r2, #0
	beq loc_80E5538
	ldr r1, off_80E55BC // =start_ 
loc_80E5538:
	tst r0, r1
	beq locret_80E5544
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E5544:
	pop {r4,pc}
.endfunc // sub_80E54FC

.func
.thumb_func
sub_80E5546:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80E555C
	mov r0, #1
	strb r0, [r5,#0xa]
	bl sub_800E29C // () -> void
	mov r0, #0xa
	strb r0, [r5,#0x10]
	b locret_80E5578
loc_80E555C:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80E5578
	mov r0, #8
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x4c]
	mov r1, #1
	str r1, [r0,#0x68]
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E5578:
	pop {r4,pc}
.endfunc // sub_80E5546

.func
.thumb_func
sub_80E557A:
	push {lr}
	ldr r0, [r5,#0x6c]
	ldr r0, [r0]
	cmp r0, #0
	bne locret_80E5588
	mov r0, #8
	str r0, [r5,#8]
locret_80E5588:
	pop {pc}
.endfunc // sub_80E557A

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x42 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E55B0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r3, [r0,#0x60]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x6c]
	ldrb r1, [r0]
	mov r2, #0x10
	bic r1, r2
	strb r1, [r0]
locret_80E55B0:
	pop {pc}
	.balign 4, 0x00
dword_80E55B4: .word 0x280000
off_80E55B8: .word LCDControl
off_80E55BC: .word start_
loc_80E55C0:
	push {lr}
	ldr r1, off_80E55D0 // =off_80E55D4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E55D0: .word off_80E55D4
off_80E55D4: .word sub_800B916+1
	.word sub_80E55E0+1
	.word sub_80E569C+1
.func
.thumb_func
sub_80E55E0:
	push {lr}
	ldr r1, off_80E55F0 // =off_80E55F4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E55F0: .word off_80E55F4
off_80E55F4: .word sub_800B97E+1
	.word sub_80E5600+1
	.word sub_80E566C+1
.endfunc // sub_80E55E0

.func
.thumb_func
sub_80E5600:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80E5616
	mov r0, #4
	strb r0, [r5,#0xa]
	bl sub_8046664 // () -> void
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	b locret_80E566A
loc_80E5616:
	bl sub_80465BC
	bl sub_80465F8 // () -> void
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x1e
	beq loc_80E564E
	cmp r0, #0x19
	beq loc_80E5664
	cmp r0, #0
	bgt locret_80E566A
	ldr r2, [r5,#0x60]
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80E5694 // =dword_805FED8 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80E5698 // =0x3 
	bl sub_80C53A6
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80E566A
loc_80E564E:
	ldr r0, [r5,#0x4c]
	mov r1, #0x34 
	add r0, r0, r1
	bl sub_800362C
	add r2, r1, #0
	mov r0, #0x34 
	mov r1, #0
	bl sub_8046670
	b locret_80E566A
loc_80E5664:
	mov r0, #0xce
	bl sound_play // () -> void
locret_80E566A:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E5600

.func
.thumb_func
sub_80E566C:
	push {lr}
	bl sub_800BCC0
	push {r5}
	ldrb r0, [r5,#4]
	ldrb r1, [r5,#5]
	ldr r5, [r5,#0x4c]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	mov r0, #0xb
	strb r0, [r5,#0x10]
	bl sub_801BBF4
	pop {r5}
	bl sub_80E5700
	pop {pc}
	.balign 4, 0x00
dword_80E5694: .word 0x805FF01
dword_80E5698: .word 0x3
.endfunc // sub_80E566C

.func
.thumb_func
sub_80E569C:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80E56AC
	mov r0, #4
	strb r0, [r5,#0xa]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
loc_80E56AC:
	bl sub_80E5700
	push {r5}
	ldrb r0, [r5,#4]
	ldrb r1, [r5,#5]
	ldr r5, [r5,#0x4c]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	pop {r5}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E56CE
	bl object_timefreezeEnd
locret_80E56CE:
	pop {pc}
.endfunc // sub_80E569C

.func
.thumb_func
sub_80E56D0:
	push {lr}
	tst r3, r3
	beq locret_80E56FE
	push {r3}
	push {r0-r2,r5}
	mov r0, #0x43 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq loc_80E56FC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	pop {r3}
	str r3, [r0,#0x60]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
	b locret_80E56FE
loc_80E56FC:
	pop {r3}
locret_80E56FE:
	pop {pc}
.endfunc // sub_80E56D0

.func
.thumb_func
sub_80E5700:
	push {r5,lr}
	ldr r0, [r5,#0x4c]
	ldr r5, [r0,#0x50]
	tst r5, r5
	beq locret_80E570E
	bl sub_801BBF4
locret_80E570E:
	pop {r5,pc}
.endfunc // sub_80E5700

loc_80E5710:
	push {lr}
	ldr r1, off_80E5724 // =off_80E5728 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80E5724: .word off_80E5728
off_80E5728: .word sub_80E5734+1
	.word sub_80E57A0+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E5734:
	push {r4,r7,lr}
	ldr r7, [r5,#0x4c]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r7,#0x12]
	mov r1, #2
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	mov r2, #0x50 
	lsl r2, r2, #0x10
	neg r2, r2
	mul r2, r4
	add r0, r0, r2
	str r0, [r5,#0x6c]
	str r1, [r5,#0x70]
	mov r2, #0x10
	lsl r2, r2, #0x10
	neg r2, r2
	str r2, [r5,#0x3c]
	ldr r0, dword_80E5924 // =0x1000 
	bl sub_801BE2A
.endfunc // sub_80E5734

	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, dword_80E5928 // =0x280000 
	mul r0, r4
	str r0, [r5,#0x40]
	ldr r0, dword_80E592C // =0xfff80000 
	str r0, [r5,#0x48]
	ldr r0, dword_80E5930 // =0x400000 
	str r0, [r5,#0x74]
	str r0, [r5,#0x78]
	mov r0, #3
	strh r0, [r5,#0x22]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80E5794 // =off_80E5798 
	ldr r0, [r1,r0]
	str r0, [r5,#0x68]
	mov r0, #4
	strb r0, [r5,#8]
	bl sub_80E57A0
	pop {r4,r7,pc}
	.balign 4, 0x00
off_80E5794: .word off_80E5798
off_80E5798: .word LCDControl
	.word start_
.func
.thumb_func
sub_80E57A0:
	push {lr}
	ldr r1, off_80E57B0 // =off_80E57B4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E57B0: .word off_80E57B4
off_80E57B4: .word sub_80E57BC+1
	.word sub_80E5872+1
.endfunc // sub_80E57A0

.func
.thumb_func
sub_80E57BC:
	push {r4,lr}
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80E5814
	ldr r0, [r0]
	tst r0, r0
	beq loc_80E5814
	bl sub_80E58F4
	tst r0, r0
	beq loc_80E5814
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E57E0
	mov r0, #0x10
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E57E0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80E5820
	mov r0, #0x10
	strh r0, [r5,#0x20]
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	ble loc_80E5814
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x6c]
	add r0, r0, r1
	str r0, [r5,#0x6c]
	ldr r0, [r5,#0x48]
	neg r0, r0
	str r0, [r5,#0x48]
	ldr r0, [r5,#0x78]
	lsr r0, r0, #0x10
	add r0, #0x80
	mov r1, #0xff
	add r0, r0, r1
	lsl r0, r0, #0x10
	str r0, [r5,#0x78]
	str r0, [r5,#0x74]
	pop {r4,pc}
loc_80E5814:
	mov r0, #2
	ldr r1, [r5,#0x64]
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,pc}
loc_80E5820:
	ldr r0, [r5,#0x74]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x74]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	mov r0, #0x78 
	ldr r1, [r5,#0x74]
	lsr r1, r1, #0x10
	mov r2, #0xff
	and r1, r2
	ldr r2, [r5,#0x6c]
	ldr r3, [r5,#0x70]
	bl sub_80E58D2
	str r0, [r5,#0x34]
	str r1, [r5,#0x38]
	bl sub_800E2AC
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_80E57BC

	tst r0, r0
	beq locret_80E5870
	ldr r1, [r5,#0x68]
	tst r0, r1
	beq locret_80E5870
	mov r0, #1
	ldr r1, [r5,#0x64]
	strb r0, [r1]
	ldrb r0, [r5,#0x12]
	strb r0, [r1,#1]
	ldrb r0, [r5,#0x13]
	strb r0, [r1,#2]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E5870:
	pop {r4,pc}
.func
.thumb_func
sub_80E5872:
	push {lr}
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80E58A2
	ldr r0, [r0]
	tst r0, r0
	beq loc_80E58A2
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne locret_80E58A0
	bl sub_800E29C // () -> void
	mov r0, #1
	strh r0, [r5,#0x10]
	mov r0, #0xbd
	bl sound_play // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80E5910
	mov r0, #4
	strb r0, [r5,#0xb]
locret_80E58A0:
	pop {pc}
loc_80E58A2:
	mov r0, #8
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80E5872

	push {lr}
	push {r5}
	mov r0, #0x44 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E58D0
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	tst r7, r7
	beq loc_80E58C6
	str r0, [r7]
loc_80E58C6:
	str r6, [r0,#0x64]
	ldrb r1, [r0]
	mov r2, #0x10
	bic r1, r2
	strb r1, [r0]
locret_80E58D0:
	pop {pc}
.func
.thumb_func
sub_80E58D2:
	push {r4-r7,lr}
	add r7, r4, #0
	add r4, r2, #0
	add r5, r3, #0
	ldr r2, off_80E5934 // =byte_8006660 
	add r3, r1, r1
	ldrsh r6, [r2,r3]
	mul r6, r0
	lsl r6, r6, #8
	mul r6, r7
	ldr r2, off_80E5938 // =byte_80065E0 
	ldrsh r7, [r2,r3]
	mul r7, r0
	lsl r7, r7, #8
	add r0, r4, r6
	add r1, r5, r7
	pop {r4-r7,pc}
.endfunc // sub_80E58D2

.func
.thumb_func
sub_80E58F4:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x78 
	mul r0, r1
	lsl r0, r0, #0x10
	ldr r1, [r5,#0x6c]
	add r0, r0, r1
	ldr r1, [r5,#0x70]
	bl sub_800E258
	bl object_isValidPanel
	pop {pc}
.endfunc // sub_80E58F4

.func
.thumb_func
sub_80E5910:
	push {r4,r6,r7,lr}
	mov r2, #5
	mov r3, #0
	ldr r4, dword_80E593C // =0x405ff01 
	mov r6, #0
	ldr r7, dword_80E5940 // =0x1100 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80E5924: .word 0x1000
dword_80E5928: .word 0x280000
dword_80E592C: .word 0xFFF80000
dword_80E5930: .word 0x400000
off_80E5934: .word byte_8006660
off_80E5938: .word byte_80065E0
dword_80E593C: .word 0x405FF01
dword_80E5940: .word 0x1100
.endfunc // sub_80E5910

loc_80E5944:
	push {lr}
	ldr r1, off_80E5954 // =off_80E5958 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E5954: .word off_80E5958
off_80E5958: .word sub_800B916+1
	.word sub_80E5964+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E5964:
	push {lr}
	ldr r1, off_80E5974 // =off_80E5978 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E5974: .word off_80E5978
off_80E5978: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E5988+1
	.word sub_800BC88+1
.endfunc // sub_80E5964

.func
.thumb_func
sub_80E5988:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E59AE
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r7, #5
	add r7, r7, r5
	bl sub_80D2E94
	mov r1, #1
	strb r1, [r5,#5]
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E59AE:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80E59C4
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E59C4
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E59C4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E5988

.func
.thumb_func
sub_80E59C6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x45 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E59E6
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E59E6:
	pop {pc}
.endfunc // sub_80E59C6

loc_80E59E8:
	push {lr}
	ldr r1, off_80E59F8 // =off_80E59FC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E59F8: .word off_80E59FC
off_80E59FC: .word sub_80E5A08+1
	.word sub_80E5A22+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E5A08:
	push {lr}
	bl sub_80E5A8A
	str r0, [r5,#0x60]
	ldrb r1, [r5,#5]
	strh r1, [r5,#0x22]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E5A22
	pop {pc}
.endfunc // sub_80E5A08

.func
.thumb_func
sub_80E5A22:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E5A5E
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E5A62
	mov r0, #0x14
	strh r0, [r5,#0x20]
	bl sub_80E5A8A
	str r0, [r5,#0x60]
	ldr r0, [r5,#0x60]
	bl sub_80E5AD6
	ldr r6, [r5,#0x2c]
	mov r4, #0
	ldrb r2, [r5,#5]
	cmp r2, #3
	bne loc_80E5A50
	mov r4, #2
loc_80E5A50:
	ldrb r2, [r5,#0xe]
	bl sub_80CF594
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80E5A62
loc_80E5A5E:
	mov r0, #8
	str r0, [r5,#8]
locret_80E5A62:
	pop {pc}
.endfunc // sub_80E5A22

.func
.thumb_func
sub_80E5A64:
	push {lr}
	push {r5}
	mov r0, #0x46 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E5A88
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	mov r1, #1
	strb r1, [r0,#0xe]
	ldrb r1, [r0]
	mov r2, #0x10
	bic r1, r2
	strb r1, [r0]
locret_80E5A88:
	pop {pc}
.endfunc // sub_80E5A64

.func
.thumb_func
sub_80E5A8A:
	push {r4,r6,lr}
	sub sp, sp, #0x10
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #0x10
	mul r0, r1
	add r0, #0x80
	mov r3, r10
	ldr r3, [r3,#0x18]
	add r3, r3, r0
	mov r2, #0
	mov r4, #0
loc_80E5AA4:
	ldr r0, [r3]
	tst r0, r0
	beq loc_80E5AB8
	ldrh r1, [r0,#0x24]
	tst r1, r1
	beq loc_80E5AB8
	add r1, sp, #0
	lsl r6, r4, #2
	str r0, [r1,r6]
	add r4, #1
loc_80E5AB8:
	add r3, #4
	add r2, #1
	cmp r2, #4
	blt loc_80E5AA4
	add r0, r4, #0
	beq loc_80E5AD2
	bl sub_8001532
	add r1, r4, #0
	svc 6
	add r0, sp, #0
	lsl r1, r1, #2
	ldr r0, [r1,r0]
loc_80E5AD2:
	add sp, sp, #0x10
	pop {r4,r6,pc}
.endfunc // sub_80E5A8A

.func
.thumb_func
sub_80E5AD6:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	ldrb r1, [r0,#0x12]
	str r1, [sp,#4]
	ldrb r1, [r0,#0x13]
	str r1, [sp,#8]
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	ldr r1, off_80E5B48 // =dword_80E5B50 
	ldrb r0, [r1,r0]
	tst r0, r0
	bne loc_80E5AF8
loc_80E5AF2:
	ldr r0, [sp,#4]
	ldr r1, [sp,#8]
	b loc_80E5B44
loc_80E5AF8:
	mov r4, #0
	mov r6, #0
	ldr r7, off_80E5B4C // =byte_80E5B58 
loc_80E5AFE:
	mov r0, #0
	ldrsb r0, [r7,r0]
	ldr r2, [sp,#4]
	add r0, r0, r2
	str r0, [sp,#0x10]
	mov r1, #1
	ldrsb r1, [r7,r1]
	ldr r2, [sp,#8]
	add r1, r1, r2
	str r1, [sp,#0x14]
	bl object_isValidPanel
	beq loc_80E5B26
	ldr r0, [sp,#0x10]
	ldr r1, [sp,#0x14]
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0
	strb r0, [r1,r6]
	add r6, #1
loc_80E5B26:
	add r7, #2
	add r4, #1
	cmp r4, #4
	blt loc_80E5AFE
	tst r6, r6
	beq loc_80E5AF2
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80E5B44:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
off_80E5B48: .word dword_80E5B50
off_80E5B4C: .word byte_80E5B58
dword_80E5B50: .word 0x10100, 0x0
byte_80E5B58: .byte 0x0
byte_80E5B59: .byte 0xFF
.endfunc // sub_80E5AD6

	lsl r0, r0, #4
	lsl r7, r7, #3
	// <mkdata>
	.hword 0x1 // mov r1, r0
locret_80E5B60:
	mov pc, lr
.func
.thumb_func
sub_80E5B62:
	push {r5,lr}
	mov r0, #0x47 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5,pc}
.endfunc // sub_80E5B62

.func
.thumb_func
sub_80E5B6E:
	push {r5,lr}
	add r5, r0, #0
	bne locret_80E5B78
	bl object_freeMemory
locret_80E5B78:
	pop {r5,pc}
.endfunc // sub_80E5B6E

.func
.thumb_func
sub_80E5B7A:
	add r4, r0, #0
	ldrb r0, [r5,#5]
	mov r1, #0xc
	mul r0, r1
	add r0, #0x40 
	add r6, r0, r4
	mov pc, lr
.endfunc // sub_80E5B7A

.func
.thumb_func
sub_80E5B88:
	push {r4,r6,lr}
	bl sub_80E5B7A
	mov r3, #3
loc_80E5B90:
	ldr r0, [r6]
	cmp r0, #0
	beq loc_80E5B9E
	add r6, #4
	sub r3, #1
	bne loc_80E5B90
	b locret_80E5BA0
loc_80E5B9E:
	str r5, [r6]
locret_80E5BA0:
	pop {r4,r6,pc}
.endfunc // sub_80E5B88

.func
.thumb_func
sub_80E5BA2:
	push {r4,r6,lr}
	bl sub_80E5B7A
	mov r3, #3
	mov r2, #0
loc_80E5BAC:
	ldr r0, [r6,r2]
	cmp r0, r5
	beq loc_80E5BBA
	add r2, #4
	cmp r2, #8
	ble loc_80E5BAC
	b locret_80E5BDC
loc_80E5BBA:
	cmp r2, #8
	beq loc_80E5BCA
	cmp r2, #4
	beq loc_80E5BC6
	ldr r0, [r6,#4]
	str r0, [r6]
loc_80E5BC6:
	ldr r0, [r6,#8]
	str r0, [r6,#4]
loc_80E5BCA:
	mov r0, #0
	str r0, [r6,#8]
	ldr r0, [r6]
	cmp r0, #0
	bne locret_80E5BDC
	ldrb r0, [r5,#5]
	add r0, #4
	mov r1, #0
	strb r1, [r4,r0]
locret_80E5BDC:
	pop {r4,r6,pc}
.endfunc // sub_80E5BA2

.func
.thumb_func
sub_80E5BDE:
	push {r4,r6,lr}
	bl sub_80E5B7A
	mov r0, #0
loc_80E5BE6:
	ldr r1, [r6]
	cmp r1, r5
	beq locret_80E5BF4
	add r6, #4
	add r0, #1
	cmp r0, #2
	ble loc_80E5BE6
locret_80E5BF4:
	pop {r4,r6,pc}
.endfunc // sub_80E5BDE

.func
.thumb_func
sub_80E5BF6:
	push {r4,r6,lr}
	lsl r2, r2, #4
	orr r1, r2
	push {r1}
	bl sub_80E5B7A
	pop {r1}
	ldrb r0, [r5,#5]
	add r0, #4
	strb r1, [r4,r0]
	pop {r4,r6,pc}
.endfunc // sub_80E5BF6

.func
.thumb_func
sub_80E5C0C:
	push {r4,r6,lr}
	bl sub_80E5B7A
	ldrb r0, [r5,#5]
	add r0, #4
	ldrb r0, [r4,r0]
	mov r1, #0xf0
	and r1, r0
	lsl r1, r1, #0x18
	asr r1, r1, #0x1c
	mov r2, #0xf
	and r0, r2
	pop {r4,r6,pc}
	.word 0x3C0C0000
	.hword 0x470C
.endfunc // sub_80E5C0C

.func
.thumb_func
sub_80E5C2C:
	push {lr}
	ldr r1, off_80E5C3C // =off_80E5C40 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E5C3C: .word off_80E5C40
off_80E5C40: .word sub_80E5C4C+1
	.word sub_80E5CA0+1
	.word object_freeMemory+1
.endfunc // sub_80E5C2C

.func
.thumb_func
sub_80E5C4C:
	push {lr}
	ldrb r0, [r5,#4]
	add r0, r0, r0
	ldr r1, dword_80E5C9C // = 
	add r0, r0, r1
	ldrb r1, [r0]
	ldrb r2, [r0,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E5C4C

	bl sub_8002F90 // () -> void
	mov r0, #0
	strh r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#5]
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0
	strh r0, [r5,#0x22]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E5CA0
	pop {pc}
dword_80E5C9C: .word 0x80E5C28
.func
.thumb_func
sub_80E5CA0:
	push {r4,r6,lr}
	ldrb r0, [r5,#6]
	cmp r0, #1
	beq loc_80E5CB8
	bl battle_isTimeStop
	beq loc_80E5CB8
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	b locret_80E5D10
loc_80E5CB8:
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	tst r0, r0
	bne loc_80E5CD6
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
	b locret_80E5D10
loc_80E5CD6:
	ldrh r0, [r5,#0x22]
	mov r1, #0xb
	svc 6
	tst r1, r1
	bne loc_80E5CE6
	mov r0, #0xf9
	bl sound_play // () -> void
loc_80E5CE6:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	bl sub_800E2C0
	add r6, r0, #0
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	ldr r0, [r5,#0x40]
	add r1, r1, r0
	ldr r0, [r5,#0x44]
	add r2, r2, r0
	ldr r0, [r5,#0x48]
	add r3, r3, r0
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl sub_801BBAC
locret_80E5D10:
	pop {r4,r6,pc}
.endfunc // sub_80E5CA0

.func
.thumb_func
sub_80E5D12:
	push {lr}
	push {r5}
	mov r0, #0x48 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E5D3C
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldr r1, [r0,#0x34]
	str r1, [r0,#0x40]
	ldr r1, [r0,#0x38]
	str r1, [r0,#0x44]
	ldr r1, [r0,#0x3c]
	str r1, [r0,#0x48]
	str r7, [r0,#0x60]
	tst r7, r7
	beq locret_80E5D3C
	str r0, [r7]
locret_80E5D3C:
	pop {pc}
.endfunc // sub_80E5D12

.func
.thumb_func
sub_80E5D3E:
	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
.endfunc // sub_80E5D3E

loc_80E5D44:
	push {lr}
	ldr r1, off_80E5D58 // =off_80E5D5C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80E5D58: .word off_80E5D5C
off_80E5D5C: .word sub_80E5D68+1
	.word sub_80E5DAA+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E5D68:
	push {lr}
	bl sub_800E2AC
	mov r1, #0x10
	mov r2, #0
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E5D68

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E5DAA:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E5DD6
	bl battle_isTimeStop
	bne locret_80E5DDA
	ldr r2, [r5,#0x4c]
	ldrb r0, [r2,#8]
	cmp r0, #8
	beq loc_80E5DD6
	ldrb r0, [r2,#9]
	cmp r0, #8
	bne locret_80E5DDA
loc_80E5DD6:
	bl object_freeMemory
locret_80E5DDA:
	pop {r4,pc}
.endfunc // sub_80E5DAA

	push {lr}
	push {r5}
	mov r0, #0x49 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E5DFE
	ldr r1, [r5,#0x34]
	str r1, [r0,#0x34]
	ldr r1, [r5,#0x38]
	str r1, [r0,#0x38]
	ldr r1, [r5,#0x3c]
	str r1, [r0,#0x3c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r5, [r0,#0x4c]
locret_80E5DFE:
	pop {pc}
loc_80E5E00:
	push {lr}
	ldr r1, off_80E5E10 // =off_80E5E14 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E5E10: .word off_80E5E14
off_80E5E14: .word sub_800B916+1
	.word sub_80E5E20+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E5E20:
	push {lr}
	ldr r1, off_80E5E30 // =off_80E5E34 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E5E30: .word off_80E5E34
off_80E5E34: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E5E44+1
	.word sub_800BC88+1
.endfunc // sub_80E5E20

.func
.thumb_func
sub_80E5E44:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E5E82
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r2, off_80E5E94 // =dword_80E5E98 
	add r1, r1, r2
	ldr r2, [r1]
	ldr r3, [r1,#4]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E5E7A
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	bl sub_80D4408
loc_80E5E7A:
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E5E82:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E5E92
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E5E92:
	pop {r4,r6,r7,pc}
off_80E5E94: .word dword_80E5E98
dword_80E5E98: .word 0x10, 0xF880080, 0x10, 0xF880080
.endfunc // sub_80E5E44

.func
.thumb_func
sub_80E5EA8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x4a 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E5EC8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E5EC8:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E5EA8

loc_80E5ECC:
	push {lr}
	ldr r1, off_80E5EDC // =off_80E5EE0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E5EDC: .word off_80E5EE0
off_80E5EE0: .word sub_800B916+1
	.word sub_80E5EEC+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E5EEC:
	push {lr}
	ldr r1, off_80E5EFC // =off_80E5F00 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E5EFC: .word off_80E5F00
off_80E5F00: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E5F10+1
	.word sub_800BC88+1
.endfunc // sub_80E5EEC

.func
.thumb_func
sub_80E5F10:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E5F52
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r2, off_80E5F64 // =dword_80E5F68 
	add r1, r1, r2
	ldr r2, [r1]
	ldr r3, [r1,#4]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E5F4A
	ldrb r2, [r5,#0xe]
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r3, #0
	bl sub_80D3742
loc_80E5F4A:
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E5F52:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E5F62
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E5F62:
	pop {r4,r6,r7,pc}
off_80E5F64: .word dword_80E5F68
dword_80E5F68: .word 0x0
	.word 0xF880080, 0x0
	.byte 0x80
	.byte  0
	.byte 0x88
	.byte 0xF
.endfunc // sub_80E5F10

.func
.thumb_func
sub_80E5F78:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x4b 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E5F98
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E5F98:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E5F78

loc_80E5F9C:
	push {lr}
	ldr r1, off_80E5FAC // =off_80E5FB0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E5FAC: .word off_80E5FB0
off_80E5FB0: .word sub_80E5FBC+1
	.word sub_80E5FBC+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E5FBC:
	push {lr}
	ldr r1, off_80E5FCC // =off_80E5FD0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E5FCC: .word off_80E5FD0
off_80E5FD0: .word sub_800B916+1
	.word sub_80E5FDC+1
	.word object_timefreezeEnd+1
.endfunc // sub_80E5FBC

.func
.thumb_func
sub_80E5FDC:
	push {lr}
	ldr r1, off_80E5FEC // =off_80E5FF0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E5FEC: .word off_80E5FF0
off_80E5FF0: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E6000+1
	.word sub_800BC88+1
.endfunc // sub_80E5FDC

.func
.thumb_func
sub_80E6000:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E603E
	bl sub_800E2C0
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r2, off_80E6050 // =dword_80E6054 
	add r1, r1, r2
	ldr r2, [r1]
	ldr r3, [r1,#4]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E6036
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	bl sub_80D49CC
loc_80E6036:
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E603E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E604E
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E604E:
	pop {r4,r6,r7,pc}
off_80E6050: .word dword_80E6054
dword_80E6054: .word 0x10, 0xF880080, 0x10, 0xF880080, 0xB427B500, 0xF71D204D
	.word 0x1C28F99F, 0xD007BC2E, 0x74C27481, 0x64C57383, 0x75817DA9, 0x630762C6
	.word 0xBD00
.endfunc // sub_80E6000

loc_80E6088:
	push {lr}
	ldr r1, off_80E6098 // =off_80E609C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6098: .word off_80E609C
off_80E609C: .word sub_800B916+1
	.word sub_80E60A8+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E60A8:
	push {lr}
	ldr r1, off_80E60B8 // =off_80E60BC 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E60B8: .word off_80E60BC
off_80E60BC: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E60CC+1
	.word sub_800BC88+1
.endfunc // sub_80E60A8

.func
.thumb_func
sub_80E60CC:
	push {lr}
	ldr r1, off_80E60DC // =off_80E60E0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E60DC: .word off_80E60E0
off_80E60E0: .word sub_80E60EC+1
	.word sub_80E6180+1
	.word sub_80E619E+1
.endfunc // sub_80E60CC

.func
.thumb_func
sub_80E60EC:
	push {r4,r6,r7,lr}
	sub sp, sp, #0xc
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6124
	bl sub_80E61F4
	strb r0, [r5,#6]
	cmp r0, #0
	bne loc_80E610A
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b loc_80E615A
loc_80E610A:
	ldr r3, off_80E6160 // =dword_80E6168 
	ldmia r3!, {r0-r2}
	bl loc_8000AC8
	ldr r3, off_80E6164 // =dword_80E6174 
	ldmia r3!, {r0-r2}
	bl loc_8000AC8
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
	b loc_80E615A
loc_80E6124:
	ldrb r4, [r5,#6]
	mov r6, #0x60 
	add r6, r6, r5
loc_80E612A:
	ldrb r0, [r6]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [sp]
	str r1, [sp,#4]
	mov r0, #0
	str r0, [sp,#8]
	add r0, sp, #0
	bl sub_800362C
	bl sub_800AE90
	add r6, #1
	sub r4, #1
	bne loc_80E612A
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80E615A
	mov r0, #4
	strh r0, [r5,#0xa]
loc_80E615A:
	add sp, sp, #0xc
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80E6160: .word dword_80E6168
off_80E6164: .word dword_80E6174
dword_80E6168: .word 0x86E55FC, 0x6017940, 0x100
dword_80E6174: .word 0x86E56FC, 0x30016F0, 0x20
.endfunc // sub_80E60EC

.func
.thumb_func
sub_80E6180:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6190
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E6190:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E619C
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80E619C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E6180

.func
.thumb_func
sub_80E619E:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E61C0
	ldrb r4, [r5,#6]
	mov r6, #0x60 
	add r6, r6, r5
loc_80E61AC:
	ldrb r0, [r6]
	bl sub_80E621C
	add r6, #1
	sub r4, #1
	bne loc_80E61AC
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E61C0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E61D0
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E61D0:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E619E

.func
.thumb_func
sub_80E61D2:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x4e 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E61F2
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E61F2:
	pop {pc}
.endfunc // sub_80E61D2

.func
.thumb_func
sub_80E61F4:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r7, #0x60 
	add r7, r7, r5
	bl sub_801632C
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
	.word dword_80E620C
dword_80E620C: .word 0x200000, 0x0
	.word 0x400000, 0x0
.endfunc // sub_80E61F4

.func
.thumb_func
sub_80E621C:
	push {r4-r7,lr}
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80E6250 // =0x19050601 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	push {r0,r1}
	bl sub_80C53A6
	pop {r0,r1}
	ldrb r2, [r5,#0x16]
	bl sub_80E7486
.endfunc // sub_80E621C

	add r5, r0, #0
	beq locret_80E624C
	mov r4, #0x24 
	lsl r4, r4, #8
	add r4, #2
	mov r7, #0
	bl sub_80E1A6A
locret_80E624C:
	pop {r4-r7,pc}
	.byte 0, 0
dword_80E6250: .word 0x19050601
loc_80E6254:
	push {lr}
	ldr r1, off_80E6264 // =off_80E6268 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6264: .word off_80E6268
off_80E6268: .word sub_800B916+1
	.word sub_80E6274+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E6274:
	push {lr}
	ldr r1, off_80E6284 // =off_80E6288 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6284: .word off_80E6288
off_80E6288: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E6298+1
	.word sub_800BC88+1
.endfunc // sub_80E6274

.func
.thumb_func
sub_80E6298:
	push {lr}
	ldr r1, off_80E62A8 // =off_80E62AC 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E62A8: .word off_80E62AC
off_80E62AC: .word sub_80E62B4+1
	.word sub_80E62D2+1
.endfunc // sub_80E6298

.func
.thumb_func
sub_80E62B4:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E62C4
	bl loc_80E6316
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E62C4:
	bl sub_80E6438
	tst r0, r0
	bne locret_80E62D0
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E62D0:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E62B4

.func
.thumb_func
sub_80E62D2:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E62E2
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E62E2:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E62F2
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E62F2:
	pop {pc}
.endfunc // sub_80E62D2

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x4f 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E6314
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E6314:
	pop {pc}
loc_80E6316:
	push {lr}
	ldr r1, off_80E6328 // =off_80E632C 
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6328: .word off_80E632C
off_80E632C: .word sub_80E6338+1
	.word sub_80E636A+1
	.word sub_80E63D0+1
.func
.thumb_func
sub_80E6338:
	push {r4,r6,r7,lr}
	mov r0, #0
	str r0, [r5,#0x68]
	bl sub_800E2C0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl sub_80E6458
.endfunc // sub_80E6338

	tst r0, r0
	pop {r0,r1}
	beq locret_80E6368
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r3, #0
	mov r7, #0x60 
	add r7, r7, r5
	mov r4, #0x28 
	mov r0, #1
	str r0, [r5,#0x68]
locret_80E6368:
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E636A:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	mov r0, #0
	str r0, [r5,#0x68]
	mov r7, #0x60 
	add r7, r7, r5
	mov r4, #0x28 
	ldrb r0, [r5,#0x16]
	add r0, r0, r0
	ldr r1, off_80E63C8 // =dword_80E63CC 
	add r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp]
	mov r0, #1
	ldrsb r0, [r1,r0]
	str r0, [sp,#4]
loc_80E638A:
	ldr r0, [sp]
	ldrb r1, [r5,#0x13]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80E63C4
	ldr r0, [sp]
	ldrb r1, [r5,#0x13]
	bl sub_80E6458
	tst r0, r0
	beq loc_80E63BA
	ldr r0, [sp]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r3, #0
	add r4, #4
	add r7, #1
	ldr r0, [r5,#0x68]
	add r0, #1
	str r0, [r5,#0x68]
loc_80E63BA:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	add r0, r0, r1
	str r0, [sp]
	b loc_80E638A
loc_80E63C4:
	add sp, sp, #8
	pop {r4,r6,r7,pc}
off_80E63C8: .word dword_80E63CC
dword_80E63CC: .word 0x101FF06
.endfunc // sub_80E636A

.func
.thumb_func
sub_80E63D0:
	push {r4,r6,r7,lr}
	mov r0, #0
	str r0, [r5,#0x68]
	mov r7, #0x60 
	add r7, r7, r5
	mov r4, #0x28 
	ldr r6, off_80E6428 // =byte_80E642C 
loc_80E63DE:
	mov r0, #0
	ldrsb r0, [r6,r0]
	cmp r0, #0x7f
	beq locret_80E6424
	push {r0}
	bl sub_800E2C0
	pop {r1}
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	mov r1, #0x1 // (byte_80E642D - 0x80e642c)
	ldrsb r1, [r6,r1]
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	push {r0,r1}
	bl sub_80E6458
	tst r0, r0
	pop {r0,r1}
	beq loc_80E6420
	ldrb r2, [r5,#0xe]
	push {r6}
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r3, #0
	pop {r6}
	add r4, #4
	add r7, #1
	ldr r0, [r5,#0x68]
	add r0, #1
	str r0, [r5,#0x68]
loc_80E6420:
	add r6, #2
	b loc_80E63DE
locret_80E6424:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80E6428: .word byte_80E642C
byte_80E642C: .byte 0x1
byte_80E642D: .byte 0x0
	.hword 0xFF00
	.word 0xFF0100, 0x7F
.endfunc // sub_80E63D0

.func
.thumb_func
sub_80E6438:
	push {lr}
	ldr r1, [r5,#0x68]
	mov r2, #0x60 
	add r2, r2, r5
	mov r3, #0
loc_80E6442:
	cmp r3, r1
	bge loc_80E6450
	ldrb r0, [r2,r3]
	tst r0, r0
	bne loc_80E6454
	add r3, #1
	b loc_80E6442
loc_80E6450:
	mov r0, #0
	pop {pc}
loc_80E6454:
	mov r0, #1
	pop {pc}
.endfunc // sub_80E6438

.func
.thumb_func
sub_80E6458:
	push {lr}
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80E646C // =dword_80E6470 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl object_checkPanelParameters
.endfunc // sub_80E6458

	pop {pc}
off_80E646C: .word dword_80E6470
dword_80E6470: .word 0x10, 0xF8800A0, 0x30, 0xF880080
loc_80E6480:
	push {lr}
	ldr r1, off_80E6490 // =off_80E6494 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E6490: .word off_80E6494
off_80E6494: .word sub_800B916+1
	.word sub_80E64A0+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E64A0:
	push {lr}
	ldr r1, off_80E64B0 // =off_80E64B4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E64B0: .word off_80E64B4
off_80E64B4: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E64C4+1
	.word sub_800BC88+1
.endfunc // sub_80E64A0

.func
.thumb_func
sub_80E64C4:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E64D8
	bl sub_80E650A
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E64D8:
	ldr r0, [r5,#0x60]
	tst r0, r0
	bne locret_80E64E6
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E64E6:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E64C4

.func
.thumb_func
sub_80E64E8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x50 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E6508
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E6508:
	pop {pc}
.endfunc // sub_80E64E8

.func
.thumb_func
sub_80E650A:
	push {r4,r6,r7,lr}
	mov r6, #1
	mov r7, #0x60 
	add r7, r7, r5
	mov r0, #0
	str r0, [r7]
loc_80E6516:
	ldrb r0, [r5,#0x16]
	mov r2, #1
	eor r0, r2
	ldrb r1, [r5,#0x17]
	add r2, r6, #0
	bl sub_800D4D0
	tst r0, r0
	beq loc_80E654E
	push {r0,r1}
	mov r2, #0x10
	ldr r3, dword_80E6558 // =0xf880080 
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E654E
	push {r0,r1}
	ldrb r2, [r5,#0x16]
	bl sub_800D668
	tst r0, r0
	pop {r0,r1}
	beq loc_80E654E
	ldr r4, [r5,#4]
	bl sub_80E6720
	add r7, #1
loc_80E654E:
	add r6, #1
	cmp r6, #3
	ble loc_80E6516
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80E6558: .word 0xF880080
.endfunc // sub_80E650A

loc_80E655C:
	push {lr}
	ldr r1, off_80E6570 // =off_80E6574 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.byte 0, 0
off_80E6570: .word off_80E6574
off_80E6574: .word sub_80E6580+1
	.word sub_80E65E0+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E6580:
	push {r7,lr}
	mov r0, #0x80
	mov r1, #0xc
	mov r2, #0x13
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E6580

	bl sub_8002F90 // () -> void
	mov r0, #1
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r5,#0x16]
	bl sub_80103BC
	tst r0, r0
	bne loc_80E65B2
	ldr r1, [r5,#0x4c]
	mov r0, #0
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
	b locret_80E65DE
loc_80E65B2:
	ldrb r1, [r0,#0x12]
	strb r1, [r5,#6]
	ldrb r1, [r0,#0x13]
	strb r1, [r5,#7]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E29C // () -> void
	mov r0, #0x2a 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E65E0
locret_80E65DE:
	pop {r7,pc}
.func
.thumb_func
sub_80E65E0:
	push {lr}
	ldr r1, off_80E65F0 // =off_80E65F4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E65F0: .word off_80E65F4
off_80E65F4: .word sub_80E6600+1
	.word sub_80E6644+1
	.word sub_80E667C+1
.endfunc // sub_80E65E0

.func
.thumb_func
sub_80E6600:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6626
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x16]
	mov r3, #1
	eor r2, r3
	push {r0,r1}
	bl object_setPanelAlliance
	pop {r0,r1}
	bl object_setPanelAllianceTimerLong
	mov r0, #0x13
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E6626:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E6642
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x2b 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E6642:
	pop {pc}
.endfunc // sub_80E6600

.func
.thumb_func
sub_80E6644:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E666A
	ldr r0, [r5,#0x3c]
	ldr r1, dword_80E674C // =0x40000 
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, [r5,#0x3c]
	asr r0, r0, #0x10
	cmp r0, #0x10
	blt locret_80E667A
	mov r0, #0x10
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r0, #0x10
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E666A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E667A
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E667A:
	pop {pc}
.endfunc // sub_80E6644

.func
.thumb_func
sub_80E667C:
	push {r4,lr}
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r2, [r5,#0x34]
	sub r0, r0, r2
	ldr r2, [r5,#0x38]
	sub r1, r1, r2
	add r2, r1, #0
	add r1, r0, #0
	add r0, r2, #0
	bl calcAngle_800117C
	ldr r1, [r5,#0x40]
	bl sub_80011A0
	ldr r2, [r5,#0x34]
	add r2, r2, r0
	str r2, [r5,#0x34]
	ldr r2, [r5,#0x38]
	add r2, r2, r1
	str r2, [r5,#0x38]
	bl sub_800E2AC
	ldrb r2, [r5,#6]
	cmp r0, r2
	bne loc_80E6716
	ldrb r2, [r5,#7]
	cmp r1, r2
	bne loc_80E6716
	ldrb r0, [r5,#0x16]
	bl sub_80103BC
	ldr r0, [r0,#0x58]
	add r0, #0xa0
	ldrb r0, [r0,#0x1b]
	cmp r0, #0
	bne loc_80E66F6
	ldrb r0, [r5,#0x16]
	bl sub_8010018
	ldrb r1, [r0]
	add r1, r1, r1
	add r4, r0, r1
	add r4, #2
	// idx
	ldrh r0, [r4]
	ldr r1, dword_80E6750 // =0xffff 
	cmp r0, r1
	beq loc_80E6704
	bl getChip_8021DA8 // (int chip_idx) -> ChipData*
	ldrb r1, [r0,#9]
	mov r2, #2
	tst r1, r2
	beq loc_80E6704
	ldrh r2, [r4,#0x18]
	ldrb r3, [r5,#5]
	add r2, r2, r3
	strh r2, [r4,#0x18]
	b loc_80E6704
loc_80E66F6:
	ldrb r0, [r5,#0x16]
	bl sub_802E070
	ldrh r3, [r0,#0x36]
	ldrb r2, [r5,#5]
	add r3, r3, r2
	strh r3, [r0,#0x36]
loc_80E6704:
	mov r0, #0x8c
	bl sound_play // () -> void
	ldr r1, [r5,#0x4c]
	mov r0, #0
	strb r0, [r1]
	mov r0, #8
	str r0, [r5,#8]
	b locret_80E671E
loc_80E6716:
	ldr r0, [r5,#0x40]
	ldr r1, dword_80E6754 // =0x4000 
	add r0, r0, r1
	str r0, [r5,#0x40]
locret_80E671E:
	pop {r4,pc}
.endfunc // sub_80E667C

.func
.thumb_func
sub_80E6720:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x51 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E674A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r7, [r0,#0x4c]
	mov r1, #1
	strb r1, [r7]
	ldrb r1, [r0]
	mov r2, #0x10
	orr r1, r2
	strb r1, [r0]
locret_80E674A:
	pop {pc}
dword_80E674C: .word 0x40000
dword_80E6750: .word 0xFFFF
dword_80E6754: .word 0x4000
.endfunc // sub_80E6720

loc_80E6758:
	push {lr}
	ldr r1, off_80E6768 // =off_80E676C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6768: .word off_80E676C
off_80E676C: .word sub_800B916+1
	.word sub_80E6778+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E6778:
	push {lr}
	ldr r1, off_80E6788 // =off_80E678C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6788: .word off_80E678C
off_80E678C: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E679C+1
	.word sub_800BC88+1
.endfunc // sub_80E6778

.func
.thumb_func
sub_80E679C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E67D4
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	mov r2, #0x10
	ldr r3, dword_80E6808 // =0xf880080 
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E67CC
	ldrb r2, [r5,#0xe]
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	bl sub_80D4FA6
loc_80E67CC:
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E67D4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80E67E4
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E67E4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E679C

.func
.thumb_func
sub_80E67E6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x52 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E6806
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E6806:
	pop {pc}
dword_80E6808: .word 0xF880080
.endfunc // sub_80E67E6

loc_80E680C:
	push {lr}
	ldr r1, off_80E681C // =off_80E6820 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E681C: .word off_80E6820
off_80E6820: .word sub_800B916+1
	.word sub_80E682C+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E682C:
	push {lr}
	ldr r1, off_80E683C // =off_80E6840 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E683C: .word off_80E6840
off_80E6840: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E6850+1
	.word sub_800BC88+1
.endfunc // sub_80E682C

.func
.thumb_func
sub_80E6850:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6866
	ldr r0, [r5,#0x4c]
	mov r1, #1
	strb r1, [r0,#6]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E6866:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80E6876
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E6876:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E6850

.func
.thumb_func
sub_80E6878:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x53 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E6898
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E6898:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E6878

loc_80E689C:
	push {lr}
	ldr r1, off_80E68AC // =off_80E68B0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E68AC: .word off_80E68B0
off_80E68B0: .word sub_800B916+1
	.word sub_80E68BC+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E68BC:
	push {lr}
	ldr r1, off_80E68CC // =off_80E68D0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E68CC: .word off_80E68D0
off_80E68D0: .word sub_800B94C+1
	.word sub_80E68DC+1
	.word sub_800BC88+1
.endfunc // sub_80E68BC

.func
.thumb_func
sub_80E68DC:
	push {lr}
	ldr r1, off_80E68EC // =off_80E68F0 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E68EC: .word off_80E68F0
off_80E68F0: .word sub_80E68F8+1
	.word sub_80E6924+1
.endfunc // sub_80E68DC

.func
.thumb_func
sub_80E68F8:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6910
	mov r0, #4
	strb r0, [r5,#0xb]
	ldr r0, off_80E6920 // =aTuDhr 
	ldrb r1, [r5,#5]
	add r1, #0x1e
	bl chatbox_runScript // (void *scripts, u8 scriptOffIdx) -> void
	b locret_80E691E
loc_80E6910:
	mov r0, #0x80
	bl chatbox_8045F3C
	tst r0, r0
	bne locret_80E691E
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E691E:
	pop {pc}
off_80E6920: .word aTuDhr
.endfunc // sub_80E68F8

.func
.thumb_func
sub_80E6924:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6956
	mov r0, #4
	strb r0, [r5,#0xb]
	bl sub_80E698E
	tst r0, r0
	beq loc_80E6962
	ldrh r4, [r5,#4]
	lsl r2, r2, #0x10
	orr r4, r2
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x64]
	ldr r6, [r5,#0x2c]
	ldr r7, [r5,#0x60]
	bl sub_80D3DC4
	str r0, [r5,#0x68]
	mov r0, #0x94
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r5,#0x20]
loc_80E6956:
	bl sub_80E6A7C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E696A
loc_80E6962:
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E696A:
	pop {r4,r6,pc}
.endfunc // sub_80E6924

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x54 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E698C
	str r1, [r0,#0x64]
	str r2, [r0,#0x60]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E698C:
	pop {pc}
.func
.thumb_func
sub_80E698E:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x10
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80E6A68 // =dword_80E6A6C 
	add r0, r0, r1
	ldr r1, [r0]
	ldr r2, [r0,#4]
	str r1, [sp]
	str r2, [sp,#4]
	mov r4, #0
	mov r6, #0
loc_80E69A6:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	add r1, r4, #0
	lsl r1, r1, #1
	add r1, r1, r0
	ldr r0, off_80E6A5C // =dword_80E6A60 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80E698E

	tst r0, r0
	pop {r0,r1}
	beq loc_80E69DA
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #8
	add r2, r6, #0
	lsl r2, r2, #1
	add r1, r1, r2
	strb r0, [r1]
	strb r4, [r1,#1]
	add r6, #1
loc_80E69DA:
	add r4, #1
	cmp r4, #2
	blt loc_80E69A6
	mov r7, #1
loc_80E69E2:
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80E69F2
	mov r0, #6
loc_80E69F2:
	add r1, r7, #0
	ldr r3, [sp,#4]
	ldr r2, dword_80E6A8C // =0xf880080 
	sub r3, r3, r2
	ldr r2, [sp]
	bl sub_800D0BC
	tst r0, r0
	beq loc_80E6A2E
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E6A2E
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #8
	add r2, r6, #0
	lsl r2, r2, #1
	add r1, r1, r2
	strb r0, [r1]
	mov r2, #3
	cmp r7, #1
	beq loc_80E6A2A
	mov r2, #2
loc_80E6A2A:
	strb r2, [r1,#1]
	add r6, #1
loc_80E6A2E:
	add r7, #2
	cmp r7, #3
	ble loc_80E69E2
	tst r6, r6
	beq loc_80E6A56
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	lsl r1, r1, #1
	add r2, r1, r0
	ldrb r0, [r2]
	push {r2}
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	pop {r2}
	ldrb r2, [r2,#1]
	b loc_80E6A58
loc_80E6A56:
	mov r0, #0
loc_80E6A58:
	add sp, sp, #0x10
	pop {r4,r6,r7,pc}
off_80E6A5C: .word dword_80E6A60
dword_80E6A60: .word 0x3060106, 0x3010101
off_80E6A68: .word dword_80E6A6C
dword_80E6A6C: .word 0x10020, 0xF880080, 0x10000, 0xF8800A0
.func
.thumb_func
sub_80E6A7C:
	push {r5,lr}
	ldr r0, [r5,#0x68]
	tst r0, r0
	beq locret_80E6A8A
	add r5, r0, #0
	bl sub_801BBF4
locret_80E6A8A:
	pop {r5,pc}
dword_80E6A8C: .word 0xF880080
.endfunc // sub_80E6A7C

loc_80E6A90:
	push {lr}
	ldr r1, off_80E6AA0 // =off_80E6AA4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E6AA0: .word off_80E6AA4
off_80E6AA4: .word sub_800B916+1
	.word sub_80E6AB0+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E6AB0:
	push {lr}
	ldr r1, off_80E6AC0 // =off_80E6AC4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E6AC0: .word off_80E6AC4
off_80E6AC4: .word sub_800B94C+1
	.word sub_80E6AD0+1
	.word sub_800BC88+1
.endfunc // sub_80E6AB0

.func
.thumb_func
sub_80E6AD0:
	push {lr}
	ldr r1, off_80E6AE0 // =off_80E6AE4 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E6AE0: .word off_80E6AE4
off_80E6AE4: .word sub_80E6AF0+1
	.word sub_80E6B36+1
	.word sub_80E6B64+1
.endfunc // sub_80E6AD0

.func
.thumb_func
sub_80E6AF0:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6B28
	mov r0, #4
	strb r0, [r5,#0xb]
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #3
	add r4, r4, r0
	ldr r1, [r5,#0x4c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x20 
	lsl r3, r3, #0x10
	bl sub_80E05F6
	mov r0, #0x77 
	bl sound_play // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80E6B34
loc_80E6B28:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E6B34
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E6B34:
	pop {r4,pc}
.endfunc // sub_80E6AF0

.func
.thumb_func
sub_80E6B36:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6B48
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0xa
	strh r0, [r5,#0x20]
	b loc_80E6B58
loc_80E6B48:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80E6B58
	bl sub_80E6BA6
	mov r0, #8
	strh r0, [r5,#0xa]
loc_80E6B58:
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sprite_forceWhitePallete
	pop {r5}
	pop {pc}
.endfunc // sub_80E6B36

.func
.thumb_func
sub_80E6B64:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6B76
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80E6B86
loc_80E6B76:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E6B86
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E6B86:
	pop {pc}
.endfunc // sub_80E6B64

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x55 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E6BA4
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	mov r1, #0
	str r1, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E6BA4:
	pop {pc}
.func
.thumb_func
sub_80E6BA6:
	push {lr}
	mov r3, #0
loc_80E6BAA:
	add r0, r3, #0
	lsl r0, r0, #1
	ldr r1, off_80E6BD0 // =loc_80E6BD4 
	add r1, r1, r0
	ldrb r0, [r1,#1]
	ldrb r1, [r1]
	ldrb r2, [r5,#4]
	cmp r1, r2
	bne loc_80E6BC8
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sprite_setPallete // (int pallete) -> void
	pop {r5}
	b locret_80E6BCE
loc_80E6BC8:
	add r3, #1
	cmp r3, #3
	ble loc_80E6BAA
locret_80E6BCE:
	pop {pc}
off_80E6BD0: .word loc_80E6BD4
.endfunc // sub_80E6BA6

loc_80E6BD4:
	lsl r1, r0, #8
	lsl r2, r0, #0x10
	lsl r4, r0, #0x18
	lsr r3, r0, #0x20
loc_80E6BDC:
	push {lr}
	ldr r1, off_80E6BEC // =off_80E6BF0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6BEC: .word off_80E6BF0
off_80E6BF0: .word sub_800B916+1
	.word sub_80E6BFC+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E6BFC:
	push {lr}
	ldr r1, off_80E6C0C // =off_80E6C10 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6C0C: .word off_80E6C10
off_80E6C10: .word sub_800B94C+1
	.word sub_80E6C1C+1
	.word sub_800BC88+1
.endfunc // sub_80E6BFC

.func
.thumb_func
sub_80E6C1C:
	push {lr}
	ldr r1, off_80E6C2C // =off_80E6C30 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6C2C: .word off_80E6C30
off_80E6C30: .word sub_80E6C34+1
.endfunc // sub_80E6C1C

.func
.thumb_func
sub_80E6C34:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6C46
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	b locret_80E6C70
loc_80E6C46:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x3c 
	beq loc_80E6C5E
	cmp r0, #0
	bgt locret_80E6C70
	mov r0, #8
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80E6C70
loc_80E6C5E:
	bl sub_80E6CAA
	ldrb r0, [r5,#4]
	lsr r0, r0, #1
	lsl r0, r0, #2
	ldr r1, off_80E6C74 // =dword_80E6C78 
	ldr r0, [r1,r0]
	bl sound_play // () -> void
locret_80E6C70:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80E6C74: .word dword_80E6C78
dword_80E6C78: .word 0x97, 0x11C, 0x118, 0x97, 0x11B, 0xB427B500, 0xF71C2056
	.word 0x1C28FB8B, 0xD005BC2E, 0x8AE964C5, 0x210082C1, 0x630762C1
.endfunc // sub_80E6C34

	pop {pc}
.func
.thumb_func
sub_80E6CAA:
	push {r4,r6,lr}
	sub sp, sp, #4
	ldrb r0, [r5,#4]
	mov r2, #0xc
	mul r0, r2
	ldr r1, dword_80E6E40 // = 
	add r0, r0, r1
	ldrb r1, [r5,#0x16]
	mov r3, #0xa
	mul r1, r3
	mul r1, r2
	add r0, r0, r1
	str r0, [sp]
	mov r6, #1
loc_80E6CC6:
	mov r4, #1
loc_80E6CC8:
	add r0, r4, #0
	add r1, r6, #0
	mov r2, #0x10
	mov r3, #0x40 
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E6CFA
	ldr r2, [sp]
	sub r3, r6, #1
	lsl r3, r3, #2
	ldr r2, [r3,r2]
	sub r3, r4, #1
	lsl r3, r3, #2
	lsr r2, r3
	mov r3, #0xf
	and r2, r3
	push {r0-r2}
	bl object_setPanelType
	pop {r0-r2}
	bl sub_80E6DFC
loc_80E6CFA:
	add r4, #1
	cmp r4, #6
	ble loc_80E6CC8
	mov r4, #1
	add r6, #1
	cmp r6, #3
	ble loc_80E6CC6
	add sp, sp, #4
	pop {r4,r6,pc}
	.word 0x232222, 0x323222, 0x232222, 0x323222, 0x232222
	.word 0x323222, 0x828222, 0x626222, 0x828222, 0x268222
	.word 0x628222, 0x268222, 0x227222, 0x227222, 0x227222
	.word 0x272222, 0x777222, 0x272222, 0x322222, 0x232222
	.word 0x223222, 0x223222, 0x232222, 0x322222, 0x662666
	.word 0x662666, 0x662666, 0x666666, 0x222666, 0x666666
	.word 0x222232, 0x222323, 0x222232, 0x222323, 0x222232
	.word 0x222323, 0x222828, 0x222626, 0x222828, 0x222862
	.word 0x222826, 0x222862, 0x222772, 0x222772, 0x222772
	.word 0x222272, 0x222777, 0x222272, 0x222223, 0x222232
	.word 0x222322, 0x222322, 0x222232, 0x222223, 0x666266
	.word 0x666266, 0x666266, 0x666666, 0x666222, 0x666666
.endfunc // sub_80E6CAA

.func
.thumb_func
sub_80E6DFC:
	push {r4,r6,lr}
	mov r4, #0
loc_80E6E00:
	add r3, r4, #0
	lsl r3, r3, #1
	ldr r6, off_80E6E30 // =dword_80E6E34 
	add r6, r6, r3
	ldrb r3, [r6]
	ldrb r6, [r6,#1]
	cmp r2, r3
	bne loc_80E6E26
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #8
	mov r4, #2
	lsl r6, r6, #0x10
	orr r4, r6
	bl sub_80E05F6
	b locret_80E6E2C
loc_80E6E26:
	add r4, #1
	cmp r4, #5
	blt loc_80E6E00
locret_80E6E2C:
	pop {r4,r6,pc}
	.byte 0, 0
off_80E6E30: .word dword_80E6E34
dword_80E6E34: .word 0x2030002, 0x5060307, 0x608
dword_80E6E40: .word 0x80E6D0C
.endfunc // sub_80E6DFC

loc_80E6E44:
	push {lr}
	ldr r1, off_80E6E54 // =off_80E6E58 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6E54: .word off_80E6E58
off_80E6E58: .word sub_80E6E64+1
	.word loc_80E6E74+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80E6E64:
	push {lr}
	mov r0, #0
	strb r0, [r5,#5]
	mov r0, #1
	strb r0, [r5,#6]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80E6E64

loc_80E6E74:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E6E90
	bl battle_isTimeStop
	bne locret_80E6E94
	ldr r1, off_80E6E98 // =off_80E6E9C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80E6E94
loc_80E6E90:
	mov r0, #8
	str r0, [r5,#8]
locret_80E6E94:
	pop {pc}
	.balign 4, 0x00
off_80E6E98: .word off_80E6E9C
off_80E6E9C: .word sub_80E6EA0+1
.func
.thumb_func
sub_80E6EA0:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80E6EC6
	mov r1, #4
	strb r1, [r5,#0xa]
	ldrb r0, [r5,#4]
	add r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0
	strh r0, [r5,#0x22]
	ldrb r0, [r5,#5]
	tst r0, r0
	beq locret_80E6F0E
	bl sub_80E6F32
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	b locret_80E6F0E
loc_80E6EC6:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	lsr r0, r0, #3
	bcs loc_80E6ED8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
loc_80E6ED8:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x1e
	beq loc_80E6EF6
	cmp r0, #0
	bge locret_80E6F0E
	ldrb r0, [r5,#5]
	add r0, #1
	strb r0, [r5,#5]
	cmp r0, #6
	bge loc_80E6F0A
	mov r0, #0
	strb r0, [r5,#0xa]
	b locret_80E6F0E
loc_80E6EF6:
	push {r4,r6}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r4, #0
	ldr r6, [r5,#0x2c]
	bl sub_80C7D50
	pop {r4,r6}
	b locret_80E6F0E
loc_80E6F0A:
	mov r0, #8
	str r0, [r5,#8]
locret_80E6F0E:
	pop {r4,r6,pc}
.endfunc // sub_80E6EA0

.func
.thumb_func
sub_80E6F10:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x57 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E6F30
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E6F30:
	pop {pc}
.endfunc // sub_80E6F10

.func
.thumb_func
sub_80E6F32:
	push {r4,r6,r7,lr}
	mov r4, #0
	ldrb r0, [r5,#6]
	tst r0, r0
	beq loc_80E6F5E
loc_80E6F3C:
	cmp r4, #2
	bge loc_80E6F80
	add r4, #1
	ldr r1, [r5,#0x60]
	ldrb r1, [r1,#0x12]
	ldrb r2, [r5,#0x12]
	cmp r1, r2
	beq loc_80E6F5E
	mov r0, #0
	strb r0, [r5,#6]
	mov r3, #1
	cmp r1, r2
	bgt loc_80E6F58
	neg r3, r3
loc_80E6F58:
	add r0, r2, r3
	ldrb r1, [r5,#0x13]
	b locret_80E6F84
loc_80E6F5E:
	cmp r4, #2
	bge loc_80E6F80
	add r4, #1
	ldr r1, [r5,#0x60]
	ldrb r1, [r1,#0x13]
	ldrb r2, [r5,#0x13]
	cmp r1, r2
	beq loc_80E6F3C
	mov r0, #1
	strb r0, [r5,#6]
	mov r3, #1
	cmp r1, r2
	bgt loc_80E6F7A
	neg r3, r3
loc_80E6F7A:
	add r1, r2, r3
	ldrb r0, [r5,#0x12]
	b locret_80E6F84
loc_80E6F80:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
locret_80E6F84:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
.endfunc // sub_80E6F32

loc_80E6F88:
	push {lr}
	ldr r1, off_80E6F98 // =off_80E6F9C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6F98: .word off_80E6F9C
off_80E6F9C: .word sub_800B916+1
	.word sub_80E6FA8+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E6FA8:
	push {lr}
	ldr r1, off_80E6FB8 // =off_80E6FBC 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E6FB8: .word off_80E6FBC
off_80E6FBC: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E6FCC+1
	.word sub_800BC88+1
.endfunc // sub_80E6FA8

.func
.thumb_func
sub_80E6FCC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E6FF6
	mov r0, #0x78 
	strh r0, [r5,#0x20]
	push {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r7, #5
	add r7, r7, r5
	ldr r5, [r5,#0x4c]
	bl sub_80B8BA0
	pop {r5}
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E6FF6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E7006
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E7006:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E6FCC

.func
.thumb_func
sub_80E7008:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x58 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E7028
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E7028:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E7008

loc_80E702C:
	push {lr}
	ldr r1, off_80E703C // =off_80E7040 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E703C: .word off_80E7040
off_80E7040: .word sub_800B916+1
	.word sub_80E704C+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E704C:
	push {lr}
	ldr r1, off_80E705C // =off_80E7060 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E705C: .word off_80E7060
off_80E7060: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E7070+1
	.word sub_800BC88+1
.endfunc // sub_80E704C

.func
.thumb_func
sub_80E7070:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E7096
	push {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r7, #5
	add r7, r7, r5
	ldr r5, [r5,#0x4c]
	bl sub_80BB13E
	pop {r5}
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E7096:
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne locret_80E70A4
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E70A4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E7070

.func
.thumb_func
sub_80E70A6:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x59 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E70C6
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E70C6:
	pop {pc}
.endfunc // sub_80E70A6

loc_80E70C8:
	push {lr}
	ldr r1, off_80E70E8 // =off_80E70EC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80E70E0
	bl sub_801BCA6
	b locret_80E70E4
loc_80E70E0:
	bl sub_801BBF4
locret_80E70E4:
	pop {pc}
	.balign 4, 0x00
off_80E70E8: .word off_80E70EC
off_80E70EC: .word sub_80E70F8+1
	.word sub_80E7142+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E70F8:
	push {lr}
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #8
	mov r2, #0xf
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E70F8

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #8
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E7142:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E7174
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_80E716E
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xa
	cmp r0, r1
	bne loc_80E7174
	bl battle_isTimeStop
	bne locret_80E7178
loc_80E716E:
	bl sub_80E717A
	b locret_80E7178
loc_80E7174:
	mov r0, #8
	str r0, [r5,#8]
locret_80E7178:
	pop {pc}
.endfunc // sub_80E7142

.func
.thumb_func
sub_80E717A:
	push {lr}
	ldrb r0, [r5,#9]
	cmp r0, #4
	beq loc_80E718E
	cmp r0, #8
	beq locret_80E719E
	mov r1, #4
	strb r1, [r5,#9]
	mov r0, #0xf
	strh r0, [r5,#0x20]
loc_80E718E:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E719E
	mov r0, #9
	strb r0, [r5,#0x10]
	mov r1, #8
	strb r1, [r5,#9]
locret_80E719E:
	pop {pc}
.endfunc // sub_80E717A

.func
.thumb_func
sub_80E71A0:
	push {lr}
	push {r5}
	mov r0, #0x5a 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E71B6
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E71B6:
	pop {pc}
.endfunc // sub_80E71A0

.func
.thumb_func
sub_80E71B8:
	push {lr}
	tst r0, r0
	beq locret_80E71C2
	mov r1, #8
	str r1, [r0,#8]
locret_80E71C2:
	pop {pc}
.endfunc // sub_80E71B8

loc_80E71C4:
	push {lr}
	ldr r1, off_80E71D4 // =off_80E71D8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E71D4: .word off_80E71D8
off_80E71D8: .word sub_800B916+1
	.word sub_80E71E4+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E71E4:
	push {lr}
	ldr r1, off_80E71F4 // =off_80E71F8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E71F4: .word off_80E71F8
off_80E71F8: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E7208+1
	.word sub_800BC88+1
.endfunc // sub_80E71E4

.func
.thumb_func
sub_80E7208:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E722E
	push {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r7, #5
	add r7, r7, r5
	ldr r5, [r5,#0x4c]
	bl sub_80BB49C
	pop {r5}
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E722E:
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne locret_80E723C
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E723C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E7208

.func
.thumb_func
sub_80E723E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x5b 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E725E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E725E:
	pop {pc}
.endfunc // sub_80E723E

loc_80E7260:
	push {lr}
	ldr r1, off_80E7270 // =off_80E7274 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E7270: .word off_80E7274
off_80E7274: .word sub_800B916+1
	.word sub_80E7280+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E7280:
	push {lr}
	ldr r1, off_80E7290 // =off_80E7294 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E7290: .word off_80E7294
off_80E7294: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E72A4+1
	.word sub_800BC88+1
.endfunc // sub_80E7280

.func
.thumb_func
sub_80E72A4:
	push {lr}
	ldr r1, off_80E72B4 // =off_80E72B8 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E72B4: .word off_80E72B8
off_80E72B8: .word sub_80E72C8+1
	.byte 0x95
	.byte 0x73 
	.byte 0xE
	.byte  8
	.byte 0xA3
	.byte 0x73 
	.byte 0xE
	.byte  8
	.byte 0x51 
	.byte 0x74 
	.byte 0xE
	.byte  8
.endfunc // sub_80E72A4

.func
.thumb_func
sub_80E72C8:
	push {r4,r6,r7,lr}
	bl get_802D246 // () -> int
	mov r1, #9
	tst r0, r1
	bne loc_80E73C4
	bl object_getFlipDirection_800E2CA // () -> int
	add r0, r0, r0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x50 
	bl sub_80E7774
	str r0, [r5,#0x74]
	mov r0, #0xbd
	bl sound_play // () -> void
	pop {r0,r1}
	push {r0,r1}
	ldrb r2, [r5,#0x16]
	bl sub_80E7486
	add r4, r0, #0
	pop {r0,r1}
	beq loc_80E73C4
	ldrh r0, [r4,#0x28]
	cmp r0, #0x49 
	blt loc_80E7314
	cmp r0, #0x4e 
	ble loc_80E73C4
loc_80E7314:
	str r4, [r5,#0x60]
	bl sub_800F26C
	mov r2, #0x1b
	bl sub_8018842
	lsl r6, r0, #0x10
	lsl r7, r1, #0x10
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mul r6, r0
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	add r1, r1, r6
	add r3, r3, r7
	ldr r0, [r5,#0x74]
	add r0, #0x34 
	stmia r0!, {r1-r3}
	mov r0, #0
	str r0, [r5,#0x64]
	str r0, [r5,#0x68]
	str r0, [r5,#0x6c]
	str r0, [r5,#0x70]
	mov r3, r10
	ldr r3, [r3,#0x18]
	add r3, #0x90
	mov r4, #0
	mov r6, #0x64 
	add r6, r6, r5
	mov r7, #0
loc_80E7354:
	ldr r0, [r3]
	tst r0, r0
	beq loc_80E7370
	ldrh r1, [r0,#0x28]
	cmp r1, #0x49 
	blt loc_80E7364
	cmp r1, #0x4e 
	ble loc_80E7370
loc_80E7364:
	ldr r1, [r5,#0x60]
	cmp r0, r1
	beq loc_80E7370
	str r0, [r6]
	add r6, #4
	add r7, #1
loc_80E7370:
	add r3, #4
	add r4, #1
	cmp r4, #4
	blt loc_80E7354
	tst r7, r7
	beq loc_80E73C4
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
	.word dword_80E738C
dword_80E738C: .word 0x200000, 0x400000, 0x38018C28, 0xDA018428, 0x81682008
	.word 0xB5D046F7, 0x7AE8B083, 0xD10B4200, 0xCB074B20, 0xFB8AF719
	.word 0xCB074B1F, 0xFB86F719, 0x8428203C, 0x72E82004
loc_80E73C4:
	mov r7, #0x64 
	add r7, r7, r5
	mov r4, #0
loc_80E73CA:
	ldr r2, [r7]
	tst r2, r2
	beq loc_80E73EC
	ldr r0, [r2,#0x3c]
	str r0, [sp,#8]
	ldr r1, [r2,#0x54]
	ldrb r0, [r1,#0xa]
	ldrb r1, [r1,#0xb]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	str r0, [sp]
	str r1, [sp,#4]
	add r0, sp, #0
	bl sub_800362C
	bl sub_800AE90
loc_80E73EC:
	add r7, #4
	add r4, #1
	cmp r4, #4
	blt loc_80E73CA
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge loc_80E742C
	ldr r0, [r5,#0x60]
	ldrh r4, [r0,#0x24]
	mov r7, #0x64 
	add r7, r7, r5
	mov r6, #0
loc_80E7406:
	ldr r1, [r7]
	tst r1, r1
	beq loc_80E741C
	ldr r0, off_80E74CC // =0x119 
	ldrh r2, [r1,#0x24]
	cmp r2, r4
	blt loc_80E7416
	ldr r0, dword_80E74D0 // =0x11a 
loc_80E7416:
	bl sound_play // () -> void
	strh r4, [r1,#0x24]
loc_80E741C:
	add r7, #4
	add r6, #1
	cmp r6, #4
	blt loc_80E7406
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #0xc
	strh r0, [r5,#0xa]
loc_80E742C:
	add sp, sp, #0xc
	pop {r4,r6,r7,pc}
	.word 0x80E7438, 0x80E7444, 0x86E55FC, 0x6017940, 0x100
	.word 0x86E56FC, 0x30016F0, 0x20, 0x8C28B500, 0x84283801
	.word 0x200CDA03, 0x20007268, 0xBD008168
.endfunc // sub_80E72C8

.func
.thumb_func
sub_80E7464:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x5c 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E7484
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E7484:
	pop {pc}
.endfunc // sub_80E7464

.func
.thumb_func
sub_80E7486:
	push {r4,r6,lr}
	lsl r4, r2, #2
	lsl r6, r1, #8
	add r6, r6, r0
	bl object_getPanelParameters
.endfunc // sub_80E7486

	ldr r1, off_80E74C0 // =dword_80E74C4 
	ldr r1, [r1,r4]
	tst r0, r1
	beq loc_80E74BC
	mov r3, r10
	ldr r3, [r3,#0x18]
	add r3, #0x80
	mov r4, #0
loc_80E74A2:
	ldr r0, [r3]
	tst r0, r0
	beq loc_80E74B4
	ldr r1, [r0,#0x54]
	tst r1, r1
	beq loc_80E74B4
	ldrh r1, [r1,#0xa]
	cmp r1, r6
	beq locret_80E74BE
loc_80E74B4:
	add r3, #4
	add r4, #1
	cmp r4, #8
	blt loc_80E74A2
loc_80E74BC:
	mov r0, #0
locret_80E74BE:
	pop {r4,r6,pc}
off_80E74C0: .word dword_80E74C4
dword_80E74C4: .word 0x200000, 0x400000
off_80E74CC: .word 0x119
dword_80E74D0: .word 0x11A
loc_80E74D4:
	push {lr}
	ldr r1, off_80E74E4 // =off_80E74E8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E74E4: .word off_80E74E8
off_80E74E8: .word sub_800B916+1
	.word sub_80E74F4+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E74F4:
	push {lr}
	ldr r1, off_80E7504 // =off_80E7508 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7504: .word off_80E7508
off_80E7508: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E7518+1
	.word sub_800BC88+1
.endfunc // sub_80E74F4

.func
.thumb_func
sub_80E7518:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E7534
	push {r5}
	ldrh r4, [r5,#4]
	ldr r5, [r5,#0x4c]
	bl sub_8010474
	pop {r5}
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E7534:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E7544
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E7544:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E7518

.func
.thumb_func
sub_80E7546:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x5d 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E7566
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E7566:
	pop {pc}
.endfunc // sub_80E7546

loc_80E7568:
	push {lr}
	ldr r1, off_80E7578 // =off_80E757C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7578: .word off_80E757C
off_80E757C: .word sub_800B916+1
	.word sub_80E7588+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E7588:
	push {lr}
	ldr r1, off_80E7598 // =off_80E759C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7598: .word off_80E759C
off_80E759C: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E75AC+1
	.word sub_800BC88+1
.endfunc // sub_80E7588

.func
.thumb_func
sub_80E75AC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E75E8
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	add r0, r0, r0
	ldr r4, off_80E75F8 // =byte_80E75FC 
	add r4, r4, r0
	ldrb r0, [r4]
	ldrb r1, [r5,#0x16]
	bl sub_800D5F0
	tst r0, r0
	beq loc_80E75EC
	ldrb r0, [r4]
	ldrb r1, [r4,#1]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	ldr r4, [r5,#4]
	mov r7, #0xc
	add r7, r7, r5
	mov r3, #0
	bl sub_80D67A6
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E75E8:
	ldrb r0, [r5,#0xc]
	tst r0, r0
loc_80E75EC:
	bne locret_80E75F6
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E75F6:
	pop {r4,r6,r7,pc}
off_80E75F8: .word byte_80E75FC
byte_80E75FC: .byte 0x6, 0x1, 0x1, 0x1
.endfunc // sub_80E75AC

.func
.thumb_func
sub_80E7600:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x5e 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E7620
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E7620:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E7600

loc_80E7624:
	push {lr}
	ldr r1, off_80E7634 // =off_80E7638 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7634: .word off_80E7638
off_80E7638: .word sub_800B916+1
	.word sub_80E7644+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E7644:
	push {lr}
	ldr r1, off_80E7654 // =off_80E7658 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7654: .word off_80E7658
off_80E7658: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E7668+1
	.word sub_800BC88+1
.endfunc // sub_80E7644

.func
.thumb_func
sub_80E7668:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E76AC
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r2, off_80E76C0 // =dword_80E76C4 
	add r1, r1, r2
	ldr r2, [r1]
	ldr r3, [r1,#4]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E76A4
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_80DB2C6
	pop {r5}
loc_80E76A4:
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E76AC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E76BC
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E76BC:
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80E76C0: .word dword_80E76C4
dword_80E76C4: .word 0x10, 0xF880080, 0x10, 0xF880080
.endfunc // sub_80E7668

.func
.thumb_func
sub_80E76D4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x5f 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E76F4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E76F4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E76D4

loc_80E76F8:
	push {lr}
	ldr r1, off_80E7708 // =off_80E770C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7708: .word off_80E770C
off_80E770C: .word sub_80E7718+1
	.word sub_80E7756+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E7718:
	push {r7,lr}
	mov r0, #0x80
	mov r1, #0x14
	mov r2, #5
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E7718

	bl sub_8002F90 // () -> void
	mov r0, #0xb
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #2
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E7756
	pop {r7,pc}
.func
.thumb_func
sub_80E7756:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E7766
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E7766:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E7772
	bl object_freeMemory
locret_80E7772:
	pop {pc}
.endfunc // sub_80E7756

.func
.thumb_func
sub_80E7774:
	push {lr}
	push {r5}
	mov r0, #0x60 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E7784
locret_80E7784:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E7774

loc_80E7788:
	push {lr}
	ldr r1, off_80E77A8 // =off_80E77AC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80E77A0
	bl sub_801BCA6
	b locret_80E77A4
loc_80E77A0:
	bl sub_801BBF4
locret_80E77A4:
	pop {pc}
	.balign 4, 0x00
off_80E77A8: .word off_80E77AC
off_80E77AC: .word sub_80E77B8+1
	.word sub_80E7816+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E77B8:
	push {lr}
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #0x10
	mov r2, #0x4f 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E77B8

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E7816:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E7890
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldrb r0, [r5,#4]
	tst r0, r0
	bne locret_80E7894
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#5]
	cmp r0, r1
	beq locret_80E7894
loc_80E7890:
	mov r0, #8
	str r0, [r5,#8]
locret_80E7894:
	pop {pc}
.endfunc // sub_80E7816

.func
.thumb_func
sub_80E7896:
	push {lr}
	push {r5}
	mov r0, #0x61 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E78AC
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E78AC:
	pop {pc}
.endfunc // sub_80E7896

.func
.thumb_func
sub_80E78AE:
	push {lr}
	tst r0, r0
	beq locret_80E78B8
	mov r1, #8
	str r1, [r0,#8]
locret_80E78B8:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E78AE

loc_80E78BC:
	push {lr}
	ldr r1, off_80E78D0 // =off_80E78D4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBF4
	pop {pc}
	.byte 0, 0
off_80E78D0: .word off_80E78D4
off_80E78D4: .word sub_80E78E0+1
	.word sub_80E792A+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E78E0:
	push {lr}
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #0x10
	mov r2, #0x50 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E78E0

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E792A:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E793C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E7940
loc_80E793C:
	bl object_freeMemory
locret_80E7940:
	pop {pc}
.endfunc // sub_80E792A

.func
.thumb_func
sub_80E7942:
	push {lr}
	push {r0,r1,r5}
	mov r0, #0x62 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1,r2,r5}
	beq locret_80E795A
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
locret_80E795A:
	pop {pc}
.endfunc // sub_80E7942

loc_80E795C:
	push {lr}
	ldr r1, off_80E797C // =off_80E7980 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80E7974
	bl sub_801BCA6
	b locret_80E7978
loc_80E7974:
	bl sub_801BBF4
locret_80E7978:
	pop {pc}
	.balign 4, 0x00
off_80E797C: .word off_80E7980
off_80E7980: .word sub_80E798C+1
	.word loc_80E79CE+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E798C:
	push {lr}
	bl sub_80E7AB0
	mov r1, #0xc
	mov r2, #0x1b
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E798C

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #2
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
loc_80E79CE:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E7A3C
	bl sub_80E7AB0
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r1, off_80E7A44 // =off_80E7A48 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	b locret_80E7A40
loc_80E7A3C:
	mov r0, #8
	str r0, [r5,#8]
locret_80E7A40:
	pop {pc}
	.balign 4, 0x00
off_80E7A44: .word off_80E7A48
off_80E7A48: .word sub_80E7A50+1
	.word sub_80E7A66+1
.func
.thumb_func
sub_80E7A50:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	mov r1, #0xb
	cmp r0, r1
	beq locret_80E7A64
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E7A64:
	pop {pc}
.endfunc // sub_80E7A50

.func
.thumb_func
sub_80E7A66:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80E7A7A
	mov r1, #4
	strb r1, [r5,#0xa]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0xe
	strh r0, [r5,#0x20]
loc_80E7A7A:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E7A86
	mov r0, #8
	str r0, [r5,#8]
locret_80E7A86:
	pop {pc}
.endfunc // sub_80E7A66

.func
.thumb_func
sub_80E7A88:
	push {lr}
	push {r5}
	mov r0, #0x63 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E7A9E
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E7A9E:
	pop {pc}
.endfunc // sub_80E7A88

.func
.thumb_func
sub_80E7AA0:
	push {lr}
	tst r0, r0
	beq locret_80E7AAE
	mov r1, #4
	strb r1, [r0,#9]
	mov r1, #0
	strh r1, [r0,#0xa]
locret_80E7AAE:
	pop {pc}
.endfunc // sub_80E7AA0

.func
.thumb_func
sub_80E7AB0:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x10
	mul r0, r1
	ldr r1, [r5,#0x4c]
	ldrh r2, [r1,#0x36]
	add r2, r2, r0
	strh r2, [r5,#0x36]
	ldrh r2, [r1,#0x3a]
	strh r2, [r5,#0x3a]
	ldrh r2, [r1,#0x3e]
	strh r2, [r5,#0x3e]
	pop {pc}
.endfunc // sub_80E7AB0

loc_80E7ACC:
	push {lr}
	ldr r1, off_80E7AEC // =off_80E7AF0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne loc_80E7AE4
	bl sub_801BCA6
	b locret_80E7AE8
loc_80E7AE4:
	bl sub_801BBF4
locret_80E7AE8:
	pop {pc}
	.balign 4, 0x00
off_80E7AEC: .word off_80E7AF0
off_80E7AF0: .word sub_80E7AFC+1
	.word sub_80E7B4A+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E7AFC:
	push {lr}
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #0x10
	mov r2, #0x53 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E7AFC

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#5]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #0x13
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E7B4A:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E7BD2
	ldrb r0, [r5,#5]
	cmp r0, #1
	bne loc_80E7B62
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80E7BD2
loc_80E7B62:
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldrb r0, [r5,#4]
	tst r0, r0
	bne locret_80E7BD6
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#6]
	cmp r0, r1
	beq locret_80E7BD6
loc_80E7BD2:
	mov r0, #8
	str r0, [r5,#8]
locret_80E7BD6:
	pop {pc}
.endfunc // sub_80E7B4A

.func
.thumb_func
sub_80E7BD8:
	push {lr}
	push {r5}
	mov r0, #0x64 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E7BEE
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E7BEE:
	pop {pc}
.endfunc // sub_80E7BD8

.func
.thumb_func
sub_80E7BF0:
	push {lr}
	tst r0, r0
	beq locret_80E7BFA
	mov r1, #8
	str r1, [r0,#8]
locret_80E7BFA:
	pop {pc}
.endfunc // sub_80E7BF0

loc_80E7BFC:
	push {lr}
	ldr r1, off_80E7C0C // =off_80E7C10 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7C0C: .word off_80E7C10
off_80E7C10: .word sub_800B916+1
	.word sub_80E7C1C+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E7C1C:
	push {lr}
	ldr r1, off_80E7C2C // =off_80E7C30 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7C2C: .word off_80E7C30
off_80E7C30: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E7C40+1
	.word sub_800BC88+1
.endfunc // sub_80E7C1C

.func
.thumb_func
sub_80E7C40:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E7C82
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r2, off_80E7C94 // =dword_80E7C98 
	add r1, r1, r2
	ldr r2, [r1]
	ldr r3, [r1,#4]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E7C7A
	ldrb r2, [r5,#0xe]
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r3, #0
	bl sub_80DA390
loc_80E7C7A:
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E7C82:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E7C92
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E7C92:
	pop {r4,r6,r7,pc}
off_80E7C94: .word dword_80E7C98
dword_80E7C98: .word 0x0
	.word 0xF880080, 0x0
	.byte 0x80
	.byte  0
	.byte 0x88
	.byte 0xF
.endfunc // sub_80E7C40

.func
.thumb_func
sub_80E7CA8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x65 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E7CC8
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E7CC8:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E7CA8

loc_80E7CCC:
	push {lr}
	ldr r1, off_80E7CDC // =off_80E7CE0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7CDC: .word off_80E7CE0
off_80E7CE0: .word sub_80E7CEC+1
	.word loc_80E7D6A+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E7CEC:
	push {r4,lr}
	mov r0, #6
	mov r1, #2
	ldr r2, [r5,#0x4c]
	mov r4, #0
	mov r3, #0x40 
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #4
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #1
	lsl r3, r3, #0x18
	orr r4, r3
	mov r3, #0
	bl sub_80BC610
	str r0, [r5,#0x60]
	mov r0, #6
	mov r1, #2
	ldr r2, [r5,#0x4c]
	mov r4, #0x10
	mov r3, #0x40 
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #3
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0
	bl sub_80BC610
	str r0, [r5,#0x64]
	mov r0, #6
	mov r1, #2
	ldr r2, [r5,#0x4c]
	mov r4, #0x20 
	mov r3, #0x40 
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #2
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0
	bl sub_80BC610
	str r0, [r5,#0x68]
	mov r0, #6
	mov r1, #2
	ldr r2, [r5,#0x4c]
	mov r4, #0x30 
	mov r3, #0x40 
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #1
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0
	bl sub_80BC610
	str r0, [r5,#0x6c]
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,pc}
.endfunc // sub_80E7CEC

loc_80E7D6A:
	push {lr}
	ldr r1, off_80E7D78 // =off_80E7D7C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80E7D78: .word off_80E7D7C
off_80E7D7C: .word sub_80E7D80+1
.func
.thumb_func
sub_80E7D80:
	push {lr}
	pop {pc}
.endfunc // sub_80E7D80

.func
.thumb_func
sub_80E7D84:
	push {lr}
	push {r2,r3,r5}
	mov r0, #0x66 
	bl object_spawnType4
	add r0, r5, #0
	pop {r2,r3,r5}
	beq locret_80E7DA2
	str r5, [r0,#0x4c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80E7DA2:
	pop {pc}
.endfunc // sub_80E7D84

.func
.thumb_func
sub_80E7DA4:
	push {r5,lr}
	add r5, r0, #0
	ldr r0, [r5,#0x60]
	bl sub_80BC644
	ldr r0, [r5,#0x64]
	bl sub_80BC644
	ldr r0, [r5,#0x68]
	bl sub_80BC644
	ldr r0, [r5,#0x6c]
	bl sub_80BC644
	pop {r5,pc}
	.balign 4, 0x00
.endfunc // sub_80E7DA4

loc_80E7DC4:
	push {lr}
	ldr r1, off_80E7DD4 // =off_80E7DD8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7DD4: .word off_80E7DD8
off_80E7DD8: .word sub_800B916+1
	.word sub_80E7DE4+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E7DE4:
	push {lr}
	ldr r1, off_80E7DF4 // =off_80E7DF8 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7DF4: .word off_80E7DF8
off_80E7DF8: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E7E08+1
	.word sub_800BC88+1
.endfunc // sub_80E7DE4

.func
.thumb_func
sub_80E7E08:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E7E30
	bl sub_80E7E64
	tst r0, r0
	beq loc_80E7E28
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r3, #0
	ldrb r2, [r5,#0xe]
	bl sub_80CBE4A
loc_80E7E28:
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E7E30:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80E7E40
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E7E40:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E7E08

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x67 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E7E62
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E7E62:
	pop {pc}
.func
.thumb_func
sub_80E7E64:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0x10
	ldr r3, dword_80E7E98 // =0xf880080 
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80E7E64

	tst r0, r0
	pop {r0,r1}
	bne locret_80E7E82
	mov r0, #0
locret_80E7E82:
	pop {pc}
	.word 0x80E7E88, 0x10, 0xF8800A0, 0x30, 0xF880080
dword_80E7E98: .word 0xF880080
loc_80E7E9C:
	push {lr}
	ldr r1, off_80E7EAC // =off_80E7EB0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7EAC: .word off_80E7EB0
off_80E7EB0: .word sub_800B916+1
	.word sub_80E7EBC+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E7EBC:
	push {lr}
	ldr r1, off_80E7ECC // =off_80E7ED0 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7ECC: .word off_80E7ED0
off_80E7ED0: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E7EE0+1
	.word sub_800BC88+1
.endfunc // sub_80E7EBC

.func
.thumb_func
sub_80E7EE0:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E7F06
	push {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r7, #5
	add r7, r7, r5
	ldr r5, [r5,#0x4c]
	bl sub_80BCCDC
	pop {r5}
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E7F06:
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne locret_80E7F14
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E7F14:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E7EE0

.func
.thumb_func
sub_80E7F16:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x68 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E7F36
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E7F36:
	pop {pc}
.endfunc // sub_80E7F16

loc_80E7F38:
	push {lr}
	ldr r1, off_80E7F48 // =off_80E7F4C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7F48: .word off_80E7F4C
off_80E7F4C: .word sub_800B916+1
	.word sub_80E7F58+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E7F58:
	push {lr}
	ldr r1, off_80E7F68 // =off_80E7F6C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7F68: .word off_80E7F6C
off_80E7F6C: .word sub_800B94C+1
	.word sub_800BDB2+1
	.word sub_800BA8A+1
	.word sub_80E7F80+1
	.word sub_800BC88+1
.endfunc // sub_80E7F58

.func
.thumb_func
sub_80E7F80:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E7FAA
	push {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldrb r3, [r5,#0x16]
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	ldrh r7, [r5,#0x32]
	add r6, r6, r7
	mov r7, #5
	add r7, r7, r5
	ldr r5, [r5,#0x4c]
	bl sub_80C31F0
	pop {r5}
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E7FAA:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80E7FB8
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E7FB8:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E7F80

.func
.thumb_func
sub_80E7FBA:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x69 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E7FDA
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E7FDA:
	pop {pc}
.endfunc // sub_80E7FBA

loc_80E7FDC:
	push {lr}
	ldr r1, off_80E7FEC // =off_80E7FF0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E7FEC: .word off_80E7FF0
off_80E7FF0: .word sub_800B916+1
	.word sub_80E7FFC+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E7FFC:
	push {lr}
	ldr r1, off_80E800C // =off_80E8010 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E800C: .word off_80E8010
off_80E8010: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E8020+1
	.word sub_800BC88+1
.endfunc // sub_80E7FFC

.func
.thumb_func
sub_80E8020:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E8048
	push {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r7, #5
	add r7, r7, r5
	ldr r5, [r5,#0x4c]
	mov r4, #0
	bl sub_80BD20A
	pop {r5}
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E8048:
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne locret_80E8056
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E8056:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E8020

.func
.thumb_func
sub_80E8058:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x6a 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E8078
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E8078:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E8058

loc_80E807C:
	push {lr}
	ldr r1, off_80E808C // =off_80E8090 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E808C: .word off_80E8090
off_80E8090: .word sub_80E809C+1
	.word sub_80E80E0+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E809C:
	push {lr}
	mov r0, #0x80
	mov r1, #0x14
	mov r2, #7
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E809C

	bl sub_8002F90 // () -> void
	ldrb r0, [r5,#4]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x34]
	str r0, [r5,#0x40]
	ldr r0, [r5,#0x38]
	str r0, [r5,#0x44]
	ldr r0, [r5,#0x3c]
	str r0, [r5,#0x48]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E80E0
	pop {pc}
.func
.thumb_func
sub_80E80E0:
	push {r4,lr}
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	ldr r0, [r5,#0x40]
	add r1, r1, r0
	ldr r0, [r5,#0x44]
	add r2, r2, r0
	ldr r0, [r5,#0x48]
	add r3, r3, r0
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3e]
	add r0, #1
	strh r0, [r5,#0x3e]
	ldrh r0, [r5,#0x3a]
	add r0, #1
	strh r0, [r5,#0x3a]
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq loc_80E811E
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #8
	str r0, [r5,#8]
loc_80E811E:
	bl sprite_update
.endfunc // sub_80E80E0

	pop {r4,pc}
.func
.thumb_func
sub_80E8124:
	push {lr}
	push {r5}
	mov r0, #0x6b 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E8136
	str r5, [r0,#0x4c]
locret_80E8136:
	pop {pc}
.endfunc // sub_80E8124

loc_80E8138:
	push {lr}
	ldr r1, off_80E8148 // =off_80E814C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E8148: .word off_80E814C
off_80E814C: .word sub_800B916+1
	.word sub_80E8158+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E8158:
	push {lr}
	ldr r1, off_80E8168 // =off_80E816C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E8168: .word off_80E816C
off_80E816C: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E817C+1
	.word sub_800BC88+1
.endfunc // sub_80E8158

.func
.thumb_func
sub_80E817C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E81A4
	push {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r7, #5
	add r7, r7, r5
	ldr r5, [r5,#0x4c]
	mov r4, #0
	bl sub_80BE3E8
	pop {r5}
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E81A4:
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne locret_80E81B2
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E81B2:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E817C

.func
.thumb_func
sub_80E81B4:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x6c 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E81D4
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E81D4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E81B4

loc_80E81D8:
	push {lr}
	ldr r1, off_80E81E8 // =off_80E81EC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E81E8: .word off_80E81EC
off_80E81EC: .word sub_800B916+1
	.word sub_80E81F8+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E81F8:
	push {lr}
	ldr r1, off_80E8208 // =off_80E820C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E8208: .word off_80E820C
off_80E820C: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E821C+1
	.word sub_800BC88+1
.endfunc // sub_80E81F8

.func
.thumb_func
sub_80E821C:
	push {r4,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E8234
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r0, [r5,#0x32]
	add r6, r6, r0
	bl sub_80E8396
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E8234:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80E8242
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E8242:
	pop {r4,pc}
.endfunc // sub_80E821C

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x6d 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E8264
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E8264:
	pop {pc}
	.balign 4, 0x00
loc_80E8268:
	push {lr}
	ldr r1, off_80E8278 // =off_80E827C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E8278: .word off_80E827C
off_80E827C: .word sub_80E8288+1
	.word sub_80E829E+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E8288:
	push {lr}
	mov r0, #0xd3
	strh r0, [r5,#0x28]
	mov r0, #1
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E829E
	pop {pc}
.endfunc // sub_80E8288

.func
.thumb_func
sub_80E829E:
	push {lr}
	bl battle_isTimeStop
	tst r0, r0
	bne locret_80E82B2
	ldr r1, off_80E82B4 // =off_80E82B8 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80E82B2:
	pop {pc}
off_80E82B4: .word off_80E82B8
off_80E82B8: .word sub_80E82C0+1
	.word sub_80E82D4+1
.endfunc // sub_80E829E

.func
.thumb_func
sub_80E82C0:
	push {lr}
	mov r0, #0xb
	strh r0, [r5,#0x22]
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strh r0, [r5,#0xa]
	bl sub_80E82D4
	pop {pc}
.endfunc // sub_80E82C0

.func
.thumb_func
sub_80E82D4:
	push {r4,r6,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E8316
	ldrh r0, [r5,#0x24]
	tst r0, r0
	beq loc_80E831C
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bne locret_80E8324
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	beq loc_80E8316
	bl sub_80E8326
	cmp r0, #0xff
	beq loc_80E8316
	push {r0,r1}
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	mov r4, #1
	bl sub_80D006E
	pop {r0,r1}
	mov r0, #0xb7
	bl sound_play // () -> void
	mov r0, #0x14
	strh r0, [r5,#0x20]
	b locret_80E8324
loc_80E8316:
	ldr r0, [r5,#0x60]
	mov r1, #0
	str r1, [r0]
loc_80E831C:
	bl sub_800F656
	mov r0, #8
	str r0, [r5,#8]
locret_80E8324:
	pop {r4,r6,pc}
.endfunc // sub_80E82D4

.func
.thumb_func
sub_80E8326:
	push {r4,r6,r7,lr}
	bl get_802D246 // () -> int
	mov r1, #8
	tst r0, r1
	beq loc_80E8338
	bl sub_80E8378
	b locret_80E8376
loc_80E8338:
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #0x10
	mul r0, r1
	add r0, #0x80
	mov r7, r10
	ldr r7, [r7,#0x18]
	add r7, r7, r0
	mov r4, #0
	mov r3, #0
loc_80E834E:
	ldr r6, [r7]
	tst r6, r6
	beq loc_80E8364
	tst r3, r3
	beq loc_80E8362
	ldrh r0, [r6,#0x24]
	ldrh r1, [r3,#0x24]
	cmp r0, r1
	bge loc_80E8362
	b loc_80E8364
loc_80E8362:
	add r3, r6, #0
loc_80E8364:
	add r7, #4
	add r4, #1
	cmp r4, #4
	blt loc_80E834E
	mov r0, #0xff
	tst r3, r3
	beq locret_80E8376
	ldrb r0, [r3,#0x12]
	ldrb r1, [r3,#0x13]
locret_80E8376:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E8326

.func
.thumb_func
sub_80E8378:
	push {r6,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	add r6, r0, #0
	ldrh r0, [r6,#0x24]
	tst r0, r0
	beq loc_80E8392
	ldrb r0, [r6,#0x12]
	ldrb r1, [r6,#0x13]
	b locret_80E8394
loc_80E8392:
	mov r0, #0xff
locret_80E8394:
	pop {r6,pc}
.endfunc // sub_80E8378

.func
.thumb_func
sub_80E8396:
	push {lr}
	push {r2,r5}
	mov r0, #0x6e 
	bl object_spawnType4
	add r0, r5, #0
	pop {r2,r5}
	beq locret_80E83B4
	strb r2, [r0,#0xe]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	mov r2, #1
	bl sub_800F614
locret_80E83B4:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80E8396

loc_80E83B8:
	push {lr}
	ldr r1, off_80E83C8 // =off_80E83CC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E83C8: .word off_80E83CC
off_80E83CC: .word sub_800B916+1
	.word sub_80E83D8+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E83D8:
	push {lr}
	ldr r1, off_80E83E8 // =off_80E83EC 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E83E8: .word off_80E83EC
off_80E83EC: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E83FC+1
	.word sub_800BC88+1
.endfunc // sub_80E83D8

.func
.thumb_func
sub_80E83FC:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E8450
	add r0, sp, #0
	bl sub_80E84D0
	tst r0, r0
	beq loc_80E844C
	add r7, sp, #0
	ldrb r0, [r7]
	ldrb r1, [r7,#1]
	ldrh r4, [r7,#2]
	ldrb r2, [r5,#0xe]
	ldrh r3, [r5,#0x32]
	ldr r6, [r5,#0x2c]
	add r6, r6, r3
	mov r7, #6
	add r7, r7, r5
	bl sub_80D876E
	add r7, sp, #0
	ldrb r0, [r7,#4]
	tst r0, r0
	beq loc_80E844C
	ldrb r1, [r7,#5]
	ldrh r4, [r7,#6]
	ldrb r2, [r5,#0xe]
	ldrh r3, [r5,#0x32]
	ldr r6, [r5,#0x2c]
	add r6, r6, r3
	mov r7, #7
	add r7, r7, r5
	bl sub_80D876E
	ldrb r1, [r0,#0x17]
	mov r2, #1
	eor r1, r2
	strb r1, [r0,#0x17]
loc_80E844C:
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E8450:
	ldrb r0, [r5,#6]
	ldrb r1, [r5,#7]
	orr r0, r1
	bne loc_80E8460
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
loc_80E8460:
	add sp, sp, #8
	pop {r4,r6,r7,pc}
.endfunc // sub_80E83FC

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x6f 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E8484
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E8484:
	pop {pc}
.func
.thumb_func
sub_80E8486:
	push {r4,r6,r7,lr}
	push {r0,r1}
	lsl r4, r2, #2
	ldr r7, off_80E84C4 // =dword_80E84C8 
	ldr r7, [r7,r4]
	add r0, r2, #0
	add r1, r3, #0
	bl object_getFlipDirection // (int a1, int a2) -> int
	add r4, r0, #0
	pop {r0,r1}
	add r0, r0, r4
	mov r6, #0
loc_80E84A0:
	push {r0,r1}
	bl object_isValidPanel
	pop {r0,r1}
	beq loc_80E84C0
	push {r0,r1}
	bl object_getPanelParameters
	tst r0, r7
	pop {r0,r1}
	bne loc_80E84BC
	add r6, #1
	add r0, r0, r4
	b loc_80E84A0
loc_80E84BC:
	add r0, r6, #0
	pop {r4,r6,r7,pc}
loc_80E84C0:
	mov r0, #0xff
	pop {r4,r6,r7,pc}
off_80E84C4: .word dword_80E84C8
dword_80E84C8: .word 0x5800000, 0xA800000
.endfunc // sub_80E8486

.func
.thumb_func
sub_80E84D0:
	push {r4,r6,r7,lr}
	add r7, r0, #0
	mov r6, #0
	mov r0, #0
	str r0, [r7]
	str r0, [r7,#4]
	mov r0, #1
	strb r0, [r7,#6]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	mov r2, #0x10
	ldr r3, dword_80E8578 // =0xf880080 
	bl object_checkPanelParameters
.endfunc // sub_80E84D0

	tst r0, r0
	pop {r0,r1}
	beq loc_80E8572
	strb r0, [r7]
	strb r1, [r7,#1]
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	mov r1, #5
	mul r0, r1
	neg r0, r0
	add r0, #6
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	mov r2, #0x10
	ldr r3, dword_80E8578 // =0xf880080 
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E852E
	ldrb r2, [r7]
	cmp r0, r2
	bne loc_80E852A
	ldrb r2, [r7,#1]
	cmp r1, r2
	beq loc_80E852E
loc_80E852A:
	strb r0, [r7,#4]
	strb r1, [r7,#5]
loc_80E852E:
	mov r6, #1
	ldrb r0, [r7]
	ldrb r1, [r7,#1]
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_80E8486
	strb r0, [r7,#3]
	cmp r0, #0xff
	beq loc_80E854A
	cmp r0, #4
	blt loc_80E854A
	mov r6, #0
	b loc_80E8572
loc_80E854A:
	ldrb r0, [r7,#4]
	tst r0, r0
	beq loc_80E8572
	ldrb r1, [r7,#5]
	ldrb r3, [r5,#0x17]
	mov r2, #1
	eor r3, r2
	ldrb r2, [r5,#0x16]
	bl sub_80E8486
	strb r0, [r7,#7]
	cmp r0, #0xff
	beq loc_80E8572
	ldrb r1, [r7,#3]
	cmp r1, #0xff
	beq loc_80E856E
	cmp r0, #4
	blt loc_80E8572
loc_80E856E:
	mov r0, #0xff
	strb r0, [r7,#7]
loc_80E8572:
	add r0, r6, #0
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80E8578: .word 0xF880080
loc_80E857C:
	push {lr}
	ldr r1, off_80E858C // =off_80E8590 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E858C: .word off_80E8590
off_80E8590: .word sub_80E859C+1
	.word sub_80E85A8+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E859C:
	push {lr}
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E85A8
	pop {pc}
.endfunc // sub_80E859C

.func
.thumb_func
sub_80E85A8:
	push {r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E85E2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	add r1, #1
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80E862E
	str r0, [r7]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	sub r1, #1
	mov r7, #0x68 
	add r7, r7, r5
	bl sub_80E862E
	str r0, [r7]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r7, #0x60 
	add r7, r7, r5
	bl sub_80E862E
	str r0, [r7]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E85E2:
	ldr r0, [r5,#0x60]
	ldr r1, [r5,#0x64]
	ldr r2, [r5,#0x68]
	orr r0, r1
	orr r0, r2
	bne locret_80E85F8
	ldr r0, [r5,#0x6c]
	mov r1, #0
	str r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
locret_80E85F8:
	pop {r7,pc}
.endfunc // sub_80E85A8

.func
.thumb_func
sub_80E85FA:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x70 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E8610
	bl sub_801155A
	str r7, [r0,#0x6c]
locret_80E8610:
	pop {pc}
.endfunc // sub_80E85FA

.func
.thumb_func
sub_80E8612:
	push {r4,lr}
	add r4, r0, #0
	beq locret_80E862C
	mov r1, #2
	ldr r0, [r4,#0x64]
	bl sub_80CEAC2
	ldr r0, [r4,#0x68]
	bl sub_80CEAC2
	ldr r0, [r4,#0x60]
	bl sub_80CEAC2
locret_80E862C:
	pop {r4,pc}
.endfunc // sub_80E8612

.func
.thumb_func
sub_80E862E:
	push {r4,r6,r7,lr}
	ldrb r2, [r5,#0xe]
	ldr r3, [r5,#0x3c]
	ldr r4, [r5,#4]
	ldr r6, [r5,#0x2c]
	bl sub_80CEAA2
	pop {r4,r6,r7,pc}
.endfunc // sub_80E862E

	push {r4,r6,r7,lr}
	ldrb r2, [r5,#0xe]
	ldr r4, [r5,#4]
	ldr r3, dword_80E8680 // =0xffff00ff 
	and r4, r3
	ldr r3, off_80E8684 // =0x200 
	add r4, r4, r3
	ldr r6, [r5,#0x2c]
	ldr r3, [r5,#0x3c]
	bl sub_80CEAA2
	pop {r4,r6,r7,pc}
	push {lr}
	ldr r0, [r5,#0x60]
	bl sub_80CEAEE
	tst r0, r0
	bne loc_80E8678
	ldr r0, [r5,#0x64]
	bl sub_80CEAEE
	tst r0, r0
	bne loc_80E8678
	ldr r0, [r5,#0x68]
	bl sub_80CEAEE
	tst r0, r0
	bne loc_80E8678
	pop {pc}
loc_80E8678:
	bl sub_80E8612
	pop {pc}
	.byte 0, 0
dword_80E8680: .word 0xFFFF00FF
off_80E8684: .word 0x200
loc_80E8688:
	push {lr}
	ldr r1, off_80E869C // =off_80E86A0 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80E869C: .word off_80E86A0
off_80E86A0: .word sub_80E86AC+1
	.word sub_80E86F6+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E86AC:
	push {lr}
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #8
	mov r2, #0xa
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E86AC

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x15
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E86F6:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E876A
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#4]
	cmp r0, r1
	beq locret_80E876E
loc_80E876A:
	mov r0, #8
	str r0, [r5,#8]
locret_80E876E:
	pop {pc}
.endfunc // sub_80E86F6

.func
.thumb_func
sub_80E8770:
	push {lr}
	push {r5}
	mov r0, #0x71 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E8786
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E8786:
	pop {pc}
.endfunc // sub_80E8770

.func
.thumb_func
sub_80E8788:
	push {lr}
	tst r0, r0
	beq locret_80E8792
	mov r1, #8
	str r1, [r0,#8]
locret_80E8792:
	pop {pc}
.endfunc // sub_80E8788

loc_80E8794:
	push {lr}
	ldr r1, off_80E87A8 // =off_80E87AC 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80E87A8: .word off_80E87AC
off_80E87AC: .word sub_80E87B8+1
	.word sub_80E8802+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E87B8:
	push {lr}
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #0x10
	mov r2, #0x59 
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E87B8

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E8802:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E8876
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sprite_getPallete
	bl sprite_setPallete // (int pallete) -> void
	ldr r0, [r5,#0x4c]
	bl sub_8002EDC
	bl sub_8002ED0
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#5]
	cmp r0, r1
	beq locret_80E887A
loc_80E8876:
	mov r0, #8
	str r0, [r5,#8]
locret_80E887A:
	pop {pc}
.endfunc // sub_80E8802

.func
.thumb_func
sub_80E887C:
	push {lr}
	push {r5}
	mov r0, #0x72 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E8892
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E8892:
	pop {pc}
.endfunc // sub_80E887C

.func
.thumb_func
sub_80E8894:
	push {lr}
	tst r0, r0
	beq locret_80E889E
	mov r1, #8
	str r1, [r0,#8]
locret_80E889E:
	pop {pc}
.endfunc // sub_80E8894

loc_80E88A0:
	push {lr}
	ldr r1, off_80E88B0 // =off_80E88B4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E88B0: .word off_80E88B4
off_80E88B4: .word sub_80E88C0+1
	.word sub_80E88D8+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E88C0:
	push {lr}
	mov r0, #3
	strb r0, [r5,#5]
	mov r0, #2
	mov r1, #0xc
	bl sub_80302A8
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E88D8
	pop {pc}
.endfunc // sub_80E88C0

.func
.thumb_func
sub_80E88D8:
	push {r4,r6,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E890C
	ldrb r0, [r5,#9]
	cmp r0, #0
	bne loc_80E88F6
	mov r0, #1
	strb r0, [r5,#9]
	ldr r4, off_80E8934 // =0x201 
	bl sub_80E11E0
	mov r0, #8
	strh r0, [r5,#0x20]
loc_80E88F6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E8910
	ldrb r0, [r5,#5]
	sub r0, #1
	strb r0, [r5,#5]
	beq loc_80E890C
	mov r0, #0
	strb r0, [r5,#9]
	b locret_80E8910
loc_80E890C:
	mov r0, #8
	str r0, [r5,#8]
locret_80E8910:
	pop {r4,r6,pc}
.endfunc // sub_80E88D8

.func
.thumb_func
sub_80E8912:
	push {lr}
	push {r2,r5}
	mov r0, #0x73 
	bl object_spawnType4
	add r0, r5, #0
	pop {r2,r5}
	beq locret_80E8930
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x10
	bic r1, r2
	strb r1, [r0]
locret_80E8930:
	pop {pc}
	.balign 4, 0x00
off_80E8934: .word 0x201
.endfunc // sub_80E8912

loc_80E8938:
	push {lr}
	ldr r1, off_80E894C // =off_80E8950 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.balign 4, 0x00
off_80E894C: .word off_80E8950
off_80E8950: .word sub_80E895C+1
	.word sub_80E89BA+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E895C:
	push {lr}
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #8
	mov r2, #0x14
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E895C

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	ldrb r0, [r5,#4]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	mov r0, #0x10
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.func
.thumb_func
sub_80E89BA:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E8A1A
	ldr r0, [r5,#0x4c]
	add r0, #0x34 
	ldmia r0!, {r1-r3}
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldr r1, [r5,#0x4c]
	ldrb r1, [r1]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x4c]
	bl sub_8002DC8
	bl loc_8002DB4
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	ldrb r1, [r0,#0x17]
	strb r1, [r5,#0x17]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	ldrb r1, [r5,#5]
	cmp r0, r1
	beq locret_80E8A28
loc_80E8A1A:
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_80E8A24
	mov r1, #0
	str r1, [r0]
loc_80E8A24:
	mov r0, #8
	str r0, [r5,#8]
locret_80E8A28:
	pop {pc}
.endfunc // sub_80E89BA

.func
.thumb_func
sub_80E8A2A:
	push {lr}
	push {r5}
	mov r0, #0x74 
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E8A44
	str r5, [r0,#0x4c]
	str r6, [r0,#0x60]
	str r0, [r6]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E8A44:
	pop {pc}
.endfunc // sub_80E8A2A

.func
.thumb_func
sub_80E8A46:
	push {lr}
	tst r0, r0
	beq locret_80E8A50
	mov r1, #8
	str r1, [r0,#8]
locret_80E8A50:
	pop {pc}
.endfunc // sub_80E8A46

.func
.thumb_func
sub_80E8A52:
	push {lr}
	tst r0, r0
	beq locret_80E8A5E
	strb r1, [r0,#0x10]
	mov r1, #0xff
	strb r1, [r0,#0x11]
locret_80E8A5E:
	pop {pc}
.endfunc // sub_80E8A52

loc_80E8A60:
	push {lr}
	ldr r1, off_80E8A70 // =off_80E8A74 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E8A70: .word off_80E8A74
off_80E8A74: .word sub_800B916+1
	.word sub_80E8A80+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E8A80:
	push {lr}
	ldr r1, off_80E8A90 // =off_80E8A94 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E8A90: .word off_80E8A94
off_80E8A94: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E8AA4+1
	.word sub_800BC88+1
.endfunc // sub_80E8A80

.func
.thumb_func
sub_80E8AA4:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E8ACC
	push {r5}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r7, #5
	add r7, r7, r5
	ldr r5, [r5,#0x4c]
	mov r4, #0
	bl sub_80BF6AE
	pop {r5}
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E8ACC:
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne locret_80E8ADA
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E8ADA:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E8AA4

.func
.thumb_func
sub_80E8ADC:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x75 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E8AFC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E8AFC:
	pop {pc}
	.byte 0, 0
.endfunc // sub_80E8ADC

loc_80E8B00:
	push {lr}
	ldr r1, off_80E8B10 // =off_80E8B14 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E8B10: .word off_80E8B14
off_80E8B14: .word sub_800B916+1
	.word sub_80E8B20+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E8B20:
	push {lr}
	ldr r1, off_80E8B30 // =off_80E8B34 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E8B30: .word off_80E8B34
off_80E8B34: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E8B44+1
	.word sub_800BC88+1
.endfunc // sub_80E8B20

.func
.thumb_func
sub_80E8B44:
	push {lr}
	ldr r1, off_80E8B54 // =off_80E8B58 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E8B54: .word off_80E8B58
off_80E8B58: .word sub_80E8B64+1
	.word sub_80E8B70+1
	.word sub_80E8BB0+1
.endfunc // sub_80E8B44

.func
.thumb_func
sub_80E8B64:
	push {lr}
	mov r0, #0x10
	strh r0, [r5,#0x22]
	mov r0, #8
	strh r0, [r5,#0xa]
	pop {pc}
.endfunc // sub_80E8B64

.func
.thumb_func
sub_80E8B70:
	push {lr}
	ldrh r0, [r5,#0x22]
	cmp r0, #0x10
	bne loc_80E8B82
	bl sub_80E8C44
	cmp r0, #0
	beq loc_80E8B94
	b loc_80E8B8A
loc_80E8B82:
	bl sub_80E8BF8
.endfunc // sub_80E8B70

	cmp r0, #0
	beq loc_80E8B94
loc_80E8B8A:
	ldrh r2, [r5,#0x22]
	mov r3, #1
	and r2, r3
	bl sub_80E8BE2
loc_80E8B94:
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt loc_80E8BA6
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80E8BAE
loc_80E8BA6:
	mov r0, #6
	strh r0, [r5,#0x20]
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80E8BAE:
	pop {pc}
.func
.thumb_func
sub_80E8BB0:
	push {r4,lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E8BBE
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E8BBE:
	pop {r4,pc}
.endfunc // sub_80E8BB0

.func
.thumb_func
sub_80E8BC0:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x76 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E8BE0
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E8BE0:
	pop {pc}
.endfunc // sub_80E8BC0

.func
.thumb_func
sub_80E8BE2:
	push {r4,r6,r7,lr}
	add r4, r2, #0
	ldrh r3, [r5,#0x32]
	ldr r6, [r5,#0x2c]
	add r6, r6, r3
	mov r3, #0x78 
	lsl r3, r3, #0x10
	ldrb r2, [r5,#0xe]
	bl sub_80DBEA2
	pop {r4,r6,r7,pc}
.endfunc // sub_80E8BE2

.func
.thumb_func
sub_80E8BF8:
	push {r4,r6,r7,lr}
	bl sub_80E8C84
.endfunc // sub_80E8BF8

	cmp r0, #0
	bne loc_80E8C06
	bl sub_80E8CFA
loc_80E8C06:
	ldr r0, [r5,#0x60]
	cmp r0, #0
	beq loc_80E8C1E
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r2, #6
	mul r2, r1
	add r2, r2, r0
	add r2, #0x64 
	mov r0, #0
	strb r0, [r5,r2]
loc_80E8C1E:
	ldr r3, off_80E8C30 // =dword_80E8C34 
	bl sub_81096FA
	bl sub_80E8D92
	lsl r2, r1, #4
	add r2, r2, r0
	str r2, [r5,#0x60]
	pop {r4,r6,r7,pc}
off_80E8C30: .word dword_80E8C34
dword_80E8C34: .word 0x10020, 0x0
	.word 0x10000, 0x20
.func
.thumb_func
sub_80E8C44:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	ldr r3, off_80E8D68 // =dword_80E8D6C 
	bl sub_800EC48
	add r7, sp, #0
	bl sub_800CEA0
.endfunc // sub_80E8C44

	cmp r0, #0
	bne loc_80E8C68
	ldr r3, off_80E8D54 // =dword_80E8D58 
	bl sub_800EC48
	add r7, sp, #0
	bl sub_800CEA0
	cmp r0, #0
	beq loc_80E8C7A
loc_80E8C68:
	add r6, r0, #0
	bl sub_8001532
	add r1, r6, #0
	svc 6
	ldrb r0, [r7,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80E8C7A:
	lsl r2, r1, #4
	add r2, r2, r0
	str r2, [r5,#0x60]
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E8C84:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	mov r0, #0x64 
	add r0, r0, r5
	mov r1, #0x28 
	bl ZeroFillHalfword
	ldr r3, off_80E8D68 // =dword_80E8D6C 
	bl sub_800EC48
	add r7, sp, #0
	bl sub_800CEA0
.endfunc // sub_80E8C84

	cmp r0, #0
	beq loc_80E8CBE
	add r6, r0, #0
	add r3, sp, #0
	mov r4, #0x64 
	add r4, r4, r5
loc_80E8CAA:
	ldrb r0, [r3]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_80E8CC4
	add r3, #1
	sub r6, #1
	bne loc_80E8CAA
	mov r0, #1
loc_80E8CBE:
	mov r1, #0
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80E8CC4:
	push {r3,r5-r7,lr}
	mov r6, #0x10
	ldr r3, off_80E8D7C // =dword_80E8D80 
loc_80E8CCA:
	push {r0,r1}
	ldrsb r2, [r3,r6]
	add r3, #1
	add r0, r0, r2
	cmp r0, #1
	blt loc_80E8CF0
	cmp r0, #6
	bgt loc_80E8CF0
	ldrsb r2, [r3,r6]
	add r1, r1, r2
	cmp r1, #1
	blt loc_80E8CF0
	cmp r1, #3
	bgt loc_80E8CF0
	mov r2, #6
	mul r1, r2
	add r0, r0, r1
	mov r1, #1
	strb r1, [r4,r0]
loc_80E8CF0:
	sub r3, #1
	pop {r0,r1}
	sub r6, #2
	bpl loc_80E8CCA
	pop {r3,r5-r7,pc}
.endfunc // sub_80E8CC4

.func
.thumb_func
sub_80E8CFA:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	mov r0, #0x64 
	add r0, r0, r5
	mov r1, #0x28 
	bl ZeroFillHalfword
	ldr r3, off_80E8D54 // =dword_80E8D58 
	bl sub_800EC48
	add r7, sp, #0
	bl sub_800CEA0
.endfunc // sub_80E8CFA

	cmp r0, #0
	beq loc_80E8D3A
	add r6, r0, #0
	add r3, sp, #0
	mov r4, #0x64 
	add r4, r4, r5
loc_80E8D20:
	ldrb r0, [r3]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r2, #6
	mul r1, r2
	add r0, r0, r1
	mov r1, #1
	strb r1, [r4,r0]
	add r3, #1
	sub r6, #1
	bne loc_80E8D20
	mov r0, #1
loc_80E8D3A:
	mov r1, #0
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
	.word 0x80E8D44, 0x4000000, 0x0
	.word start_
	.word 0x0
off_80E8D54: .word dword_80E8D58
dword_80E8D58: .word 0x10020, 0x0
	.word 0x10000, 0x20
off_80E8D68: .word dword_80E8D6C
dword_80E8D6C: .word 0x4010020, 0x0
	.word 0x8010000, 0x20
off_80E8D7C: .word dword_80E8D80
dword_80E8D80: .word 0xFF00FFFF, 0xFFFF01, 0x10000, 0x10001FF
	.byte  1
	.byte  1
.func
.thumb_func
sub_80E8D92:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	mov r7, sp
	mov r6, #0
	mov r1, #4
loc_80E8D9C:
	mov r0, #7
loc_80E8D9E:
	push {r0-r3,r6,r7}
	bl object_getPanelParameters
.endfunc // sub_80E8D92

	add r4, r0, #0
	pop {r0-r3,r6,r7}
	tst r4, r3
	bne loc_80E8DCE
	and r4, r2
	cmp r4, r2
	bne loc_80E8DCE
	push {r0-r3}
	mov r2, #6
	mul r2, r1
	add r2, r2, r0
	mov r3, #0x64 
	add r3, r3, r2
	ldrb r2, [r5,r3]
	cmp r2, #0
	pop {r0-r3}
	beq loc_80E8DCE
	lsl r4, r1, #4
	orr r4, r0
	strb r4, [r7,r6]
	add r6, #1
loc_80E8DCE:
	sub r0, #1
	bne loc_80E8D9E
	sub r1, #1
	bne loc_80E8D9C
	add r0, r6, #0
	beq loc_80E8DEA
	bl sub_8001532
	add r1, r6, #0
	svc 6
	ldrb r0, [r7,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80E8DEA:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
	.byte 0, 0
loc_80E8DF0:
	push {lr}
	ldr r1, off_80E8E00 // =off_80E8E04 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E8E00: .word off_80E8E04
off_80E8E04: .word sub_80E8E10+1
	.word sub_80E8E18+1
	.word sub_80E8E92+1
.func
.thumb_func
sub_80E8E10:
	push {lr}
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80E8E10

.func
.thumb_func
sub_80E8E18:
	push {lr}
	ldr r1, off_80E8E28 // =off_80E8E2C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E8E28: .word off_80E8E2C
off_80E8E2C: .word sub_80E8E34+1
	.word sub_80E8E82+1
.endfunc // sub_80E8E18

.func
.thumb_func
sub_80E8E34:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #1
	beq loc_80E8E66
	mov r0, #1
	strb r0, [r5,#0xb]
	mov r0, #1
	lsl r0, r0, #8
	bl sub_801DACC
	mov r0, #1
	lsl r0, r0, #8
	bl sub_801BED6
	mov r0, #0x40 
	bl sub_801DACC
	ldr r0, [r5,#0x60]
	ldr r1, [r5,#0x64]
	ldr r2, [r5,#0x68]
	mov r3, #0x6c 
	add r3, r3, r5
	bl sub_802B6EC
	b locret_80E8E80
loc_80E8E66:
	bl loc_802B734
	cmp r0, #0
	beq locret_80E8E80
	mov r0, #0x40 
	bl sub_801DA48
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E8E80:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E8E34

.func
.thumb_func
sub_80E8E82:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E8E90
	mov r0, #8
	str r0, [r5,#8]
locret_80E8E90:
	pop {pc}
.endfunc // sub_80E8E82

.func
.thumb_func
sub_80E8E92:
	push {lr}
	mov r0, #4
	bl battle_clearFlags
	bl object_freeMemory
	pop {pc}
.endfunc // sub_80E8E92

	push {r4,r6,lr}
	push {r0-r3,r5}
	mov r0, #0x77 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r5}
	beq locret_80E8EDE
	str r5, [r0,#0x4c]
	str r1, [r0,#0x60]
	str r2, [r0,#0x64]
	str r3, [r0,#0x68]
	mov r2, #0x6c 
	add r2, r2, r0
	mov r6, #0
	sub r6, #1
	mov r3, #0
loc_80E8EC2:
	ldrsh r1, [r4,r3]
	strh r1, [r2,r3]
	add r3, #2
	cmp r1, r6
	bne loc_80E8EC2
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	add r6, r5, #0
	add r5, r0, #0
	mov r0, #4
	bl battle_setFlags
	add r0, r5, #0
	add r5, r6, #0
locret_80E8EDE:
	pop {r4,r6,pc}
loc_80E8EE0:
	push {lr}
	ldr r1, off_80E8EF0 // =off_80E8EF4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E8EF0: .word off_80E8EF4
off_80E8EF4: .word sub_80E8F00+1
	.word sub_80E8F5C+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E8F00:
	push {r4,lr}
	mov r0, #6
	mov r1, #2
	ldr r2, [r5,#0x4c]
	mov r4, #0
	mov r3, #0x14
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #3
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0
	bl sub_80BFF00
	str r0, [r5,#0x60]
	mov r0, #6
	mov r1, #2
	ldr r2, [r5,#0x4c]
	mov r4, #0xa
	mov r3, #0x14
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #2
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0
	bl sub_80BFF00
	str r0, [r5,#0x64]
	mov r0, #6
	mov r1, #2
	ldr r2, [r5,#0x4c]
	mov r4, #0x1e
	mov r3, #0x14
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #1
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0
	bl sub_80BFF00
	str r0, [r5,#0x68]
	mov r0, #4
	str r0, [r5,#8]
	pop {r4,pc}
.endfunc // sub_80E8F00

.func
.thumb_func
sub_80E8F5C:
	push {lr}
	ldr r1, off_80E8F6C // =off_80E8F70 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E8F6C: .word off_80E8F70
off_80E8F70: .word sub_80E8F74+1
.endfunc // sub_80E8F5C

.func
.thumb_func
sub_80E8F74:
	push {lr}
	pop {pc}
.endfunc // sub_80E8F74

.func
.thumb_func
sub_80E8F78:
	push {lr}
	push {r2,r3,r5}
	mov r0, #0x78 
	bl object_spawnType4
	add r0, r5, #0
	pop {r2,r3,r5}
	beq locret_80E8F96
	str r5, [r0,#0x4c]
	ldrh r3, [r5,#0x16]
	strh r3, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80E8F96:
	pop {pc}
.endfunc // sub_80E8F78

	push {r5,lr}
	add r5, r0, #0
	ldr r0, [r5,#0x60]
	bl sub_80BFF34
	ldr r0, [r5,#0x64]
	bl sub_80BFF34
	ldr r0, [r5,#0x68]
	bl sub_80BFF34
	pop {r5,pc}
.func
.thumb_func
sub_80E8FB0:
	push {r5,lr}
	add r5, r0, #0
	ldr r0, [r5,#0x60]
	bl sub_80BFF3E
	ldr r0, [r5,#0x64]
	bl sub_80BFF3E
	ldr r0, [r5,#0x68]
	bl sub_80BFF3E
	pop {r5,pc}
.endfunc // sub_80E8FB0

.func
.thumb_func
sub_80E8FC8:
	push {r5,lr}
	add r5, r0, #0
	ldr r0, [r5,#0x60]
	bl sub_80BFF56
	ldr r0, [r5,#0x64]
	bl sub_80BFF56
	ldr r0, [r5,#0x68]
	bl sub_80BFF56
	pop {r5,pc}
.endfunc // sub_80E8FC8

loc_80E8FE0:
	push {lr}
	ldr r1, off_80E8FF0 // =off_80E8FF4 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E8FF0: .word off_80E8FF4
off_80E8FF4: .word sub_800B916+1
	.word sub_80E9000+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E9000:
	push {lr}
	ldr r1, off_80E9010 // =off_80E9014 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E9010: .word off_80E9014
off_80E9014: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E9024+1
	.word sub_800BC88+1
.endfunc // sub_80E9000

.func
.thumb_func
sub_80E9024:
	push {lr}
	ldr r1, off_80E9034 // =off_80E9038 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E9034: .word off_80E9038
off_80E9038: .word sub_80E9048+1
	.word loc_80E9074+1
	.word sub_80E90B0+1
	.word sub_80E90CE+1
.endfunc // sub_80E9024

.func
.thumb_func
sub_80E9048:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E9066
	ldrb r0, [r5,#4]
	cmp r0, #2
	beq loc_80E906E
	ldr r0, [r5,#0x4c]
	mov r1, #1
	bl sub_80E1332
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E9066:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E9072
loc_80E906E:
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E9072:
	pop {pc}
.endfunc // sub_80E9048

loc_80E9074:
	push {r4,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E9092
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80E90A0 // =off_80E90A4 
	ldr r0, [r1,r0]
	ldr r4, [r5,#4]
	mov r7, #5
	add r7, r7, r5
	mov lr, pc
	bx r0
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E9092:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80E909C
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80E909C:
	pop {r4,r7,pc}
	.byte 0, 0
off_80E90A0: .word off_80E90A4
off_80E90A4: .word sub_80C34B8+1
	.word sub_80C3710+1
	.byte 0x47 
	.byte 0x39 
	.byte 0xC
	.byte  8
.func
.thumb_func
sub_80E90B0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E90C0
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E90C0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E90CC
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80E90CC:
	pop {pc}
.endfunc // sub_80E90B0

.func
.thumb_func
sub_80E90CE:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E90EC
	ldrb r0, [r5,#4]
	cmp r0, #2
	beq loc_80E90E4
	ldr r0, [r5,#0x4c]
	mov r1, #0
	bl sub_80E1332
loc_80E90E4:
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E90EC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E90FC
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E90FC:
	pop {pc}
.endfunc // sub_80E90CE

.func
.thumb_func
sub_80E90FE:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x79 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E911E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E911E:
	pop {pc}
.endfunc // sub_80E90FE

loc_80E9120:
	push {lr}
	ldr r1, off_80E9130 // =off_80E9134 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E9130: .word off_80E9134
off_80E9134: .word sub_800B916+1
	.word sub_80E9140+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E9140:
	push {lr}
	ldr r1, off_80E9150 // =off_80E9154 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E9150: .word off_80E9154
off_80E9154: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E9164+1
	.word sub_800BC88+1
.endfunc // sub_80E9140

.func
.thumb_func
sub_80E9164:
	push {r4-r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E91A8
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80E91E0 // =0xf800010 
	and r0, r1
	bne loc_80E91AE
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	add r2, r5, #0
	mov r3, #0x64 
	add r7, r2, r3
	ldrb r2, [r5,#0xe]
	mov r4, #0x60 
	ldr r4, [r5,r4]
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	mov r3, #0
	bl sub_80C17F4
	mov r0, #4
	strb r0, [r5,#0xb]
	b locret_80E91B6
loc_80E91A8:
	ldr r0, [r5,#0x64]
	tst r0, r0
	bne locret_80E91B6
loc_80E91AE:
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E91B6:
	pop {r4-r7,pc}
.endfunc // sub_80E9164

.func
.thumb_func
sub_80E91B8:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x7c 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E91DE
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
	mov r1, #0x60 
	ldrb r2, [r0,#4]
	strb r2, [r0,r1]
locret_80E91DE:
	pop {pc}
dword_80E91E0: .word 0xF800010
.endfunc // sub_80E91B8

loc_80E91E4:
	push {lr}
	ldr r1, off_80E91F4 // =off_80E91F8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E91F4: .word off_80E91F8
off_80E91F8: .word sub_800B916+1
	.word sub_80E9204+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E9204:
	push {lr}
	ldr r1, off_80E9214 // =off_80E9218 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E9214: .word off_80E9218
off_80E9218: .word sub_800B94C+1
	.word sub_800BDB2+1
	.word sub_800BA8A+1
	.word sub_80E922C+1
	.word sub_800BC88+1
.endfunc // sub_80E9204

.func
.thumb_func
sub_80E922C:
	push {r4,r6,r7,lr}
	ldr r1, off_80E923C // =off_80E9240 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80E923C: .word off_80E9240
off_80E9240: .word sub_80E924C+1
	.word loc_80E9272+1
	.word sub_80E92C4+1
.endfunc // sub_80E922C

.func
.thumb_func
sub_80E924C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E9264
	ldr r0, [r5,#0x4c]
	mov r1, #1
	bl sub_80E1332
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E9264:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E9270
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E9270:
	pop {pc}
.endfunc // sub_80E924C

loc_80E9272:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E92A0
	ldr r6, [r5,#0x2c]
	ldrh r3, [r5,#0x32]
	add r6, r6, r3
	ldrb r2, [r5,#0xe]
	ldrh r3, [r5,#0x16]
	ldr r4, [r5,#4]
	mov r7, #5
	add r7, r7, r5
	ldrb r0, [r5,#6]
	ldr r1, off_80E92AC // =off_80E92B0 
	ldr r0, [r1,r0]
	ldrh r1, [r5,#0x12]
	push {r5}
	ldr r5, [r5,#0x4c]
	mov lr, pc
	bx r0
	pop {r5}
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E92A0:
	ldrb r0, [r5,#5]
	tst r0, r0
	bne locret_80E92AA
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80E92AA:
	pop {r4,r6,r7,pc}
off_80E92AC: .word off_80E92B0
off_80E92B0: .word sub_80C2F96+1
	.word sub_80C2F96+1
	.word sub_80C2F96+1
	.word sub_80C2F96+1
	.word sub_80C2F96+1
.func
.thumb_func
sub_80E92C4:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E92DC
	ldr r0, [r5,#0x4c]
	mov r1, #0
	bl sub_80E1332
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80E92DC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E92EC
	mov r0, #0x10
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E92EC:
	pop {pc}
.endfunc // sub_80E92C4

.func
.thumb_func
sub_80E92EE:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x7e 
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E930E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E930E:
	pop {pc}
.endfunc // sub_80E92EE

loc_80E9310:
	push {lr}
	ldr r1, off_80E9320 // =off_80E9324 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E9320: .word off_80E9324
off_80E9324: .word sub_800B916+1
	.word sub_80E9330+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E9330:
	push {lr}
	ldr r1, off_80E9340 // =off_80E9344 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E9340: .word off_80E9344
off_80E9344: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word sub_80E9354+1
	.word sub_800BC88+1
.endfunc // sub_80E9330

.func
.thumb_func
sub_80E9354:
	push {r4,r6,r7,lr}
	ldr r1, off_80E9364 // =off_80E9368 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80E9364: .word off_80E9368
off_80E9368: .word sub_80E9378+1
	.word sub_80E93A0+1
	.word sub_80E93F2+1
	.word sub_80E9412+1
.endfunc // sub_80E9354

.func
.thumb_func
sub_80E9378:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E9392
	mov r0, #4
	strb r0, [r5,#0xb]
	ldr r0, [r5,#0x4c]
	mov r1, #1
	bl sub_80E1332
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80E939E
loc_80E9392:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E939E
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80E939E:
	pop {pc}
.endfunc // sub_80E9378

.func
.thumb_func
sub_80E93A0:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E93E0
	mov r0, #4
	strb r0, [r5,#0xb]
	push {r5}
	ldrb r2, [r5,#0xe]
	ldrh r6, [r5,#0x32]
	ldrh r0, [r5,#0x2e]
	lsl r0, r0, #0x10
	orr r6, r0
	mov r7, #4
	add r7, r7, r5
	ldr r5, [r5,#0x4c]
	mov r4, #0
	bl sub_80C1EAC
	pop {r5}
	push {r5}
	ldrb r2, [r5,#0xe]
	ldrh r6, [r5,#0x32]
	ldrh r0, [r5,#0x2e]
	lsl r0, r0, #0x10
	orr r6, r0
	mov r7, #5
	add r7, r7, r5
	ldr r5, [r5,#0x4c]
	mov r4, #0
	bl sub_80C24D2
	pop {r5}
loc_80E93E0:
	ldrb r0, [r5,#4]
	cmp r0, #0
	bne locret_80E93F0
	ldrb r0, [r5,#5]
	cmp r0, #0
	bne locret_80E93F0
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80E93F0:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E93A0

.func
.thumb_func
sub_80E93F2:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E9404
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80E9410
loc_80E9404:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E9410
	mov r0, #0xc
	strh r0, [r5,#0xa]
locret_80E9410:
	pop {pc}
.endfunc // sub_80E93F2

.func
.thumb_func
sub_80E9412:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E942C
	mov r0, #4
	strb r0, [r5,#0xb]
	ldr r0, [r5,#0x4c]
	mov r1, #0
	bl sub_80E1332
	mov r0, #0x1e
	strh r0, [r5,#0x20]
	b locret_80E943C
loc_80E942C:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E943C
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E943C:
	pop {pc}
.endfunc // sub_80E9412

.func
.thumb_func
sub_80E943E:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x7f
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E945E
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E945E:
	pop {pc}
.endfunc // sub_80E943E

loc_80E9460:
	push {lr}
	ldr r1, off_80E9470 // =off_80E9474 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E9470: .word off_80E9474
off_80E9474: .word sub_80E9480+1
	.word sub_80E9498+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80E9480:
	push {lr}
	mov r0, #6
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80E948C
	mov r0, #1
loc_80E948C:
	strb r0, [r5,#0x12]
	mov r0, #0
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80E9480

.func
.thumb_func
sub_80E9498:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E94AE
	bl battle_isTimeStop
	bne locret_80E94B2
	bl sub_80E94B4
	b locret_80E94B2
loc_80E94AE:
	mov r0, #8
	str r0, [r5,#8]
locret_80E94B2:
	pop {pc}
.endfunc // sub_80E9498

.func
.thumb_func
sub_80E94B4:
	push {lr}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E94DA
	bl sub_80E94F8
	tst r0, r0
	beq loc_80E94D6
	ldrb r0, [r5,#0x12]
	cmp r0, #6
	bgt loc_80E94D6
	cmp r0, #1
	blt loc_80E94D6
	mov r0, #0x32 
	strh r0, [r5,#0x20]
	b locret_80E94DA
loc_80E94D6:
	mov r0, #8
	str r0, [r5,#8]
locret_80E94DA:
	pop {pc}
.endfunc // sub_80E94B4

	push {lr}
	push {r0-r2,r5}
	mov r0, #0x80
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E94F6
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E94F6:
	pop {pc}
.func
.thumb_func
sub_80E94F8:
	push {r4,r6,r7,lr}
	mov r6, #1
	mov r7, #0
loc_80E94FE:
	mov r4, #1
loc_80E9500:
	bl sub_800E2C0
	neg r0, r0
	mul r0, r6
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	add r1, r4, #0
	cmp r0, #1
	blt loc_80E9552
	cmp r0, #6
	bgt loc_80E9552
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80E9558 // =byte_80E955C 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E9540
	push {r0,r4,r6}
	ldrb r2, [r5,#0xe]
	mov r4, #0xa
	mul r4, r7
	ldr r6, [r5,#0x2c]
	bl sub_80DF4D4
	pop {r0,r4,r6}
	add r7, #1
loc_80E9540:
	add r4, #1
	cmp r4, #3
	ble loc_80E9500
	tst r7, r7
	beq loc_80E954E
	strb r0, [r5,#0x12]
	b loc_80E9552
loc_80E954E:
	add r6, #1
	b loc_80E94FE
loc_80E9552:
	add r0, r7, #0
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80E9558: .word byte_80E955C
byte_80E955C: .byte 0x10, 0x0, 0x0, 0x0, 0x20, 0x0, 0x80, 0x3, 0x30, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x80, 0x3, 0xF7, 0x46
.endfunc // sub_80E94F8

.func
.thumb_func
nullsub_12:
	mov pc, lr
.endfunc // nullsub_12

loc_80E9570:
	push {lr}
	ldr r1, off_80E9580 // =off_80E9584 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E9580: .word off_80E9584
off_80E9584: .word sub_800B916+1
	.word sub_80E9590+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E9590:
	push {lr}
	ldr r1, off_80E95A0 // =off_80E95A4 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E95A0: .word off_80E95A4
off_80E95A4: .word sub_800B94C+1
	.word sub_800B9B0+1
	.word loc_80E95B4+1
	.word sub_800BC88+1
.endfunc // sub_80E9590

loc_80E95B4:
	push {lr}
	ldr r1, off_80E95C4 // =off_80E95C8 
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80E95C4: .word off_80E95C8
off_80E95C8: .word sub_80E95D8+1
	.word sub_80E96C6+1
	.word sub_80E9714+1
	.word sub_80E9784+1
.func
.thumb_func
sub_80E95D8:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80E96A8
	mov r0, #1
	strb r0, [r5,#0xa]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	push {r1-r3}
	ldrh r0, [r4,#0x28]
	mov r1, #0
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r4, r1, #0x10
	pop {r1-r3}
	add r1, r1, r0
	add r3, r3, r4
	mov r4, #0x5a 
	bl sub_80E05F6
	mov r0, #0x1a
	add r0, #0xff
	bl sound_play // () -> void
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_801265A
	cmp r0, #5
	bge loc_80E9634
	mov r4, #5
	sub r4, r4, r0
	mov r1, #1
	bl sub_8013774
	add r2, r0, r4
	mov r1, #1
	bl sub_8013754
loc_80E9634:
	mov r1, #2
	mov r2, #4
	bl sub_8013754
	mov r1, #3
	mov r2, #4
	bl sub_8013754
	mov r1, #0xa
	mov r2, #8
	bl sub_8013754
	mov r1, #0x63 
	push {r1}
	bl sub_8013774
	cmp r0, #0
	pop {r1}
	beq loc_80E966A
	mov r2, r10
	ldr r2, [r2,#0x18]
	ldrb r2, [r2,#7]
	cmp r2, r0
	blt loc_80E966A
	add r2, #1
	bl sub_8013754
loc_80E966A:
	mov r1, #7
	bl sub_8013774
	cmp r0, #0xff
	bne loc_80E9686
	mov r2, #0x3b 
	mov r1, #7
	bl sub_8013754
	ldrb r0, [r5,#0x16]
	bl sub_8013682 // (int idx) -> void*
	mov r1, #0x3b 
	strb r1, [r0,#7]
loc_80E9686:
	ldr r0, dword_80E97E0 // =0x40030 
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x16]
	bl sub_8013682 // (int idx) -> void*
	mov r1, #1
	strb r1, [r0,#0x1b]
	strb r1, [r0,#0x1c]
	strb r1, [r0,#0x1d]
	bl sub_80107C0
	mov r1, #0x10
	mov r2, #2
	bl sub_801A082
	pop {r5}
loc_80E96A8:
	ldrh r0, [r5,#0x20]
	cmp r0, #0x1c
	bne loc_80E96B4
	mov r0, #0x77 
	bl sound_play // () -> void
loc_80E96B4:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E96C4
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E96C4:
	pop {r4,pc}
.endfunc // sub_80E95D8

.func
.thumb_func
sub_80E96C6:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80E9702
	mov r0, #1
	strb r0, [r5,#0xa]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	ldr r0, [r5,#0x4c]
	ldr r1, [r0,#0x34]
	ldr r2, [r0,#0x38]
	mov r3, #0
	mov r4, #0x5b 
	bl sub_80E05F6
	mov r0, #0x44 
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r2, [r5,#5]
	mov r1, #5
	bl sub_8013754
	ldrb r0, [r5,#0x16]
	bl sub_8013682 // (int idx) -> void*
	ldrb r1, [r5,#5]
	strb r1, [r0,#5]
	bl sub_80E97BE
loc_80E9702:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E9712
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E9712:
	pop {r4,pc}
.endfunc // sub_80E96C6

.func
.thumb_func
sub_80E9714:
	push {r4,lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_80E9766
	mov r0, #1
	strb r0, [r5,#0xa]
	mov r0, #0x3c 
	strh r0, [r5,#0x20]
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	push {r1-r3}
	ldrh r0, [r4,#0x28]
	mov r1, #0
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r0, r0, #0x10
	lsl r4, r0, #0x10
	pop {r1-r3}
	add r1, r1, r0
	add r3, r3, r4
	mov r4, #0x5c 
	ldrb r0, [r5,#6]
	lsl r0, r0, #0x10
	orr r4, r0
	bl sub_80E05F6
	ldrb r2, [r5,#5]
	mov r1, #5
	bl sub_8013754
	ldrb r0, [r5,#0x16]
	bl sub_8013682 // (int idx) -> void*
	ldrb r1, [r5,#5]
	strb r1, [r0,#5]
	bl sub_80E97BE
loc_80E9766:
	ldrh r0, [r5,#0x20]
	cmp r0, #0x28 
	bne loc_80E9772
	mov r0, #0x77 
	bl sound_play // () -> void
loc_80E9772:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80E9782
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
locret_80E9782:
	pop {r4,pc}
.endfunc // sub_80E9714

.func
.thumb_func
sub_80E9784:
	push {r4,lr}
	push {r5}
	ldr r5, [r5,#0x4c]
	ldr r0, dword_80E97E4 // =0x20000000 
	bl sub_800FFE4
	pop {r5}
	mov r0, #0xc
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	pop {r4,pc}
.endfunc // sub_80E9784

.func
.thumb_func
sub_80E979C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x84
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E97BC
	strb r1, [r0,#0x12]
	strb r2, [r0,#0x13]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E97BC:
	pop {pc}
.endfunc // sub_80E979C

.func
.thumb_func
sub_80E97BE:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x58]
	strb r1, [r0,#7]
	ldrb r0, [r0,#6]
	mov r2, #0
	cmp r0, #4
	beq loc_80E97D8
	cmp r0, #3
	beq loc_80E97D8
	mov r2, #0x2b 
	cmp r0, #0x2c 
	bne locret_80E97DE
loc_80E97D8:
	ldr r0, [r5,#0x4c]
	ldr r0, [r0,#0x58]
	strb r2, [r0,#6]
locret_80E97DE:
	pop {pc}
dword_80E97E0: .word 0x40030
dword_80E97E4: .word 0x20000000
	.word 0
	.byte 0, 0, 0, 0
.endfunc // sub_80E97BE

loc_80E97F0:
	push {lr}
	ldr r1, off_80E9800 // =off_80E9804 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E9800: .word off_80E9804
off_80E9804: .word sub_80E9810+1
	.word sub_80E98DE+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80E9810:
	push {lr}
	bl sub_800E2AC
	ldrb r0, [r5,#4]
	lsl r0, r0, #1
	ldr r3, dword_80E9990 // =dword_80E98C0 
	add r3, r3, r0
	ldrb r1, [r3]
	ldrb r2, [r3,#1]
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
	bl sub_8002F90 // () -> void
	ldrb r0, [r5,#6]
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	ldrb r0, [r5,#7]
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldrb r0, [r5,#4]
	cmp r0, #2
	bne loc_80E985C
	ldr r0, [r5,#0x68]
	bl sub_8002FA6
loc_80E985C:
	ldrb r0, [r5,#5]
	bl sub_80103BC
	str r0, [r5,#0x4c]
	ldr r1, [r0,#0x34]
	str r1, [r5,#0x60]
	ldr r1, [r0,#0x38]
	str r1, [r5,#0x64]
	ldrb r1, [r0,#0x17]
	ldrb r0, [r0,#0x16]
	bl object_getFlipDirection // (int a1, int a2) -> int
	mov r1, #0x14
	mul r0, r1
	lsl r0, r0, #0x10
	ldr r1, [r5,#0x60]
	add r1, r1, r0
	str r1, [r5,#0x60]
	ldr r0, [r5,#0x60]
	ldr r1, [r5,#0x34]
	sub r0, r0, r1
	mov r1, #9
	strh r1, [r5,#0x20]
	svc 6
	str r0, [r5,#0x40]
	ldr r0, [r5,#0x64]
	ldr r1, [r5,#0x38]
	sub r0, r0, r1
	mov r1, #9
	svc 6
	str r0, [r5,#0x44]
	mov r0, #0x10
	lsl r0, r0, #0x10
	ldr r1, [r5,#0x3c]
	sub r0, r0, r1
	mov r1, #9
	svc 6
	str r0, [r5,#0x48]
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
	.word 0, 0
	.byte 0, 0
dword_80E98C0: .word 0x240C0904, 0x300C230C, 0x8100010, 0xA041804, 0x350C340C
	.word 0x100D04, 0x504410C
	.byte 0xC
	.byte 0x41 
.endfunc // sub_80E9810

.func
.thumb_func
sub_80E98DE:
	push {r4,lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E98FC
	bl object_isCurrentPanelValid
	tst r0, r0
	beq loc_80E98FC
	ldr r1, off_80E9914 // =off_80E9918 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,pc}
loc_80E98FC:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x12
	bl sub_80E05F6
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,pc}
off_80E9914: .word off_80E9918
off_80E9918: .word sub_80E991C+1
.endfunc // sub_80E98DE

.func
.thumb_func
sub_80E991C:
	push {r4,lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	bl sub_800E2AC
	ldr r0, [r5,#0x4c]
	ldrb r0, [r0,#9]
	cmp r0, #0x58 
	bne loc_80E9968
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80E9968
	ldr r4, [r5,#0x4c]
	ldr r4, [r4,#0x58]
	ldrb r0, [r4,#0xd]
	cmp r0, #8
	bge loc_80E9968
	add r1, r0, #1
	strb r1, [r4,#0xd]
	add r0, #0x6c 
	ldrb r1, [r5,#4]
	ldrb r2, [r5,#0x10]
	lsl r2, r2, #4
	orr r1, r2
	strb r1, [r4,r0]
	mov r0, #8
	str r0, [r5,#8]
loc_80E9968:
	bl sprite_update
	pop {r4,pc}
.endfunc // sub_80E991C

.func
.thumb_func
sub_80E996E:
	push {lr}
	push {r0,r5}
	mov r0, #0x87
	bl object_spawnType4
	add r0, r5, #0
	pop {r1,r5}
	beq locret_80E998C
	str r1, [r0,#0x68]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #0x14
	bic r1, r2
	strb r1, [r0]
locret_80E998C:
	pop {pc}
	.byte 0, 0
dword_80E9990: .word 0x80E98C0
.endfunc // sub_80E996E

loc_80E9994:
	push {lr}
	ldr r1, off_80E99A4 // =off_80E99A8 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E99A4: .word off_80E99A8
off_80E99A8: .word sub_80E99B4+1
	.word sub_80E99C0+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80E99B4:
	push {lr}
	mov r0, #0x28 
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80E99B4

.func
.thumb_func
sub_80E99C0:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E99D6
	bl battle_isTimeStop
	bne locret_80E99DA
	bl sub_80E99DC
	b locret_80E99DA
loc_80E99D6:
	mov r0, #8
	str r0, [r5,#8]
locret_80E99DA:
	pop {pc}
.endfunc // sub_80E99C0

.func
.thumb_func
sub_80E99DC:
	push {lr}
	push {r5}
	ldr r5, [r5,#0x4c]
	bl object_getFlag // () -> int
	pop {r5}
	ldr r1, dword_80E9ADC // =0xa000 
	tst r0, r1
	bne locret_80E9A04
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80E9A04
	bl sub_80E9A38
	ldrb r0, [r5,#4]
	lsl r0, r0, #2
	ldr r1, off_80E9A08 // =off_80E9A0C 
	ldr r0, [r1,r0]
	strh r0, [r5,#0x20]
locret_80E9A04:
	pop {pc}
	.balign 4, 0x00
off_80E9A08: .word off_80E9A0C
off_80E9A0C: .word 0xB4
	.word 0xA0
	.word 0x8C
	.word 0x78
.endfunc // sub_80E99DC

.func
.thumb_func
sub_80E9A1C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x88
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E9A36
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E9A36:
	pop {pc}
.endfunc // sub_80E9A1C

.func
.thumb_func
sub_80E9A38:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	mov r0, #0
	str r0, [sp]
	ldr r0, dword_80E9AE0 // =0x102 
	str r0, [sp,#0xc]
	add r0, sp, #0xc
	mov r1, #3
	add r2, r1, #0
	bl sub_8000C72
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80E9AC8 // =dword_80E9ACC 
	add r1, r1, r0
	ldr r0, [r1]
	ldr r1, [r1,#4]
	str r0, [sp,#4]
	str r1, [sp,#8]
	mov r4, #1
loc_80E9A60:
	ldr r0, [sp]
	add r1, r4, #0
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0x10
	bl sub_800CF42
	add r6, r0, #0
	tst r6, r6
	bne loc_80E9A8E
	ldr r0, [sp]
	add r1, r4, #0
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80E9AA0
	mov r0, #0
	str r0, [sp]
	b loc_80E9ABE
loc_80E9A8E:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80E9AA0:
	str r0, [sp]
	sub r2, r4, #1
	add r3, sp, #0xc
	ldrb r3, [r3,r2]
	lsl r3, r3, #8
	mov r2, #0x14
	mul r3, r2
	push {r4}
	ldrb r4, [r5,#4]
	orr r4, r3
	ldr r6, [r5,#0x2c]
	ldrb r2, [r5,#0xe]
	bl sub_80D1182
	pop {r4}
loc_80E9ABE:
	add r4, #1
	cmp r4, #3
	ble loc_80E9A60
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
off_80E9AC8: .word dword_80E9ACC
dword_80E9ACC: .word 0x0
	.word 0xF8800A0, 0x20, 0xF880080
dword_80E9ADC: .word 0xA000
dword_80E9AE0: .word 0x102
	.word 0, 0
	.byte 0, 0, 0, 0
.endfunc // sub_80E9A38

loc_80E9AF0:
	push {lr}
	ldr r1, off_80E9B04 // =off_80E9B08 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BC24
	pop {pc}
	.balign 4, 0x00
off_80E9B04: .word off_80E9B08
off_80E9B08: .word sub_80E9B14+1
	.word sub_80E9B56+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80E9B14:
	push {r4,lr}
	mov r1, #0x14
	mov r2, #0x1c
	mov r0, #0x80
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80E9B14

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl sub_80E9C06
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80E9B56
	pop {r4,pc}
.func
.thumb_func
sub_80E9B56:
	push {r4,r6,r7,lr}
	ldr r4, [r5,#0x4c]
	ldrh r0, [r4,#0x28]
	mov r1, #0x21 
	ldrb r2, [r4,#0x16]
	ldrb r3, [r4,#0x17]
	bl sub_8018810
	lsl r7, r0, #0x10
	lsl r6, r1, #0x10
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	add r1, r1, r7
	add r3, r3, r6
	ldr r6, dword_80E9C80 // =0x60000 
	add r2, r2, r6
	add r3, r3, r6
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldr r0, [r5,#0x4c]
	bl sub_8002F3E
	bl loc_8002F02
	ldr r0, [r5,#0x4c]
	bl sprite_getMosaicScalingParameters
	bl sprite_setMosaicScalingParameters
	bl sub_800E2AC
	bl object_isCurrentPanelValid
	bne loc_80E9BA6
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80E9BA6:
	mov r1, #2
	mvn r1, r1
	ldrb r0, [r5]
	and r0, r1
	ldrb r1, [r4]
	mov r2, #2
	and r1, r2
	orr r0, r1
	strb r0, [r5]
	ldr r0, [r5,#0x60]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80E9BD0
	push {r5}
	ldr r5, [r5,#0x4c]
	bl object_getFlag // () -> int
	pop {r5}
	ldr r1, dword_80E9C84 // =0x10000 
	tst r0, r1
	bne locret_80E9BDA
loc_80E9BD0:
	ldr r0, [r5,#0x60]
	mov r1, #0
	str r1, [r0]
	mov r0, #8
	str r0, [r5,#8]
locret_80E9BDA:
	pop {r4,r6,r7,pc}
.endfunc // sub_80E9B56

.func
.thumb_func
sub_80E9BDC:
	push {lr}
	push {r5}
	mov r0, #0x89
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80E9BFE
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x60]
	str r0, [r7]
	ldrb r1, [r0]
	mov r2, #0x14
	orr r1, r2
	strb r1, [r0]
locret_80E9BFE:
	pop {pc}
.endfunc // sub_80E9BDC

	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
.func
.thumb_func
sub_80E9C06:
	push {lr}
	ldr r0, [r5,#0x4c]
	ldrh r0, [r0,#0x28]
	bl sub_80182B4
	ldrb r1, [r0,#2]
	ldrb r0, [r0,#1]
	lsl r0, r0, #2
	ldr r2, off_80E9C20 // =off_80E9C24 
	ldr r2, [r2,r0]
	ldrb r0, [r2,r1]
	pop {pc}
	.byte 0, 0
off_80E9C20: .word off_80E9C24
off_80E9C24: .word dword_80E9C30
	.word 0x80E9C4E, 0x80E9C4E
dword_80E9C30: .word 0x0, 0x0, 0x0
	.word 0x1000000, 0x102, 0x1010000, 0x20000, 0x2010102, 0x1010101
	.word 0x2010101, 0x2020102, 0x2020202, 0x2020102, 0x1010102, 0x1010101
	.word 0x1010101, 0x1010101, 0x1010101, 0x1010101, 0x10101
dword_80E9C80: .word 0x60000
dword_80E9C84: .word 0x10000
.endfunc // sub_80E9C06

loc_80E9C88:
	push {lr}
	ldr r1, off_80E9C98 // =off_80E9C9C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80E9C98: .word off_80E9C9C
off_80E9C9C: .word sub_80E9CA8+1
	.word sub_80E9CBA+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80E9CA8:
	push {lr}
	mov r0, #0
	strb r0, [r5,#0x14]
	strb r0, [r5,#0x15]
	ldrb r0, [r5,#4]
	strh r0, [r5,#0x20]
	mov r0, #4
	str r0, [r5,#8]
	pop {pc}
.endfunc // sub_80E9CA8

.func
.thumb_func
sub_80E9CBA:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80E9CD0
	bl battle_isTimeStop
	bne locret_80E9CD4
	bl sub_80E9CD6
	b locret_80E9CD4
loc_80E9CD0:
	mov r0, #8
	str r0, [r5,#8]
locret_80E9CD4:
	pop {pc}
.endfunc // sub_80E9CBA

.func
.thumb_func
sub_80E9CD6:
	push {lr}
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80E9CF0
	mov r1, #4
	strb r1, [r5,#0xa]
	bl sub_80E9D2A
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	ldrb r0, [r5,#5]
	strh r0, [r5,#0x22]
	b locret_80E9D0A
loc_80E9CF0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	ble loc_80E9D06
	ldrh r0, [r5,#0x22]
	sub r0, #1
	strh r0, [r5,#0x22]
	bgt locret_80E9D0A
	mov r0, #0
	strb r0, [r5,#0xa]
	b locret_80E9D0A
loc_80E9D06:
	mov r0, #8
	str r0, [r5,#8]
locret_80E9D0A:
	pop {pc}
.endfunc // sub_80E9CD6

.func
.thumb_func
sub_80E9D0C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x8a
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E9D28
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x60]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
locret_80E9D28:
	pop {pc}
.endfunc // sub_80E9D0C

.func
.thumb_func
sub_80E9D2A:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80E9DDC // =dword_80E9DE0 
	add r1, r1, r0
	ldr r0, [r1]
	ldr r1, [r1,#4]
	str r0, [sp]
	str r1, [sp,#4]
	ldr r1, [r5,#0x60]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80E9D2A

	tst r0, r0
	pop {r0,r1}
	beq loc_80E9D60
	ldrb r2, [r5,#0x14]
	ldrb r3, [r5,#0x15]
	cmp r0, r2
	bne loc_80E9DB2
	cmp r1, r3
	bne loc_80E9DB2
loc_80E9D60:
	mov r7, #0
	mov r4, #1
loc_80E9D64:
	mov r6, #1
loc_80E9D66:
	add r0, r4, #0
	add r1, r6, #0
	ldrb r2, [r5,#0x14]
	ldrb r3, [r5,#0x15]
	cmp r0, r2
	bne loc_80E9D76
	cmp r1, r3
	beq loc_80E9D90
loc_80E9D76:
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80E9D90
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #8
	strb r0, [r1,r7]
	add r7, #1
loc_80E9D90:
	add r6, #1
	cmp r6, #3
	ble loc_80E9D66
	add r4, #1
	cmp r4, #6
	ble loc_80E9D64
	tst r7, r7
	beq loc_80E9DD4
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80E9DB2:
	ldrb r2, [r5,#0xe]
	ldrb r4, [r5,#6]
	mov r3, #0
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x10
	orr r4, r3
	ldrb r3, [r5,#7]
	lsl r3, r3, #0x18
	orr r4, r3
	ldr r6, [r5,#0x2c]
	push {r0,r1}
	bl sub_80D54F0
	pop {r0,r1}
	b loc_80E9DD6
loc_80E9DD4:
	mov r0, #0
loc_80E9DD6:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80E9DDC: .word dword_80E9DE0
dword_80E9DE0: .word 0x10020, 0x0
	.word 0x10000, 0x20
loc_80E9DF0:
	push {lr}
	ldr r1, off_80E9E00 // =off_80E9E04 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E9E00: .word off_80E9E04
off_80E9E04: .word sub_800B916+1
	.word sub_80E9E10+1
	.word object_timefreezeEnd+1
.func
.thumb_func
sub_80E9E10:
	push {lr}
	ldr r1, off_80E9E20 // =off_80E9E24 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80E9E20: .word off_80E9E24
off_80E9E24: .word sub_80E9E2C+1
	.word sub_80E9EA0+1
.endfunc // sub_80E9E10

.func
.thumb_func
sub_80E9E2C:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E9E6E
	mov r0, #4
	strb r0, [r5,#0xb]
	ldr r1, [r5,#0x60]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	ldrb r2, [r5,#4]
	ldrb r3, [r5,#5]
	cmp r0, r2
	bne loc_80E9E9A
	cmp r1, r3
	bne loc_80E9E9A
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	bl sub_801BBF4
	pop {r5}
	mov r0, #3
	mov r1, #0x1e
	bl sub_80302A8
	mov r0, #0xab
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x2e 
	strh r0, [r5,#0x20]
	b locret_80E9E9E
loc_80E9E6E:
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_801BBF4
	pop {r5}
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	cmp r0, #0x15
	beq loc_80E9E90
	cmp r0, #0
	bgt locret_80E9E9E
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #0
	strh r0, [r5,#0xa]
	b locret_80E9E9E
loc_80E9E90:
	mov r0, #0x15
	add r0, #0xff
	bl sound_play // () -> void
	b locret_80E9E9E
loc_80E9E9A:
	mov r0, #8
	str r0, [r5,#8]
locret_80E9E9E:
	pop {pc}
.endfunc // sub_80E9E2C

.func
.thumb_func
sub_80E9EA0:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80E9EC6
	mov r0, #4
	strb r0, [r5,#0xb]
	mov r0, #0
	strh r0, [r5,#0x22]
	str r0, [r5,#0x64]
	push {r5}
	ldr r5, [r5,#0x4c]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	bl sub_801BBF4
	pop {r5}
	ldr r0, [r5,#0x68]
	strh r0, [r5,#0x20]
	b locret_80E9EF8
loc_80E9EC6:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	blt loc_80E9EF0
	push {r5}
	ldr r5, [r5,#0x4c]
	bl sub_801BBF4
	pop {r5}
	bl sub_80E9F1C
	ldrh r0, [r5,#0x20]
	mov r1, #7
	and r0, r1
	tst r0, r0
	bne locret_80E9EF8
	bl sub_80E9F9C
	bl sub_80E9FBC
	b locret_80E9EF8
loc_80E9EF0:
	bl sub_80E9F64
	mov r0, #8
	str r0, [r5,#8]
locret_80E9EF8:
	pop {pc}
.endfunc // sub_80E9EA0

.func
.thumb_func
sub_80E9EFA:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x8b
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80E9F1A
	str r1, [r0,#0x60]
	str r2, [r0,#0x68]
	strb r3, [r0,#0xe]
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r7, [r0,#0x30]
locret_80E9F1A:
	pop {pc}
.endfunc // sub_80E9EFA

.func
.thumb_func
sub_80E9F1C:
	push {lr}
	ldr r1, [r5,#0x60]
	ldr r0, [r1,#0x58]
	ldrh r0, [r0,#0x24]
	mov r1, #0x40 
	tst r0, r1
	bne loc_80E9F3C
	mov r1, #0x80
	tst r0, r1
	bne loc_80E9F3C
	mov r1, #0x20 
	tst r0, r1
	bne loc_80E9F3C
	mov r1, #0x10
	tst r0, r1
	beq loc_80E9F42
loc_80E9F3C:
	ldr r0, [r5,#0x64]
	add r0, #1
	str r0, [r5,#0x64]
loc_80E9F42:
	ldrh r0, [r5,#0x22]
	add r0, #1
	strh r0, [r5,#0x22]
	cmp r0, #0x1e
	blt locret_80E9F62
	ldr r0, [r5,#0x64]
	cmp r0, #3
	blt loc_80E9F5C
	ldrh r0, [r5,#0x20]
	cmp r0, #0x14
	ble locret_80E9F62
	sub r0, #0x14
	strh r0, [r5,#0x20]
loc_80E9F5C:
	mov r0, #0
	strh r0, [r5,#0x22]
	str r0, [r5,#0x64]
locret_80E9F62:
	pop {pc}
.endfunc // sub_80E9F1C

.func
.thumb_func
sub_80E9F64:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#6]
	lsl r0, r0, #2
	ldr r1, off_80E9F88 // =dword_80E9F8C 
	ldr r7, [r1,r0]
	ldrb r0, [r5,#4]
	ldrb r1, [r5,#5]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80E9F84 // =0xb05ff01 
	ldrh r6, [r5,#0x2e]
	lsl r6, r6, #0x10
	bl sub_80C53A6
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80E9F84: .word 0xB05FF01
off_80E9F88: .word dword_80E9F8C
dword_80E9F8C: .word 0x1, 0x1001, 0x2001, 0x3001
.endfunc // sub_80E9F64

.func
.thumb_func
sub_80E9F9C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#4]
	ldrb r1, [r5,#5]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_80E9FB4 // =0xb05ff01 
	ldrh r6, [r5,#0x2c]
	ldr r7, dword_80E9FB8 // =0x0 
	bl sub_80C53A6
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80E9FB4: .word 0xB05FF01
dword_80E9FB8: .word 0x0
.endfunc // sub_80E9F9C

.func
.thumb_func
sub_80E9FBC:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#4]
	ldrb r1, [r5,#5]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r6, r0, #0
	add r7, r1, #0
	bl sub_8001532
	add r2, r0, #0
	mov r1, #0x1f
	and r0, r1
	lsl r0, r0, #0x10
	lsr r2, r2, #1
	bcs loc_80E9FDC
	neg r0, r0
loc_80E9FDC:
	add r1, r6, r0
	add r2, r7, #0
	push {r1,r2}
	bl sub_8001532
	add r2, r0, #0
	mov r1, #0xf
	and r0, r1
	lsl r0, r0, #0x10
	lsr r2, r2, #1
	bcs loc_80E9FF4
	neg r0, r0
loc_80E9FF4:
	mov r3, #0x14
	lsl r3, r3, #0x10
	add r3, r3, r0
	pop {r1,r2}
	ldr r4, dword_80EA00C // =0x100000 
	add r2, r2, r4
	add r3, r3, r4
	mov r4, #0x21 
	bl sub_80E05F6
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80EA00C: .word 0x100000
.endfunc // sub_80E9FBC

loc_80EA010:
	push {lr}
	ldr r1, dword_80EA02C // = 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
	.byte 0x31 
	.byte 0xA0
	.byte 0xE
	.byte  8
	.byte 0x3D 
	.byte 0xA0
	.byte 0xE
	.byte  8
	.byte 0xB
	.byte 0xA1
	.byte 0xE
	.byte  8
dword_80EA02C: .word 0x80EA020
	push {lr}
	mov r0, #4
	str r0, [r5,#8]
	bl loc_80EA03C
	pop {pc}
loc_80EA03C:
	push {lr}
	ldr r1, off_80EA04C // =off_80EA050 
	ldrb r0, [r5,#0xa]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EA04C: .word off_80EA050
off_80EA050: .word sub_80EA05C+1
	.word sub_80EA0A0+1
	.word sub_80EA0EC+1
.func
.thumb_func
sub_80EA05C:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80EA092
	ldrb r4, [r5,#4]
	cmp r4, #0
	bne loc_80EA074
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	b loc_80EA07A
loc_80EA074:
	ldrb r1, [r5,#0x16]
	mov r0, #4
	sub r0, r0, r1
loc_80EA07A:
	mov r1, #4
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldrh r4, [r5,#4]
	lsl r4, r4, #8
	ldr r6, [r5,#0x2c]
	bl sub_80DE960
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80EA092:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80EA09E
	mov r0, #4
	strh r0, [r5,#0xa]
locret_80EA09E:
	pop {r4,r6,pc}
.endfunc // sub_80EA05C

.func
.thumb_func
sub_80EA0A0:
	push {r4,r6,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80EA0DE
	ldrb r4, [r5,#4]
	cmp r4, #0
	bne loc_80EA0BA
	bl object_getFlipDirection_800E2CA // () -> int
	add r0, r0, r0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	b loc_80EA0C4
loc_80EA0BA:
	ldrb r1, [r5,#0x16]
	mov r0, #3
	mul r1, r0
	mov r0, #5
	sub r0, r0, r1
loc_80EA0C4:
	mov r1, #0
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldrh r4, [r5,#4]
	lsl r4, r4, #8
	add r4, #1
	ldr r6, [r5,#0x2c]
	bl sub_80DE960
	mov r0, #0x14
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80EA0DE:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80EA0EA
	mov r0, #8
	strh r0, [r5,#0xa]
locret_80EA0EA:
	pop {r4,r6,pc}
.endfunc // sub_80EA0A0

.func
.thumb_func
sub_80EA0EC:
	push {lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80EA0FC
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80EA0FC:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt locret_80EA108
	mov r0, #8
	str r0, [r5,#8]
locret_80EA108:
	pop {pc}
.endfunc // sub_80EA0EC

	push {lr}
	ldrb r0, [r5,#4]
	cmp r0, #0
	ldr r0, [r5,#0x64]
	mov r1, #0
	strb r1, [r0]
	bl object_freeMemory
	pop {pc}
.func
.thumb_func
sub_80EA11C:
	push {lr}
	push {r0-r2,r5}
	mov r0, #0x8c
	bl object_spawnType4
	add r0, r5, #0
	pop {r1-r3,r5}
	beq locret_80EA14A
	strb r1, [r0,#0x12]
	strb r1, [r0,#0xc]
	strb r2, [r0,#0x13]
	strb r2, [r0,#0xd]
	strb r3, [r0,#0xe]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r6, [r0,#0x2c]
	str r5, [r0,#0x4c]
	ldrb r1, [r0,#4]
	cmp r1, #0
	beq locret_80EA14A
	str r7, [r0,#0x64]
	mov r1, #1
	strb r1, [r7]
locret_80EA14A:
	pop {pc}
.endfunc // sub_80EA11C

loc_80EA14C:
	push {lr}
	ldr r1, off_80EA160 // =off_80EA164 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCA6
	pop {pc}
	.byte 0, 0
off_80EA160: .word off_80EA164
off_80EA164: .word sub_80EA170+1
	.word sub_80EA1BC+1
	.word sub_8016C9C+1
.func
.thumb_func
sub_80EA170:
	push {r4,lr}
	mov r0, #0x80
	mov r1, #8
	mov r2, #0
	bl sprite_load // (int a1, int a2, int a3) ->
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_80EA170

	bl sub_8002F90 // () -> void
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	mov r0, #0x26 
	strb r0, [r5,#0x10]
	strb r0, [r5,#0x11]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
	bl sprite_update
	mov r0, #0
	bl sprite_setPallete // (int pallete) -> void
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r4,#4]
	bl sub_8002FA6
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80EA1BC
	pop {r4,pc}
.func
.thumb_func
sub_80EA1BC:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	orr r0, r1
	strb r0, [r5]
	bl battle_getFlags
	mov r1, #1
	tst r0, r1
	beq loc_80EA1D8
	ldrb r0, [r5]
	mov r1, #4
	bic r0, r1
	strb r0, [r5]
loc_80EA1D8:
	ldr r4, [r5,#0x4c]
	mov r0, #0x34 
	add r0, r0, r4
	ldmia r0!, {r1-r3}
	mov r0, #1
	lsl r0, r0, #0x10
	add r2, r2, r0
	mov r0, #0x34 
	add r0, r0, r5
	stmia r0!, {r1-r3}
	ldrh r0, [r5,#0x3a]
	sub r0, #1
	strh r0, [r5,#0x3a]
	ldrh r0, [r5,#0x3e]
	sub r0, #1
	strh r0, [r5,#0x3e]
	ldrb r0, [r4,#0x17]
	strb r0, [r5,#0x17]
	bl sub_800F2C6
	ldr r0, [r5,#0x64]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80EA220
	ldr r3, [r4,#0x54]
	ldrb r0, [r3,#6]
	cmp r0, #0
	beq loc_80EA220
	ldrh r0, [r3,#0x16]
	tst r0, r0
	bne locret_80EA22A
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	b locret_80EA22A
loc_80EA220:
	ldr r0, [r5,#0x64]
	mov r1, #0
	str r1, [r0]
	bl object_freeMemory
locret_80EA22A:
	pop {pc}
.endfunc // sub_80EA1BC

	push {lr}
	push {r5}
	mov r0, #0x8d
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80EA24E
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	str r5, [r0,#0x4c]
	str r7, [r0,#0x64]
	str r0, [r7]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80EA24E:
	pop {pc}
	mov r1, #8
	str r1, [r0,#8]
	mov pc, lr
	.balign 4, 0x00
loc_80EA258:
	push {lr}
	ldr r1, off_80EA268 // =loc_80EA26C 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EA268: .word loc_80EA26C
loc_80EA26C:
	adr r2, loc_80EA454
	lsr r6, r1, #0x20
	adr r2, loc_80EA498
	lsr r6, r1, #0x20
	ldr r5, [r3,#0x48]
	lsr r1, r0, #0x20
	mov r0, #0
	str r0, [r5,#0x60]
	str r0, [r5,#0x64]
	str r0, [r5,#0x68]
	str r0, [r5,#0x6c]
	mov r0, #4
	str r0, [r5,#8]
	mov pc, lr
	push {lr}
	ldr r1, off_80EA298 // =off_80EA29C 
	ldrb r0, [r5,#9]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EA298: .word off_80EA29C
off_80EA29C: .word sub_80EA2A4+1
	.word sub_80EA31E+1
.func
.thumb_func
sub_80EA2A4:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80EA310
	mov r4, #0x60 
	add r4, r4, r5
	push {r5}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #0x10
	mul r0, r1
	add r0, #0x80
	mov r7, r10
	ldr r7, [r7,#0x18]
	add r7, r7, r0
	mov r6, #0
loc_80EA2C6:
	ldr r5, [r7]
	tst r5, r5
	beq loc_80EA2F8
	bl object_getFlag // () -> int
	ldr r1, dword_80EA360 // =0x202 
	tst r0, r1
	beq loc_80EA2F8
	push {r4}
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x14
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x68 
	bl sub_80E05F6
	pop {r4}
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
	str r5, [r4]
	add r4, #4
loc_80EA2F8:
	add r7, #4
	add r6, #1
	cmp r6, #4
	blt loc_80EA2C6
	pop {r5}
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #4
	strb r0, [r5,#9]
	mov r0, #4
	strb r0, [r5,#0xa]
	b locret_80EA31C
loc_80EA310:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bge locret_80EA31C
	mov r0, #4
	str r0, [r5,#8]
locret_80EA31C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EA2A4

.func
.thumb_func
sub_80EA31E:
	push {r4,r6,r7,lr}
	mov r4, #0x60 
	add r4, r4, r5
	push {r5}
loc_80EA326:
	ldr r5, [r4]
	tst r5, r5
	beq loc_80EA33A
	bl sub_801A67E
	ldr r0, dword_80EA360 // =0x202 
	bl object_clearFlag // (int bitfield) -> void
	add r4, #4
	b loc_80EA326
loc_80EA33A:
	pop {r5}
	mov r0, #8
	str r0, [r5,#8]
	pop {r4,r6,r7,pc}
.endfunc // sub_80EA31E

	push {lr}
	push {r5}
	mov r0, #0x8f
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80EA35E
	ldrb r1, [r5,#0x16]
	strb r1, [r0,#0x16]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80EA35E:
	pop {pc}
dword_80EA360: .word 0x202
loc_80EA364:
	push {lr}
	ldr r1, off_80EA374 // =off_80EA378 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EA374: .word off_80EA378
off_80EA378: .word sub_80EA384+1
	.word sub_80EA3A4+1
	.word object_freeMemory+1
.func
.thumb_func
sub_80EA384:
	push {r4-r7,lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	mov r0, #0x1f
	mov r1, #0x60 
	strh r0, [r5,r1]
	mov r0, #4
	mov r1, #0x64 
	strb r0, [r5,r1]
	mov r0, #4
	str r0, [r5,#8]
	bl sub_80EA3A4
	pop {r4-r7,pc}
.endfunc // sub_80EA384

.func
.thumb_func
sub_80EA3A4:
	push {r4-r7,lr}
	mov r1, #0x60 
	ldrh r0, [r5,r1]
	sub r0, #1
	strh r0, [r5,r1]
	cmp r0, #0
	bgt locret_80EA410
	mov r0, #0x64 
	ldrb r1, [r5,r0]
	sub r1, #1
	strb r1, [r5,r0]
	cmp r1, #0
	blt loc_80EA40C
	mov r0, #8
	mov r1, #0x60 
	strh r0, [r5,r1]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x64 
	ldrb r1, [r5,r1]
	lsl r1, r1, #3
	ldr r2, off_80EA414 // =dword_80EA418 
	ldr r3, [r2,r1]
	mul r0, r3
	add r1, #4
	ldr r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	cmp r1, #4
	bne loc_80EA3E6
	mov r1, #3
loc_80EA3E6:
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x68 
	bl sub_80E05F6
	tst r0, r0
	beq locret_80EA410
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
	mov r0, #0x2f 
	add r0, #0xff
	bl sound_play // () -> void
	b locret_80EA410
loc_80EA40C:
	mov r0, #8
	str r0, [r5,#8]
locret_80EA410:
	pop {r4-r7,pc}
	.balign 4, 0x00
off_80EA414: .word dword_80EA418
dword_80EA418: .word 0xFFFFFFFF, 0xFFFFFFFF, 0x1, 0x1, 0xFFFFFFFF, 0x1, 0x1, 0xFFFFFFFF
.endfunc // sub_80EA3A4

.func
.thumb_func
sub_80EA438:
	push {r4-r7,lr}
	push {r5}
	mov r0, #0x90
	bl object_spawnType4
	add r0, r5, #0
	pop {r5}
	beq locret_80EA45E
	str r5, [r0,#0x4c]
	ldrh r1, [r5,#0x16]
	strh r1, [r0,#0x16]
	ldrb r1, [r5,#0x12]
	ldrb r2, [r5,#0x13]
	strb r1, [r0,#0x12]
loc_80EA454:
	strb r2, [r0,#0x13]
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
locret_80EA45E:
	pop {r4-r7,pc}
.endfunc // sub_80EA438

.func
.thumb_func
sub_80EA460:
	push {lr}
	ldr r1, off_80EA474 // =off_80EA478 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BCF4
	pop {pc}
	.balign 4, 0x00
off_80EA474: .word off_80EA478
off_80EA478: .word sub_80172F0+1
	.word loc_80EA484+1
	.word sub_8016C4E+1
.endfunc // sub_80EA460

loc_80EA484:
	push {r4,lr}
	bl sub_8012E74
	bl sub_8013DA0
	bl sub_801AC6C
	ldr r0, [r5,#0x58]
	ldrb r0, [r0,#1]
	lsl r4, r0, #2
loc_80EA498:
	ldr r1, off_80EA4C0 // =off_80EA4C8 
	ldr r0, [r1,r4]
	bl sub_801AF44
	ldr r0, off_80EA4C4 // =loc_80EA93C 
	ldr r0, [r0,r4]
	mov lr, pc
	bx r0
	bl sub_80107D4
	bl sub_80139C4
	bl sub_80100EC
	bl battle_isPaused
	bne locret_80EA4BE
	bl sub_801A018
locret_80EA4BE:
	pop {r4,pc}
off_80EA4C0: .word off_80EA4C8
off_80EA4C4: .word loc_80EA93C
off_80EA4C8: .word off_80EA52C
	.word off_80EA550
	.word off_80EA57C
	.word off_80EA5A8
	.word off_80EA5D4
	.word off_80EA600
	.word off_80EA62C
	.word off_80EA658
	.word off_80EA684
	.word off_80EA6B0
	.word off_80EA6DC
	.word off_80EA710
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
	.word off_80EA52C
off_80EA52C: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
off_80EA550: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
	.word loc_80F070E+1
	.word sub_80F0778+1
off_80EA57C: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
	.word sub_80F094C+1
	.word sub_80F09B8+1
off_80EA5A8: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
	.word sub_80F0C48+1
	.word sub_80F0CB0+1
off_80EA5D4: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
	.word sub_80F0FB4+1
	.word loc_80F1056+1
off_80EA600: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
	.word sub_80F1198+1
	.word sub_80F1334+1
off_80EA62C: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
	.word sub_80F153C+1
	.word loc_80F15CE+1
off_80EA658: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
	.word sub_80F17C4+1
	.word sub_80F18AC+1
off_80EA684: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
	.word sub_80F19D4+1
	.word loc_80F1A46+1
off_80EA6B0: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
	.word sub_80F1BA8+1
	.word sub_80F1C1C+1
off_80EA6DC: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
	.word sub_80F1F18+1
	.word sub_80F1FA0+1
	.word sub_80F20F8+1
	.word sub_80F2274+1
off_80EA710: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80173F4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80EA734+1
loc_80EA734:
	push {lr}
	bl battle_isBattleOver
	tst r0, r0
	bne loc_80EA778
	bl sub_800FFFE
	ldr r1, dword_80EA7A4 // =0x8600 
	tst r0, r1
	beq loc_80EA752
	mov r1, #0
	mov r2, #0
	bl sub_801056A
	b locret_80EA79E
loc_80EA752:
	bl sub_800FFFE
	ldr r1, dword_80EA7A8 // =0x80000 
	tst r0, r1
	beq loc_80EA764
	mov r0, #0x49 
	bl sub_8011680
	b locret_80EA79E
loc_80EA764:
	ldrh r0, [r5,#0x28]
	bl sub_800F214
	ldrb r1, [r0,#4]
	lsl r1, r1, #2
	ldr r0, off_80EA7AC // =off_80EA7B0 
	ldr r0, [r0,r1]
	mov lr, pc
	bx r0
	pop {pc}
loc_80EA778:
	bl sub_8012EA8
	bl sub_801A264
	mov r0, #0x42 
	bl sub_801DACC
	bl sub_802DD2A
	tst r0, r0
	beq loc_80EA79A
	mov r0, #1
	strb r0, [r7,#3]
	mov r0, #0x4d 
	bl sub_8011680
	pop {pc}
loc_80EA79A:
	mov r0, #0
	strb r0, [r5,#0x10]
locret_80EA79E:
	pop {pc}
	mov pc, lr
	.balign 4, 0x00
dword_80EA7A4: .word 0x8600
dword_80EA7A8: .word 0x80000
off_80EA7AC: .word off_80EA7B0
off_80EA7B0: .word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
	.word sub_80F0354+1
off_80EA814: .word off_80F02C0
	.word off_80F093C
	.word off_80F0C38
	.word off_80F0FA4
	.word off_80F1188
	.word off_80F152C
	.word off_80F17B4
	.word off_80F19C4
	.word off_80F1B98
	.word off_80F1F08
	.word off_80F2310
	.word off_80F2320
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	.word off_80F02C0
	lsl r7, r6, #0xb
	lsr r7, r1, #0x20
	lsl r4, r7, #0xb
	lsr r7, r1, #0x20
	lsl r5, r0, #0xb
	lsr r7, r1, #0x20
	lsl r2, r1, #0xb
	lsr r7, r1, #0x20
	lsl r7, r1, #0xb
	lsr r7, r1, #0x20
	lsl r4, r2, #0xb
	lsr r7, r1, #0x20
	lsl r1, r3, #0xb
	lsr r7, r1, #0x20
	lsl r6, r3, #0xb
	lsr r7, r1, #0x20
	lsl r3, r4, #0xb
	lsr r7, r1, #0x20
	lsl r0, r5, #0xb
	lsr r7, r1, #0x20
	lsl r5, r5, #0xb
	lsr r7, r1, #0x20
	lsl r2, r6, #0xb
	lsr r7, r1, #0x20
	lsl r7, r6, #0xb
	lsr r7, r1, #0x20
	lsl r4, r7, #0xb
	lsr r7, r1, #0x20
loc_80EA8D8:
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsr r4, r0, #5
	lsr r7, r1, #0x20
	lsr r0, r0, #0x11
	lsr r7, r1, #0x20
	lsr r4, r5, #0x1e
	lsr r7, r1, #0x20
	asr r0, r2, #6
	lsr r7, r1, #0x20
	asr r4, r6, #0x14
	lsr r7, r1, #0x20
	asr r4, r7, #0x1e
	lsr r7, r1, #0x20
	add r4, r1, r7
	lsr r7, r1, #0x20
	sub r0, r4, r6
	lsr r7, r1, #0x20
	sub r0, r2, #4
	lsr r7, r1, #0x20
	mov r3, #0x18
	lsr r7, r1, #0x20
	mov r3, #0x28 
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
	lsl r4, r0, #0xc
	lsr r7, r1, #0x20
loc_80EA93C:
	lsl r1, r1, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r1, r1, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
	lsl r7, r0, #0x18
	lsr r7, r1, #0x20
loc_80EA9A0:
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
loc_80EAA04:
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	mov r2, #0xf9
	lsr r7, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
loc_80EAA68:
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
loc_80EAACC:
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
loc_80EAB30:
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
loc_80EAB94:
	lsl r7, r1, #0x1b
	lsr r7, r1, #0x20
	lsl r1, r0, #0x1c
	lsr r7, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
loc_80EABF8:
	lsl r7, r1, #0x1b
	lsr r7, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	add r4, sp, #0x174
	lsr r6, r1, #0x20
	mov pc, lr
	.byte 0, 0
off_80EAC60: .word loc_80EB04C+1
	.byte 0x37 
	.byte 0xB4
	.byte 0xE
	.byte  8
	.word loc_80EB628+1
	.word loc_80EB776+1
	.word loc_80EBC0E+1
	.word loc_80EBD9C+1
	.word loc_80EBE00+1
	.word loc_80EBF10+1
	.word loc_80EC02A+1
	.word loc_80EC0E6+1
	.word loc_80EC1F0+1
	.word sub_80EC350+1
	.word loc_80EC39C+1
	.word loc_80EC45E+1
	.word loc_80EC5BC+1
	.word loc_80EC7A6+1
	.word sub_80EC844+1
	.word loc_80EC884+1
	.word loc_80EC960+1
	.word loc_80ECA34+1
	.word loc_80ECACA+1
	.word loc_80ECBB0+1
	.word loc_80ECCB0+1
	.word loc_80ECD28+1
	.word loc_80ECDFC+1
	.word loc_80ECF2E+1
	.word loc_80ED090+1
	.word loc_80ED13E+1
	.word loc_80ED25C+1
	.word loc_80ED2F8+1
	.word loc_80ED374+1
	.word loc_80ED454+1
	.word loc_80ED55C+1
	.word loc_80ED64C+1
	.word loc_80ED6E6+1
	.word loc_80ED748+1
	.word loc_80ED810+1
	.word loc_80ED8C4+1
	.word loc_80ED9AE+1
	.word loc_80EDAE0+1
	.word loc_80EDCC0+1
	.word loc_80EDD80+1
	.word loc_80EDE7E+1
	.word sub_80EDF0C+1
	.word loc_80EDF5C+1
	.word loc_80EE044+1
	.word loc_80EE0BC+1
	.word loc_80EE192+1
	.word loc_80EE2A0+1
	.word loc_80EE34A+1
	.word loc_80EE55E+1
	.word loc_80EE634+1
	.word loc_80EE6FC+1
	.word loc_80EE7D0+1
	.word loc_80EE840+1
	.word loc_80EE90C+1
	.word loc_80EEA3C+1
	.word loc_80EEB4C+1
	.word loc_80EEC70+1
	.word loc_80EED56+1
	.word loc_80EEE60+1
	.word loc_80EEFDC+1
	.word loc_80EF1EC+1
	.word loc_80EF282+1
	.word loc_80EF328+1
	.word loc_80EF4B4+1
	.word loc_80EF534+1
	.word loc_80EF62E+1
	.word loc_80EF7E2+1
	.word loc_80EF970+1
	.word loc_80EFA56+1
	.word loc_80EFC1C+1
	.word loc_80EFCB4+1
	.word sub_80EFDB2+1
	.word loc_80EFE7C+1
	.word loc_80EFEE0+1
	.word loc_80F0094+1
	.word loc_80F00F2+1
	.word loc_80F020E+1
loc_80EAD9C:
	push {r7,lr}
	mov r3, #0x1e
	add r3, r3, r7
	push {r3}
	ldr r1, off_80EADCC // =off_80EADD0 
	ldrb r0, [r3]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7}
	ldrb r0, [r7,#5]
	cmp r0, #0
	beq loc_80EADBC
	sub r0, #1
	strb r0, [r7,#5]
	b locret_80EADC8
loc_80EADBC:
	ldrh r0, [r4,#0x24]
	mov r1, #1
	tst r0, r1
	beq locret_80EADC8
	mov r0, #1
	strb r0, [r7,#4]
locret_80EADC8:
	pop {r7,pc}
	.balign 4, 0x00
off_80EADCC: .word off_80EADD0
off_80EADD0: .word sub_80EADDC+1
	.word sub_80EAE28+1
	.word loc_80EAF36+1
.func
.thumb_func
sub_80EADDC:
	push {r6,lr}
	add r6, r3, #0
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	ldrb r0, [r5,#0x14]
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x15]
	strb r1, [r5,#0x13]
	bl sub_801BB46
.endfunc // sub_80EADDC

	bl sub_800E29C // () -> void
	bl sub_801A04C
	ldr r0, dword_80EB03C // =0x1040 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0x10
	bl sub_801A176
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	strb r0, [r6,#4]
	mov r0, #0xc
	strb r0, [r6,#5]
	mov r0, #4
	strh r0, [r6]
	pop {r6,pc}
.func
.thumb_func
sub_80EAE28:
	push {r4,r6,lr}
	add r6, r3, #0
	ldrb r0, [r6,#1]
	cmp r0, #0
	bne loc_80EAE4C
	mov r0, #1
	strb r0, [r6,#1]
	bl sub_80E1654
	bl sub_80F02A2
	tst r0, r0
	beq loc_80EAE48
	mov r0, #4
	bl sub_800F2B6
loc_80EAE48:
	mov r0, #3
	strh r0, [r6,#8]
loc_80EAE4C:
	ldrh r0, [r6,#8]
	sub r0, #1
	strh r0, [r6,#8]
	bne locret_80EAF18
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_8013CC4
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0x17
	beq loc_80EAE78
	cmp r0, #0x18
	beq loc_80EAE78
	bl object_getFlag // () -> int
	ldr r1, dword_80EB040 // =0xa000 
	tst r0, r1
	beq loc_80EAE78
	mov r0, #0
	b loc_80EAE90
loc_80EAE78:
	bl sub_80EAF1A
	cmp r0, #0
	bne loc_80EAE90
	bl sub_80EAF26
	cmp r0, #0
	bne loc_80EAE90
	// idx
	ldrh r0, [r7,#0x14]
	bl getChip_8021DA8 // (int chip_idx) -> ChipData*
	ldrb r0, [r0,#0x17]
loc_80EAE90:
	add r4, r0, #0
	bl sub_80E164A
	add r2, r4, #0
	bl ho_8026554
	tst r0, r0
	bne loc_80EAEA4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
loc_80EAEA4:
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	strb r2, [r6,#2]
	strb r3, [r6,#3]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	ldr r0, [r7,#0x2c]
	tst r0, r0
	beq loc_80EAED6
	bl sub_802D26A
	cmp r0, #0x31 
	beq loc_80EAED0
	cmp r0, #0x23 
	beq loc_80EAED0
	cmp r0, #0x33 
	beq loc_80EAED0
	b loc_80EAED6
loc_80EAED0:
	ldr r0, [r7,#0x2c]
	bl sub_800F2FC
loc_80EAED6:
	ldrb r0, [r6,#2]
	ldrb r1, [r6,#3]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r0, r2
	bne loc_80EAEE6
	cmp r1, r3
	beq loc_80EAF0E
loc_80EAEE6:
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldr r2, [r5,#0x3c]
	push {r0-r2}
	mov r3, #8
	bl sub_80EAFC2
	pop {r0-r2}
	ldr r3, [r5,#0x34]
	add r0, r0, r3
	asr r0, r0, #1
	ldr r3, [r5,#0x38]
	add r1, r1, r3
	asr r1, r1, #1
	ldr r3, [r5,#0x3c]
	add r2, r2, r3
	asr r2, r2, #1
	mov r3, #0
	bl sub_80EAFC2
loc_80EAF0E:
	mov r0, #0
	bl sub_800F2B6
	mov r0, #8
	strh r0, [r6]
locret_80EAF18:
	pop {r4,r6,pc}
.endfunc // sub_80EAE28

.func
.thumb_func
sub_80EAF1A:
	mov r0, #0
	ldrb r1, [r5,#9]
	cmp r1, #0x52 
	bne locret_80EAF24
	mov r0, #0xc
locret_80EAF24:
	mov pc, lr
.endfunc // sub_80EAF1A

.func
.thumb_func
sub_80EAF26:
	mov r0, #0
	ldrb r1, [r5,#9]
	cmp r1, #0x41 
	bne locret_80EAF34
	ldr r0, off_80EB024 // =dword_80EB028 
	ldrb r1, [r7,#3]
	ldrb r0, [r0,r1]
locret_80EAF34:
	mov pc, lr
.endfunc // sub_80EAF26

loc_80EAF36:
	push {lr}
	ldrb r1, [r5,#9]
	cmp r1, #0x10
	blt loc_80EAF80
	sub r1, #0x10
	ldr r0, off_80EB044 // =off_80EAC60 
	lsl r1, r1, #2
	ldr r0, [r0,r1]
	mov lr, pc
	bx r0
	ldrb r0, [r5,#9]
	cmp r0, #8
	bne locret_80EAFC0
	mov r3, #0x1e
	add r3, r3, r7
	mov r0, #1
	ldrb r0, [r3,#4]
	cmp r0, #0
	beq loc_80EAF80
	bl sub_800FC30
	ldr r3, dword_80EB048 // =0xffff 
	cmp r0, r3
	beq loc_80EAF80
	bl sub_800FC7C
	mov r1, #0x1e
	add r1, r1, r7
	mov r0, #4
	strh r0, [r1]
	mov r0, #0
	strb r0, [r1,#4]
	mov r0, #0xc
	strb r0, [r6,#5]
	bl sub_80E1662
	b locret_80EAFC0
loc_80EAF80:
	bl sub_801011A
	ldrb r0, [r5,#0x14]
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x15]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	bl sub_802D234
	cmp r0, #1
	beq loc_80EAFAE
loc_80EAFAE:
	bl sub_80F02A2
	tst r0, r0
	beq loc_80EAFBC
	bl sub_8011714
	b locret_80EAFC0
loc_80EAFBC:
	bl loc_801171C
locret_80EAFC0:
	pop {pc}
.func
.thumb_func
sub_80EAFC2:
	push {r4,r6,r7,lr}
	push {r3}
	push {r0-r2}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0xf
	ldrh r1, [r5,#0x28]
	sub r1, #0xff
	cmp r1, #0xa2
	blt loc_80EAFDE
	cmp r1, #0xac
	bgt loc_80EAFDE
	mov r0, #0
loc_80EAFDE:
	add r4, r4, r0
	lsl r4, r4, #0x10
	add r4, #0xff
	pop {r1-r3}
	pop {r0}
	ldr r6, dword_80EB01C // =0x83e0 
	ldr r7, dword_80EB020 // =0x1010014 
	sub r7, r7, r0
	bl sub_80E33FA
	cmp r0, #0
	beq locret_80EB01A
	add r4, r0, #0
	ldrb r0, [r5,#0x16]
	mov r1, #0x2c 
	bl sub_80136CC
	cmp r0, #0xb
	blt loc_80EB012
	cmp r0, #0x18
	bgt loc_80EB012
	add r0, r4, #0
	mov r1, #1
	bl sub_80E341E
	b locret_80EB01A
loc_80EB012:
	add r0, r4, #0
	mov r1, #2
	bl sub_80E341E
locret_80EB01A:
	pop {r4,r6,r7,pc}
dword_80EB01C: .word 0x83E0
dword_80EB020: .word 0x1010014
off_80EB024: .word dword_80EB028
dword_80EB028: .word 0x3040302, 0x6060604, 0x6020504, 0x3030303, 0x61203
dword_80EB03C: .word 0x1040
dword_80EB040: .word 0xA000
off_80EB044: .word off_80EAC60
dword_80EB048: .word 0xFFFF
.endfunc // sub_80EAFC2

loc_80EB04C:
	push {lr}
	ldr r1, off_80EB070 // =off_80EB074 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldr r0, [r7,#0x30]
	tst r0, r0
	bne locret_80EB06C
	bl sub_800FA54
	ldrb r1, [r7,#0xc]
	cmp r0, r1
	beq locret_80EB06C
	mov r0, #1
	str r0, [r7,#0x30]
locret_80EB06C:
	pop {pc}
	.byte 0, 0
off_80EB070: .word off_80EB074
off_80EB074: .word sub_80EB088+1
	.word sub_80EB128+1
	.word sub_80EB194+1
	.word sub_80EB1C4+1
	.word sub_80EB1F8+1
.func
.thumb_func
sub_80EB088:
	push {lr}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	bl object_canMove
	beq loc_80EB114
	mov r1, #0
	str r1, [r7,#0x30]
	ldrb r0, [r7,#0xc]
	ldrb r1, [r7,#3]
	cmp r1, #0
	bne loc_80EB0AA
	bl sub_800F964
	b loc_80EB0CC
loc_80EB0AA:
	cmp r1, #1
	bne loc_80EB0BA
	add r2, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800F998
	b loc_80EB0CC
loc_80EB0BA:
	cmp r1, #2
	bne loc_80EB0C4
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	b loc_80EB0CC
loc_80EB0C4:
	cmp r1, #3
	bne loc_80EB114
	bl sub_800FA20
loc_80EB0CC:
	tst r0, r0
	beq loc_80EB114
	strb r0, [r7,#0x16]
	strb r0, [r5,#0x14]
	strb r1, [r7,#0x17]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	bl sub_801BE04
	bl sub_8010312
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x16]
	mov r1, #4
	mov r2, #1
	bl sub_800AB46
	bl sub_80F02A2
	tst r0, r0
	beq loc_80EB10A
	mov r0, #4
	bl sub_800F2B6
loc_80EB10A:
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_80EB126
loc_80EB114:
	bl sub_80F02A2
	tst r0, r0
	beq loc_80EB122
	bl sub_8011714
	b locret_80EB126
loc_80EB122:
	bl loc_801171C
locret_80EB126:
	pop {pc}
.endfunc // sub_80EB088

.func
.thumb_func
sub_80EB128:
	push {r4,r6,lr}
	mov r0, #0xf
	bl sub_801031C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bne locret_80EB188
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_8013CC4
	ldrb r0, [r5,#0x14]
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x15]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	ldr r0, [r7,#0x2c]
	tst r0, r0
	beq loc_80EB172
	bl sub_802D26A
	cmp r0, #0x31 
	beq loc_80EB16C
	cmp r0, #0x23 
	beq loc_80EB16C
	cmp r0, #0x33 
	beq loc_80EB16C
	b loc_80EB172
loc_80EB16C:
	ldr r0, [r7,#0x2c]
	bl sub_800F2FC
loc_80EB172:
	bl sub_80F02A2
	tst r0, r0
	beq loc_80EB180
	mov r0, #3
	bl sub_800F2B6
loc_80EB180:
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80EB188:
	pop {r4,r6,pc}
	.balign 4, 0x00
	.word 0x83E0, 0x1010014
.endfunc // sub_80EB128

.func
.thumb_func
sub_80EB194:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bne locret_80EB1C2
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	bl sub_80F02A2
	tst r0, r0
	beq loc_80EB1BE
	mov r0, #0
	bl sub_800F2B6
loc_80EB1BE:
	mov r0, #0xc
	strh r0, [r7]
locret_80EB1C2:
	pop {pc}
.endfunc // sub_80EB194

.func
.thumb_func
sub_80EB1C4:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EB1F6
	ldrb r0, [r7,#3]
	cmp r0, #1
	beq loc_80EB1E0
	bl sub_8013FAE
	tst r0, r0
	beq loc_80EB1E0
	ldrb r0, [r7,#0xc]
	b loc_80EB1E2
loc_80EB1E0:
	mov r0, #0
loc_80EB1E2:
	strb r0, [r4,#0x1a]
	bl sub_80F02A2
	tst r0, r0
	beq loc_80EB1F2
	bl sub_8011714
	b locret_80EB1F6
loc_80EB1F2:
	bl loc_801171C
locret_80EB1F6:
	pop {pc}
.endfunc // sub_80EB1C4

.func
.thumb_func
sub_80EB1F8:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EB232
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x14]
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x15]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl sub_80F02A2
	tst r0, r0
	beq loc_80EB22A
	mov r0, #3
	bl sub_800F2B6
loc_80EB22A:
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80EB232:
	pop {pc}
.endfunc // sub_80EB1F8

loc_80EB234:
	push {lr}
	ldr r1, off_80EB244 // =off_80EB248 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EB244: .word off_80EB248
off_80EB248: .word sub_80EB254+1
	.word sub_80EB2DC+1
	.word sub_80EB3DC+1
.func
.thumb_func
sub_80EB254:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EB2BC
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	bl object_canMove
	beq loc_80EB2CA
	ldrb r0, [r7,#0xc]
	ldrb r1, [r7,#3]
	bl sub_80EB402
	tst r0, r0
	beq loc_80EB2CA
	strb r0, [r7,#0x16]
	strb r0, [r5,#0x14]
	strb r1, [r7,#0x17]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #4
	bl sub_800F2B6
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	strb r0, [r7,#0x1a]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x12]
	sub r2, r0, r1
	ldr r0, dword_80EB2D4 // =0x12492 
	mul r0, r2
	str r0, [r5,#0x40]
	ldrb r0, [r5,#0x15]
	ldrb r1, [r5,#0x13]
	sub r2, r0, r1
	ldr r0, dword_80EB2D8 // =0xaf8a 
	mul r0, r2
	str r0, [r5,#0x44]
	ldrb r0, [r5,#0x12]
	strb r0, [r7,#0x16]
	ldrb r1, [r5,#0x13]
	strb r1, [r7,#0x17]
	mov r0, #6
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EB2D2
loc_80EB2BC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EB2D2
	mov r0, #4
	strh r0, [r7]
	pop {pc}
loc_80EB2CA:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80EB2D2:
	pop {pc}
dword_80EB2D4: .word 0x12492
dword_80EB2D8: .word 0xAF8A
.endfunc // sub_80EB254

.func
.thumb_func
sub_80EB2DC:
	push {lr}
	ldrb r0, [r7,#1]
	cmp r0, #1
	beq loc_80EB2F6
	cmp r0, #2
	bne loc_80EB2EA
	b loc_80EB3B2
loc_80EB2EA:
	ldr r0, dword_80EB3D4 // =0x88000 
	str r0, [r5,#0x48]
	mov r0, #0x23 
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#1]
loc_80EB2F6:
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80EB3D0 // =0xffff8000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldr r0, [r5,#0x3c]
	cmp r0, #0
	bne loc_80EB332
	ldrb r0, [r7,#0x16]
	ldrb r2, [r5,#0x12]
	cmp r0, r2
	bne loc_80EB332
	ldrb r1, [r7,#0x17]
	ldrb r2, [r5,#0x13]
	cmp r1, r2
	beq loc_80EB33C
loc_80EB332:
	bl sub_801A074 // () -> void
	mov r0, #0x20 
	bl object_setFlag // (int a1) -> void
loc_80EB33C:
	ldrh r0, [r7,#0x10]
	cmp r0, #5
	bne loc_80EB358
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80EB3D8 // =0x600ff01 
	mov r6, #0
	push {r7}
	mov r7, #0
	bl sub_80C536A
	pop {r7}
loc_80EB358:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bne locret_80EB3CC
	ldrb r0, [r7,#3]
	tst r0, r0
	beq loc_80EB370
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_8013CC4
	b loc_80EB370
loc_80EB370:
	ldrb r0, [r5,#0x14]
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x15]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x20 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #2
	mov r1, #0xf
	bl sub_80302A8
	mov r0, #0xc0
	bl sound_play // () -> void
	mov r0, #3
	bl sub_800F2B6
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #2
	strb r0, [r7,#1]
	b locret_80EB3CC
loc_80EB3B2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EB3CC
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #8
	strh r0, [r7]
locret_80EB3CC:
	pop {pc}
	.byte 0, 0
dword_80EB3D0: .word 0xFFFF8000
dword_80EB3D4: .word 0x88000
dword_80EB3D8: .word 0x600FF01
.endfunc // sub_80EB2DC

.func
.thumb_func
sub_80EB3DC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EB3F4
	mov r0, #0
	bl sub_800F2B6
	ldrb r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EB400
loc_80EB3F4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EB400
	bl sub_8011714
locret_80EB400:
	pop {pc}
.endfunc // sub_80EB3DC

.func
.thumb_func
sub_80EB402:
	push {lr}
	cmp r1, #0
	bne loc_80EB40E
	bl sub_800F964
	b locret_80EB430
loc_80EB40E:
	cmp r1, #1
	bne loc_80EB41E
	add r2, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800F998
	b locret_80EB430
loc_80EB41E:
	cmp r1, #2
	bne loc_80EB428
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	b locret_80EB430
loc_80EB428:
	cmp r1, #3
	bne loc_80EB432
	bl sub_800FA20
locret_80EB430:
	pop {pc}
loc_80EB432:
	mov r0, #0
	pop {pc}
.endfunc // sub_80EB402

.func
.thumb_func
sub_80EB436:
	push {lr}
	ldr r1, off_80EB444 // =jt_80EB448 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EB444: .word jt_80EB448
jt_80EB448: .word sub_80EB450+1
	.word sub_80EB502+1
.endfunc // sub_80EB436

.func
.thumb_func
sub_80EB450:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EB472
	mov r0, #0xe
	bl sub_800F2B6
	bl sub_80EB562
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strh r0, [r7,#0x10]
loc_80EB472:
	ldrh r0, [r7,#0x10]
	cmp r0, #1
	bne loc_80EB4F2
	mov r0, #0x6a 
	bl sound_play // () -> void
	ldrb r0, [r7,#3]
	cmp r0, #2
	bne loc_80EB4B0
	mov r0, #0xff
	bl sound_play // () -> void
	push {r7}
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x30]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0xc
	lsl r3, r3, #0x10
	mov r4, #6
	bl sub_80C6248
	pop {r7}
	b loc_80EB4E6
loc_80EB4B0:
	ldrb r0, [r7,#0xc]
	ldr r1, [r7,#8]
	mov r3, #0x18
	lsl r3, r3, #0x10
	bl sub_800FAAC
	strh r0, [r7,#0x12]
	mov r4, #5
	ldrb r0, [r7,#3]
	cmp r0, #1
	bne loc_80EB4E6
	mov r0, #1
	strb r0, [r7,#0xd]
	ldrh r0, [r7,#0xc]
	ldr r1, [r7,#8]
	mov r3, #0x18
	lsl r3, r3, #0x10
	bl sub_800FAAC
	mov r0, #0xff
	strb r0, [r7,#0xd]
	ldrh r0, [r7,#0xc]
	ldr r1, [r7,#8]
	mov r3, #0x18
	lsl r3, r3, #0x10
	bl sub_800FAAC
loc_80EB4E6:
	push {r7}
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
loc_80EB4F2:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #4
	ble locret_80EB500
	mov r0, #4
	strh r0, [r7]
locret_80EB500:
	pop {r4,r6,pc}
.endfunc // sub_80EB450

.func
.thumb_func
sub_80EB502:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EB512
	ldrh r0, [r7,#0x12]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EB512:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80EB528
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
	b locret_80EB560
loc_80EB528:
	bl object_canMove
	beq locret_80EB560
	bl sub_800FA54
	cmp r0, #0
	beq locret_80EB560
	add r6, r0, #0
	bl sub_800F964
	tst r0, r0
	beq locret_80EB560
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
	bl sub_8010332
	add r4, r0, #0
	bl sub_80103A8
	add r2, r0, #0
	add r0, r6, #0
	add r1, r4, #0
	bl sub_80116AE
locret_80EB560:
	pop {r4,r6,pc}
.endfunc // sub_80EB502

.func
.thumb_func
sub_80EB562:
	push {lr}
	ldr r1, [r5,#0x58]
	mov r0, #0x68 
	add r0, r0, r1
	mov r1, #0
	bl sub_80EB572
	pop {pc}
.endfunc // sub_80EB562

.func
.thumb_func
sub_80EB572:
	push {r4,r6,r7,lr}
	mov r2, r8
	mov r3, r9
	push {r2,r3}
	mov r8, r0
	mov r9, r1
	mov r6, #0
	mov r4, #6
	mov r0, #0
	ldr r7, [r5,#0x58]
	ldrb r1, [r7]
	cmp r1, #0
	beq loc_80EB606
	cmp r1, #1
	beq loc_80EB5DC
	ldrb r0, [r7,#1]
	cmp r0, #0
	bne loc_80EB5D6
	mov r4, #6
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0
	beq loc_80EB5E6
	mov r1, #0xe
	cmp r0, #0xb
	beq loc_80EB5C2
	mov r1, #0xe
	cmp r0, #0xc
	beq loc_80EB5C2
	cmp r0, #0xd
	blt loc_80EB606
	cmp r0, #0x11
	bgt loc_80EB606
	mov r1, #5
	add r1, r1, r0
	sub r1, #0xd
	lsl r1, r1, #0x18
	orr r4, r1
	b loc_80EB606
loc_80EB5C2:
	push {r0,r1}
	ldrb r0, [r5,#0x16]
	bl sub_8015B54
	cmp r0, #2
	pop {r0,r1}
	bne loc_80EB606
	lsl r1, r1, #0x18
	orr r4, r1
	b loc_80EB606
loc_80EB5D6:
	mov r0, #0
	str r0, [r7,#0x68]
	b loc_80EB61A
loc_80EB5DC:
	ldrb r0, [r7,#1]
	mov r4, #0x2b 
	sub r0, #1
	mov r6, #0xd
	b loc_80EB606
loc_80EB5E6:
	bl sub_801032C
	ldr r1, off_80EB624 // =0x200 
	tst r0, r1
	beq loc_80EB5F6
	mov r6, #0xe
	mov r0, #0
	b loc_80EB606
loc_80EB5F6:
	mov r1, #0x10
	bl sub_8013774
	cmp r0, #0
	beq loc_80EB606
	mov r6, #0x14
	add r6, r6, r0
	mov r0, #0
loc_80EB606:
	lsl r6, r6, #0x18
	lsl r0, r0, #8
	add r4, r4, r0
	add r4, r4, r6
	mov r0, r9
	lsl r0, r0, #0x10
	add r4, r4, r0
	mov r7, r8
	bl sub_80B8E30
loc_80EB61A:
	pop {r2,r3}
	mov r8, r2
	mov r9, r3
	pop {r4,r6,r7,pc}
	.byte  0
	.byte  0
off_80EB624: .word 0x200
.endfunc // sub_80EB572

loc_80EB628:
	push {lr}
	ldr r1, off_80EB638 // =off_80EB63C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EB638: .word off_80EB63C
off_80EB63C: .word loc_80EB644+1
	.word sub_80EB758+1
loc_80EB644:
	push {r4,r6,r7,lr}
	mov r0, r8
	push {r0}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EB69A
	mov r0, #6
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	ldrb r0, [r7,#3]
	add r0, r0, r0
	ldr r4, off_80EB6F4 // =byte_80EB738 
	ldrh r4, [r4,r0]
	mov r1, #3
	cmp r0, #0x1e
	beq loc_80EB676
	mov r1, #0
	cmp r0, #0x1c
	bne loc_80EB676
	ldrb r1, [r7,#0xc]
	mov r2, #3
	mul r1, r2
loc_80EB676:
	lsl r1, r1, #0x18
	orr r4, r1
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	mov r0, #0xb2
	bl sound_play // () -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EB69A:
	ldrh r0, [r7,#0x10]
	cmp r0, #9
	bne loc_80EB6DC
	ldrb r0, [r7,#3]
	lsl r0, r0, #2
	ldr r1, off_80EB6F0 // =off_80EB6F8 
	ldr r0, [r1,r0]
	mov r8, r0
	push {r7}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #4
	mul r1, r0
	ldr r0, [r5,#0x34]
	lsl r1, r1, #0x10
	add r1, r1, r0
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	mov r4, #0x30 
	lsl r4, r4, #0x10
	add r3, r3, r4
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r0, [r7,#6]
	add r6, r6, r0
	mov r7, r8
	mov lr, pc
	bx r7
	pop {r7}
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
loc_80EB6DC:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x15
	blt loc_80EB6EA
	mov r0, #4
	strh r0, [r7]
loc_80EB6EA:
	pop {r0}
	mov r8, r0
	pop {r4,r6,r7,pc}
off_80EB6F0: .word off_80EB6F8
off_80EB6F4: .word byte_80EB738
off_80EB6F8: .word sub_80C5DBC+1
	.word sub_80C5DBC+1
	.word sub_80C5DBC+1
	.word sub_80D7A96+1
	.word sub_80C5DBC+1
	.word sub_80C5DBC+1
	.word 0x80CD887, 0x80D9FA9, 0x80D49F7, 0x80CE44F, 0x80C5DBD
	.word 0x80C5DBD, 0x80CE44F, 0x80CE44F, 0x80D9CC3, 0x80C5DBD
byte_80EB738: .byte 0x4, 0x0, 0x4, 0x2, 0xE, 0x0, 0x4, 0x0, 0x2D, 0x0, 0x4, 0x0, 0x2D, 0x0, 0x4
	.byte 0x4, 0x4, 0x0, 0x25, 0x8, 0x4, 0x6, 0x4, 0x0, 0x24, 0x8, 0x26, 0x8, 0x2E, 0x2
	.byte 0x4, 0x0
.func
.thumb_func
sub_80EB758:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EB768
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EB768:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EB774
	bl sub_8011714
locret_80EB774:
	pop {pc}
.endfunc // sub_80EB758

loc_80EB776:
	push {lr}
	ldr r1, off_80EB784 // =off_80EB788 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EB784: .word off_80EB788
off_80EB788: .word sub_80EB79C+1
	.word loc_80EB84C+1
	.word sub_80EB862+1
	.word sub_80EBB98+1
	.byte 0xE3
	.byte 0xBB
	.byte 0xE
	.byte  8
.func
.thumb_func
sub_80EB79C:
	push {r4,r6,lr}
	mov r0, #4
	strh r0, [r7]
	ldrb r4, [r7,#0xc]
	tst r4, r4
	beq locret_80EB83A
	ldrb r0, [r7,#0x1b]
	cmp r0, #0
	bne loc_80EB7D6
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0xb
	blt loc_80EB7BC
	cmp r0, #0x18
	ble loc_80EB7D6
loc_80EB7BC:
	bl sub_800E5FC
	tst r0, r0
	beq locret_80EB83A
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x12]
	strb r0, [r5,#0x14]
	ldrb r1, [r5,#0x13]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
loc_80EB7D6:
	mov r0, #0
	str r0, [r7,#0x34]
	bl sub_8015B00
	tst r0, r0
	beq loc_80EB82C
	push {r0,r1,r4,r7}
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #8
	mov r0, #0
	bl sub_800F2AA
	add r4, r4, r0
	lsl r4, r4, #0x10
	add r4, #0xff
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80EB844 // =0xffe0 
	ldr r7, dword_80EB848 // =0x1010014 
	bl sub_80E33FA
	pop {r0,r1,r4,r7}
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	ldr r0, [r7,#0x34]
	cmp r0, #1
	bne loc_80EB82A
	ldrb r0, [r5,#0x17]
	mov r1, #1
	eor r0, r1
	strb r0, [r5,#0x17]
	bl sub_800F2C6
	bl sub_801DBD4
loc_80EB82A:
	b locret_80EB83A
loc_80EB82C:
	mov r0, #0
	str r0, [r7,#0x34]
	mov r0, #4
	bl sub_800F2B6
	mov r0, #0xc
	strh r0, [r7]
locret_80EB83A:
	pop {r4,r6,pc}
	.word 0x10000, 0xF800000
dword_80EB844: .word 0xFFE0
dword_80EB848: .word 0x1010014
.endfunc // sub_80EB79C

loc_80EB84C:
	mov r0, #1
	ldrb r1, [r7,#3]
	cmp r1, #0xb
	bne loc_80EB856
	mov r0, #2
loc_80EB856:
	strh r0, [r7,#0x12]
	mov r0, #0
	str r0, [r7,#0x30]
	mov r0, #8
	strh r0, [r7]
	mov pc, lr
.func
.thumb_func
sub_80EB862:
	push {r4,r6,r7,lr}
	mov r0, r8
	push {r0}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EB8DC
	mov r0, #5
	bl sub_800F2B6
	bl sub_8011450
	bl sub_800FDB6
	mov r0, #0xb0
	ldrb r1, [r7,#3]
	cmp r1, #5
	beq loc_80EB88C
	cmp r1, #0xb
	beq loc_80EB88C
	cmp r1, #6
	bne loc_80EB88E
loc_80EB88C:
	mov r0, #0xce
loc_80EB88E:
	bl sound_play // () -> void
	push {r7}
	bl sub_80EBB78
	add r4, r0, #0
	lsl r4, r4, #0x10
	bl sub_80EBAE8
	add r4, r4, r0
	lsl r4, r4, #8
	bl sub_80EBB34
	add r4, r4, r0
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	strh r0, [r7,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#3]
	lsl r2, r2, #2
	ldr r3, off_80EB9F4 // =dword_80EBA18 
	ldr r3, [r3,r2]
	mov r2, #0xa
	bl nullsub_12
	mov r0, #4
	strb r0, [r7,#1]
loc_80EB8DC:
	ldrh r0, [r7,#0x10]
	cmp r0, #0x10
	bne loc_80EB93E
	ldrb r0, [r7,#0xc]
	tst r0, r0
	beq loc_80EB93E
	push {r7}
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #8
	mov r0, #5
	bl sub_800F2AA
	add r4, r4, r0
	lsl r4, r4, #0x10
	add r4, #0xff
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80EBA0C // =0xffe0 
	ldr r7, dword_80EBA10 // =0x101001e 
	bl sub_80E33FA
	pop {r7}
	push {r7}
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #8
	bl sub_80EBAE8
	add r4, r4, r0
	lsl r4, r4, #8
	bl sub_80EBB34
	bl sub_80B8E62
	add r4, r4, r1
	lsl r4, r4, #8
	add r4, r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80EBA0C // =0xffe0 
	ldr r7, dword_80EBA14 // =0x1e 
	bl sub_80E33FA
	pop {r7}
loc_80EB93E:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xc
	bne loc_80EB9C0
	ldrb r4, [r7,#3]
	mov r1, #0
	ldr r0, off_80EB9FC // =off_80EBA00 
	ldr r0, [r0,r1]
	lsl r2, r4, #2
	ldr r0, [r0,r2]
	mov r8, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r3, [r7,#3]
	push {r0,r1,r3}
	lsl r3, r3, #2
	ldr r4, off_80EB9F4 // =dword_80EBA18 
	ldr r4, [r4,r3]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	ldrh r0, [r7,#6]
	add r6, r6, r0
	pop {r0,r1,r3}
	push {r0,r1,r3,r6,r7}
	mov r7, r8
	mov r3, #0
	bl sub_80C536A
	pop {r0,r1,r3,r6,r7}
	ldrb r2, [r7,#3]
	cmp r2, #0xa
	bne loc_80EB992
	ldr r4, dword_80EBA08 // =0x705ff01 
	push {r0-r3,r7}
	ldrb r2, [r7,#2]
	mov r7, r8
	mov r3, #0
	bl sub_80C536A
	pop {r0-r3,r7}
loc_80EB992:
	push {r0,r1,r3}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	ldr r2, off_80EB9F8 // =byte_80EBAD8 
	ldrb r0, [r2,r3]
	add r4, r4, r0
	cmp r3, #0xc
	blt loc_80EB9AE
	cmp r3, #0xf
	bgt loc_80EB9AE
	sub r3, #0xb
	lsl r3, r3, #0x10
	orr r4, r3
loc_80EB9AE:
	pop {r0,r1,r3}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
loc_80EB9C0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80EB9EE
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	ble loc_80EB9E2
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #0
	strb r0, [r7,#1]
	pop {r0}
	mov r8, r0
	pop {r4,r6,r7,pc}
loc_80EB9E2:
	mov r0, #0x10
	ldrb r1, [r7,#0xc]
	tst r1, r1
	beq loc_80EB9EC
	mov r0, #0xc
loc_80EB9EC:
	strh r0, [r7]
loc_80EB9EE:
	pop {r0}
	mov r8, r0
	pop {r4,r6,r7,pc}
off_80EB9F4: .word dword_80EBA18
off_80EB9F8: .word byte_80EBAD8
off_80EB9FC: .word off_80EBA00
off_80EBA00: .word dword_80EBA18+0x40
	.word dword_80EBA98
dword_80EBA08: .word 0x705FF01
dword_80EBA0C: .word 0xFFE0
dword_80EBA10: .word 0x101001E
dword_80EBA14: .word 0x1E
dword_80EBA18: .word 0x705FF01, 0x705FF04, 0x705FF02, 0x705FF04, 0x705FF02
	.word 0x705FF11, 0x705FF11, 0x705FF11, 0x705FF02, 0x705FF06
	.word 0x705FF0B, 0x705FF11, 0x705FF04, 0x705FF04, 0x705FF04
	.word 0x705FF04, 0x3, 0x3, 0x3, 0x3
	.word 0x3, 0x3, 0x3, 0x3, 0x3
	.word 0x3, 0x3, 0x1, 0x3, 0x3
	.word 0x1001, 0x1
dword_80EBA98: .word 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1001, 0x1
byte_80EBAD8: .byte 0x18, 0x16, 0x17, 0x19, 0x1A, 0x1B, 0x1C, 0x28, 0x2D
	.byte 0x25, 0x5F, 0x1B, 0x16, 0x16, 0x16, 0x16
.endfunc // sub_80EB862

.func
.thumb_func
sub_80EBAE8:
	push {r4,r7,lr}
	mov r7, #0
	ldr r4, [r5,#0x58]
	ldrb r0, [r4]
	ldrb r1, [r4,#1]
	cmp r0, #0
	beq loc_80EBB30
	cmp r0, #1
	bne loc_80EBB02
	cmp r1, #0xd
	bge loc_80EBB30
	add r7, r1, #0
	b loc_80EBB30
loc_80EBB02:
	cmp r0, #2
	bne loc_80EBB30
	cmp r1, #0
	beq loc_80EBB14
	cmp r1, #0x13
	bne loc_80EBB10
	mov r1, #0xe
loc_80EBB10:
	add r7, r1, #0
	b loc_80EBB30
loc_80EBB14:
	mov r1, #0x2c 
	bl sub_8013774
	mov r7, #0
	cmp r0, #0xb
	blt loc_80EBB30
	mov r7, #0xc
	cmp r0, #0xc
	beq loc_80EBB2E
	cmp r0, #0x17
	beq loc_80EBB30
	cmp r0, #0x11
	ble loc_80EBB30
loc_80EBB2E:
	mov r7, #0xd
loc_80EBB30:
	add r0, r7, #0
	pop {r4,r7,pc}
.endfunc // sub_80EBAE8

.func
.thumb_func
sub_80EBB34:
	push {r4,r7,lr}
	ldrb r0, [r7,#3]
	ldr r7, off_80EBB60 // =byte_80EBB64 
	ldrb r7, [r7,r0]
	ldr r4, [r5,#0x58]
	ldrb r0, [r4]
	ldrb r1, [r4,#1]
	cmp r0, #0
	beq loc_80EBB58
	cmp r0, #1
	bne loc_80EBB50
	cmp r1, #0xd
	bge loc_80EBB58
	b loc_80EBB58
loc_80EBB50:
	cmp r0, #2
	bne loc_80EBB58
	cmp r1, #0
	bne loc_80EBB58
loc_80EBB58:
	add r0, r7, #0
	pop {r4,r7,pc}
	.byte 0, 0, 0, 0
off_80EBB60: .word byte_80EBB64
byte_80EBB64: .byte 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x19, 0x1A, 0x1B
	.byte 0x1C, 0x0, 0x3, 0x3, 0x0
.endfunc // sub_80EBB34

.func
.thumb_func
sub_80EBB78:
	push {r4,r7,lr}
	mov r7, #0
	ldr r4, [r5,#0x58]
	ldrb r0, [r4]
	ldrb r1, [r4,#1]
	ldrb r2, [r4,#0x16]
	cmp r0, #1
	bne loc_80EBB94
	cmp r1, #0x12
	bne loc_80EBB94
	cmp r2, #4
	bne loc_80EBB94
	mov r7, #0xc
	b loc_80EBB94
loc_80EBB94:
	add r0, r7, #0
	pop {r4,r7,pc}
.endfunc // sub_80EBB78

.func
.thumb_func
sub_80EBB98:
	push {lr}
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0xb
	blt loc_80EBBA8
	cmp r0, #0x18
	ble loc_80EBBDC
loc_80EBBA8:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80EBC0C
	ldr r0, [r7,#0x34]
	cmp r0, #1
	bne loc_80EBBC8
	ldrb r0, [r5,#0x17]
	mov r1, #1
	eor r0, r1
	strb r0, [r5,#0x17]
	bl sub_800F2C6
	bl sub_801DBD4
loc_80EBBC8:
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_801A04C
	bl sub_800E29C // () -> void
loc_80EBBDC:
	mov r0, #0x10
	strh r0, [r7]
	pop {pc}
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EBBF8
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EBBF8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EBC0C
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EBC0C:
	pop {pc}
.endfunc // sub_80EBB98

loc_80EBC0E:
	push {lr}
	ldr r1, off_80EBC1C // =off_80EBC20 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EBC1C: .word off_80EBC20
off_80EBC20: .word sub_80EBC28+1
	.word sub_80EBD3C+1
.func
.thumb_func
sub_80EBC28:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EBC66
	mov r0, #8
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #0
	strh r0, [r7,#0x10]
	push {r7}
	bl sub_80EBD68
	lsl r0, r0, #8
	ldrb r1, [r7,#3]
	ldr r2, off_80EBD18 // =byte_80EBD2C 
	ldrb r4, [r2,r1]
	add r4, r4, r0
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EBD14
loc_80EBC66:
	ldrh r0, [r7,#0x10]
	cmp r0, #8
	bne loc_80EBCDC
	ldrb r0, [r7,#3]
	cmp r0, #4
	blt loc_80EBCDC
	push {r7}
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #8
	mov r0, #0
	add r4, r4, r0
	lsl r4, r4, #8
	ldrb r0, [r7,#3]
	ldr r1, off_80EBD18 // =byte_80EBD2C 
	ldrb r0, [r1,r0]
	bl sub_80B8E62
	add r4, r4, r1
	lsl r4, r4, #8
	add r4, r4, r0
	ldrh r0, [r5,#0x28]
	mov r1, #7
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r6, r0, #0x10
	lsl r7, r1, #0x10
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	add r1, r1, r6
	add r3, r3, r7
	ldr r6, dword_80EBD20 // =0x8318 
	ldr r7, dword_80EBD28 // =0x1e 
	bl sub_80E33FA
	pop {r7}
	push {r7}
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #8
	mov r0, #8
	bl sub_800F2AA
	add r4, r4, r0
	lsl r4, r4, #0x10
	add r4, #0xff
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80EBD20 // =0x8318 
	ldr r7, dword_80EBD24 // =0x101001e 
	bl sub_80E33FA
	pop {r7}
loc_80EBCDC:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xf
	bne loc_80EBD06
	mov r0, #0xae
	bl sound_play // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r3, [r7,#3]
	ldr r4, off_80EBD1C // =byte_80EBD34 
	ldrb r4, [r3,r4]
	mov r3, #0x18
	lsl r3, r3, #0x10
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	bl sub_80C4FFE
loc_80EBD06:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x1d
	bne locret_80EBD14
	mov r0, #4
	strh r0, [r7]
locret_80EBD14:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80EBD18: .word byte_80EBD2C
off_80EBD1C: .word byte_80EBD34
dword_80EBD20: .word 0x8318
dword_80EBD24: .word 0x101001E
dword_80EBD28: .word 0x1E
byte_80EBD2C: .byte 0x0, 0x1, 0x2, 0x1E, 0x0, 0x1, 0x2, 0x0
byte_80EBD34: .byte 0x1, 0x1, 0x1, 0x1, 0xC, 0xC, 0xC, 0x0
.endfunc // sub_80EBC28

.func
.thumb_func
sub_80EBD3C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EBD5A
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #7
	bl sub_800F2B6
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EBD5A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EBD66
	bl sub_8011714
locret_80EBD66:
	pop {pc}
.endfunc // sub_80EBD3C

.func
.thumb_func
sub_80EBD68:
	ldr r0, [r5,#0x58]
	ldrb r1, [r0]
	cmp r1, #2
	bne loc_80EBD78
	ldrb r0, [r0,#1]
	ldr r1, off_80EBD7C // =off_80EBD80 
	ldrb r0, [r1,r0]
	mov pc, lr
loc_80EBD78:
	mov r0, #0
	mov pc, lr
off_80EBD7C: .word off_80EBD80
off_80EBD80: .word 0x100
	.byte 0, 0, 0, 0
	.word 0x10100, 0x0, 0x0, 0x0, 0x0
.endfunc // sub_80EBD68

loc_80EBD9C:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	cmp r0, #0
	bne loc_80EBDF0
	push {r7}
	ldr r6, [r7,#8]
	ldr r4, [r7,#0xc]
	ldrb r1, [r7,#3]
	lsl r1, r1, #2
	ldr r3, off_80EBDF8 // =off_802CCB4 
	ldr r3, [r3,r1]
	ldrb r2, [r7,#2]
	ldrh r1, [r7,#6]
	lsl r1, r1, #0x10
	ldrh r7, [r7,#0x14]
	add r7, r7, r1
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov lr, pc
	bx r3
	pop {r7}
	push {r0}
	ldrb r0, [r5,#0x16]
	bl sub_800BF5C
	ldr r0, [r0,#8]
	tst r0, r0
	pop {r0}
	bne loc_80EBDEA
	mov r1, #0
	ldrh r2, [r7,#0x14]
	ldr r3, off_80EBDFC // =0x170 
	cmp r2, r3
	blt loc_80EBDE2
	mov r1, #1
loc_80EBDE2:
	add r2, r0, #0
	ldrb r0, [r5,#0x16]
	bl sub_800BF16
loc_80EBDEA:
	mov r0, #1
	strb r0, [r7,#1]
	b locret_80EBDF4
loc_80EBDF0:
	bl sub_8011714
locret_80EBDF4:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80EBDF8: .word off_802CCB4
off_80EBDFC: .word 0x170
loc_80EBE00:
	push {lr}
	ldr r1, off_80EBE10 // =off_80EBE14 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EBE10: .word off_80EBE14
off_80EBE14: .word sub_80EBE20+1
	.word sub_80EBE54+1
	.word sub_80EBEB2+1
.func
.thumb_func
sub_80EBE20:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EBE42
	mov r0, #5
	strh r0, [r7,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0xa
	mov r3, #8
	bl nullsub_12
	mov r0, #4
	strb r0, [r7,#1]
loc_80EBE42:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EBE52
	mov r0, #4
	strh r0, [r7]
	bl sub_80EBE54
locret_80EBE52:
	pop {pc}
.endfunc // sub_80EBE20

.func
.thumb_func
sub_80EBE54:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EBE76
	mov r0, #0xe
	bl sub_800F2B6
	bl sub_80EB562
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	strh r0, [r7,#0x10]
loc_80EBE76:
	ldrh r0, [r7,#0x10]
	cmp r0, #1
	bne loc_80EBEA2
	mov r0, #0x6a 
	bl sound_play // () -> void
	ldrb r0, [r7,#0xc]
	ldrh r1, [r7,#8]
	mov r3, #0x18
	lsl r3, r3, #0x10
	bl sub_800FAAC
	strh r0, [r7,#0x12]
	push {r7}
	mov r0, #0
	lsl r4, r0, #8
	add r4, #5
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
loc_80EBEA2:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #4
	ble locret_80EBEB0
	mov r0, #8
	strh r0, [r7]
locret_80EBEB0:
	pop {r4,pc}
.endfunc // sub_80EBE54

.func
.thumb_func
sub_80EBEB2:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EBEC2
	ldrh r0, [r7,#0x12]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EBEC2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80EBED6
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
loc_80EBED6:
	bl object_canMove
	beq locret_80EBF0E
	bl sub_800FA54
	cmp r0, #0
	beq locret_80EBF0E
	add r6, r0, #0
	bl sub_800F964
	tst r0, r0
	beq locret_80EBF0E
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
	bl sub_8010332
	add r4, r0, #0
	bl sub_80103A8
	add r2, r0, #0
	add r0, r6, #0
	add r1, r4, #0
	bl sub_80116AE
locret_80EBF0E:
	pop {r4,pc}
.endfunc // sub_80EBEB2

loc_80EBF10:
	push {lr}
	ldr r1, off_80EBF20 // =off_80EBF24 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EBF20: .word off_80EBF24
off_80EBF24: .word sub_80EBF30+1
	.word sub_80EBF6E+1
	.word sub_80EBFF4+1
.func
.thumb_func
sub_80EBF30:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EBF60
	mov r0, #0xa
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	mov r4, #0xd
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #1
	strh r0, [r7,#0x10]
loc_80EBF60:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EBF6C
	mov r0, #4
	strh r0, [r7]
locret_80EBF6C:
	pop {r4,pc}
.endfunc // sub_80EBF30

.func
.thumb_func
sub_80EBF6E:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x14
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EBF98
	ldrb r1, [r7,#3]
	ldr r2, off_80EBFE4 // =byte_80EBFEC 
	ldrb r1, [r2,r1]
	strh r1, [r7,#0x12]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0xd
	bl sub_800F2B6
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EBF98:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80EBFE0
	mov r0, #0xa
	strh r0, [r7,#0x10]
	bl sub_8001532
	mov r1, #3
	and r0, r1
	ldr r1, off_80EBFE8 // =byte_80EBFF0 
	ldrb r3, [r1,r0]
	lsl r3, r3, #0x10
	push {r3}
	bl object_getFlipDirection_800E2CA // () -> int
	pop {r3}
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	bl sub_80C6ADA
	mov r0, #0xb9
	bl sound_play // () -> void
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_80EBFE0
	mov r0, #8
	strh r0, [r7]
loc_80EBFE0:
	add sp, sp, #0x14
	pop {r4,r6,r7,pc}
off_80EBFE4: .word byte_80EBFEC
off_80EBFE8: .word byte_80EBFF0
byte_80EBFEC: .byte 0x3, 0x4, 0x5, 0xA
byte_80EBFF0: .byte 0x8, 0x10, 0x18, 0x20
.endfunc // sub_80EBF6E

.func
.thumb_func
sub_80EBFF4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC014
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0xa
	bl sub_800F2B6
	mov r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EC014:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EC028
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EC028:
	pop {pc}
.endfunc // sub_80EBFF4

loc_80EC02A:
	push {lr}
	ldr r1, off_80EC038 // =off_80EC03C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EC038: .word off_80EC03C
off_80EC03C: .word sub_80EC044+1
	.word sub_80EC0C0+1
.func
.thumb_func
sub_80EC044:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC0B4
	mov r0, #0xa
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	mov r4, #0xe
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	mov r2, #0
	ldrb r3, [r7,#3]
	cmp r3, #1
	beq loc_80EC09A
	push {r7}
	mov r3, #0x1b
	lsl r3, r3, #0x10
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80CEAA2
	str r0, [r5,#0x4c]
	pop {r7}
	b loc_80EC0AC
loc_80EC09A:
	push {r7}
	mov r3, #0x1b
	lsl r3, r3, #0x10
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80E85FA
	str r0, [r5,#0x4c]
	pop {r7}
loc_80EC0AC:
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EC0B4:
	ldr r0, [r5,#0x4c]
	tst r0, r0
	bne locret_80EC0BE
	mov r0, #4
	strh r0, [r7]
locret_80EC0BE:
	pop {r4,r6,pc}
.endfunc // sub_80EC044

.func
.thumb_func
sub_80EC0C0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC0D0
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EC0D0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EC0E4
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EC0E4:
	pop {pc}
.endfunc // sub_80EC0C0

loc_80EC0E6:
	push {lr}
	ldr r1, off_80EC0F4 // =loc_80EC0F8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EC0F4: .word loc_80EC0F8
loc_80EC0F8:
	stmia r1!, {r0,r2}
	lsr r6, r1, #0x20
	stmia r1!, {r0,r2-r4}
	lsr r6, r1, #0x20
	stmia r1!, {r0,r2,r6,r7}
	lsr r6, r1, #0x20
	ldrb r0, [r7,#3]
	ldr r1, off_80EC114 // =loc_80EC118 
	ldrb r0, [r1,r0]
	strh r0, [r7,#0x12]
	mov r0, #4
	strh r0, [r7]
	mov pc, lr
	.balign 4, 0x00
off_80EC114: .word loc_80EC118
loc_80EC118:
	lsl r1, r0, #4
	lsl r1, r0, #0xc
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC15E
	mov r0, #9
	bl sub_800F2B6
	ldr r0, [r5,#0x50]
	cmp r0, #0
	beq loc_80EC134
	mov r1, #0xff
	strb r1, [r0,#0x11]
loc_80EC134:
	bl sub_800FDB6
	mov r0, #0
	strh r0, [r7,#0x10]
	ldr r0, [r5,#0x4c]
	bl sub_80B8E58
	push {r7}
	mov r4, #0xf
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EC1B4
loc_80EC15E:
	ldrh r0, [r7,#0x10]
	cmp r0, #5
	bne loc_80EC198
	mov r0, #0xae
	bl sound_play // () -> void
	ldrb r0, [r7,#3]
	cmp r0, #3
	bne loc_80EC17C
	ldrh r0, [r7,#0x12]
	sub r0, #1
	add r0, r0, r0
	ldr r1, off_80EC1B8 // =dword_80EC1BC 
	ldrh r0, [r1,r0]
	strh r0, [r7,#0xc]
loc_80EC17C:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r3, #0x18
	lsl r3, r3, #0x10
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldr r4, [r7,#0xc]
	ldrb r2, [r7,#2]
	bl sub_80C5176
loc_80EC198:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xf
	bne locret_80EC1B4
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	ble loc_80EC1B0
	mov r0, #0
	strb r0, [r7,#1]
	pop {r4,r6,r7,pc}
loc_80EC1B0:
	mov r0, #8
	strh r0, [r7]
locret_80EC1B4:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80EC1B8: .word dword_80EC1BC
dword_80EC1BC: .word 0x1010302, 0x100, 0x7878B500, 0xD1034200, 0x82382014
	.word 0x70782004, 0x38018A38, 0xDA088238, 0xF7232000, 0x2000F86A
	.word 0x6DA964E8, 0xF7256688, 0xBD00FA93
loc_80EC1F0:
	push {lr}
	ldr r1, off_80EC200 // =off_80EC204 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EC200: .word off_80EC204
off_80EC204: .word sub_80EC210+1
	.word sub_80EC2A4+1
	.word sub_80EC2EA+1
.func
.thumb_func
sub_80EC210:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC234
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EC2A2
loc_80EC234:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EC2A2
	mov r0, #0
	ldr r1, [r5,#0x54]
	strh r0, [r1,#0x2e]
	ldr r0, dword_80EC344 // =0xffff 
	bl object_setInvulnerableTime
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80EC348 // =0x10000 
	mul r1, r0
	str r1, [r5,#0x40]
	ldr r1, dword_80EC348 // =0x10000 
	mul r1, r0
	str r1, [r7,#0x30]
	mov r0, #0xb
	strh r0, [r7,#0x10]
	mov r0, #0x16
	bl sub_800F2B6
	mov r0, #0xc0
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xc8
	add r0, #0xff
	bl sound_play // () -> void
	ldr r0, dword_80EC348 // =0x10000 
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	ldrb r2, [r7,#2]
	mov r3, #0x18
	lsl r3, r3, #0x10
	mov r4, #0
	ldr r6, [r7,#8]
	push {r2,r6}
	bl sub_80DB666
	pop {r2,r6}
	mov r4, #1
	bl sub_80DB666
	mov r0, #4
	strh r0, [r7]
locret_80EC2A2:
	pop {r4,r6,pc}
.endfunc // sub_80EC210

.func
.thumb_func
sub_80EC2A4:
	push {lr}
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80EC2B2
	bl sub_801A074 // () -> void
loc_80EC2B2:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	cmp r0, #0
	beq loc_80EC2D4
	sub r0, #1
	strh r0, [r7,#0x10]
	ldr r0, [r5,#0x40]
	ldr r1, [r7,#0x30]
	add r0, r0, r1
	str r0, [r5,#0x40]
loc_80EC2D4:
	bl object_isCurrentPanelValid
	cmp r0, #0
	bne locret_80EC2E8
	ldr r0, dword_80EC34C // =0xdc0000 
	str r0, [r5,#0x34]
	mov r0, #8
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80EC2E8:
	pop {pc}
.endfunc // sub_80EC2A4

.func
.thumb_func
sub_80EC2EA:
	push {r4,lr}
	ldrh r0, [r7,#0x10]
	cmp r0, #3
	bne loc_80EC308
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x1e
	lsl r3, r3, #0x10
	mov r4, #0x13
	bl sub_80E05F6
loc_80EC308:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EC342
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	bl sub_800EB08
	bl sub_80142C2
	mov r0, #1
	bl sub_801A07C
	bl sub_8011714
locret_80EC342:
	pop {r4,pc}
dword_80EC344: .word 0xFFFF
dword_80EC348: .word 0x10000
dword_80EC34C: .word 0xDC0000
.endfunc // sub_80EC2EA

.func
.thumb_func
sub_80EC350:
	push {r4,r6,lr}
	push {r7}
	ldrb r2, [r7,#2]
	ldrb r3, [r7,#3]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r1, [r7,#6]
	lsl r1, r1, #0x10
	ldrh r7, [r7,#0x14]
	add r7, r7, r1
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_80E192C
	pop {r7}
	push {r0}
	ldrb r0, [r5,#0x16]
	bl sub_800BF5C
	ldr r0, [r0,#8]
	tst r0, r0
	pop {r0}
	bne loc_80EC392
	mov r1, #0
	ldrh r2, [r7,#0x14]
	ldr r3, off_80EC398 // =0x170 
	cmp r2, r3
	blt loc_80EC38A
	mov r1, #1
loc_80EC38A:
	add r2, r0, #0
	ldrb r0, [r5,#0x16]
	bl sub_800BF16
loc_80EC392:
	bl sub_8011714
	pop {r4,r6,pc}
off_80EC398: .word 0x170
.endfunc // sub_80EC350

loc_80EC39C:
	push {r4,r6,lr}
loc_80EC39E:
	mov r0, r8
	push {r0}
	ldrb r0, [r7]
	cmp r0, #0
	bne loc_80EC3DA
	mov r0, #1
	strb r0, [r7]
	ldrb r1, [r7,#3]
	lsl r1, r1, #2
	ldr r2, off_80EC3EC // =off_80EC3F0 
	ldr r2, [r1,r2]
	mov r8, r2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrb r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	ldr r3, [r5,#0x3c]
	push {r7}
	mov r7, r8
	mov lr, pc
	bx r7
	pop {r7}
	ldrb r0, [r7,#3]
	cmp r0, #0x14
	bne loc_80EC3E2
	mov r0, #8
	strh r0, [r7,#0x10]
loc_80EC3DA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80EC3E6
loc_80EC3E2:
	bl sub_8011714
loc_80EC3E6:
	pop {r0}
	mov r8, r0
	pop {r4,r6,pc}
off_80EC3EC: .word off_80EC3F0
off_80EC3F0: .word sub_80104E0+1
	.word sub_80CA4F6+1
	.word sub_8010474+1
	.word sub_8010488+1
	.word sub_80D2596+1
	.word sub_800AF34+1
	.word sub_801050C+1
	.byte 0, 0, 0, 0
	.word sub_80CFE08+1
	.word sub_8015AA6+1
	.word sub_8010820+1
	.word sub_802E1BE+1
	.word 0x80DEDE1, 0x80EC44D, 0x80EA11D, 0x80E94DD, 0x80E5A65
	.word 0x80C6331, 0x0
	push {r0,r2,r4,r5,r7}
	lsr r5, r1, #0x20
	bmi loc_80EC39E
	lsr r4, r1, #0x20
	ldr r7, dword_80EC774 // =0xb001fd69 
	lsr r6, r1, #0x20
	ldr r6, [sp,#0x33c]
	lsr r4, r1, #0x20
	push {lr}
	mov r0, #0x8d
	bl sound_play // () -> void
	ldrb r0, [r5,#0x16]
	mov r1, #0xff
	bl sub_8015BEC
	pop {pc}
loc_80EC45E:
	push {lr}
	ldr r1, off_80EC480 // =off_80EC484 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_800FFFE
	ldr r1, dword_80EC48C // =0x8600 
	tst r0, r1
	beq locret_80EC47C
	mov r1, #0
	mov r2, #0
	bl sub_801056A
locret_80EC47C:
	pop {pc}
	.byte 0, 0
off_80EC480: .word off_80EC484
off_80EC484: .word sub_80EC490+1
	.word sub_80EC556+1
dword_80EC48C: .word 0x8600
.func
.thumb_func
sub_80EC490:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC4BC
	mov r0, #0xe
	bl sub_800F2B6
	bl sub_80EB562
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #6
	mov r1, #1
	lsl r1, r1, #1
	sub r0, r0, r1
	strh r0, [r7,#0x12]
	mov r0, #0
	strh r0, [r7,#0x10]
loc_80EC4BC:
	ldrh r0, [r7,#0x10]
	cmp r0, #1
	bne loc_80EC4FE
	mov r0, #0xb9
	bl sound_play // () -> void
	bl sub_8001532
	mov r1, #3
	and r0, r1
	ldr r1, off_80EC5A8 // =dword_80EC5B0 
	ldrb r3, [r1,r0]
	lsl r3, r3, #0x10
	mov r1, #1
	and r0, r1
	ldr r1, off_80EC5AC // =dword_80EC5B4 
	ldrb r0, [r1,r0]
	ldr r1, [r7,#8]
	ldrh r2, [r7,#6]
	add r1, r1, r2
	bl sub_800FAAC
	push {r7}
	mov r4, #5
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	b loc_80EC4FE
	mov r0, #0
	bl sound_play // () -> void
loc_80EC4FE:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	ldrh r1, [r7,#0x12]
	cmp r0, r1
	ble loc_80EC510
	mov r0, #4
	strh r0, [r7]
	b locret_80EC554
loc_80EC510:
	ldrh r0, [r7,#0x10]
	cmp r0, #3
	blt locret_80EC554
	bl object_canMove
	beq locret_80EC554
	bl sub_800FA54
	cmp r0, #0
	beq locret_80EC554
	add r6, r0, #0
	bl sub_800F964
	cmp r0, #0
	beq locret_80EC554
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	bl sub_80B8E58
	bl sub_8011714
	bl sub_8010332
	add r4, r0, #0
	bl sub_80103A8
	add r2, r0, #0
	add r0, r6, #0
	add r1, r4, #0
	bl sub_80116AE
	b locret_80EC554
locret_80EC554:
	pop {r4,pc}
.endfunc // sub_80EC490

.func
.thumb_func
sub_80EC556:
	push {r4,r6,lr}
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	bl sub_80B8E58
	ldrb r0, [r7,#0xd]
	cmp r0, #0
	beq loc_80EC570
	sub r0, #1
	strb r0, [r7,#0xd]
	bne loc_80EC594
loc_80EC570:
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0x17
	beq loc_80EC5A2
	bl sub_800FFFE
	ldr r1, dword_80EC5B8 // =0x10000 
	tst r0, r1
	bne loc_80EC5A2
	ldr r0, [r5,#0x58]
	ldrb r1, [r0]
	cmp r1, #2
	bne loc_80EC5A2
	ldrh r0, [r0,#0x22]
	mov r1, #2
	tst r0, r1
	beq loc_80EC5A2
loc_80EC594:
	mov r0, #4
	str r0, [r7,#0x30]
	mov r0, #0
	strh r0, [r7]
	bl sub_80EC490
	b locret_80EC5A6
loc_80EC5A2:
	bl sub_8011714
locret_80EC5A6:
	pop {r4,r6,pc}
off_80EC5A8: .word dword_80EC5B0
off_80EC5AC: .word dword_80EC5B4
dword_80EC5B0: .word 0x20181008
dword_80EC5B4: .word 0x606
dword_80EC5B8: .word 0x10000
.endfunc // sub_80EC556

loc_80EC5BC:
	push {lr}
	ldr r1, off_80EC5DC // =off_80EC5E0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_800FFFE
	ldr r1, dword_80EC5E8 // =0x8600 
	tst r0, r1
	beq locret_80EC5DA
	mov r1, #0
	mov r2, #0
	bl sub_801056A
locret_80EC5DA:
	pop {pc}
off_80EC5DC: .word off_80EC5E0
off_80EC5E0: .word sub_80EC5EC+1
	.word sub_80EC67E+1
dword_80EC5E8: .word 0x8600
.func
.thumb_func
sub_80EC5EC:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC62C
	mov r0, #0xe
	bl sub_800F2B6
	ldr r0, [r5,#0x50]
	mov r1, #0
	strb r1, [r0,#0x11]
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r0, [r5,#0x58]
	cmp r0, #0
	beq loc_80EC618
	push {r0}
	ldr r0, [r0,#0x68]
	bl sub_80B8E58
	pop {r0}
	mov r1, #0
	str r1, [r0,#0x68]
loc_80EC618:
	bl sub_80EB562
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strh r0, [r7,#0x10]
loc_80EC62C:
	ldrh r0, [r7,#0x10]
	cmp r0, #1
	bne loc_80EC66E
	mov r0, #0xb3
	bl sound_play // () -> void
	mov r0, #0
	ldr r1, off_80EC708 // =byte_80EC70C 
	ldrb r3, [r1,r0]
	lsl r3, r3, #0x10
	mov r0, #3
	ldr r1, [r5,#0x3c]
	cmp r1, #0
	beq loc_80EC64C
	ldr r0, dword_80ECA1C // =0x10003 
	add r3, r3, r1
loc_80EC64C:
	ldr r1, [r7,#8]
	ldrh r2, [r7,#6]
	add r1, r1, r2
	bl loc_80EC710
	mov r0, #2
	ldrb r1, [r7,#0xe]
	add r1, #1
	cmp r1, #3
	blt loc_80EC662
	mov r1, #0
loc_80EC662:
	strh r0, [r7,#0x12]
	strb r1, [r7,#0xe]
	b loc_80EC66E
	mov r0, #0
	bl sound_play // () -> void
loc_80EC66E:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #4
	ble locret_80EC67C
	mov r0, #4
	strh r0, [r7]
locret_80EC67C:
	pop {r4,pc}
.endfunc // sub_80EC5EC

.func
.thumb_func
sub_80EC67E:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC68E
	ldrh r0, [r7,#0x12]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EC68E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80EC6D6
	ldrb r0, [r7,#0xd]
	cmp r0, #0
	beq loc_80EC6A2
	sub r0, #1
	strb r0, [r7,#0xd]
	bne loc_80EC6C6
loc_80EC6A2:
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0x18
	beq loc_80EC6D0
	bl sub_800FFFE
	ldr r1, dword_80ECA20 // =0x10000 
	tst r0, r1
	bne loc_80EC6D0
	ldr r0, [r5,#0x58]
	ldrb r1, [r0]
	cmp r1, #2
	bne loc_80EC6D0
	ldrh r0, [r0,#0x22]
	mov r1, #2
	tst r0, r1
	beq loc_80EC6D0
loc_80EC6C6:
	mov r0, #4
	str r0, [r7,#0x30]
	mov r0, #0
	strh r0, [r7]
	b locret_80EC706
loc_80EC6D0:
	bl sub_80EC792
	b locret_80EC706
loc_80EC6D6:
	bl object_canMove
	beq locret_80EC706
	bl sub_800FA54
	cmp r0, #0
	beq locret_80EC706
	add r6, r0, #0
	bl sub_800F964
	cmp r0, #0
	beq locret_80EC706
	bl sub_80EC792
	bl sub_8010332
	add r4, r0, #0
	bl sub_80103A8
	add r2, r0, #0
	add r0, r6, #0
	add r1, r4, #0
	bl sub_80116AE
locret_80EC706:
	pop {r4,r6,pc}
off_80EC708: .word byte_80EC70C
byte_80EC70C: .byte 0x16
	.byte 0x1C, 0x24, 0x2C
.endfunc // sub_80EC67E

loc_80EC710:
	push {r4,r6,r7,lr}
	sub sp, sp, #4
	str r7, [sp]
	add r4, r0, #0
	add r6, r1, #0
	add r7, r3, #0
	mov r1, #0x2c 
	bl sub_8013774
	sub r0, #0xb
	ldr r1, off_80EC780 // =dword_80EC784 
	ldrb r0, [r1,r0]
	lsl r0, r0, #0x18
	orr r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	add r3, r7, #0
	push {r1-r3}
	bl sub_80C6248
	add r4, #2
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80ECA24 // =0x1e0000 
	mul r0, r1
	pop {r1-r3}
	sub r1, r1, r0
	ldr r0, [sp]
	ldrb r0, [r0,#0xe]
	cmp r0, #0
	beq dword_80EC774+2
	ldr r0, dword_80ECA28 // =0x180000 
	sub r2, r2, r0
	push {r1-r3}
	bl sub_80C6248
	pop {r1-r3}
	ldr r0, dword_80ECA2C // =0x300000 
	add r2, r2, r0
	mov r0, #0xc
	lsl r0, r0, #0x10
	sub r3, r3, r0
	.hword 0xF7D9
dword_80EC774: .word 0xB001FD69
	pop {r4,r6,r7,pc}
	.word 0
	.byte 0, 0
off_80EC780: .word dword_80EC784
dword_80EC784: .word 0x0
	.word 0x1000000, 0x5040302
	.byte 0x0, 0x0
.func
.thumb_func
sub_80EC792:
	push {lr}
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	bl sub_80B8E58
	bl sub_8011714
	pop {pc}
.endfunc // sub_80EC792

loc_80EC7A6:
	push {lr}
	ldr r1, off_80EC7B4 // =off_80EC7B8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EC7B4: .word off_80EC7B8
off_80EC7B8: .word sub_80EC7C0+1
	.word sub_80EC81E+1
.func
.thumb_func
sub_80EC7C0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC7E6
	mov r0, #0xe
	bl sub_800F2B6
	bl sub_80EB562
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strh r0, [r7,#0x10]
loc_80EC7E6:
	ldrh r0, [r7,#0x10]
	cmp r0, #1
	bne loc_80EC80E
	push {r7}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	mov r7, #0
	mov r3, #0xa
	lsl r3, r3, #0x10
	bl sub_80C954C
	pop {r7}
loc_80EC80E:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #4
	ble locret_80EC81C
	mov r0, #4
	strh r0, [r7]
locret_80EC81C:
	pop {pc}
.endfunc // sub_80EC7C0

.func
.thumb_func
sub_80EC81E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC82E
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EC82E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EC842
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EC842:
	pop {pc}
.endfunc // sub_80EC81E

.func
.thumb_func
sub_80EC844:
	push {r4,lr}
	ldrb r0, [r7,#3]
	add r0, r0, r0
	ldr r4, off_80EC86C // =dword_80EC870 
	add r4, r4, r0
	ldrh r0, [r4]
	mov r1, #1
	bl sub_800E2FC
	tst r0, r0
	bne loc_80EC85A
loc_80EC85A:
	ldrb r0, [r5,#0x16]
	mov r1, #5
	mov r2, #1
	bl sub_800AB46
	bl sub_8011714
	pop {r4,pc}
	.balign 4, 0x00
off_80EC86C: .word dword_80EC870
dword_80EC870: .word 0x1E000A, 0x500032, 0x960078, 0x12C00C8, 0x3E8
.endfunc // sub_80EC844

loc_80EC884:
	push {lr}
	ldr r1, off_80EC894 // =off_80EC898 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EC894: .word off_80EC898
off_80EC898: .word sub_80EC8A0+1
	.word sub_80EC90E+1
.func
.thumb_func
sub_80EC8A0:
	push {r4,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC8DE
	mov r0, #9
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	push {r7}
	bl sub_80EC934
	lsl r4, r0, #8
	add r4, #0x13
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #0xaf
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EC90C
loc_80EC8DE:
	ldrh r0, [r7,#0x10]
	cmp r0, #5
	bne loc_80EC8FE
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r4, [r7,#0xc]
	mov r3, #0x18
	lsl r3, r3, #0x10
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	bl sub_80C4FFE
loc_80EC8FE:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xa
	bne locret_80EC90C
	mov r0, #4
	strh r0, [r7]
locret_80EC90C:
	pop {r4,r7,pc}
.endfunc // sub_80EC8A0

.func
.thumb_func
sub_80EC90E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC91E
	mov r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EC91E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EC932
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EC932:
	pop {pc}
.endfunc // sub_80EC90E

.func
.thumb_func
sub_80EC934:
	ldr r0, [r5,#0x58]
	ldrb r0, [r0,#1]
	ldr r1, off_80EC940 // =off_80EC944 
	ldrb r0, [r1,r0]
	mov pc, lr
	.byte 0, 0
off_80EC940: .word off_80EC944
off_80EC944: .word 0x100
	.word 0x0
	.word 0x10100, 0x0, 0x0, 0x0, 0x0
.endfunc // sub_80EC934

loc_80EC960:
	push {lr}
	ldr r1, off_80EC970 // =off_80EC974 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EC970: .word off_80EC974
off_80EC974: .word sub_80EC97C+1
	.word sub_80ECA0C+1
.func
.thumb_func
sub_80EC97C:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EC9A4
	mov r0, #0xc
	bl sub_800F2B6
	mov r0, #0xd8
	bl sound_play // () -> void
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EC9A4:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xd
	bne loc_80EC9F2
	push {r7}
	ldrb r4, [r7,#3]
	ldr r0, off_80ECA04 // =byte_80ECA08 
	ldrb r4, [r0,r4]
	lsl r4, r4, #2
	ldr r0, off_80ECA30 // =off_8019B78 
	ldr r4, [r0,r4]
	bl object_getFlipDirection_800E2CA // () -> int
	push {r0}
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	pop {r7}
loc_80EC9CE:
	mov r3, #0
	ldrsb r3, [r4,r3]
	cmp r3, #0x7f
	beq loc_80EC9F0
	push {r0-r2,r4}
	mul r3, r7
	add r0, r0, r3
	mov r3, #1
	ldrsb r3, [r4,r3]
	add r1, r1, r3
	mov r4, #5
	mov r3, #0
	bl sub_80CA686
	pop {r0-r2,r4}
	add r4, #2
	b loc_80EC9CE
loc_80EC9F0:
	pop {r7}
loc_80EC9F2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ECA02
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80ECA02:
	pop {r4,r6,r7,pc}
off_80ECA04: .word byte_80ECA08
byte_80ECA08: .byte 0x1, 0x2, 0x4, 0x0
.endfunc // sub_80EC97C

.func
.thumb_func
sub_80ECA0C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ECA1A
	bl sub_8011714
locret_80ECA1A:
	pop {pc}
dword_80ECA1C: .word 0x10003
dword_80ECA20: .word 0x10000
dword_80ECA24: .word 0x1E0000
dword_80ECA28: .word 0x180000
dword_80ECA2C: .word 0x300000
off_80ECA30: .word off_8019B78
.endfunc // sub_80ECA0C

loc_80ECA34:
	push {lr}
	ldr r1, off_80ECA44 // =off_80ECA48 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ECA44: .word off_80ECA48
off_80ECA48: .word sub_80ECA50+1
	.word sub_80ECAA4+1
.func
.thumb_func
sub_80ECA50:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECA6E
	mov r0, #0xe
	bl sub_800F2B6
	bl sub_80EB562
	bl sub_800FDB6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strh r0, [r7,#0x10]
loc_80ECA6E:
	ldrh r0, [r7,#0x10]
	cmp r0, #1
	bne loc_80ECA94
	mov r0, #0x6a 
	bl sound_play // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r4, [r7,#0xc]
	ldrh r3, [r7,#6]
	ldr r6, [r7,#8]
	add r6, r6, r3
	ldrb r2, [r7,#2]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r3, #0
	bl sub_80C9184
loc_80ECA94:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #4
	ble locret_80ECAA2
	mov r0, #4
	strh r0, [r7]
locret_80ECAA2:
	pop {pc}
.endfunc // sub_80ECA50

.func
.thumb_func
sub_80ECAA4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECAB4
	mov r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ECAB4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ECAC8
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80ECAC8:
	pop {pc}
.endfunc // sub_80ECAA4

loc_80ECACA:
	push {lr}
	ldr r1, off_80ECAD8 // =off_80ECADC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80ECAD8: .word off_80ECADC
off_80ECADC: .word sub_80ECAE8+1
	.word sub_80ECB28+1
	.word sub_80ECB84+1
.func
.thumb_func
sub_80ECAE8:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECB1A
	mov r0, #0xa
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #0xf
	strh r0, [r7,#0x10]
	push {r7}
	mov r4, #0x14
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80ECB26
loc_80ECB1A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80ECB26
	mov r0, #4
	strh r0, [r7]
locret_80ECB26:
	pop {r4,r6,r7,pc}
.endfunc // sub_80ECAE8

.func
.thumb_func
sub_80ECB28:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECB4A
	mov r0, #9
	bl sub_800F2B6
	mov r0, #0
	strh r0, [r7,#0x10]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	mov r1, #1
	bl sub_80B8E70
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80ECB82
loc_80ECB4A:
	ldrh r0, [r7,#0x10]
	cmp r0, #5
	bne loc_80ECB74
	mov r0, #1
	mov r1, #0x14
	bl sub_80302A8
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	mov r2, #0
	mov r3, #0x18
	lsl r3, r3, #0x10
	bl sub_80CB8DE
loc_80ECB74:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x12
	bne locret_80ECB82
	mov r0, #8
	strh r0, [r7]
locret_80ECB82:
	pop {r4,r6,r7,pc}
.endfunc // sub_80ECB28

.func
.thumb_func
sub_80ECB84:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECBA2
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #7
	bl sub_800F2B6
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ECBA2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ECBAE
	bl sub_8011714
locret_80ECBAE:
	pop {pc}
.endfunc // sub_80ECB84

loc_80ECBB0:
	push {lr}
	ldr r1, off_80ECBC0 // =off_80ECBC4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80ECBC0: .word off_80ECBC4
off_80ECBC4: .word sub_80ECBCC+1
	.word sub_80ECC60+1
.func
.thumb_func
sub_80ECBCC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECC08
	mov r0, #0xb
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	bl sub_80ECC86
	lsl r4, r0, #8
	ldrb r0, [r7,#3]
	ldr r1, off_80ECC48 // =byte_80ECC54 
	ldrb r0, [r1,r0]
	add r4, r4, r0
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strh r0, [r7,#0x10]
loc_80ECC08:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #1
	ble locret_80ECC46
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0xaf
	bl sound_play // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r7,#3]
	ldr r3, off_80ECC50 // =byte_80ECC5C 
	ldrb r3, [r3,r1]
	lsl r3, r3, #0x10
	ldrb r1, [r5,#0x13]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	bl sub_80C6ADA
	mov r0, #4
	strh r0, [r7]
locret_80ECC46:
	pop {pc}
off_80ECC48: .word byte_80ECC54
	.word byte_80ECC58
off_80ECC50: .word byte_80ECC5C
byte_80ECC54: .byte 0x15, 0x15, 0x2F, 0x15
byte_80ECC58: .byte 0x1, 0xA, 0xA, 0x1
byte_80ECC5C: .byte 0x10, 0x10, 0x0, 0x10
.endfunc // sub_80ECBCC

.func
.thumb_func
sub_80ECC60:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECC70
	mov r0, #0x14
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ECC70:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ECC84
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80ECC84:
	pop {pc}
.endfunc // sub_80ECC60

.func
.thumb_func
sub_80ECC86:
	ldr r0, [r5,#0x58]
	ldrb r0, [r0,#1]
	ldr r1, off_80ECC90 // =off_80ECC94 
	ldrb r0, [r1,r0]
	mov pc, lr
off_80ECC90: .word off_80ECC94
off_80ECC94: .word 0x200
	.word 0x0
	.word 0x20200, 0x0, 0x0, 0x0, 0x0
.endfunc // sub_80ECC86

loc_80ECCB0:
	push {lr}
	ldr r1, off_80ECCC0 // =off_80ECCC4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80ECCC0: .word off_80ECCC4
off_80ECCC4: .word sub_80ECCCC+1
	.word sub_80ECA0C+1
.func
.thumb_func
sub_80ECCCC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECCEE
	mov r0, #0xc
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strh r0, [r7,#0x10]
loc_80ECCEE:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xd
	bne loc_80ECD16
	push {r7}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	mov r7, #0
	mov r3, #0xa
	lsl r3, r3, #0x10
	bl sub_80C9BA4
	pop {r7}
loc_80ECD16:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80ECD26
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80ECD26:
	pop {pc}
.endfunc // sub_80ECCCC

loc_80ECD28:
	push {lr}
	ldr r1, off_80ECD38 // =off_80ECD3C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ECD38: .word off_80ECD3C
off_80ECD3C: .word sub_80ECD44+1
	.word sub_80ECDD6+1
.func
.thumb_func
sub_80ECD44:
	push {r4,r6,r7,lr}
	mov r0, r8
	push {r0}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECDAA
	ldrh r0, [r7,#6]
	ldr r1, [r7,#8]
	add r1, r1, r0
	str r1, [r7,#8]
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	mov r3, #0
	ldr r4, [r7,#0xc]
	ldrb r0, [r5,#0x12]
	add r0, r0, r6
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	push {r7}
	mov r7, #0
	bl sub_80C5578
	pop {r7}
	mov r0, #0xa
	strb r0, [r5,#0x10]
	bl sub_800FDB6
	push {r7}
	mov r0, #0x16
	ldrb r1, [r7,#3]
	cmp r1, #0
	beq loc_80ECD8A
	mov r0, #0x1e
loc_80ECD8A:
	mov r4, #1
	lsl r4, r4, #8
	add r4, r4, r0
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ECDAA:
	ldrh r0, [r7,#0x12]
	add r0, #1
	mov r1, #0xf
	and r0, r1
	strh r0, [r7,#0x12]
	cmp r0, #1
	bne loc_80ECDC0
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
loc_80ECDC0:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	ldrb r1, [r7,#0xc]
	cmp r0, r1
	blt loc_80ECDD0
	mov r0, #4
	strh r0, [r7]
loc_80ECDD0:
	pop {r0}
	mov r8, r0
	pop {r4,r6,r7,pc}
.endfunc // sub_80ECD44

.func
.thumb_func
sub_80ECDD6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECDE6
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ECDE6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ECDFA
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80ECDFA:
	pop {pc}
.endfunc // sub_80ECDD6

loc_80ECDFC:
	push {lr}
	ldr r1, off_80ECE0C // =off_80ECE10 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ECE0C: .word off_80ECE10
off_80ECE10: .word sub_80ECE18+1
	.word sub_80ECEBC+1
.func
.thumb_func
sub_80ECE18:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ECE7C
	ldrh r0, [r7,#6]
	ldr r1, [r7,#8]
	add r1, r1, r0
	str r1, [r7,#8]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r6, #0x14
loc_80ECE34:
	add r0, r0, r4
	sub r6, #4
	ldr r3, off_80ECEA8 // =dword_80ECEAC 
	bl sub_81096FA
	push {r0,r1}
	bl object_checkPanelParameters
	cmp r0, #0
	pop {r0,r1}
	beq loc_80ECE52
	add r2, r6, #0
	bl sub_80ECF00
	b loc_80ECE34
loc_80ECE52:
	mov r0, #0xa
	strb r0, [r5,#0x10]
	bl sub_800FDB6
	push {r7}
	mov r4, #0
	lsl r4, r4, #8
	add r4, #0x17
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ECE7C:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x18
	blt locret_80ECEA6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	bl sub_80ECF00
	mov r0, #0x8b
	add r0, #0xff
	bl sound_play // () -> void
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80ECEA6:
	pop {r4,r6,r7,pc}
off_80ECEA8: .word dword_80ECEAC
dword_80ECEAC: .word 0x10000, 0x5800000, 0x10000, 0xA800000
.endfunc // sub_80ECE18

.func
.thumb_func
sub_80ECEBC:
	push {lr}
	ldrb r0, [r7,#1]
	cmp r0, #1
	beq loc_80ECED2
	cmp r0, #2
	beq loc_80ECEEA
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#1]
	b loc_80ECEEA
loc_80ECED2:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq loc_80ECEEA
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #2
	strb r0, [r7,#1]
loc_80ECEEA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ECEFE
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80ECEFE:
	pop {pc}
.endfunc // sub_80ECEBC

.func
.thumb_func
sub_80ECF00:
	push {r0,r1,r4,r6,lr}
	lsl r4, r2, #8
	add r4, #2
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r0, #1
	lsl r0, r0, #0x10
	sub r2, r2, r0
	push {r1,r2}
	ldrh r0, [r5,#0x28]
	mov r1, #0x17
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r3, r1, #0x10
	pop {r1,r2}
	ldr r6, [r7,#8]
	bl sub_80C6248
	pop {r0,r1,r4,r6,pc}
.endfunc // sub_80ECF00

loc_80ECF2E:
	push {lr}
	ldr r1, off_80ECF3C // =off_80ECF40 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80ECF3C: .word off_80ECF40
off_80ECF40: .word sub_80ECF48+1
	.word sub_80ECF8E+1
.func
.thumb_func
sub_80ECF48:
	push {r4,r6,lr}
	ldrh r0, [r7,#6]
	ldr r1, [r7,#8]
	add r1, r1, r0
	str r1, [r7,#8]
	bl sub_80ED040
	strb r0, [r7,#0x16]
	mov r0, #3
	strb r0, [r7,#0x17]
	mov r0, #0xa
	strb r0, [r5,#0x10]
	bl sub_800FDB6
	push {r7}
	mov r4, #0
	lsl r4, r4, #8
	add r4, #0x1d
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #9
	strb r0, [r7,#0xe]
	mov r0, #0
	sub r0, #1
	str r0, [r7,#0x30]
	mov r0, #4
	strh r0, [r7]
	pop {r4,r6,pc}
.endfunc // sub_80ECF48

.func
.thumb_func
sub_80ECF8E:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	cmp r0, #1
	beq loc_80ECFE4
	cmp r0, #2
	beq loc_80ECFA8
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	mov r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0xd
	bl sub_800F2B6
loc_80ECFA8:
	mov r0, #1
	strb r0, [r7,#1]
	mov r0, #8
	strh r0, [r7,#0x10]
	ldr r4, [r7,#0xc]
	lsl r4, r4, #0x10
	lsr r4, r4, #0x10
	ldr r0, dword_80ED03C // =0x10000 
	orr r4, r0
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r6, [r7,#8]
	bl sub_80C5F2C
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x2f 
	bl sub_80E05F6
	cmp r0, #0
	beq loc_80ECFE4
	ldrb r1, [r7,#0xd]
	strh r1, [r0,#0x20]
loc_80ECFE4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED03A
	ldrb r1, [r7,#0x17]
	ldr r0, [r7,#0x30]
	add r1, r1, r0
	cmp r1, #1
	blt loc_80ECFFE
	cmp r1, #3
	bgt loc_80ECFFE
	strb r1, [r7,#0x17]
	b loc_80ED020
loc_80ECFFE:
	neg r0, r0
	str r0, [r7,#0x30]
	bl sub_80ED040
	ldrb r1, [r7,#0x16]
	mov r2, #1
	cmp r0, r1
	beq loc_80ED018
	bgt loc_80ED012
	sub r2, #2
loc_80ED012:
	add r1, r1, r2
	strb r1, [r7,#0x16]
	b loc_80ED020
loc_80ED018:
	ldrb r1, [r7,#0x17]
	ldr r0, [r7,#0x30]
	add r1, r1, r0
	strb r1, [r7,#0x17]
loc_80ED020:
	ldrb r0, [r7,#0xe]
	sub r0, #1
	strb r0, [r7,#0xe]
	beq loc_80ED02E
	mov r0, #2
	strb r0, [r7,#1]
	b locret_80ED03A
loc_80ED02E:
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80ED03A:
	pop {r4,r6,pc}
dword_80ED03C: .word 0x10000
.endfunc // sub_80ECF8E

.func
.thumb_func
sub_80ED040:
	push {r4,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
loc_80ED04A:
	add r0, r0, r4
	beq loc_80ED06E
	cmp r0, #7
	bge loc_80ED06E
	push {r0,r7}
	sub sp, sp, #4
	ldr r3, off_80ED07C // =dword_80ED080 
	bl sub_81096FA
	mov r7, sp
	bl sub_800CFDC
	mov r1, #1
	add sp, sp, #4
	cmp r0, #0
	pop {r0,r7}
	bne locret_80ED078
	b loc_80ED04A
loc_80ED06E:
	mov r1, #0
	mov r0, #6
	cmp r4, #0
	bgt locret_80ED078
	mov r0, #1
locret_80ED078:
	pop {r4,pc}
	.balign 4, 0x00
off_80ED07C: .word dword_80ED080
dword_80ED080: .word 0x4010000, 0x0
	.word 0x8010000, 0x0
.endfunc // sub_80ED040

loc_80ED090:
	push {lr}
	ldr r1, off_80ED0A0 // =off_80ED0A4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80ED0A0: .word off_80ED0A4
off_80ED0A4: .word sub_80ED0AC+1
	.word sub_80ED118+1
.func
.thumb_func
sub_80ED0AC:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED0E6
	ldrh r0, [r7,#6]
	ldr r1, [r7,#8]
	add r1, r1, r0
	str r1, [r7,#8]
	mov r0, #0xa
	strb r0, [r5,#0x10]
	bl sub_800FDB6
	push {r7}
	mov r4, #0
	lsl r4, r4, #8
	add r4, #0x18
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED0E6:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xa
	blt locret_80ED116
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	bl sub_80C67D8
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0x81
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r7]
locret_80ED116:
	pop {r4,r6,r7,pc}
.endfunc // sub_80ED0AC

.func
.thumb_func
sub_80ED118:
	push {lr}
	ldrb r0, [r7,#1]
	cmp r0, #0
	bne loc_80ED128
	mov r0, #0x18
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED128:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED13C
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80ED13C:
	pop {pc}
.endfunc // sub_80ED118

loc_80ED13E:
	push {lr}
	ldr r1, off_80ED14C // =off_80ED150 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80ED14C: .word off_80ED150
off_80ED150: .word sub_80ED154+1
.func
.thumb_func
sub_80ED154:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED1A4
	mov r6, #0
	push {r7}
	ldrh r0, [r5,#0x28]
	mov r1, #6
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r3, r1, #0x10
	lsl r1, r0, #0x10
	mov r2, #0
	ldr r4, [r7,#0xc]
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80C97E0
	pop {r7}
	mov r0, #1
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	bl sub_800F2B6
	bl sub_80101D4
	mov r0, #0
	str r0, [r7,#0x30]
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strh r0, [r7,#0x10]
	b locret_80ED244
loc_80ED1A4:
	ldrb r0, [r7,#3]
	cmp r0, #3
	beq loc_80ED226
	ldr r0, [r5,#0x54]
	ldrb r2, [r5,#0x17]
	mov r1, #1
	lsl r1, r2
	ldrb r2, [r0,#3]
	tst r1, r2
	beq loc_80ED226
	ldr r1, [r0,#0x70]
	ldr r2, dword_80ED24C // =0x2 
	tst r1, r2
	bne loc_80ED218
	ldr r0, [r7,#0x30]
	tst r0, r0
	bne loc_80ED226
	mov r0, #1
	str r0, [r7,#0x30]
	ldrb r0, [r7,#3]
	cmp r0, #3
	bne loc_80ED1DC
	ldrb r0, [r5,#0x16]
	mov r1, #0xb
	lsl r1, r1, #7
	bl sub_802E032
	b loc_80ED226
loc_80ED1DC:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	mov r3, #0
	ldrb r4, [r7,#3]
	cmp r4, #2
	bgt loc_80ED206
	mov r3, #0x10
	lsl r3, r3, #0x10
	mov r4, #0
	bl sub_80C9CDA
	mov r0, #0xc5
	bl sound_play // () -> void
	b loc_80ED226
loc_80ED206:
	cmp r4, #4
	bne loc_80ED216
	mov r3, #0x14
	lsl r3, r3, #0x10
	mov r4, #6
	bl sub_80C4FFE
	b loc_80ED226
loc_80ED216:
	b loc_80ED226
loc_80ED218:
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #1
	bl object_clearFlag // (int bitfield) -> void
loc_80ED226:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	ldrb r1, [r7,#0xc]
	cmp r0, r1
	ble locret_80ED244
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #1
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80ED244:
	pop {r4,r6,pc}
	.balign 4, 0x00
	.word dword_80ED254
dword_80ED24C: .word 0x2
	.word 0x20000
dword_80ED254: .word 0x51000000, 0xA2000000
.endfunc // sub_80ED154

loc_80ED25C:
	push {lr}
	ldr r1, off_80ED26C // =off_80ED270 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ED26C: .word off_80ED270
off_80ED270: .word sub_80ED278+1
	.word sub_80ECA0C+1
.func
.thumb_func
sub_80ED278:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED29A
	mov r0, #0xc
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED29A:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xd
	bne loc_80ED2E6
	ldrb r1, [r7,#0xe]
	cmp r1, #0
	beq loc_80ED2B2
	ldrb r0, [r5,#0x16]
	mov r1, #5
	mul r0, r1
	add r0, #1
	mov r1, #1
	b loc_80ED2BC
loc_80ED2B2:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
loc_80ED2BC:
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	mov r3, #0
	push {r0-r4,r6}
	bl sub_80CA90E
	ldrb r0, [r7,#0xe]
	cmp r0, #0
	pop {r0-r4,r6}
	beq loc_80ED2E6
	add r1, #1
	push {r0-r4,r6}
	bl sub_80CA90E
	pop {r0-r4,r6}
	add r1, #1
	bl sub_80CA90E
loc_80ED2E6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED2F6
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80ED2F6:
	pop {r4,r6,r7,pc}
.endfunc // sub_80ED278

loc_80ED2F8:
	push {lr}
	ldr r1, off_80ED308 // =off_80ED30C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ED308: .word off_80ED30C
off_80ED30C: .word sub_80ED314+1
	.word sub_80ECA0C+1
.func
.thumb_func
sub_80ED314:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED33C
	mov r0, #0xc
	bl sub_800F2B6
	mov r0, #0xd8
	bl sound_play // () -> void
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED33C:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xd
	bne loc_80ED362
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	mov r3, #0
	bl sub_80CC73C
	mov r0, #0xb4
	bl sound_play // () -> void
loc_80ED362:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED372
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80ED372:
	pop {r4,r6,r7,pc}
.endfunc // sub_80ED314

loc_80ED374:
	push {lr}
	ldr r1, off_80ED384 // =off_80ED388 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ED384: .word off_80ED388
off_80ED388: .word sub_80ED394+1
	.word sub_80ED3B6+1
	.word sub_80ED41C+1
.func
.thumb_func
sub_80ED394:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED3A4
	mov r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED3A4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80ED3B4
	mov r0, #4
	strh r0, [r7]
	bl sub_80ED3B6
locret_80ED3B4:
	pop {pc}
.endfunc // sub_80ED394

.func
.thumb_func
sub_80ED3B6:
	push {r4,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED40E
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xa
	bl sub_800F2B6
	ldrb r0, [r7,#3]
	mov r4, #1
	lsl r4, r4, #8
	add r4, #0x20 
	push {r7}
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	mov r3, #0x10
	lsl r3, r3, #0x10
	push {r7}
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80D2B8E
	pop {r7}
	bl sub_800FDB6
	ldrb r0, [r7,#0xd]
	add r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #0xf0
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED40E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80ED41A
	mov r0, #8
	strh r0, [r7]
locret_80ED41A:
	pop {r4,r7,pc}
.endfunc // sub_80ED3B6

.func
.thumb_func
sub_80ED41C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED436
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	mov r1, #0
	bl sub_80B8E70
	mov r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED436:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80ED452
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80ED452:
	pop {pc}
.endfunc // sub_80ED41C

loc_80ED454:
	push {lr}
	ldr r1, off_80ED464 // =off_80ED468 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ED464: .word off_80ED468
off_80ED468: .word sub_80ED470+1
	.word sub_80ED52C+1
.func
.thumb_func
sub_80ED470:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED4B4
	mov r0, #0xa
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	mov r0, #0
	ldrb r1, [r7,#3]
	mov r4, #0x21 
	cmp r1, #2
	beq loc_80ED496
	cmp r1, #3
	bne loc_80ED498
	mov r0, #1
	lsl r0, r0, #0x18
loc_80ED496:
	mov r4, #0x22 
loc_80ED498:
	add r4, r4, r0
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x2a 
	strh r0, [r7,#0x10]
loc_80ED4B4:
	ldrh r0, [r7,#0x10]
	cmp r0, #0x20 
	bne loc_80ED51E
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r0
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	ldrb r3, [r7,#3]
	cmp r3, #2
	beq loc_80ED4E2
	cmp r3, #3
	beq loc_80ED4FA
	mov r3, #0
	bl sub_80CA0E2
	b loc_80ED514
loc_80ED4E2:
	push {r7}
	push {r0-r2}
	ldrb r0, [r5,#0x16]
	bl sub_800FE52
	add r7, r0, #0
	pop {r0-r2}
	mov r3, #0
	bl sub_80CA104
	pop {r7}
	b loc_80ED514
loc_80ED4FA:
	push {r7}
	push {r0-r2}
	ldrb r0, [r5,#0x16]
	mov r1, #3
	bl sub_800AB3A
	add r7, r0, #0
	pop {r0-r2}
	mov r3, #0
	bl sub_80CA19E
	pop {r7}
	b loc_80ED514
loc_80ED514:
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
loc_80ED51E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80ED52A
	mov r0, #4
	strh r0, [r7]
locret_80ED52A:
	pop {r4,r6,pc}
.endfunc // sub_80ED470

.func
.thumb_func
sub_80ED52C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED546
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	sub r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED546:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED55A
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80ED55A:
	pop {pc}
.endfunc // sub_80ED52C

loc_80ED55C:
	push {lr}
	ldr r1, off_80ED56C // =off_80ED570 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ED56C: .word off_80ED570
off_80ED570: .word sub_80ED57C+1
	.word sub_80ED5BE+1
	.word sub_80ED61C+1
.func
.thumb_func
sub_80ED57C:
	push {lr}
	mov r0, #0xa
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	mov r4, #0x23 
	ldrb r0, [r7,#3]
	cmp r0, #2
	bne loc_80ED594
	mov r4, #0x37 
loc_80ED594:
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strh r0, [r7]
	ldrb r0, [r7,#3]
	ldr r1, off_80ED5B8 // =byte_80ED5BC 
	ldrb r0, [r1,r0]
	strh r0, [r7,#0x12]
	mov r0, #5
	strh r0, [r7,#0x10]
	pop {pc}
off_80ED5B8: .word byte_80ED5BC
byte_80ED5BC: .byte 0x1, 0x3
.endfunc // sub_80ED57C

.func
.thumb_func
sub_80ED5BE:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80ED610
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED5DC
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED5DC:
	mov r0, #0xe
	strh r0, [r7,#0x10]
	ldrh r0, [r7,#0x12]
	ldr r1, off_80ED614 // =byte_80ED618 
	ldrb r0, [r1,r0]
	strb r0, [r7,#0xd]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	ldr r4, [r7,#0xc]
	ldrb r2, [r7,#2]
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80CB686
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt locret_80ED610
	mov r0, #8
	strh r0, [r7]
locret_80ED610:
	pop {pc}
	.balign 4, 0x00
off_80ED614: .word byte_80ED618
byte_80ED618: .byte 0x0, 0x3, 0x1, 0x1
.endfunc // sub_80ED5BE

.func
.thumb_func
sub_80ED61C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED636
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	sub r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED636:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED64A
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80ED64A:
	pop {pc}
.endfunc // sub_80ED61C

loc_80ED64C:
	push {lr}
	ldr r1, off_80ED65C // =off_80ED660 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ED65C: .word off_80ED660
off_80ED660: .word sub_80ED668+1
	.word sub_80ECA0C+1
.func
.thumb_func
sub_80ED668:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED690
	mov r0, #0xc
	bl sub_800F2B6
	mov r0, #0xd8
	bl sound_play // () -> void
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED690:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xd
	bne loc_80ED6B8
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0
	bl sub_80ED6CA
	ldrb r0, [r7,#3]
	cmp r0, #1
	bne loc_80ED6B8
	mov r0, #0
	mov r1, #0
	sub r1, #1
	bl sub_80ED6CA
	mov r0, #0
	mov r1, #1
	bl sub_80ED6CA
loc_80ED6B8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED6C8
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80ED6C8:
	pop {pc}
.endfunc // sub_80ED668

.func
.thumb_func
sub_80ED6CA:
	push {r4,r6,r7,lr}
	ldrb r2, [r5,#0x12]
	add r0, r0, r2
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	mov r3, #0
	bl sub_80C6CE4
	pop {r4,r6,r7,pc}
.endfunc // sub_80ED6CA

loc_80ED6E6:
	push {lr}
	ldr r1, off_80ED6F4 // =off_80ED6F8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80ED6F4: .word off_80ED6F8
off_80ED6F8: .word sub_80ED700+1
	.word sub_80ECA0C+1
.func
.thumb_func
sub_80ED700:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED722
	mov r0, #0xc
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED722:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xd
	bne loc_80ED736
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	bl sub_80E5150
loc_80ED736:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED746
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80ED746:
	pop {r4,r6,r7,pc}
.endfunc // sub_80ED700

loc_80ED748:
	push {lr}
	ldr r1, off_80ED758 // =off_80ED75C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ED758: .word off_80ED75C
off_80ED75C: .word sub_80ED764+1
	.word sub_80ED7A2+1
.func
.thumb_func
sub_80ED764:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED786
	mov r0, #0xe
	bl sub_800F2B6
	bl sub_80EB562
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED786:
	ldrh r0, [r7,#0x10]
	cmp r0, #1
	bne loc_80ED792
	mov r0, #0xf8
	bl sound_play // () -> void
loc_80ED792:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #4
	ble locret_80ED7A0
	mov r0, #4
	strh r0, [r7]
locret_80ED7A0:
	pop {r4,pc}
.endfunc // sub_80ED764

.func
.thumb_func
sub_80ED7A2:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED7C0
	mov r1, #2
	bl sub_8013774
	add r2, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800FAF6
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED7C0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80ED7D6
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
	b locret_80ED80E
loc_80ED7D6:
	bl object_canMove
	beq locret_80ED80E
	bl sub_800FA54
	cmp r0, #0
	beq locret_80ED80E
	add r6, r0, #0
	bl sub_800F964
	tst r0, r0
	beq locret_80ED80E
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
	bl sub_8010332
	add r4, r0, #0
	bl sub_80103A8
	add r2, r0, #0
	add r0, r6, #0
	add r1, r4, #0
	bl sub_80116AE
locret_80ED80E:
	pop {r4,pc}
.endfunc // sub_80ED7A2

loc_80ED810:
	push {lr}
	ldr r1, off_80ED820 // =off_80ED824 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80ED820: .word off_80ED824
off_80ED824: .word sub_80ED82C+1
	.word sub_80ED896+1
.func
.thumb_func
sub_80ED82C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED85C
	mov r0, #0xb
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	mov r4, #0x15
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strh r0, [r7,#0x10]
loc_80ED85C:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #1
	ble locret_80ED894
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0xaf
	bl sound_play // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	mov r3, #0
	bl sub_80D9130
	mov r0, #4
	strh r0, [r7]
locret_80ED894:
	pop {pc}
.endfunc // sub_80ED82C

.func
.thumb_func
sub_80ED896:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED8A6
	mov r0, #0x14
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80ED8A6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED8C2
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80ED8C2:
	pop {pc}
.endfunc // sub_80ED896

loc_80ED8C4:
	push {lr}
	ldr r1, off_80ED8D4 // =off_80ED8D8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80ED8D4: .word off_80ED8D8
off_80ED8D8: .word sub_80ED8E0+1
	.word sub_80ED924+1
.func
.thumb_func
sub_80ED8E0:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED906
	mov r0, #0x12
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80ED922
loc_80ED906:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80ED922
	mov r0, #0x13
	bl sub_800F2B6
	bl sub_80ED94E
	mov r0, #0x5a 
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80ED922:
	pop {r4,r6,r7,pc}
.endfunc // sub_80ED8E0

.func
.thumb_func
sub_80ED924:
	push {lr}
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bge loc_80ED93A
	mov r0, #0x10
	strh r0, [r7,#0x12]
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
loc_80ED93A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED94C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80ED94C:
	pop {pc}
.endfunc // sub_80ED924

.func
.thumb_func
sub_80ED94E:
	push {r4,r6,lr}
	ldr r6, off_80EDCB8 // =off_8019B78 
	ldr r6, [r6,#0x68] // (off_8019BE0 - 0x8019b78)
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
loc_80ED960:
	mov r2, #0
	ldrsb r2, [r6,r2]
	cmp r2, #0x7f
	beq locret_80ED996
	push {r0,r1,r4,r6}
	mul r2, r4
	add r0, r0, r2
	mov r2, #1
	ldrsb r2, [r6,r2]
	add r1, r1, r2
	cmp r0, #1
	blt loc_80ED990
	cmp r0, #6
	bgt loc_80ED990
	cmp r1, #1
	blt loc_80ED990
	cmp r1, #3
	bgt loc_80ED990
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80EDCBC // =0x45a00 
	ldr r6, [r7,#8]
	bl sub_80D07A0
loc_80ED990:
	pop {r0,r1,r4,r6}
	add r6, #2
	b loc_80ED960
locret_80ED996:
	pop {r4,r6,pc}
.endfunc // sub_80ED94E

.func
.thumb_func
sub_80ED998:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80ED9AC
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80ED9AC:
	pop {pc}
.endfunc // sub_80ED998

loc_80ED9AE:
	push {lr}
	ldr r1, off_80ED9BC // =off_80ED9C0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80ED9BC: .word off_80ED9C0
off_80ED9C0: .word sub_80ED9CC+1
	.word sub_80EDA0E+1
	.word sub_80EDABA+1
.func
.thumb_func
sub_80ED9CC:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80ED9FC
	mov r0, #0xa
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	mov r4, #0x27 
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #1
	strh r0, [r7,#0x10]
loc_80ED9FC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EDA0C
	mov r1, #2
	strh r1, [r7,#0x12]
	mov r0, #4
	strh r0, [r7]
locret_80EDA0C:
	pop {r4,pc}
.endfunc // sub_80ED9CC

.func
.thumb_func
sub_80EDA0E:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x14
	ldrb r0, [r7,#1]
	cmp r0, #4
	beq loc_80EDA30
	cmp r0, #8
	beq loc_80EDA92
	mov r0, #3
	strh r0, [r7,#0x10]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	mov r1, #1
	strb r1, [r0,#0x10]
	mov r1, #0xff
	strb r1, [r0,#0x11]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EDA30:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80EDA9E
	mov r0, #0xa
	strh r0, [r7,#0x10]
	push {r7}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	sub r1, #1
	lsl r1, r1, #1
	ldrh r2, [r7,#0x12]
	sub r2, #1
	add r1, r1, r2
	ldr r2, off_80EDAB0 // =byte_80EDAB4 
	ldr r1, [r2,r1]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	mov r7, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80D1442
	pop {r7}
	mov r0, #0xa7
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xa8
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #8
	strb r0, [r7,#1]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_80EDA9E
	mov r0, #8
	strh r0, [r7]
	b loc_80EDA9E
loc_80EDA92:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_80EDA9E
	mov r0, #0
	strb r0, [r7,#1]
loc_80EDA9E:
	add sp, sp, #0x14
	pop {r4,r6,r7,pc}
	.word 0, 0, 0
	.byte 0, 0
off_80EDAB0: .word byte_80EDAB4
byte_80EDAB4: .byte 0x2, 0x2, 0x3, 0x2, 0x3, 0x3
.endfunc // sub_80EDA0E

.func
.thumb_func
sub_80EDABA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EDACA
	mov r0, #4
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EDACA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EDADE
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EDADE:
	pop {pc}
.endfunc // sub_80EDABA

loc_80EDAE0:
	push {r7,lr}
	ldr r1, off_80EDB00 // =off_80EDB08 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_800FFFE
	ldr r1, dword_80EDB04 // =0x8600 
	tst r0, r1
	beq locret_80EDAFE
	mov r1, #0
	mov r2, #0
	bl sub_801056A
locret_80EDAFE:
	pop {r7,pc}
off_80EDB00: .word off_80EDB08
dword_80EDB04: .word 0x8600
off_80EDB08: .word sub_80EDB14+1
	.word sub_80EDBCC+1
	.word sub_80EDC78+1
.func
.thumb_func
sub_80EDB14:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EDB50
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xa
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	mov r4, #7
	ldrb r1, [r7,#3]
	add r4, r4, r1
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #0xf8
	bl sound_play // () -> void
	mov r0, #6
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EDBAC
loc_80EDB50:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EDBAC
	ldrb r0, [r7,#3]
	ldr r1, off_80EDBB0 // =byte_80EDBC8 
	ldrb r0, [r1,r0]
	strh r0, [r7,#0x10]
	sub r0, #0x14
	strh r0, [r7,#0x12]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r1, #0x22 
	bl sub_8013774
	mov r1, #0
	cmp r0, #0
	beq loc_80EDB7C
	mov r1, #8
loc_80EDB7C:
	ldrb r0, [r7,#3]
	add r0, r0, r0
	add r0, r0, r1
	ldr r4, off_80EDBB4 // =dword_80EDBB8 
	ldrh r4, [r4,r0]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #0x50 
	mul r1, r0
	lsl r1, r1, #0x10
	mov r2, #0
	mov r3, #0
	push {r7}
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80E5D12
	pop {r7}
	str r0, [r5,#0x4c]
	mov r0, #4
	strh r0, [r7]
	pop {r4,pc}
	mov r0, #8
	strh r0, [r7]
locret_80EDBAC:
	pop {r4,pc}
	.byte 0, 0
off_80EDBB0: .word byte_80EDBC8
off_80EDBB4: .word dword_80EDBB8
dword_80EDBB8: .word 0x0
	.word 0x10000, 0x2000200, 0x3010200
byte_80EDBC8: .byte 0x3C, 0x5A, 0x78, 0x78
.endfunc // sub_80EDB14

.func
.thumb_func
sub_80EDBCC:
	push {r4,r6,lr}
	ldrh r0, [r7,#0x10]
	ldrh r1, [r7,#0x12]
	cmp r0, r1
	bgt loc_80EDBD6
loc_80EDBD6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	blt loc_80EDC5E
	mov r6, #2
	mov r1, #0x22 
	bl sub_8013774
	cmp r0, #0
	beq loc_80EDBEC
	mov r6, #4
loc_80EDBEC:
	ldr r4, dword_80EDC70 // =0x2c05ff04 
	ldrb r0, [r7,#3]
	cmp r0, #3
	blt loc_80EDBF6
	ldr r4, dword_80EDC74 // =0x2c05ff11 
loc_80EDBF6:
	bl object_getFlipDirection_800E2CA // () -> int
	add r0, r0, r0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #5
	mov r3, #0
	push {r0,r1}
	push {r7}
	mov r7, #0
	bl sub_80C536A
	pop {r7}
	pop {r0,r1}
	push {r0,r7}
	sub r1, #1
	add r6, r1, #0
	add r7, r0, #0
	mov r4, #0
loc_80EDC1E:
	push {r0,r1}
	bl sub_800C90A
	add r2, r0, #0
	pop {r0,r1}
	beq loc_80EDC2C
	ldrb r3, [r2,#2]
loc_80EDC2C:
	add r1, #1
	add r4, #1
	cmp r4, #3
	blt loc_80EDC1E
	pop {r4,r7}
	ldrb r0, [r7,#3]
	cmp r0, #3
	bne loc_80EDC5C
	bl object_getFlipDirection_800E2CA // () -> int
	add r0, r0, r4
	add r1, r6, #0
	mov r4, #0
loc_80EDC46:
	push {r0,r1}
	bl sub_800C90A
	add r2, r0, #0
	pop {r0,r1}
	beq loc_80EDC54
	ldrb r3, [r2,#2]
loc_80EDC54:
	add r1, #1
	add r4, #1
	cmp r4, #3
	blt loc_80EDC46
loc_80EDC5C:
	b locret_80EDC6C
loc_80EDC5E:
	ldr r0, [r5,#0x4c]
	tst r0, r0
	beq loc_80EDC68
	bl sub_80E5D3E
loc_80EDC68:
	mov r0, #8
	strh r0, [r7]
locret_80EDC6C:
	pop {r4,r6,pc}
	.byte 0, 0
dword_80EDC70: .word 0x2C05FF04
dword_80EDC74: .word 0x2C05FF11
.endfunc // sub_80EDBCC

.func
.thumb_func
sub_80EDC78:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EDC92
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EDC92:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EDCB4
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	bl sub_800F2B6
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EDCB4:
	pop {pc}
	.balign 4, 0x00
off_80EDCB8: .word off_8019B78
dword_80EDCBC: .word 0x45A00
.endfunc // sub_80EDC78

loc_80EDCC0:
	push {lr}
	ldr r1, off_80EDCD0 // =off_80EDCD4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EDCD0: .word off_80EDCD4
off_80EDCD4: .word loc_80EDCDC+1
	.word sub_80EDD5C+1
loc_80EDCDC:
	push {r4,r6,r7,lr}
	sub sp, sp, #4
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EDCFE
	mov r0, #0xc
	bl sub_800F2B6
	bl sub_800FDB6
	ldr r0, dword_80EDD4C // =0x400040 
	bl object_setFlag // (int a1) -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EDCFE:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xd
	bne loc_80EDD30
	ldrb r0, [r7,#3]
	lsl r0, r0, #2
	ldr r1, off_80EDD48 // =off_80EDD54 
	ldr r0, [r1,r0]
	str r0, [sp]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldr r4, [r7,#0xc]
	ldrb r2, [r7,#2]
	ldr r3, [sp]
	push {r7}
	add r7, r3, #0
	mov r3, #0
	mov lr, pc
	bx r7
	pop {r7}
loc_80EDD30:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80EDD42
	ldr r0, off_80EDD50 // =0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #4
	strh r0, [r7]
loc_80EDD42:
	add sp, sp, #4
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80EDD48: .word off_80EDD54
dword_80EDD4C: .word 0x400040
off_80EDD50: .word 0x40
off_80EDD54: .word sub_80D8B96+1
	.word sub_80E025E+1
.func
.thumb_func
sub_80EDD5C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EDD6C
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EDD6C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EDD78
	bl sub_8011714
locret_80EDD78:
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80EDD5C

	lsl r0, r0, #1
	lsl r0, r0, #1
loc_80EDD80:
	push {lr}
	ldr r1, off_80EDD90 // =off_80EDD94 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EDD90: .word off_80EDD94
off_80EDD94: .word sub_80EDDA0+1
	.word sub_80EDDE0+1
	.word sub_80EDDFC+1
.func
.thumb_func
sub_80EDDA0:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EDDD2
	mov r0, #0xa
	bl sub_800F2B6
	push {r7}
	mov r4, #0x28 
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	ldr r0, dword_80EE034 // =0x200000 
	bl sub_8010312
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #1
	strh r0, [r7,#0x10]
loc_80EDDD2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EDDDE
	mov r0, #4
	strh r0, [r7]
locret_80EDDDE:
	pop {r4,pc}
.endfunc // sub_80EDDA0

.func
.thumb_func
sub_80EDDE0:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#0xd]
	cmp r0, #0
	beq loc_80EDDEE
	mov r0, #0
	strb r0, [r5,#0xd]
	b loc_80EDDF2
loc_80EDDEE:
	bl sub_80EDE4A
loc_80EDDF2:
	mov r0, #3
	strh r0, [r7,#0x12]
	mov r0, #8
	strh r0, [r7]
	pop {r4,r6,r7,pc}
.endfunc // sub_80EDDE0

.func
.thumb_func
sub_80EDDFC:
	push {lr}
	ldrb r0, [r7,#1]
	cmp r0, #1
	beq loc_80EDE12
	bgt loc_80EDE20
	mov r0, #1
	strb r0, [r7,#1]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #0
	str r0, [r7,#0x30]
loc_80EDE12:
	ldr r0, [r7,#0x30]
	cmp r0, #0
	beq loc_80EDE20
	bl sub_80EDE4A
	mov r0, #2
	strb r0, [r7,#1]
loc_80EDE20:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EDE48
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_80EDE44
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	ldr r0, dword_80EE034 // =0x200000 
	bl sub_801031C
	bl sub_8011714
	b locret_80EDE48
loc_80EDE44:
	mov r0, #0
	strb r0, [r7,#1]
locret_80EDE48:
	pop {pc}
.endfunc // sub_80EDDFC

.func
.thumb_func
sub_80EDE4A:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80D32FE
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	mov r1, #1
	strb r1, [r0,#0x10]
	mov r1, #0xff
	strb r1, [r0,#0x11]
	mov r0, #0xa9
	add r0, #0xff
	bl sound_play // () -> void
	pop {r4,r6,pc}
.endfunc // sub_80EDE4A

loc_80EDE7E:
	push {lr}
	ldr r1, off_80EDE8C // =off_80EDE90 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EDE8C: .word off_80EDE90
off_80EDE90: .word sub_80EDE98+1
	.word sub_80EDEF6+1
.func
.thumb_func
sub_80EDE98:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EDEC2
	mov r0, #0x12
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #7
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EDEF4
loc_80EDEC2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EDEF4
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80EE038 // =0xc3c 
	ldr r6, [r7,#8]
	bl sub_80D398E
	mov r0, #0xf4
	bl sound_play // () -> void
	mov r0, #0xb8
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80EDEF4:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EDE98

.func
.thumb_func
sub_80EDEF6:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EDF0A
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80EDF0A:
	pop {pc}
.endfunc // sub_80EDEF6

.func
.thumb_func
sub_80EDF0C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EDF1C
	mov r0, #1
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EDF1C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EDF4C
	bl sub_800FFFE
	mov r2, #0
	ldr r1, dword_80EDF50 // =0x1000 
	tst r0, r1
	bne loc_80EDF38
	mov r2, #1
	ldr r1, dword_80EDF54 // =0x2000 
	tst r0, r1
	beq loc_80EDF42
loc_80EDF38:
	strb r2, [r5,#0x17]
	bl sub_800F2C6
	bl sub_801DBD4
loc_80EDF42:
	ldr r0, dword_80EDF58 // =0x3000 
	bl sub_800FFEE
	bl sub_8011714
locret_80EDF4C:
	pop {pc}
	.byte 0, 0
dword_80EDF50: .word 0x1000
dword_80EDF54: .word 0x2000
dword_80EDF58: .word 0x3000
.endfunc // sub_80EDF0C

loc_80EDF5C:
	push {lr}
	ldr r1, off_80EDF6C // =off_80EDF70 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EDF6C: .word off_80EDF70
off_80EDF70: .word sub_80EDF78+1
	.word sub_80EDFC0+1
.func
.thumb_func
sub_80EDF78:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EDF9E
	mov r0, #0x12
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EDFBE
loc_80EDF9E:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80EDFBE
	mov r0, #0x13
	bl sub_800F2B6
	bl sub_80EDFEA
	mov r0, #0x5a 
	strh r0, [r7,#0x10]
	mov r0, #1
	strh r0, [r7,#0x12]
	mov r0, #4
	strh r0, [r7]
locret_80EDFBE:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EDF78

.func
.thumb_func
sub_80EDFC0:
	push {lr}
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bge loc_80EDFD6
	mov r0, #0x10
	strh r0, [r7,#0x12]
	mov r0, #0x9b
	add r0, #0xff
	bl sound_play // () -> void
loc_80EDFD6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EDFE8
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80EDFE8:
	pop {pc}
.endfunc // sub_80EDFC0

.func
.thumb_func
sub_80EDFEA:
	push {r4,r6,lr}
	ldr r6, off_80EE03C // =off_8019B78 
	ldr r6, [r6,#0x68] // (off_8019BE0 - 0x8019b78)
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
loc_80EDFFC:
	mov r2, #0
	ldrsb r2, [r6,r2]
	cmp r2, #0x7f
	beq locret_80EE032
	push {r0,r1,r4,r6}
	mul r2, r4
	add r0, r0, r2
	mov r2, #1
	ldrsb r2, [r6,r2]
	add r1, r1, r2
	cmp r0, #1
	blt loc_80EE02C
	cmp r0, #6
	bgt loc_80EE02C
	cmp r1, #1
	blt loc_80EE02C
	cmp r1, #3
	bgt loc_80EE02C
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80EE040 // =0x95a01 
	ldr r6, [r7,#8]
	bl sub_80D07A0
loc_80EE02C:
	pop {r0,r1,r4,r6}
	add r6, #2
	b loc_80EDFFC
locret_80EE032:
	pop {r4,r6,pc}
dword_80EE034: .word 0x200000
dword_80EE038: .word 0xC3C
off_80EE03C: .word off_8019B78
dword_80EE040: .word 0x95A01
.endfunc // sub_80EDFEA

loc_80EE044:
	push {lr}
	ldr r1, off_80EE054 // =off_80EE058 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EE054: .word off_80EE058
off_80EE058: .word sub_80EE060+1
	.word sub_80ED998+1
.func
.thumb_func
sub_80EE060:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE086
	mov r0, #0x13
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EE0BA
loc_80EE086:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80EE0BA
	mov r0, #0x14
	bl sub_800F2B6
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	bl sub_80D5718
	mov r0, #0xb8
	bl sound_play // () -> void
	mov r0, #0x2d 
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80EE0BA:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EE060

loc_80EE0BC:
	push {lr}
	ldr r1, off_80EE0CC // =off_80EE0D0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EE0CC: .word off_80EE0D0
off_80EE0D0: .word sub_80EE0DC+1
	.word sub_80EE110+1
	.word sub_80EE162+1
.func
.thumb_func
sub_80EE0DC:
	push {lr}
	mov r0, #0xa
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	mov r4, #0x29 
	ldrb r0, [r7,#0xe]
	cmp r0, #0
	beq loc_80EE0F4
	ldr r4, dword_80EE29C // =0x1906 
loc_80EE0F4:
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80EE0DC

.func
.thumb_func
sub_80EE110:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE154
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EE160
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0xf
	strh r0, [r7,#0x12]
	mov r0, #4
	strb r0, [r7,#1]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	ldr r4, [r7,#0xc]
	ldrb r2, [r7,#2]
	mov r3, #0
	bl sub_80D5890
	mov r0, #0x9b
	add r0, #0xff
	bl sound_play // () -> void
loc_80EE154:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt locret_80EE160
	mov r0, #8
	strh r0, [r7]
locret_80EE160:
	pop {pc}
.endfunc // sub_80EE110

.func
.thumb_func
sub_80EE162:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE17C
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	sub r1, #1
	strb r1, [r0,#0x10]
	mov r0, #6
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EE17C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EE190
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EE190:
	pop {pc}
.endfunc // sub_80EE162

loc_80EE192:
	push {lr}
	ldr r1, off_80EE1A0 // =off_80EE1A4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EE1A0: .word off_80EE1A4
off_80EE1A4: .word sub_80EE1AC+1
	.word sub_80EE274+1
.func
.thumb_func
sub_80EE1AC:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE210
	mov r0, #5
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #0x20 
	add r0, #0xff
	bl sound_play // () -> void
	push {r7}
	bl sub_80EBAE8
	lsl r0, r0, #8
	mov r4, #0x2a 
	ldrb r1, [r7,#3]
	cmp r1, #0
	beq loc_80EE1D8
	mov r4, #0x33 
loc_80EE1D8:
	add r4, r4, r0
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	add r4, #0x44 
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	mov r0, #0x15
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EE210:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xc
	bne loc_80EE260
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	ldr r4, dword_80EE270 // =0x1205ff04 
	ldrb r2, [r7,#2]
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r6, [r7,#8]
	ldrh r0, [r7,#6]
	add r6, r6, r0
	pop {r0,r1}
	push {r7}
	mov r7, #0x49 
	bl sub_80C536A
	mov r1, #0xa
	strh r1, [r0,#0x20]
	pop {r7}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	mov r1, #1
	ldrh r2, [r5,#0x16]
	mov r4, #0x80
loc_80EE24E:
	push {r0-r3,r6,r7}
	mov r6, #0
	mov r7, #0
	bl sub_80CD488
	pop {r0-r3,r6,r7}
	add r1, #1
	cmp r1, #3
	ble loc_80EE24E
loc_80EE260:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EE26C
	mov r0, #4
	strh r0, [r7]
locret_80EE26C:
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80EE270: .word 0x1205FF04
.endfunc // sub_80EE1AC

.func
.thumb_func
sub_80EE274:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE284
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EE284:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EE298
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EE298:
	pop {pc}
	.balign 4, 0x00
dword_80EE29C: .word 0x1906
.endfunc // sub_80EE274

loc_80EE2A0:
	push {lr}
	ldr r1, off_80EE2B0 // =unk_80EE2B4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EE2B0: .word unk_80EE2B4
unk_80EE2B4: .byte 0xC1
	.byte 0xE2
	.hword 0x80E
	.word sub_80EE2CE+1
	.word sub_80EE33A+1
	mov r0, #1
	strh r0, [r7,#0x12]
	mov r0, #0
	str r0, [r7,#0x30]
	mov r0, #4
	strh r0, [r7]
	mov pc, lr
.func
.thumb_func
sub_80EE2CE:
	push {r4,r6,r7,lr}
	mov r0, r8
	push {r0}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE2FA
	mov r0, #0xc
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #0xc7
	bl sound_play // () -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EE2FA:
	ldrh r0, [r7,#0x10]
	cmp r0, #0x12
	bne loc_80EE30E
	mov r2, #0
	ldr r6, [r7,#8]
	ldrh r0, [r7,#6]
	add r6, r6, r0
	mov r4, #0
	bl sub_80D5D34
loc_80EE30E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80EE334
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	ble loc_80EE330
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #0
	strb r0, [r7,#1]
	pop {r0}
	mov r8, r0
	pop {r4,r6,r7,pc}
loc_80EE330:
	mov r0, #8
	strh r0, [r7]
loc_80EE334:
	pop {r0}
	mov r8, r0
	pop {r4,r6,r7,pc}
.endfunc // sub_80EE2CE

.func
.thumb_func
sub_80EE33A:
	push {lr}
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
	pop {pc}
.endfunc // sub_80EE33A

loc_80EE34A:
	push {lr}
	ldr r1, off_80EE358 // =off_80EE35C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EE358: .word off_80EE35C
off_80EE35C: .word sub_80EE370+1
	.word loc_80EE3F0+1
	.word sub_80EE406+1
	.byte 0xD
	.byte 0xE5
	.byte 0xE
	.byte  8
	.byte 0x33 
	.byte 0xE5
	.byte 0xE
	.byte  8
.func
.thumb_func
sub_80EE370:
	push {r4,r6,lr}
	mov r0, #4
	strh r0, [r7]
	ldrb r4, [r7,#0xc]
	tst r4, r4
	beq locret_80EE3DC
	bl sub_800E5FC
	tst r0, r0
	beq locret_80EE3DC
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x12]
	strb r0, [r5,#0x14]
	ldrb r1, [r5,#0x13]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	bl sub_8015B00
	tst r0, r0
	beq loc_80EE3D2
	push {r0,r1,r4,r7}
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #8
	mov r0, #0
	bl sub_800F2AA
	add r4, r4, r0
	lsl r4, r4, #0x10
	add r4, #0xff
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80EE3E8 // =0xffe0 
	ldr r7, dword_80EE3EC // =0x1010014 
	bl sub_80E33FA
	pop {r0,r1,r4,r7}
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	b locret_80EE3DC
loc_80EE3D2:
	mov r0, #4
	bl sub_800F2B6
	mov r0, #0xc
	strh r0, [r7]
locret_80EE3DC:
	pop {r4,r6,pc}
	.byte 0, 0
	.word 0x10000, 0xF800000
dword_80EE3E8: .word 0xFFE0
dword_80EE3EC: .word 0x1010014
.endfunc // sub_80EE370

loc_80EE3F0:
	mov r0, #1
	ldrb r1, [r7,#3]
	cmp r1, #0xb
	bne loc_80EE3FA
	mov r0, #2
loc_80EE3FA:
	strh r0, [r7,#0x12]
	mov r0, #0
	str r0, [r7,#0x30]
	mov r0, #8
	strh r0, [r7]
	mov pc, lr
.func
.thumb_func
sub_80EE406:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE484
	mov r0, #5
	ldrb r1, [r7,#3]
	cmp r1, #0x10
	beq loc_80EE41A
	cmp r1, #0x11
	bne loc_80EE41C
loc_80EE41A:
	mov r0, #0xc
loc_80EE41C:
	bl sub_800F2B6
	bl sub_8011450
	bl sub_800FDB6
	mov r0, #0xb0
	ldrb r1, [r7,#3]
	cmp r1, #5
	beq loc_80EE43C
	cmp r1, #0xb
	beq loc_80EE43C
	cmp r1, #0x12
	beq loc_80EE43C
	cmp r1, #6
	bne loc_80EE43E
loc_80EE43C:
	mov r0, #0xce
loc_80EE43E:
	bl sound_play // () -> void
	ldrb r0, [r7,#3]
	cmp r0, #0x10
	beq loc_80EE474
	cmp r1, #0x11
	beq loc_80EE474
	cmp r0, #0x12
	bne loc_80EE452
	mov r0, #0xb
loc_80EE452:
	push {r7}
	bl sub_80EBB78
	add r4, r0, #0
	lsl r4, r4, #0x10
	bl sub_80EBAE8
	add r4, r4, r0
	lsl r4, r4, #8
	bl sub_80EBB34
	add r4, r4, r0
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
loc_80EE474:
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EE484:
	ldrh r0, [r7,#0x10]
	mov r1, #0xc
	ldrb r0, [r7,#3]
	cmp r1, #0x10
	beq loc_80EE492
	cmp r1, #0x11
	bne loc_80EE494
loc_80EE492:
	mov r1, #0x11
loc_80EE494:
	ldrh r0, [r7,#0x10]
	cmp r0, r1
	bne loc_80EE4CE
	ldrb r4, [r7,#3]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	mov r3, #0
	push {r0-r2}
	bl sub_80D8222
	pop {r0-r2}
	cmp r4, #0xa
	bne loc_80EE4C6
	mov r4, #1
	lsl r4, r4, #8
	bl sub_80D8222
	b loc_80EE4CE
loc_80EE4C6:
	cmp r4, #0xb
	bne loc_80EE4CE
	mov r0, #0x12
	strb r0, [r7,#3]
loc_80EE4CE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EE4FC
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	ble loc_80EE4F0
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #0
	strb r0, [r7,#1]
	pop {r0}
	mov r8, r0
	pop {r4,r6,r7,pc}
loc_80EE4F0:
	mov r0, #0x10
	ldrb r1, [r7,#0xc]
	tst r1, r1
	beq loc_80EE4FA
	mov r0, #0xc
loc_80EE4FA:
	strh r0, [r7]
locret_80EE4FC:
	pop {r4,r6,r7,pc}
	.byte 0, 0
	.word 0xFFE0, 0x101001E, 0x1E, 0xF714B500, 0x2180FC6C, 0xD0214208
	.word 0x7D697D28, 0x74E974A8, 0xFB11F72D, 0xFD92F72B, 0xFEB8F71F, 0x80382010
	.word 0xB500BD00, 0x42007878, 0x2040D106, 0xFE0EF72B, 0x82382005, 0x70782004
	.word 0x38018A38, 0xDA058238, 0x64E82000, 0x66886DA9, 0xF8DCF723
.endfunc // sub_80EE406

	pop {pc}
loc_80EE55E:
	push {lr}
	ldr r1, off_80EE56C // =off_80EE570 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EE56C: .word off_80EE570
off_80EE570: .word sub_80EE57C+1
	.word sub_80EE5A8+1
	.word sub_80EE604+1
.func
.thumb_func
sub_80EE57C:
	push {lr}
	mov r0, #0xa
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	mov r4, #0x2b 
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80EE57C

.func
.thumb_func
sub_80EE5A8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE5F6
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EE602
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #5
	ldrb r1, [r7,#0xf]
	cmp r1, #1
	beq loc_80EE5CE
	ldrb r0, [r7,#0xe]
	sub r0, #5
loc_80EE5CE:
	strh r0, [r7,#0x12]
	mov r0, #4
	strb r0, [r7,#1]
	push {r7}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	ldr r4, [r7,#0xc]
	ldrb r2, [r7,#2]
	mov r3, #0
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80D6B78
	pop {r7}
loc_80EE5F6:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt locret_80EE602
	mov r0, #8
	strh r0, [r7]
locret_80EE602:
	pop {pc}
.endfunc // sub_80EE5A8

.func
.thumb_func
sub_80EE604:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE61E
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	sub r1, #1
	strb r1, [r0,#0x10]
	mov r0, #6
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EE61E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EE632
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EE632:
	pop {pc}
.endfunc // sub_80EE604

loc_80EE634:
	push {lr}
	ldr r1, off_80EE644 // =off_80EE648 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EE644: .word off_80EE648
off_80EE648: .word sub_80EE654+1
	.word sub_80EE66E+1
	.word sub_80EE6A4+1
.func
.thumb_func
sub_80EE654:
	push {r4,lr}
	mov r0, #0xe
	bl sub_800F2B6
	bl sub_80EB562
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strh r0, [r7]
	pop {r4,pc}
.endfunc // sub_80EE654

.func
.thumb_func
sub_80EE66E:
	push {r4,lr}
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	ldr r3, dword_80EE6F4 // =0xfff40000 
	bl sub_80D75D4
	ldrb r1, [r7,#3]
	cmp r1, #0
	beq loc_80EE694
	ldrb r1, [r7,#0xc]
	cmp r1, #4
	beq loc_80EE694
	mov r0, #0xf
	b loc_80EE696
loc_80EE694:
	mov r0, #0x1e
loc_80EE696:
	strh r0, [r7,#0x10]
	mov r0, #3
	lsl r0, r0, #0x10
	str r0, [r5,#0x40]
	mov r0, #8
	strh r0, [r7]
	pop {r4,pc}
.endfunc // sub_80EE66E

.func
.thumb_func
sub_80EE6A4:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r5,#0x40]
	cmp r1, #0
	beq loc_80EE6BE
	mul r0, r1
	ldr r2, [r5,#0x34]
	sub r2, r2, r0
	str r2, [r5,#0x34]
	ldr r0, dword_80EE6F8 // =0x8000 
	sub r0, r1, r0
	str r0, [r5,#0x40]
loc_80EE6BE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EE6F2
	bl sub_800E29C // () -> void
	ldrb r1, [r7,#3]
	cmp r1, #0
	beq loc_80EE6E8
	ldrb r0, [r7,#0xc]
	cmp r0, #4
	beq loc_80EE6E8
	add r0, #1
	strb r0, [r7,#0xc]
	cmp r0, #4
	bne loc_80EE6E2
	mov r0, #1
	strb r0, [r7,#0xe]
loc_80EE6E2:
	mov r0, #4
	strh r0, [r7]
	b locret_80EE6F2
loc_80EE6E8:
	mov r0, #0
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EE6F2:
	pop {r4,r6,pc}
dword_80EE6F4: .word 0xFFF40000
dword_80EE6F8: .word 0x8000
.endfunc // sub_80EE6A4

loc_80EE6FC:
	push {lr}
	ldr r1, off_80EE70C // =off_80EE710 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EE70C: .word off_80EE710
off_80EE710: .word sub_80EE71C+1
	.word sub_80EE748+1
	.word sub_80EE7A0+1
.func
.thumb_func
sub_80EE71C:
	push {lr}
	mov r0, #0xa
	bl sub_800F2B6
	bl sub_800FDB6
	push {r7}
	mov r4, #0x2c 
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80EE71C

.func
.thumb_func
sub_80EE748:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE792
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EE79E
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	add r1, #1
	strb r1, [r0,#0x10]
	mov r0, #0xa
	strh r0, [r7,#0x12]
	mov r0, #4
	strb r0, [r7,#1]
	push {r7}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	ldr r4, [r7,#0xc]
	ldrb r2, [r7,#2]
	mov r3, #0
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80D7ED4
	pop {r7}
	mov r0, #0xf3
	bl sound_play // () -> void
loc_80EE792:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt locret_80EE79E
	mov r0, #8
	strh r0, [r7]
locret_80EE79E:
	pop {pc}
.endfunc // sub_80EE748

.func
.thumb_func
sub_80EE7A0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE7BA
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	ldrb r1, [r0,#0x10]
	sub r1, #1
	strb r1, [r0,#0x10]
	mov r0, #6
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EE7BA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EE7CE
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EE7CE:
	pop {pc}
.endfunc // sub_80EE7A0

loc_80EE7D0:
	push {lr}
	ldr r1, off_80EE7E0 // =off_80EE7E4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EE7E0: .word off_80EE7E4
off_80EE7E4: .word sub_80EE7EC+1
	.word sub_80ED998+1
.func
.thumb_func
sub_80EE7EC:
	push {r4,r6,r7,lr}
	bl object_getFlag // () -> int
	ldr r1, dword_80EEA34 // =0x1040 
	tst r0, r1
	bne locret_80EE83E
	mov r0, #0xf
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	mov r3, #0
	mov r6, #4
	mul r6, r4
	sub r3, r3, r6
	lsl r3, r3, #0x10
	ldr r6, [r7,#8]
	bl sub_80D8F98
	mov r0, #0x12
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x46 
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80EE83E:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EE7EC

loc_80EE840:
	push {lr}
	ldr r1, off_80EE850 // =off_80EE854 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EE850: .word off_80EE854
off_80EE854: .word sub_80EE860+1
	.word sub_80EE89C+1
	.word sub_80ED998+1
.func
.thumb_func
sub_80EE860:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE886
	mov r0, #0x12
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EE89A
loc_80EE886:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80EE89A
	mov r0, #0x13
	bl sub_800F2B6
	mov r0, #4
	strh r0, [r7]
locret_80EE89A:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EE860

.func
.thumb_func
sub_80EE89C:
	push {r4,r6,r7,lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80EE8FE
	bl sub_80ED040
	cmp r1, #0
	beq loc_80EE8D4
	ldrb r1, [r5,#0x13]
	ldr r4, off_80EE900 // =byte_80EE904 
loc_80EE8B4:
	mov r2, #0
	ldrsb r2, [r4,r2]
	cmp r2, #0x7f
	beq loc_80EE8D4
	add r1, r1, r2
	push {r0,r1}
	bl object_getPanelParameters
	ldr r1, off_80EEA38 // =LCDControl 
	ldrb r2, [r5,#0x16]
	lsl r1, r2
	tst r0, r1
	pop {r0,r1}
	bne loc_80EE8E2
	add r4, #1
	b loc_80EE8B4
loc_80EE8D4:
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
loc_80EE8E2:
	lsl r4, r0, #0x10
	lsl r1, r1, #0x18
	orr r4, r1
	add r4, #3
	ldr r6, [r7,#8]
	bl sub_80D981C
	mov r0, #0xc4
	bl sound_play // () -> void
	mov r0, #0x14
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80EE8FE:
	pop {r4,r6,r7,pc}
off_80EE900: .word byte_80EE904
byte_80EE904: .byte 0x0
	.byte 0xFF, 0x2, 0xFD
	.word 0x7F04
.endfunc // sub_80EE89C

loc_80EE90C:
	push {lr}
	ldr r1, off_80EE91C // =off_80EE920 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EE91C: .word off_80EE920
off_80EE920: .word sub_80EE92C+1
	.word sub_80EE996+1
	.word sub_80EE9F2+1
.func
.thumb_func
sub_80EE92C:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE96E
	mov r0, #4
	bl sub_800F2B6
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #1
	lsl r0, r0, #0xc
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x16]
	bl sub_802CEA6
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EE96E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EE994
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #2
	bl sub_80E05F6
	mov r0, #8
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r7]
locret_80EE994:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EE92C

.func
.thumb_func
sub_80EE996:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EE9E4
	ldrb r0, [r7,#3]
	cmp r0, #0
	bne loc_80EE9B2
	bl sub_8016004
	b loc_80EE9BA
loc_80EE9B2:
	cmp r0, #1
	bne loc_80EE9D6
	bl sub_8016218
loc_80EE9BA:
	tst r0, r0
	beq loc_80EE9D6
	push {r2}
	ldrb r2, [r7,#2]
	mov r4, #1
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	mov r3, #0xa0
	lsl r3, r3, #0x10
	bl sub_80DD91A
	pop {r2}
	strb r2, [r0,#0x17]
loc_80EE9D6:
	mov r0, #0xb7
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EE9E4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EE9F0
	mov r0, #8
	strh r0, [r7]
locret_80EE9F0:
	pop {pc}
.endfunc // sub_80EE996

.func
.thumb_func
sub_80EE9F2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EEA22
	mov r0, #0
	bl sub_800F2B6
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	ldr r0, off_80EEA30 // =0x200 
	bl sub_800FFEE
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EEA22:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EEA2E
	bl sub_8011714
locret_80EEA2E:
	pop {pc}
off_80EEA30: .word 0x200
dword_80EEA34: .word 0x1040
off_80EEA38: .word LCDControl
.endfunc // sub_80EE9F2

loc_80EEA3C:
	push {lr}
	ldr r1, off_80EEA4C // =off_80EEA50 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EEA4C: .word off_80EEA50
off_80EEA50: .word sub_80EEA5C+1
	.word sub_80EEA78+1
	.word sub_80EEB18+1
.func
.thumb_func
sub_80EEA5C:
	push {lr}
	mov r0, #3
	strh r0, [r7,#0x12]
	mov r0, #0x77 
	bl sound_play // () -> void
	bl sub_800FDB6
	ldr r0, dword_80EEE50 // =0xffff 
	bl object_setInvulnerableTime
	mov r0, #4
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80EEA5C

.func
.thumb_func
sub_80EEA78:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EEAC0
	mov r0, #5
	bl sub_800F2B6
	bl sub_8011450
	ldrb r0, [r5,#0x16]
	bl sub_802CEA6
	mov r0, #0xb0
	bl sound_play // () -> void
	push {r7}
	bl sub_80EBB34
	add r4, r0, #0
	bl sub_80EBAE8
	lsl r0, r0, #8
	add r4, r4, r0
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EEAC0:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xc
	bne loc_80EEAEC
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	ldrb r3, [r7,#0x12]
	ldr r4, off_80EEB10 // =byte_80EEB14 
	ldrb r4, [r4,r3]
	bl sub_80CF91E
	tst r0, r0
	beq loc_80EEAEC
	mov r1, #8
	lsl r1, r1, #0x10
	str r1, [r0,#0x40]
loc_80EEAEC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EEB0E
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	ble loc_80EEB0A
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #0
	strb r0, [r7,#1]
	pop {r4,r6,r7,pc}
loc_80EEB0A:
	mov r0, #8
	strh r0, [r7]
locret_80EEB0E:
	pop {r4,r6,r7,pc}
off_80EEB10: .word byte_80EEB14
byte_80EEB14: .byte 0x1, 0x3, 0x1, 0x1
.endfunc // sub_80EEA78

.func
.thumb_func
sub_80EEB18:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EEB32
	ldr r0, off_80EEB48 // =0x400 
	bl sub_800FFEE
	bl sub_800EB08
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EEB32:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EEB46
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EEB46:
	pop {pc}
off_80EEB48: .word 0x400
.endfunc // sub_80EEB18

loc_80EEB4C:
	push {lr}
	ldr r1, off_80EEB5C // =off_80EEB60 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EEB5C: .word off_80EEB60
off_80EEB60: .word sub_80EEB68+1
	.word sub_80EEBE2+1
.func
.thumb_func
sub_80EEB68:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EEBAC
	bl sub_800FDB6
	mov r0, #5
	bl sub_800F2B6
	mov r0, #0xb0
	bl sound_play // () -> void
	push {r7}
	bl sub_80EBB34
	add r4, r0, #0
	bl sub_80EBAE8
	lsl r0, r0, #8
	add r4, r4, r0
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EEBAC:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xc
	bne loc_80EEBD2
	mov r6, r10
	ldr r6, [r6,#0x18]
	add r6, #0x80
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #0x10
	mul r0, r1
	add r6, r6, r0
	mov r4, #4
loc_80EEBC6:
	ldr r0, [r6]
	bl sub_80EEC08
	add r6, #4
	sub r4, #1
	bne loc_80EEBC6
loc_80EEBD2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80EEBDE
	mov r0, #4
	strh r0, [r7]
loc_80EEBDE:
	add sp, sp, #8
	pop {r4,r6,r7,pc}
.endfunc // sub_80EEB68

.func
.thumb_func
sub_80EEBE2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EEBF2
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EEBF2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EEC06
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EEC06:
	pop {pc}
.endfunc // sub_80EEBE2

.func
.thumb_func
sub_80EEC08:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	cmp r0, #0
	beq loc_80EEC6C
	ldr r6, [r0,#0x54]
	add r4, r0, #0
	ldrb r0, [r7,#3]
	cmp r0, #1
	beq loc_80EEC20
	ldrh r0, [r6,#0x1c]
	cmp r0, #0
	bne loc_80EEC34
loc_80EEC20:
	ldrb r0, [r7,#3]
	cmp r0, #0
	beq loc_80EEC6C
	ldrb r0, [r4,#0x12]
	ldrb r1, [r4,#0x13]
	bl object_getPanelParameters
	ldr r1, dword_80EEE54 // =0x1c00 
	tst r0, r1
	beq loc_80EEC6C
loc_80EEC34:
	ldr r6, [r7,#8]
	ldrh r0, [r7,#6]
	add r6, r6, r0
	ldrb r0, [r4,#0x12]
	ldrb r1, [r4,#0x13]
	push {r0,r1,r7}
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80EEE58 // =0x705ff04 
	mov r7, #3
	bl sub_80C536A
	pop {r0,r1,r7}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldrb r4, [r7,#3]
	add r4, #7
	lsl r4, r4, #0x10
	add r4, #0x16
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #8
	orr r4, r0
	bl sub_80E05F6
loc_80EEC6C:
	add sp, sp, #8
	pop {r4,r6,r7,pc}
.endfunc // sub_80EEC08

loc_80EEC70:
	push {lr}
	ldr r1, off_80EEC80 // =off_80EEC84 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EEC80: .word off_80EEC84
off_80EEC84: .word sub_80EEC90+1
	.word sub_80EECCC+1
	.word sub_80EED30+1
.func
.thumb_func
sub_80EEC90:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EECB4
	mov r0, #0x12
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xe
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EECCA
loc_80EECB4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EECCA
	mov r0, #0x13
	bl sub_800F2B6
	mov r0, #0x15
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80EECCA:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EEC90

.func
.thumb_func
sub_80EECCC:
	push {r4,r6,r7,lr}
	ldrh r0, [r7,#0x10]
	cmp r0, #0xc
	bne loc_80EED14
	mov r0, #0xb
	add r0, #0xff
	bl sound_play // () -> void
	ldr r4, dword_80EED2C // =0x705ff11 
	ldr r6, [r7,#8]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #4
	mov r3, #0
	push {r0,r1,r7}
	mov r7, #1
	bl sub_80C536A
	pop {r0,r1,r7}
	push {r0,r1}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	add r4, #0x33 
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
loc_80EED14:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EED28
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #8
	strh r0, [r7]
locret_80EED28:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80EED2C: .word 0x705FF11
.endfunc // sub_80EECCC

.func
.thumb_func
sub_80EED30:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EED40
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EED40:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EED54
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EED54:
	pop {pc}
.endfunc // sub_80EED30

loc_80EED56:
	push {lr}
	ldr r1, off_80EED64 // =off_80EED68 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EED64: .word off_80EED68
off_80EED68: .word sub_80EED74+1
	.word sub_80EEDDE+1
	.word sub_80EEE10+1
.func
.thumb_func
sub_80EED74:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EEDB6
	mov r0, #4
	bl sub_800F2B6
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #1
	lsl r0, r0, #0xc
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x16]
	bl sub_802CEA6
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EEDB6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EEDDC
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #2
	bl sub_80E05F6
	mov r0, #8
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r7]
locret_80EEDDC:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EED74

.func
.thumb_func
sub_80EEDDE:
	push {lr}
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EEE02
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	ldrh r0, [r7,#6]
	add r6, r6, r0
	bl sub_80E8396
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EEE02:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EEE0E
	mov r0, #8
	strh r0, [r7]
locret_80EEE0E:
	pop {pc}
.endfunc // sub_80EEDDE

.func
.thumb_func
sub_80EEE10:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EEE40
	mov r0, #0
	bl sub_800F2B6
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	ldr r0, dword_80EEE5C // =0x8000 
	bl sub_800FFEE
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EEE40:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EEE4C
	bl sub_8011714
locret_80EEE4C:
	pop {pc}
	.byte 0, 0
dword_80EEE50: .word 0xFFFF
dword_80EEE54: .word 0x1C00
dword_80EEE58: .word 0x705FF04
dword_80EEE5C: .word 0x8000
.endfunc // sub_80EEE10

loc_80EEE60:
	push {lr}
	ldr r1, off_80EEE70 // =off_80EEE74 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EEE70: .word off_80EEE74
off_80EEE74: .word sub_80EEE88+1
	.word sub_80EEED4+1
	.word sub_80EEF02+1
	.word sub_80EEF70+1
	.word sub_80EEFA4+1
.func
.thumb_func
sub_80EEE88:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EEEAC
	mov r0, #1
	strb r0, [r7,#1]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	bl sub_800F2B6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
loc_80EEEAC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EEED2
	bl sub_80EEFBC
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0xb
	strh r0, [r7,#0x10]
	mov r0, #3
	bl sub_800F2B6
	mov r0, #4
	strh r0, [r7]
locret_80EEED2:
	pop {r4,pc}
.endfunc // sub_80EEE88

.func
.thumb_func
sub_80EEED4:
	push {lr}
	ldrh r0, [r7,#0x10]
	cmp r0, #8
	bne loc_80EEEE2
	mov r0, #0x12
	bl sub_800F2B6
loc_80EEEE2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EEF00
	mov r0, #0x14
	strh r0, [r7,#0x10]
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x13
	bl sub_800F2B6
	mov r0, #8
	strh r0, [r7]
locret_80EEF00:
	pop {pc}
.endfunc // sub_80EEED4

.func
.thumb_func
sub_80EEF02:
	push {r4,r6,r7,lr}
	ldrh r0, [r7,#0x10]
	cmp r0, #0x14
	bne loc_80EEF58
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	mov r4, #0x52 
	bl sub_80E05F6
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	mov r4, #0
	ldr r6, [r7,#8]
	push {r0-r3}
	bl sub_80DB970
	pop {r0-r3}
	push {r7}
	mov r7, #3
	ldr r4, dword_80EEFD8 // =0x705ff01 
	bl sub_80C536A
	pop {r7}
	bl sub_800FDB6
	mov r0, #0x59 
	add r0, #0xff
	bl sound_play // () -> void
loc_80EEF58:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EEF6E
	mov r0, #4
	bl sub_800F2B6
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #0xc
	strh r0, [r7]
locret_80EEF6E:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EEF02

.func
.thumb_func
sub_80EEF70:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EEFA2
	mov r0, #3
	bl sub_800F2B6
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0x10
	strh r0, [r7]
	mov r0, #3
	strh r0, [r7,#0x10]
locret_80EEFA2:
	pop {pc}
.endfunc // sub_80EEF70

.func
.thumb_func
sub_80EEFA4:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EEFBA
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80EEFBA:
	pop {pc}
.endfunc // sub_80EEFA4

.func
.thumb_func
sub_80EEFBC:
	push {r4,r6,r7,lr}
	bl sub_80E164A
	ldrb r2, [r5,#0x13]
	cmp r1, r2
	bne loc_80EEFCC
	mov r2, #2
	b loc_80EEFD0
loc_80EEFCC:
	add r1, r2, #0
	mov r2, #0xb
loc_80EEFD0:
	bl ho_8026554
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80EEFD8: .word 0x705FF01
.endfunc // sub_80EEFBC

loc_80EEFDC:
	push {lr}
	ldr r1, off_80EEFEC // =off_80EEFF0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EEFEC: .word off_80EEFF0
off_80EEFF0: .word sub_80EF004+1
	.word sub_80EF0B4+1
	.word sub_80EF0E2+1
	.word sub_80EF14A+1
	.word sub_80EF1AE+1
.func
.thumb_func
sub_80EF004:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EF034
	bl sub_800E5FC
	tst r0, r0
	beq locret_80EF09E
	mov r0, #1
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #0x16
	bl sub_800F2B6
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
	bl sub_801A074 // () -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
loc_80EF034:
	ldrh r0, [r7,#0x10]
	cmp r0, #0x1b
	bne loc_80EF05E
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #4
	bl sub_80E05F6
	cmp r0, #0
	beq loc_80EF05A
	mov r1, #0x1b
	strh r1, [r0,#0x20]
	ldrh r1, [r0,#0x3a]
	sub r1, #1
	strh r1, [r0,#0x3a]
	ldrh r1, [r0,#0x3e]
	sub r1, #1
	strh r1, [r0,#0x3e]
loc_80EF05A:
	ldr r0, dword_80EF1E8 // =0xb40000 
	str r0, [r5,#0x34]
loc_80EF05E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EF09E
	ldrb r0, [r5,#0x13]
	bl sub_8109746
	cmp r0, #0
	bne loc_80EF082
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, off_80EF0A0 // =dword_80EF0A4 
	bl sub_81096FA
	bl sub_800D086
loc_80EF082:
	mov r2, #0xc
	bl ho_8026554
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #1
	bl sub_801A07C
	mov r0, #4
	strh r0, [r7]
locret_80EF09E:
	pop {r4,pc}
off_80EF0A0: .word dword_80EF0A4
dword_80EF0A4: .word 0x20, 0x0, 0x0
	.word 0x20
.endfunc // sub_80EF004

.func
.thumb_func
sub_80EF0B4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EF0C4
	mov r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EF0C4:
	ldrh r0, [r7,#0x10]
	cmp r0, #7
	bne loc_80EF0D0
	mov r0, #0
	bl sub_800F2B6
loc_80EF0D0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EF0E0
	mov r0, #8
	strh r0, [r7]
	bl sub_80EF0E2
locret_80EF0E0:
	pop {pc}
.endfunc // sub_80EF0B4

.func
.thumb_func
sub_80EF0E2:
	push {r4,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EF13C
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xa
	bl sub_800F2B6
	ldrb r0, [r7,#3]
	mov r4, #1
	lsl r4, r4, #8
	add r4, #0x20 
	push {r7}
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	mov r3, #0x10
	lsl r3, r3, #0x10
	push {r7}
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80D2B8E
	pop {r7}
	bl sub_800FDB6
	ldrb r0, [r7,#0xd]
	add r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #0xc0
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r7,#1]
loc_80EF13C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EF148
	mov r0, #0xc
	strh r0, [r7]
locret_80EF148:
	pop {r4,r7,pc}
.endfunc // sub_80EF0E2

.func
.thumb_func
sub_80EF14A:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EF164
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	mov r1, #0
	bl sub_80B8E70
	mov r0, #0xa
	strh r0, [r7,#0x10]
	mov r0, #8
	strb r0, [r7,#1]
loc_80EF164:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EF1AC
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x12
	bl sub_80E05F6
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	mov r4, #0x13
	bl sub_80E05F6
	mov r0, #0x10
	strh r0, [r7]
	mov r0, #3
	strh r0, [r7,#0x10]
	bl sub_801A074 // () -> void
	ldr r0, dword_80EF1E8 // =0xb40000 
	str r0, [r5,#0x34]
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
locret_80EF1AC:
	pop {r4,pc}
.endfunc // sub_80EF14A

.func
.thumb_func
sub_80EF1AE:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EF1E4
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl sub_8011714
locret_80EF1E4:
	pop {pc}
	.balign 4, 0x00
dword_80EF1E8: .word 0xB40000
.endfunc // sub_80EF1AE

loc_80EF1EC:
	push {lr}
	ldr r1, off_80EF1FC // =off_80EF200 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EF1FC: .word off_80EF200
off_80EF200: .word sub_80EF208+1
	.word sub_80EF248+1
.func
.thumb_func
sub_80EF208:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EF22E
	mov r0, #0x17
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EF246
loc_80EF22E:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80EF246
	mov r0, #0x18
	bl sub_800F2B6
	mov r0, #0x5f 
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80EF246:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EF208

.func
.thumb_func
sub_80EF248:
	push {r4,r6,lr}
	mov r1, #1
	ldrh r0, [r7,#0x10]
	cmp r0, #0x5d 
	beq loc_80EF258
	mov r1, #3
	cmp r0, #0x53 
	bne loc_80EF26E
loc_80EF258:
	ldrb r0, [r5,#0x16]
	mov r2, #5
	mul r0, r2
	add r0, #1
	ldrb r2, [r7,#2]
	mov r3, #0x10
	lsl r3, r3, #0x10
	mov r4, #4
	ldr r6, [r7,#8]
	bl sub_80CA4D8
loc_80EF26E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EF280
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80EF280:
	pop {r4,r6,pc}
.endfunc // sub_80EF248

loc_80EF282:
	push {lr}
	ldr r1, off_80EF290 // =off_80EF294 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EF290: .word off_80EF294
off_80EF294: .word sub_80EF29C+1
	.word sub_80ED998+1
.func
.thumb_func
sub_80EF29C:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EF2C8
	mov r0, #0x12
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	bl sub_80EF30A
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EF2C8:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xf
	bne loc_80EF2D2
	bl sub_80EF30A
loc_80EF2D2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EF308
	mov r0, #0x13
	bl sub_800F2B6
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0x18
	lsl r3, r3, #0x10
	mov r4, #0
	ldr r6, [r7,#8]
	bl sub_80DDBAC
	mov r0, #0xc8
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x32 
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80EF308:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EF29C

.func
.thumb_func
sub_80EF30A:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #5
	mov r3, #0
	ldr r4, dword_80EF324 // =0x3205ff83 
	mov r6, #0
	mov r7, #0x46 
	lsl r7, r7, #8
	add r7, #0
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_80EF324: .word 0x3205FF83
.endfunc // sub_80EF30A

loc_80EF328:
	push {lr}
	ldr r1, off_80EF338 // =off_80EF33C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EF338: .word off_80EF33C
off_80EF33C: .word sub_80EF348+1
	.word sub_80EF3A0+1
	.word sub_80EF47A+1
.func
.thumb_func
sub_80EF348:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EF384
	mov r0, #0x11
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	ldr r0, dword_80EF4A4 // =0x6000 
	str r0, [r5,#0x48]
	mov r0, #0x10
	strh r0, [r7,#0x10]
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #4
	strb r0, [r7,#1]
loc_80EF384:
	ldr r0, [r5,#0x48]
	ldr r1, [r5,#0x3c]
	add r1, r1, r0
	str r1, [r5,#0x3c]
	ldr r1, dword_80EF4A8 // =0x3000 
	add r0, r0, r1
	str r0, [r5,#0x48]
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EF39E
	mov r0, #4
	strh r0, [r7]
locret_80EF39E:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EF348

.func
.thumb_func
sub_80EF3A0:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	cmp r0, #0
	bne loc_80EF3BE
	mov r0, #1
	strb r0, [r7,#1]
	bl sub_80EF3F4
	mov r0, #4
	strh r0, [r7,#0x10]
	mov r0, #6
	strh r0, [r7,#0x12]
	mov r0, #0x19
	bl sub_800F2B6
loc_80EF3BE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EF3F2
	mov r0, #0xa
	strh r0, [r7,#0x10]
	ldrb r4, [r7,#0x12]
	add r4, #0x2f 
	ldrb r4, [r7,r4]
	cmp r4, #0
	beq loc_80EF3E2
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r3, [r5,#0x3c]
	bl sub_80DDDCC
loc_80EF3E2:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bne locret_80EF3F2
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80EF3F2:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EF3A0

.func
.thumb_func
sub_80EF3F4:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	push {r7}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r2, dword_80EF4AC // =0x10000 
	mov r3, #0
	mov r4, #0xf
	mov r6, #0
	add r7, sp, #4
	str r6, [r7]
	str r6, [r7,#4]
	bl sub_800D3FE
	pop {r7}
	cmp r0, #6
	beq loc_80EF45E
	push {r0,r7}
	add r4, r0, #0
	add r6, sp, #8
	add r7, sp, #8
loc_80EF428:
	ldrb r0, [r7]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl object_getPanelParameters
	ldr r1, dword_80EF4B0 // =0xc000000 
	tst r0, r1
	beq loc_80EF444
	ldrb r0, [r7]
	ldrb r1, [r6]
	strb r0, [r6]
	strb r1, [r7]
	add r6, #1
loc_80EF444:
	add r7, #1
	sub r4, #1
	bne loc_80EF428
	pop {r0,r7}
	mov r1, sp
	cmp r6, r1
	beq loc_80EF45E
	sub r1, r6, r1
	sub r1, r0, r1
	add r0, r6, #0
	mov r2, #0xa
	bl sub_8000C72
loc_80EF45E:
	mov r0, sp
	mov r1, #6
	mov r2, #0xa
	bl sub_8000C72
	mov r0, sp
	mov r1, #0x30 
	add r1, r1, r7
	ldr r2, [r0]
	str r2, [r1]
	ldr r2, [r0,#4]
	str r2, [r1,#4]
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
.endfunc // sub_80EF3F4

.func
.thumb_func
sub_80EF47A:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EF4A0
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80EF4A0:
	pop {pc}
	.balign 4, 0x00
dword_80EF4A4: .word 0x6000
dword_80EF4A8: .word 0x3000
dword_80EF4AC: .word 0x10000
dword_80EF4B0: .word 0xC000000
.endfunc // sub_80EF47A

loc_80EF4B4:
	push {lr}
	ldr r1, off_80EF4C4 // =off_80EF4C8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EF4C4: .word off_80EF4C8
off_80EF4C8: .word sub_80EF4D0+1
	.word sub_80ECA0C+1
.func
.thumb_func
sub_80EF4D0:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EF4F2
	mov r0, #0xc
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EF4F2:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xd
	bne loc_80EF51A
	bl sub_80ED040
	cmp r1, #0
	bne loc_80EF508
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
loc_80EF508:
	mov r1, #0
	ldr r6, [r7,#8]
	ldrh r2, [r7,#6]
	add r6, r6, r2
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	mov r3, #0
	bl sub_80DE660
loc_80EF51A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EF52A
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80EF52A:
	pop {r4,r6,r7,pc}
	.word 0x80EF530, 0x40201
.endfunc // sub_80EF4D0

loc_80EF534:
	push {lr}
	ldr r1, off_80EF544 // =off_80EF548 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EF544: .word off_80EF548
off_80EF548: .word sub_80EF550+1
	.word sub_80EF608+1
.func
.thumb_func
sub_80EF550:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	cmp r0, #0
	bne loc_80EF578
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	strb r0, [r7,#1]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #0xc
	bl sub_800F2B6
	ldr r1, [r5,#0x50]
	cmp r1, #0
	beq loc_80EF578
	mov r0, #0xc
	strh r0, [r1,#0x10]
loc_80EF578:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EF5E8
	mov r0, #0xc
	strh r0, [r7,#0x10]
	bl sub_800FDB6
	mov r0, #4
	strh r0, [r7]
	ldr r0, dword_80EF960 // =0x1c5 
	ldrb r1, [r7,#0x12]
	cmp r1, #2
	beq loc_80EF596
	ldr r0, dword_80EF964 // =0x1c6 
loc_80EF596:
	bl sound_play // () -> void
	ldrb r1, [r7,#0x12]
	mov r0, #2
	sub r0, r0, r1
	ldr r4, dword_80EF5F8 // =byte_80EF604 
	ldrb r4, [r4,r0]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #8
	orr r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	ldr r6, [r7,#8]
	ldrb r1, [r7,#0x12]
	mov r0, #2
	sub r0, r0, r1
	ldr r7, off_80EF5F4 // =byte_80EF604 
	ldrb r7, [r7,r0]
	lsl r0, r0, #2
	ldr r4, off_80EF5F0 // =dword_80EF5FC 
	ldr r4, [r4,r0]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0
	mov r3, #0
	bl sub_80C536A
locret_80EF5E8:
	pop {r4,r6,r7,pc}
	.word 0
	.byte 0, 0
off_80EF5F0: .word dword_80EF5FC
off_80EF5F4: .word byte_80EF604
dword_80EF5F8: .word 0x80EF606
dword_80EF5FC: .word 0x405FF02, 0x405FF04
byte_80EF604: .byte 0x1, 0x3, 0x3A, 0x39
.endfunc // sub_80EF550

.func
.thumb_func
sub_80EF608:
	push {r4,r6,r7,lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EF62C
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	beq loc_80EF620
	mov r0, #0
	strh r0, [r7]
	beq locret_80EF62C
loc_80EF620:
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80EF62C:
	pop {r4,r6,r7,pc}
.endfunc // sub_80EF608

loc_80EF62E:
	push {lr}
	ldr r1, off_80EF63C // =off_80EF640 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EF63C: .word off_80EF640
off_80EF640: .word sub_80EF648+1
	.word sub_80EF6FC+1
.func
.thumb_func
sub_80EF648:
	push {lr}
	mov r0, #0x30 
	strh r0, [r7,#0x12]
	ldrb r0, [r5,#0x17]
	mov r1, #0x14
	mul r0, r1
	ldr r1, off_80EF66C // =off_80EF670 
	add r1, r1, r0
	str r1, [r7,#0x28]
	mov r0, #0
	str r0, [r7,#0x30]
	str r0, [r7,#0x34]
	mov r0, #4
	strh r0, [r7]
	bl sub_80EF6FC
	pop {pc}
	.balign 4, 0x00
off_80EF66C: .word off_80EF670
off_80EF670: .word dword_80EF698
	.word dword_80EF6A8
	.word dword_80EF6C0
	.word dword_80EF6D0
	.word dword_80EF6E8
	.word dword_80EF6A0
	.word dword_80EF6B4
	.word dword_80EF6C8
	.word dword_80EF6DC
	.word 0x80EF6F2
dword_80EF698: .word 0x910081, 0x11
dword_80EF6A0: .word 0xA10081, 0x21
dword_80EF6A8: .word 0xA10021, 0x910081, 0x11
dword_80EF6B4: .word 0x910011, 0xA10081, 0x21
dword_80EF6C0: .word 0x110041, 0x81
dword_80EF6C8: .word 0x210041, 0x81
dword_80EF6D0: .word 0x210081, 0x110041, 0x81
dword_80EF6DC: .word 0x110081, 0x210041, 0x81
dword_80EF6E8: .word 0x30021, 0x30011, 0x110000, 0x210003, 0x3
.endfunc // sub_80EF648

.func
.thumb_func
sub_80EF6FC:
	push {r4,lr}
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0x17
	beq loc_80EF712
	cmp r0, #0x18
	beq loc_80EF712
	ldrb r0, [r7,#0x1b]
	cmp r0, #0
	beq loc_80EF722
loc_80EF712:
	bl sub_8001532
	mov r1, #6
	svc 6
	cmp r1, #5
	beq loc_80EF774
	add r0, r1, #0
	b loc_80EF782
loc_80EF722:
	ldrh r1, [r7,#0x12]
	sub r1, #1
	strh r1, [r7,#0x12]
	beq loc_80EF774
	ldr r0, [r5,#0x58]
	ldrh r0, [r0,#0x22]
	lsl r0, r0, #0x16
	lsr r0, r0, #0x16
	mov r1, #1
	tst r0, r1
	bne loc_80EF75E
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	add r1, r0, #0
	pop {r0}
	cmp r1, #0xb
	beq locret_80EF772
	push {r0}
	mov r1, #0x2c 
	bl sub_8013774
	add r1, r0, #0
	pop {r0}
	cmp r1, #3
	beq locret_80EF772
	cmp r1, #0xf
	beq locret_80EF772
	b loc_80EF774
loc_80EF75E:
	add r1, r0, #0
	mov r0, #0x14
	ldr r2, [r7,#0x28]
	lsr r3, r0, #2
	add r3, #0x30 
	add r3, r3, r7
	bl sub_8012792
	cmp r0, #0xff
	bne loc_80EF778
locret_80EF772:
	pop {r4,pc}
loc_80EF774:
	mov r0, #0x47 
	b loc_80EF788
loc_80EF778:
	push {r0}
	mov r0, #0x8b
	bl sound_play // () -> void
	pop {r0}
loc_80EF782:
	ldr r1, off_80EF7D4 // =loc_80EF7D8 
	add r0, r0, r0
	// idx
	ldrh r0, [r1,r0]
loc_80EF788:
	strh r0, [r7,#0x14]
	bl getChip_8021DA8 // (int chip_idx) -> ChipData*
	add r4, r0, #0
	ldrb r1, [r4,#0xc]
	strb r1, [r7,#3]
	ldr r1, [r4,#0x10]
	str r1, [r7,#0xc]
	ldrb r0, [r4,#0xb]
	bl sub_8011680
	ldrb r0, [r7,#0x1b]
	cmp r0, #0
	bne loc_80EF7CE
	mov r1, #0x29 
	bl sub_8013774
	cmp r0, #0xb
	beq locret_80EF7D2
	mov r1, #0x2c 
	bl sub_8013774
	ldrh r1, [r7,#0x14]
	ldr r2, dword_80EF968 // =0x173 
	cmp r1, r2
	beq loc_80EF7C6
	ldrb r1, [r7,#4]
	cmp r1, #0
	beq loc_80EF7C6
	mov r1, #0x41 
	strb r1, [r5,#9]
loc_80EF7C6:
	cmp r0, #0xb
	blt locret_80EF7D2
	cmp r0, #0x18
	bgt locret_80EF7D2
loc_80EF7CE:
	ldrb r0, [r4,#0xf]
	strb r0, [r7,#0x1d]
locret_80EF7D2:
	pop {r4,pc}
off_80EF7D4: .word loc_80EF7D8
.endfunc // sub_80EF6FC

loc_80EF7D8:
	lsl r1, r1, #1
	lsl r2, r6, #5
	lsl r0, r1, #1
	lsl r3, r2, #5
	lsl r3, r6, #5
loc_80EF7E2:
	push {lr}
	ldr r1, off_80EF7F0 // =off_80EF7F4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EF7F0: .word off_80EF7F4
off_80EF7F4: .word sub_80EF7FC+1
	.word sub_80EF87C+1
.func
.thumb_func
sub_80EF7FC:
	push {lr}
	mov r0, #0x30 
	strh r0, [r7,#0x12]
	ldrb r0, [r5,#0x17]
	mov r1, #0xc
	mul r0, r1
	ldr r1, off_80EF820 // =off_80EF824 
	add r1, r1, r0
	str r1, [r7,#0x28]
	mov r0, #0
	str r0, [r7,#0x30]
	str r0, [r7,#0x34]
	mov r0, #4
	strh r0, [r7]
	bl sub_80EF87C
	pop {pc}
	.byte 0, 0
off_80EF820: .word off_80EF824
off_80EF824: .word dword_80EF83C
	.word dword_80EF84C
	.word dword_80EF860
	.word dword_80EF844
	.word 0x80EF856, 0x80EF86E
dword_80EF83C: .word 0x110081, 0x41
dword_80EF844: .word 0x210081, 0x41
dword_80EF84C: .word 0x110021, 0x30021, 0x110000, 0x110021, 0x3
dword_80EF860: .word 0x30041, 0x30081, 0x30041, 0x410000, 0x810003, 0x410003
	.word 0x3
.endfunc // sub_80EF7FC

.func
.thumb_func
sub_80EF87C:
	push {r4,lr}
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0x17
	beq loc_80EF892
	cmp r0, #0x18
	beq loc_80EF892
	ldrb r0, [r7,#0x1b]
	cmp r0, #0
	beq loc_80EF8A2
loc_80EF892:
	bl sub_8001532
	mov r1, #4
	svc 6
	cmp r1, #3
	beq loc_80EF8F4
	add r0, r1, #0
	b loc_80EF902
loc_80EF8A2:
	ldrh r1, [r7,#0x12]
	sub r1, #1
	strh r1, [r7,#0x12]
	beq loc_80EF8F4
	ldr r0, [r5,#0x58]
	ldrh r0, [r0,#0x22]
	lsl r0, r0, #0x16
	lsr r0, r0, #0x16
	mov r1, #1
	tst r0, r1
	bne loc_80EF8DE
	push {r0}
	mov r1, #0x29 
	bl sub_8013774
	add r1, r0, #0
	pop {r0}
	cmp r1, #0xb
	beq locret_80EF8F2
	push {r0}
	mov r1, #0x2c 
	bl sub_8013774
	add r1, r0, #0
	pop {r0}
	cmp r1, #3
	beq locret_80EF8F2
	cmp r1, #0xf
	beq locret_80EF8F2
	b loc_80EF8F4
loc_80EF8DE:
	add r1, r0, #0
	mov r0, #0xc
	ldr r2, [r7,#0x28]
	lsr r3, r0, #2
	add r3, #0x30 
	add r3, r3, r7
	bl sub_8012792
	cmp r0, #0xff
	bne loc_80EF8F8
locret_80EF8F2:
	pop {r4,pc}
loc_80EF8F4:
	mov r0, #0x47 
	b loc_80EF908
loc_80EF8F8:
	push {r0}
	mov r0, #0x8b
	bl sound_play // () -> void
	pop {r0}
loc_80EF902:
	ldr r1, off_80EF954 // =dword_80EF958 
	add r0, r0, r0
	// idx
	ldrh r0, [r1,r0]
loc_80EF908:
	strh r0, [r7,#0x14]
	bl getChip_8021DA8 // (int chip_idx) -> ChipData*
	add r4, r0, #0
	ldrb r1, [r4,#0xc]
	strb r1, [r7,#3]
	ldr r1, [r4,#0x10]
	str r1, [r7,#0xc]
	ldrb r0, [r4,#0xb]
	bl sub_8011680
	ldrb r0, [r7,#0x1b]
	cmp r0, #0
	bne loc_80EF94E
	mov r1, #0x29 
	bl sub_8013774
	cmp r0, #0xb
	beq locret_80EF952
	mov r1, #0x2c 
	bl sub_8013774
	ldrh r1, [r7,#0x14]
	ldr r2, dword_80EF96C // =0x177 
	cmp r1, r2
	beq loc_80EF946
	ldrb r1, [r7,#4]
	cmp r1, #0
	beq loc_80EF946
	mov r1, #0x41 
	strb r1, [r5,#9]
loc_80EF946:
	cmp r0, #0xb
	blt locret_80EF952
	cmp r0, #0x18
	bgt locret_80EF952
loc_80EF94E:
	ldrb r0, [r4,#0xf]
	strb r0, [r7,#0x1d]
locret_80EF952:
	pop {r4,pc}
off_80EF954: .word dword_80EF958
dword_80EF958: .word 0x1770176, 0x178
dword_80EF960: .word 0x1C5
dword_80EF964: .word 0x1C6
dword_80EF968: .word 0x173
dword_80EF96C: .word 0x177
.endfunc // sub_80EF87C

loc_80EF970:
	push {lr}
	ldr r1, off_80EF980 // =dword_80EF984 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EF980: .word dword_80EF984
dword_80EF984: .word 0x80EF991, 0x80EF9A3, 0x80EFA31, 0x78F92001, 0xD0002900
	.word 0x82782001, 0x80382004, 0xB5D046F7, 0x42007878, 0x2005D11C
	.word 0xFC83F71F, 0xFA01F720, 0xF71020B0, 0xB480FE09, 0xF8BAF7FC
	.word 0xF7FC1C04, 0x200F891, 0x274C1824, 0xF7C9197F, 0xBC80FA2F
	.word 0x5802001, 0xFBBBF72A, 0x82382015, 0x70782004, 0x280C8A38
	.word 0xF71ED110, 0x7CA9FC6E, 0x7CE91840, 0x68BE78BA, 0x18F688FB
	.word 0xF7DF68FC, 0x4200FF8E, 0x2108D002, 0x64010409, 0x38018A38
	.word 0xDA0C8238, 0x38018A78, 0xDD068278, 0x64E82000, 0x66886DA9
	.word 0x70782000, 0x2008BDD0, 0xBDD08038, 0x7878B500, 0xD1034200
	.word 0x82382005, 0x70782004, 0x38018A38, 0xDA058238, 0x64E82000
	.word 0x66886DA9, 0xFE60F721
	pop {pc}
loc_80EFA56:
	push {lr}
	ldr r1, off_80EFA64 // =off_80EFA68 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80EFA64: .word off_80EFA68
off_80EFA68: .word sub_80EFA74+1
	.word sub_80EFB0C+1
	.word sub_80EFBA0+1
.func
.thumb_func
sub_80EFA74:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EFA9E
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x14
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #8
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80EFB0A
loc_80EFA9E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EFB0A
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80EFC08 // =0xc0000 
	mul r0, r1
	str r0, [r5,#0x40]
	ldr r0, dword_80EFC0C // =0x780000 
	svc 6
	add r0, #1
	strh r0, [r7,#0x10]
	mov r0, #0xd
	strh r0, [r7,#0x12]
	mov r0, #0x15
	bl sub_800F2B6
	ldr r0, dword_80EFC10 // =0x10000 
	ldr r1, [r5,#0x38]
	add r1, r1, r0
	str r1, [r5,#0x38]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	push {r7}
	ldrb r2, [r7,#2]
	mov r3, #0x18
	lsl r3, r3, #0x10
	mov r4, #1
	lsl r4, r4, #8
	ldr r6, [r7,#8]
	add r7, #0x30 
	bl sub_80DB666
	pop {r7}
	mov r0, #0
	ldr r1, [r5,#0x54]
	strh r0, [r1,#0x2e]
	mov r0, #0
	bl sub_8019F86
	mov r0, #0x88
	add r0, #0xff
	bl sound_play // () -> void
	ldr r0, dword_80EFC14 // =0xffff 
	bl object_setInvulnerableTime
	mov r0, #4
	strh r0, [r7]
locret_80EFB0A:
	pop {r4,r6,pc}
.endfunc // sub_80EFA74

.func
.thumb_func
sub_80EFB0C:
	push {r4,lr}
	ldr r0, [r7,#0x30]
	cmp r0, #0
	beq loc_80EFB1C
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80EFB20
loc_80EFB1C:
	bl sub_801A074 // () -> void
loc_80EFB20:
	ldr r0, [r7,#0x30]
	cmp r0, #0
	bne loc_80EFB2C
	ldr r0, [r5,#0x40]
	asr r0, r0, #1
	str r0, [r5,#0x40]
loc_80EFB2C:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	ldr r0, [r7,#0x30]
	cmp r0, #0
	bne loc_80EFB48
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt locret_80EFB9E
	b loc_80EFB74
loc_80EFB48:
	bl sub_801A04C
	bl object_getFlag // () -> int
	mov r1, #0x10
	tst r0, r1
	bne loc_80EFB64
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r1, #0x10
	tst r0, r1
	beq loc_80EFB74
loc_80EFB64:
	bl object_isCurrentPanelValid
	cmp r0, #0
	beq loc_80EFB74
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EFB9E
loc_80EFB74:
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	mov r4, #0x12
	bl sub_80E05F6
	ldr r0, dword_80EFC18 // =0xb40000 
	str r0, [r5,#0x34]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801A074 // () -> void
	mov r0, #8
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80EFB9E:
	pop {r4,pc}
.endfunc // sub_80EFB0C

.func
.thumb_func
sub_80EFBA0:
	push {r4,lr}
	ldrh r0, [r7,#0x10]
	cmp r0, #3
	bne loc_80EFBBE
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	mov r4, #0x13
	bl sub_80E05F6
loc_80EFBBE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EFC04
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	bl sub_800EB08
	bl sub_80142C2
	bl sub_80107C0
	add r0, r3, #0
	bl sub_8019F86
	mov r0, #1
	bl sub_801A07C
	bl sub_8011714
locret_80EFC04:
	pop {r4,pc}
	.balign 4, 0x00
dword_80EFC08: .word 0xC0000
dword_80EFC0C: .word 0x780000
dword_80EFC10: .word 0x10000
dword_80EFC14: .word 0xFFFF
dword_80EFC18: .word 0xB40000
.endfunc // sub_80EFBA0

loc_80EFC1C:
	push {lr}
	ldr r1, off_80EFC2C // =off_80EFC30 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80EFC2C: .word off_80EFC30
off_80EFC30: .word sub_80EFC38+1
	.word sub_80EFC8E+1
.func
.thumb_func
sub_80EFC38:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EFC64
	mov r0, #0xe
	bl sub_800F2B6
	bl sub_80EB562
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strh r0, [r7,#0x10]
loc_80EFC64:
	ldrh r0, [r7,#0x10]
	cmp r0, #1
	bne loc_80EFC7E
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r4, #0
	ldr r6, [r7,#8]
	bl sub_80DB800
loc_80EFC7E:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #4
	ble locret_80EFC8C
	mov r0, #4
	strh r0, [r7]
locret_80EFC8C:
	pop {pc}
.endfunc // sub_80EFC38

.func
.thumb_func
sub_80EFC8E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EFC9E
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EFC9E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EFCB2
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80EFCB2:
	pop {pc}
.endfunc // sub_80EFC8E

loc_80EFCB4:
	push {lr}
	ldr r1, off_80EFCCC // =off_80EFCD0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldr r0, [r7,#0x30]
	cmp r0, #0
	beq locret_80EFCCA
	mov r1, #2
	strh r1, [r0,#0x20]
locret_80EFCCA:
	pop {pc}
off_80EFCCC: .word off_80EFCD0
off_80EFCD0: .word sub_80EFCD8+1
	.word sub_80EFD5E+1
.func
.thumb_func
sub_80EFCD8:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EFD48
	mov r1, #0x2c 
	bl sub_8013774
	add r4, r0, #0
	mov r0, #0x17
	cmp r4, #0x16
	bne loc_80EFCF0
	mov r0, #0x19
loc_80EFCF0:
	bl sub_800F2B6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #7
	mov r3, #4
	cmp r4, #0x16
	bne loc_80EFD14
	mov r1, #3
	mov r3, #0xa
	neg r3, r3
loc_80EFD14:
	mul r0, r1
	lsl r0, r0, #0x10
	ldr r1, [r5,#0x34]
	sub r1, r1, r0
	mov r4, #0x63 
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #8
	orr r4, r2
	ldr r2, [r5,#0x38]
	lsl r3, r3, #0x10
	add r2, r2, r3
	ldr r3, [r5,#0x3c]
	bl sub_80E05F6
	str r0, [r7,#0x30]
	ldrb r1, [r0]
	mov r2, #0x14
	bic r1, r2
	strb r1, [r0]
	mov r0, #0xad
	bl sound_play // () -> void
	mov r0, #9
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EFD48:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EFD5C
	bl sub_80EFD74
	mov r0, #0xb
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80EFD5C:
	pop {r4,pc}
.endfunc // sub_80EFCD8

.func
.thumb_func
sub_80EFD5E:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EFD72
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80EFD72:
	pop {pc}
.endfunc // sub_80EFD5E

.func
.thumb_func
sub_80EFD74:
	push {r7,lr}
	add r7, r2, #0
	mov r0, r10
	ldr r0, [r0,#0x18]
	add r0, #0xa0
	mov r3, #8
loc_80EFD80:
	bl sub_80EFD8C
	add r0, #4
	sub r3, #1
	bne loc_80EFD80
	pop {r7,pc}
.endfunc // sub_80EFD74

.func
.thumb_func
sub_80EFD8C:
	push {r0,r3,lr}
	ldr r0, [r0]
	cmp r0, #0
	beq locret_80EFDB0
	ldrh r1, [r0,#0x28]
	cmp r1, #0xda
	beq locret_80EFDB0
	ldr r1, [r0,#0x54]
	tst r1, r1
	beq locret_80EFDB0
	ldr r1, [r1,#0x40]
	ldr r2, dword_80EFE6C // =0x348000 
	tst r1, r2
	bne locret_80EFDB0
	push {r0}
	bl sub_800F8B0
	pop {r0}
locret_80EFDB0:
	pop {r0,r3,pc}
.endfunc // sub_80EFD8C

.func
.thumb_func
sub_80EFDB2:
	push {r4,r6,r7,lr}
	mov r6, #1
	ldr r7, [r5,#0x58]
	add r7, #0xa0
	bl sprite_forceWhitePallete
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EFE2C
	mov r0, #0x8e
	bl sound_play // () -> void
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x14]
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x15]
	strb r1, [r5,#0x13]
	bl sub_801BB1C
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl sub_800F46C
	strb r0, [r5,#0x17]
	bl sub_800F2C6
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r0, #0x14
	lsl r0, r0, #0x10
	add r3, r3, r0
	mov r4, #3
	bl sub_80E05F6
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
	ldr r0, dword_80EFE70 // =0x80011c40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0x10
	bl sub_801A176
	ldr r0, dword_80EFE74 // =0x200000 
	bl sub_801031C
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	bl sprite_forceWhitePallete
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EFE2C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80EFE68
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_801BB46
	ldr r0, dword_80EFE78 // =0x1001003d 
	bl sub_800FFEE
	bl sub_800EB08
	bl sub_801A66C
	mov r1, #0x18
	bl sub_8013774
	add r2, r0, #4
	cmp r2, #7
	ble loc_80EFE5E
	mov r2, #7
loc_80EFE5E:
	mov r1, #0x18
	bl sub_8013754
	bl sub_8011714
locret_80EFE68:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80EFE6C: .word 0x348000
dword_80EFE70: .word 0x80011C40
dword_80EFE74: .word 0x200000
dword_80EFE78: .word 0x1001003D
.endfunc // sub_80EFDB2

loc_80EFE7C:
	push {r7,lr}
	bl sub_800FFFE
	ldr r1, off_80EFEA4 // =0x600 
	tst r0, r1
	beq loc_80EFE94
	ldrb r1, [r7,#5]
	ldrb r2, [r7,#3]
	ldr r3, [r7,#8]
	bl sub_80105F2
	b locret_80EFE9E
loc_80EFE94:
	ldr r1, off_80EFEA0 // =off_80EFEA8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_80EFE9E:
	pop {r7,pc}
off_80EFEA0: .word off_80EFEA8
off_80EFEA4: .word 0x600
off_80EFEA8: .word sub_80EFEAC+1
.func
.thumb_func
sub_80EFEAC:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EFEC6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	ldr r0, dword_80EFEDC // =0x800 
	bl sub_8010312
	mov r0, #4
	strb r0, [r7,#1]
loc_80EFEC6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80EFED8
	ldr r0, dword_80EFEDC // =0x800 
	bl sub_801031C
	bl sub_8011714
locret_80EFED8:
	pop {r4,pc}
	.balign 4, 0x00
dword_80EFEDC: .word 0x800
.endfunc // sub_80EFEAC

loc_80EFEE0:
	push {lr}
	ldr r1, off_80EFEF0 // =off_80EFEF4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_80EFEF0: .word off_80EFEF4
off_80EFEF4: .word sub_80EFF00+1
	.word sub_80EFF28+1
	.word sub_80F0068+1
.func
.thumb_func
sub_80EFF00:
	push {lr}
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	strb r0, [r7,#0x12]
	mov r0, #3
	str r0, [r7,#0x40]
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #0x30 
	add r0, r0, r7
	bl sub_801299C
	mov r0, #0
	str r0, [r7,#0x44]
	mov r0, #4
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80EFF00

.func
.thumb_func
sub_80EFF28:
	push {r4,r6,r7,lr}
	ldr r6, [r5,#0x58]
	ldr r0, [r7,#0x44]
	cmp r0, #0xff
	beq loc_80EFF50
	tst r0, r0
	beq loc_80EFF50
	mov r0, #0x30 
	add r0, r0, r7
	ldrh r1, [r6,#0x24]
	bl sub_8012956
	tst r0, r0
	beq loc_80EFF50
	ldr r1, [r7,#0x40]
	add r1, #1
	str r1, [r7,#0x40]
	mov r0, #0x8b
	bl sound_play // () -> void
loc_80EFF50:
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80EFF96
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	bl sub_80B8E58
	mov r0, #5
	bl sub_800F2B6
	bl sub_8011450
	bl sub_800FDB6
	mov r0, #0x32 
	add r0, #0xff
	bl sound_play // () -> void
	push {r7}
	bl sub_80EBB34
	add r4, r0, #0
	bl sub_80EBAE8
	lsl r0, r0, #8
	add r4, r4, r0
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #0x15
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80EFF96:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xc
	bne loc_80F0022
	ldrh r0, [r7,#0x12]
	cmp r0, #3
	bge loc_80EFFFC
	ldrh r0, [r7,#0x12]
	cmp r0, #2
	bne loc_80EFFAC
	mov r0, #1
	str r0, [r7,#0x44]
loc_80EFFAC:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrh r3, [r7,#0x12]
	push {r0,r1,r3}
	lsl r3, r3, #2
	ldr r4, off_80F0044 // =dword_80F004C 
	ldr r4, [r4,r3]
	ldrb r2, [r7,#2]
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldr r6, [r7,#8]
	ldrh r0, [r7,#6]
	add r6, r6, r0
	pop {r0,r1,r3}
	push {r0,r1,r3,r6,r7}
	mov r7, #1
	mov r3, #0
	bl sub_80C536A
	pop {r0,r1,r3,r6,r7}
	push {r0,r1,r3}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	ldr r2, off_80F0048 // =byte_80F0064 
	ldrb r0, [r2,r3]
	add r4, r4, r0
	pop {r0,r1,r3}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	b loc_80F0022
loc_80EFFFC:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	ldrh r3, [r7,#6]
	add r6, r6, r3
	mov r4, #2
	lsl r4, r4, #8
	add r4, #3
	bl sub_80CF91E
	tst r0, r0
	beq loc_80F0022
	mov r1, #8
	lsl r1, r1, #0x10
	str r1, [r0,#0x40]
loc_80F0022:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F0040
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	ldr r1, [r7,#0x40]
	cmp r0, r1
	bge loc_80F003C
	mov r0, #0
	strb r0, [r7,#1]
	pop {r4,r6,r7,pc}
loc_80F003C:
	mov r0, #8
	strh r0, [r7]
locret_80F0040:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80F0044: .word dword_80F004C
off_80F0048: .word byte_80F0064
dword_80F004C: .word 0x705FF02, 0x705FF04, 0x705FF06, 0xFFE0, 0x101001E
	.word 0x1E
byte_80F0064: .byte 0x65, 0x66, 0x67, 0x0
.endfunc // sub_80EFF28

.func
.thumb_func
sub_80F0068:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F007E
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80F007E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F0092
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80F0092:
	pop {pc}
.endfunc // sub_80F0068

loc_80F0094:
	push {lr}
	ldr r1, off_80F00A4 // =off_80F00A8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_80F00A4: .word off_80F00A8
off_80F00A8: .word sub_80F00B0+1
	.word sub_80ECA0C+1
.func
.thumb_func
sub_80F00B0:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F00D2
	mov r0, #0xc
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80F00D2:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xd
	bne loc_80F00E0
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	bl sub_80E5A64
loc_80F00E0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F00F0
	mov r0, #0xf
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80F00F0:
	pop {r4,r6,r7,pc}
.endfunc // sub_80F00B0

loc_80F00F2:
	push {lr}
	ldr r1, off_80F0100 // =off_80F0104 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80F0100: .word off_80F0104
off_80F0104: .word sub_80F0110+1
	.word sub_80F014C+1
	.word sub_80F01E8+1
.func
.thumb_func
sub_80F0110:
	push {lr}
	mov r0, #0
	strh r0, [r7,#0x10]
	bl sub_8001532
	mov r1, #6
	svc 6
	mov r0, #3
	mul r0, r1
	ldr r1, off_80F0134 // =dword_80F0138 
	add r0, r0, r1
	str r0, [r7,#0x30]
	mov r0, #4
	strh r0, [r7]
	bl sub_80F014C
	pop {pc}
	.balign 4, 0x00
off_80F0134: .word dword_80F0138
dword_80F0138: .word 0xFF0001FF, 0x1000100, 0x1FF00FF, 0x1FF0001, 0xFF
.endfunc // sub_80F0110

.func
.thumb_func
sub_80F014C:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0188
	mov r0, #0xe
	bl sub_800F2B6
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrh r0, [r7,#0x12]
	cmp r0, #0
	bne loc_80F016A
	bl sub_80EB562
	b loc_80F0178
loc_80F016A:
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	bl sub_80B8E7C
	ldr r0, [r5,#0x50]
	bl sub_80C44D2
loc_80F0178:
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80F0188:
	ldrh r0, [r7,#0x10]
	cmp r0, #1
	bne loc_80F01C8
	mov r0, #0x6a 
	bl sound_play // () -> void
	ldrh r0, [r7,#0x12]
	mov r1, #3
	svc 6
	ldr r0, [r7,#0x30]
	ldrsb r0, [r0,r1]
	ldrb r1, [r5,#0x13]
	add r1, r1, r0
	push {r1}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	pop {r1}
	mov r3, #0x18
	lsl r3, r3, #0x10
	ldrh r4, [r7,#0xc]
	ldr r6, [r7,#8]
	bl sub_80C4FFE
	push {r7}
	mov r4, #5
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
loc_80F01C8:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #5
	ble locret_80F01E6
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	cmp r0, #9
	bge loc_80F01E2
	mov r0, #0
	strb r0, [r7,#1]
	pop {r4,r6,r7,pc}
loc_80F01E2:
	mov r0, #8
	strh r0, [r7]
locret_80F01E6:
	pop {r4,r6,r7,pc}
.endfunc // sub_80F014C

.func
.thumb_func
sub_80F01E8:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F01F8
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_80F01F8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F020C
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_80F020C:
	pop {r4,pc}
.endfunc // sub_80F01E8

loc_80F020E:
	push {lr}
	ldr r1, off_80F021C // =off_80F0220 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_80F021C: .word off_80F0220
off_80F0220: .word sub_80F0228+1
	.word sub_80F0262+1
.func
.thumb_func
sub_80F0228:
	push {r4,r6,r7,lr}
	mov r0, #0xf
	bl sub_800F2B6
	bl sub_800FDB6
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0x10
	strh r0, [r7,#0x12]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #3
	mul r0, r1
	add r0, #2
	mov r1, #2
	mov r2, #0
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	bl sub_80C6330
	mov r0, #4
	strh r0, [r7]
	pop {r4,r6,r7,pc}
.endfunc // sub_80F0228

.func
.thumb_func
sub_80F0262:
	push {lr}
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	cmp r0, #0x10
	ble loc_80F027A
	mov r0, #0
	strh r0, [r7,#0x12]
	mov r0, #0x29 
	add r0, #0xff
	bl sound_play // () -> void
loc_80F027A:
	ldrh r0, [r7,#0x10]
	mov r1, #2
	tst r0, r1
	bne loc_80F0290
	bl sub_800E29C // () -> void
	ldr r1, [r5,#0x34]
	mov r0, #3
	bl sub_801BDDE
	str r1, [r5,#0x34]
loc_80F0290:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F02A0
	bl sub_800E29C // () -> void
	bl sub_8011714
locret_80F02A0:
	pop {pc}
.endfunc // sub_80F0262

.func
.thumb_func
sub_80F02A2:
	push {r4,lr}
	mov r4, #1
	ldrb r0, [r7,#0xd]
	tst r0, r0
	beq loc_80F02B8
	bl sub_801032C
	ldr r1, dword_80F02BC // =0x8000 
	tst r0, r1
	beq loc_80F02B8
	mov r4, #0
loc_80F02B8:
	add r0, r4, #0
	pop {r4,pc}
dword_80F02BC: .word 0x8000
off_80F02C0: .word unk_2010000
	.word 0x1010000, 0x2000002, 0x201, 0x20103, 0x2010400, 0x1050000
	.word 0x6000002, 0x201, 0x20107, 0x2010800, 0x1090000, 0xA000002
	.word 0x201, 0x2010B, 0x2010C00, 0x0
	.word off_80001F4
	.word 0xA, 0x403C4032, 0x34013401, 0x34013401, 0x34013401
	.word 0x34013401, 0x403C4032, 0x34013401, 0x34013401, 0x34013401
	.word 0x34013401, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
.endfunc // sub_80F02A2

.func
.thumb_func
sub_80F0354:
	push {r4,r6,r7,lr}
	ldr r6, [r5,#0x58]
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	bne loc_80F037A
	ldrb r0, [r5,#0x16]
	bl sub_800A772
	tst r0, r0
	beq loc_80F0374
	mov r0, #0x40 
	bl sub_801DA48
	b loc_80F037A
loc_80F0374:
	mov r0, #0x40 
	bl sub_801DACC
loc_80F037A:
	ldrb r0, [r5,#0xa]
	tst r0, r0
	bne loc_80F03AE
	ldrb r0, [r5,#0xb]
	tst r0, r0
	bne loc_80F03A0
	mov r0, #2
	bl sub_801DA48
	mov r0, #0xa
	strh r0, [r5,#0x20]
	mov r0, #0x10
	bl sub_8010312
	mov r0, #0x40 
	bl sub_801031C
	mov r0, #4
	strb r0, [r5,#0xb]
loc_80F03A0:
	ldrh r0, [r5,#0x20]
	sub r0, #1
	strh r0, [r5,#0x20]
	bgt loc_80F03AE
	mov r0, #4
	strh r0, [r5,#0xa]
	b loc_80F03AE
loc_80F03AE:
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0x17
	blt loc_80F03D2
	bl sub_802D322
	cmp r0, #1
	beq loc_80F03CC
	cmp r0, #2
	beq loc_80F0474
	cmp r0, #0
	beq loc_80F03CA
	mov r0, #1
loc_80F03CA:
	b locret_80F0604
loc_80F03CC:
	bl sub_8010004
	b loc_80F057C
loc_80F03D2:
	bl sub_802E4E4
	bl sub_802E4B8
	cmp r0, #0xd
	beq loc_80F03EA
	cmp r0, #9
	bne loc_80F0422
	bl sub_802F068
	mov r0, #1
	b locret_80F0604
loc_80F03EA:
	ldrb r0, [r5,#0x16]
	bl sub_802E070
	ldrh r1, [r0,#0x30]
	cmp r1, #0
	bne loc_80F0406
	mov r1, #0
	mov r2, #0x54 
	strb r1, [r0,r2]
	mov r0, #0x59 
	bl sub_8011680
	mov r0, #1
	b locret_80F0604
loc_80F0406:
	bl loc_802D4C6
	cmp r0, #1
	beq loc_80F041A
	cmp r0, #2
	beq loc_80F0474
	cmp r0, #0
	beq loc_80F0418
	mov r0, #1
loc_80F0418:
	b locret_80F0604
loc_80F041A:
	mov r3, #0xa0
	add r3, r3, r6
	ldrh r0, [r3,#0x14]
	b loc_80F057C
loc_80F0422:
	bl sub_800FFFE
	ldr r1, off_80F06DC // =0x600 
	tst r0, r1
	beq loc_80F0438
	mov r1, #0
	mov r2, #0
	bl sub_801056A
	mov r0, #1
	pop {r4,r6,r7,pc}
loc_80F0438:
	bl sub_8010660
	tst r0, r0
	beq loc_80F0444
	mov r0, #1
	pop {r4,r6,r7,pc}
loc_80F0444:
	bl sub_800FFFE
	mov r1, #0x20 
	tst r0, r1
	beq loc_80F046E
	mov r0, #0x10
	bl sub_801031C
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	bne loc_80F0464
	mov r0, #0x40 
	bl sub_801DACC
loc_80F0464:
	mov r0, #0x16
	bl sub_8011684
	mov r0, #1
	pop {r4,r6,r7,pc}
loc_80F046E:
	mov r1, #1
	tst r0, r1
	beq loc_80F0496
loc_80F0474:
	mov r0, #0x10
	bl sub_801031C
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	bne loc_80F048A
	mov r0, #0x40 
	bl sub_801DACC
loc_80F048A:
	bl sub_8011764
	bl sub_8011684
	mov r0, #1
	pop {r4,r6,r7,pc}
loc_80F0496:
	mov r1, #2
	tst r0, r1
	beq loc_80F04CE
	mov r0, #0x10
	bl sub_801031C
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	bne loc_80F04B2
	mov r0, #0x40 
	bl sub_801DACC
loc_80F04B2:
	bl loc_80117A4
	ldrb r1, [r6,#7]
	cmp r1, #0x21 
	blt loc_80F04C6
	cmp r1, #0x26 
	bgt loc_80F04C6
	bl sub_8011688
	b loc_80F04CA
loc_80F04C6:
	bl sub_8011684
loc_80F04CA:
	mov r0, #1
	pop {r4,r6,r7,pc}
loc_80F04CE:
	bl sub_800FFFE
	mov r1, #0x10
	tst r0, r1
	beq loc_80F04FA
	mov r0, #0x10
	bl sub_801031C
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	bne loc_80F04EE
	mov r0, #0x40 
	bl sub_801DACC
loc_80F04EE:
	bl sub_8011790
	bl loc_801168C
	mov r0, #1
	pop {r4,r6,r7,pc}
loc_80F04FA:
	bl sub_800FFFE
	ldr r1, dword_80F06E0 // =0x10000000 
	tst r0, r1
	beq loc_80F0526
	mov r0, #0x10
	bl sub_801031C
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	bne loc_80F051A
	mov r0, #0x40 
	bl sub_801DACC
loc_80F051A:
	bl sub_801177A
	bl sub_8011684
	mov r0, #1
	pop {r4,r6,r7,pc}
loc_80F0526:
	bl sub_800FB54
	ldr r3, dword_80F06E4 // =0xffff 
	cmp r0, r3
	bne loc_80F057C
	bl sub_800FA54
	cmp r0, #0
	beq loc_80F0552
	push {r0}
	bl sub_8010332
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	bl sub_80103A8
	add r2, r0, #0
	pop {r0,r1}
	bl sub_80116AE
	pop {r4,r6,r7,pc}
loc_80F0552:
	bl sub_800FFFE
	ldr r1, dword_80F06E8 // =0x3000 
	tst r0, r1
	beq loc_80F0564
	mov r0, #0x3b 
	bl loc_8011690
	pop {r4,r6,r7,pc}
loc_80F0564:
	ldrb r0, [r6,#0x1a]
	cmp r0, #0
	beq loc_80F0578
	push {r0}
	bl sub_8010332
	add r1, r0, #0
	pop {r0}
	bl sub_80116D8
loc_80F0578:
	mov r0, #0
	pop {r4,r6,r7,pc}
loc_80F057C:
	add r7, r0, #0
	bl sub_80106C0
	tst r0, r0
	beq loc_80F058C
	bl sub_8011714
	b loc_80F05F2
loc_80F058C:
	add r0, r7, #0
	bl sub_8010740
	tst r0, r0
	beq loc_80F059C
	bl sub_8011714
	b loc_80F05F2
loc_80F059C:
	add r0, r7, #0
	lsl r0, r0, #0x11
	lsr r0, r0, #0x11
	bl getChip_8021DA8 // (int chip_idx) -> ChipData*
	add r4, r0, #0
	mov r0, #0x10
	bl sub_801031C
	mov r0, #0x40 
	bl sub_8010312
	ldrb r0, [r4,#9]
	mov r1, #1
	tst r0, r1
	bne loc_80F05DE
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	beq loc_80F05DE
	mov r3, #0xa0
	add r3, r3, r6
	ldrh r0, [r3,#0x14]
	tst r0, r0
	beq loc_80F05DE
	ldr r1, dword_80F06EC // =0x185 
	cmp r0, r1
	beq loc_80F05DE
	ldrh r1, [r3,#8]
	ldrh r2, [r3,#6]
	bl sub_801EB18
loc_80F05DE:
	mov r3, #0xa0
	add r3, r3, r6
	ldrb r0, [r3,#0x1b]
	cmp r0, #0
	bne loc_80F05F2
	ldrb r0, [r3,#0x1c]
	cmp r0, #5
	beq loc_80F05F2
	bl sub_800FC7C
loc_80F05F2:
	ldrb r0, [r5,#0x16]
	bl battle_networkInvert
	tst r0, r0
	bne loc_80F0602
	mov r0, #0x40 
	bl sub_801DACC
loc_80F0602:
	mov r0, #1
locret_80F0604:
	pop {r4,r6,r7,pc}
.endfunc // sub_80F0354

	mov pc, lr
	push {r4,r6,lr}
	bl battle_isPaused
	bne loc_80F068C
	mov r6, #0x64 
	mov r1, #0x29 
	bl sub_8013774
	cmp r0, #5
	bne loc_80F0632
	bl sub_800F49E
	cmp r0, #0xff
	beq loc_80F068C
	ldr r1, off_80F06F0 // =byte_8021300 
	ldr r1, [r1]
	cmp r0, r1
	blt loc_80F068C
	ldr r1, off_80F06F4 // =byte_802136D 
	ldrb r6, [r1,r0]
	b loc_80F0640
loc_80F0632:
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #5
	beq loc_80F0640
	cmp r0, #0x11
	bne loc_80F068C
loc_80F0640:
	ldrb r0, [r5,#0x16]
	bl sub_8010018
	add r4, r0, #0
	ldrb r1, [r4]
	lsl r1, r1, #1
	add r1, #2
	ldrh r0, [r4,r1]
	bl getChip_8021DA8 // (int chip_idx) -> ChipData*
	ldrb r1, [r0,#9]
	mov r2, #2
	tst r1, r2
	beq loc_80F068C
	ldrb r1, [r0,#4]
	cmp r1, #1
	bne loc_80F068C
	ldrb r0, [r4]
	lsl r0, r0, #1
	add r0, #0x26 
	add r4, r4, r0
	mov r3, #0xf
	ldrh r0, [r4]
	cmp r0, r6
	bge loc_80F068C
	mov r1, #0
	ldr r2, [r5,#0x58]
	ldrb r0, [r2,#0x1e]
	cmp r0, #1
	bne loc_80F068A
	ldrb r0, [r2,#0x1b]
	cmp r0, r3
	blt loc_80F068C
	mov r0, #0xa
	strb r0, [r2,#0x1b]
	ldrh r1, [r4]
	add r1, #1
loc_80F068A:
	strh r1, [r4]
loc_80F068C:
	mov r1, #0x29 
	bl sub_8013774
	cmp r0, #0
	bne locret_80F06BA
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0x18
	beq loc_80F06B6
	ldrb r0, [r5,#9]
	cmp r0, #0x50 
	beq locret_80F06BA
	bl object_getFlag // () -> int
	ldr r1, dword_80F06F8 // =0x80000000 
	tst r0, r1
	bne locret_80F06BA
	mov r0, #0
	str r0, [r5,#0x3c]
	b locret_80F06BA
loc_80F06B6:
	ldr r0, dword_80F06FC // =0x140000 
	str r0, [r5,#0x3c]
locret_80F06BA:
	pop {r4,r6,pc}
	push {r7,lr}
	mov r1, #0x2c 
	bl sub_8013774
	cmp r0, #0
	beq locret_80F06CC
	bl sub_80144C0
locret_80F06CC:
	pop {r7,pc}
.func
.thumb_func
sub_80F06CE:
	push {lr}
	ldr r0, [r5,#0x50]
	tst r0, r0
	beq locret_80F06DA
	bl sub_80C44D2
locret_80F06DA:
	pop {pc}
off_80F06DC: .word 0x600
dword_80F06E0: .word 0x10000000
dword_80F06E4: .word 0xFFFF
dword_80F06E8: .word 0x3000
dword_80F06EC: .word 0x185
off_80F06F0: .word byte_8021300
off_80F06F4: .word byte_802136D
dword_80F06F8: .word 0x80000000
dword_80F06FC: .word 0x140000
.endfunc // sub_80F06CE

	push {lr}
	ldr r0, [r5,#0x50]
	tst r0, r0
	beq loc_80F073E
	bl sub_80C44D2
	pop {pc}
loc_80F070E:
	push {r7,lr}
	ldr r1, off_80F071C // =off_80F0720 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F071C: .word off_80F0720
off_80F0720: .word sub_80F0728+1
	.word sub_80F0754+1
.func
.thumb_func
sub_80F0728:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F073E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #8
	strh r0, [r7,#0x10]
	b locret_80F0752
loc_80F073E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0752
	mov r0, #0x10
	strb r0, [r5,#0x10]
	bl sub_80F08BA
	mov r0, #4
	strh r0, [r7]
locret_80F0752:
	pop {r4,r6,pc}
.endfunc // sub_80F0728

.func
.thumb_func
sub_80F0754:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0766
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F0776
loc_80F0766:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0776
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F0776:
	pop {pc}
.endfunc // sub_80F0754

.func
.thumb_func
sub_80F0778:
	push {r7,lr}
	ldr r1, off_80F0788 // =off_80F078C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F0788: .word off_80F078C
off_80F078C: .word sub_80F0798+1
	.word sub_80F0832+1
	.word sub_80F0898+1
.endfunc // sub_80F0778

.func
.thumb_func
sub_80F0798:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F07E8
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x12
	strb r0, [r5,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r4, #0x14
	mov r0, #0x34 
	add r0, r0, r5
	ldr r6, dword_80F0938 // =0xfffe8000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F0830
loc_80F07E8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_80F080E
	mov r0, #0
	strh r0, [r5,#0x3e]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	mov r2, #0x10
	tst r0, r2
	beq loc_80F0808
	mov r0, #4
	strh r0, [r7]
	b locret_80F0830
loc_80F0808:
	mov r0, #8
	strh r0, [r7]
	b locret_80F0830
loc_80F080E:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80F0938 // =0xfffe8000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
locret_80F0830:
	pop {r4,r6,pc}
.endfunc // sub_80F0798

.func
.thumb_func
sub_80F0832:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0880
	mov r0, #4
	strb r0, [r7,#1]
loc_80F083E:
	ldrh r0, [r7,#8]
	ldrh r1, [r7,#6]
	add r0, r0, r1
	strh r0, [r7,#8]
	ldrb r2, [r7,#2]
	mov r3, #0x3c 
	lsl r3, r3, #8
	mov r4, #0
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80F37D8
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F0890 // =0x4050101 
	ldr r6, [r7,#8]
	push {r7}
	ldr r7, dword_80F0894 // =0x3 
	bl sub_80C536A
	pop {r7}
	tst r0, r0
	beq loc_80F087A
	mov r1, #0x3c 
	strh r1, [r0,#0x20]
	mov r0, #0xc0
	bl sound_play // () -> void
loc_80F087A:
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	b locret_80F088C
loc_80F0880:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F088C
	mov r0, #8
	strh r0, [r7]
locret_80F088C:
	pop {r4,r6,pc}
	.byte 0, 0
dword_80F0890: .word 0x4050101
dword_80F0894: .word 0x3
.endfunc // sub_80F0832

.func
.thumb_func
sub_80F0898:
	push {lr}
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
.endfunc // sub_80F0898

	bl sub_800E29C // () -> void
	bl sub_8011714
	pop {pc}
.func
.thumb_func
sub_80F08BA:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_80F08BA

	ldr r1, dword_80F0934 // =0x10010 
	and r0, r1
	cmp r0, r1
	pop {r0,r1}
	bne locret_80F0932
	ldrb r2, [r7,#2]
	mov r4, #0
	ldrb r3, [r7,#0xc]
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x10
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80C8DE0
	mov r4, #0
loc_80F08EE:
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	add r1, r4, #0
	sub r1, #1
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	push {r0,r1}
	bl object_getPanelParameters
	ldr r1, dword_80F0934 // =0x10010 
	and r0, r1
	cmp r0, r1
	pop {r0,r1}
	bne loc_80F092C
	push {r4}
	ldrb r2, [r7,#2]
	mov r4, #0
	ldrb r3, [r7,#0xc]
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x10
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80C8DE0
	pop {r4}
loc_80F092C:
	add r4, #1
	cmp r4, #3
	blt loc_80F08EE
locret_80F0932:
	pop {r4,r6,pc}
dword_80F0934: .word 0x10010
dword_80F0938: .word 0xFFFE8000
off_80F093C: .word unk_2010108
	.word 0x1, 0x40001F4, 0xA
.func
.thumb_func
sub_80F094C:
	push {r7,lr}
	ldr r1, off_80F095C // =off_80F0960 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F095C: .word off_80F0960
off_80F0960: .word sub_80F0968+1
	.word sub_80F0990+1
.endfunc // sub_80F094C

.func
.thumb_func
sub_80F0968:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0982
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	bl sub_80F0B32
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F098E
loc_80F0982:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F098E
	mov r0, #4
	strh r0, [r7]
locret_80F098E:
	pop {pc}
.endfunc // sub_80F0968

.func
.thumb_func
sub_80F0990:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F09A6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F09B6
loc_80F09A6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F09B6
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F09B6:
	pop {pc}
.endfunc // sub_80F0990

.func
.thumb_func
sub_80F09B8:
	push {r7,lr}
	ldr r1, off_80F09C8 // =off_80F09CC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F09C8: .word off_80F09CC
off_80F09CC: .word sub_80F09DC+1
	.word sub_80F0A7A+1
	.word sub_80F0AB6+1
	.word sub_80F0B0E+1
.endfunc // sub_80F09B8

.func
.thumb_func
sub_80F09DC:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0A3E
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#8]
	ldrh r1, [r7,#6]
	add r0, r0, r1
	strh r0, [r7,#8]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80F0C2C // =0x50000 
	mul r1, r0
	str r1, [r5,#0x40]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #8
	mov r4, #7
	orr r4, r0
	bl sub_80E3FB4
	str r0, [r7,#0x30]
	bl sub_80F0BD2
	tst r0, r0
	bne loc_80F0A70
	b locret_80F0A78
loc_80F0A3E:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r4, r0, #0
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	cmp r4, r1
	beq loc_80F0A66
	add r2, r4, #0
	bl sub_800E708
	tst r0, r0
	beq loc_80F0A66
	bl sub_80F0BD2
	tst r0, r0
	bne loc_80F0A70
loc_80F0A66:
	bl sub_800E2AC
	bl sub_801A04C
	b locret_80F0A78
loc_80F0A70:
	bl sub_800E2AC
	mov r0, #4
	strh r0, [r7]
locret_80F0A78:
	pop {r4,r6,pc}
.endfunc // sub_80F09DC

.func
.thumb_func
sub_80F0A7A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0AA8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	bl sub_80F0B80
	bl sub_80F0BA4
	mov r0, #0xb0
	bl sound_play // () -> void
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_80F0AB4
	mov r1, #0x10
	strb r1, [r0,#0x10]
	b locret_80F0AB4
loc_80F0AA8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0AB4
	mov r0, #8
	strh r0, [r7]
locret_80F0AB4:
	pop {pc}
.endfunc // sub_80F0A7A

.func
.thumb_func
sub_80F0AB6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0B00
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_80F0B0C
	bl sub_80E3FC4
	b locret_80F0B0C
loc_80F0B00:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0B0C
	mov r0, #0xc
	strh r0, [r7]
locret_80F0B0C:
	pop {pc}
.endfunc // sub_80F0AB6

.func
.thumb_func
sub_80F0B0E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0B24
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F0B30
loc_80F0B24:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0B30
	bl sub_8011714
locret_80F0B30:
	pop {pc}
.endfunc // sub_80F0B0E

.func
.thumb_func
sub_80F0B32:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	add r6, r7, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80F0B74 // =off_80F0B78 
	ldr r2, [r1,r0]
	mov r3, #0
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80F0B32

	add r4, r0, #0
	tst r4, r4
	beq loc_80F0B70
	add r7, r6, #0
	sub r4, #1
loc_80F0B52:
	add r0, sp, #0
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	push {r4}
	ldrb r2, [r7,#2]
	mov r4, #0
	ldr r6, [r7,#8]
	bl sub_80D0F0C
	pop {r4}
	sub r4, #1
	cmp r4, #0
	bge loc_80F0B52
loc_80F0B70:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
off_80F0B74: .word off_80F0B78
off_80F0B78: .word LCDControl
	.word start_
.func
.thumb_func
sub_80F0B80:
	push {r4,r6,r7,lr}
	bl sub_800E2C0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F0B9C // =0x7050304 
	ldr r6, [r7,#8]
	ldr r7, dword_80F0BA0 // =0x1001 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_80F0B9C: .word 0x7050304
dword_80F0BA0: .word 0x1001
.endfunc // sub_80F0B80

.func
.thumb_func
sub_80F0BA4:
	push {r4,lr}
	mov r4, #0x16
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	add r4, r4, r0
	mov r0, #3
	lsl r0, r0, #0x10
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,pc}
.endfunc // sub_80F0BA4

.func
.thumb_func
sub_80F0BD2:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r4, [r5,#0x12]
	add r4, r4, r0
	ldrb r6, [r5,#0x13]
	add r0, r4, #0
	add r1, r6, #0
	bl object_getPanelParameters
.endfunc // sub_80F0BD2

	ldr r1, dword_80F0C30 // =0x3800000 
	tst r0, r1
	bne loc_80F0C1C
	bl object_getFlipDirection_800E2CA // () -> int
	add r0, r0, r4
	add r1, r6, #0
	bl object_getPanelParameters
	ldr r1, dword_80F0C34 // =0x10000 
	tst r0, r1
	beq loc_80F0C1C
	add r0, r4, #0
	add r1, r6, #0
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #2
	ldr r3, off_80F0C20 // =off_80F0C24 
	ldr r2, [r3,r2]
	mov r3, #0
	mov r4, #4
	ldrb r6, [r5,#0x16]
	bl sub_8015E46
	tst r2, r2
	bne loc_80F0C1C
	mov r0, #0
	b locret_80F0C1E
loc_80F0C1C:
	mov r0, #1
locret_80F0C1E:
	pop {r4,r6,pc}
off_80F0C20: .word off_80F0C24
off_80F0C24: .word LCDControl
	.word start_
dword_80F0C2C: .word 0x50000
dword_80F0C30: .word 0x3800000
dword_80F0C34: .word 0x10000
off_80F0C38: .word unk_2010208
	.word 0x2, 0x40001F4, 0xA
.func
.thumb_func
sub_80F0C48:
	push {r7,lr}
	ldr r1, off_80F0C58 // =off_80F0C5C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F0C58: .word off_80F0C5C
off_80F0C5C: .word sub_80F0C64+1
	.word sub_80F0C8C+1
.endfunc // sub_80F0C48

.func
.thumb_func
sub_80F0C64:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0C7E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0xf
	strh r0, [r7,#0x10]
	bl sub_80F0E3A
	b locret_80F0C8A
loc_80F0C7E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0C8A
	mov r0, #4
	strh r0, [r7]
locret_80F0C8A:
	pop {pc}
.endfunc // sub_80F0C64

.func
.thumb_func
sub_80F0C8C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0C9E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F0CAE
loc_80F0C9E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0CAE
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F0CAE:
	pop {pc}
.endfunc // sub_80F0C8C

.func
.thumb_func
sub_80F0CB0:
	push {r7,lr}
	ldr r1, off_80F0CC0 // =off_80F0CC4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_80F0CC0: .word off_80F0CC4
off_80F0CC4: .word sub_80F0CD4+1
	.word sub_80F0D08+1
	.word sub_80F0D64+1
	.word sub_80F0DEC+1
.endfunc // sub_80F0CB0

.func
.thumb_func
sub_80F0CD4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0CFA
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#8]
	ldrh r1, [r7,#6]
	add r0, r0, r1
	strh r0, [r7,#8]
	mov r0, #0
	str r0, [r7,#0x30]
	ldr r0, dword_80F0FA0 // =0x40000 
	str r0, [r7,#0x34]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F0D06
loc_80F0CFA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0D06
	mov r0, #4
	strh r0, [r7]
locret_80F0D06:
	pop {pc}
.endfunc // sub_80F0CD4

.func
.thumb_func
sub_80F0D08:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0D4C
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_801A074 // () -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #7
	mov r1, #5
	ldrb r2, [r7,#2]
	ldr r4, dword_80F0D60 // =0x1ff03 
	ldr r6, [r7,#8]
	bl sub_80D19D4
	str r0, [r7,#0x30]
	mov r0, #0x65 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80F0D5C
loc_80F0D4C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0D5C
	bl sub_80F0E96
	mov r0, #8
	strh r0, [r7]
locret_80F0D5C:
	pop {r4,r6,pc}
	.byte 0, 0
dword_80F0D60: .word 0x1FF03
.endfunc // sub_80F0D08

.func
.thumb_func
sub_80F0D64:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldrb r6, [r7,#0xc]
	lsr r6, r6, #1
	bcc loc_80F0D78
	add r4, r0, #0
	b loc_80F0D7A
loc_80F0D78:
	add r4, r1, #0
loc_80F0D7A:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r2, [r5,#0x44]
	ldr r3, [r5,#0x38]
	add r2, r2, r3
	str r2, [r5,#0x38]
	push {r0-r3}
	add r1, r2, #0
	bl sub_800E258
	ldr r3, off_80F0DE0 // =dword_80F0DE4 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80F0DE8 - 0x80f0de4)
	bl object_checkPanelParameters
.endfunc // sub_80F0D64

	tst r0, r0
	pop {r0-r3}
	beq loc_80F0DDA
	ldrb r6, [r7,#0xc]
	lsr r6, r6, #1
	bcc loc_80F0DAE
	add r6, r1, #0
	add r3, r0, #0
	b loc_80F0DB2
loc_80F0DAE:
	add r6, r3, #0
	add r3, r2, #0
loc_80F0DB2:
	cmp r4, r6
	beq loc_80F0DD0
	add r0, r3, #0
	add r1, r6, #0
	add r2, r4, #0
	bl sub_800E708
	cmp r0, #0
	beq loc_80F0DD0
	bl sub_800E29C // () -> void
	bl sub_80F0EC0
	tst r0, r0
	bne loc_80F0DDA
loc_80F0DD0:
	bl sub_800E2AC
	bl sub_801A04C
	b locret_80F0DDE
loc_80F0DDA:
	mov r0, #0xc
	strh r0, [r7]
locret_80F0DDE:
	pop {r4,r6,r7,pc}
off_80F0DE0: .word dword_80F0DE4
dword_80F0DE4: .word 0x10010
dword_80F0DE8: .word 0x800000
.func
.thumb_func
sub_80F0DEC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0E2C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0x14
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_80F0E38
	bl sub_80D1A00
	b locret_80F0E38
loc_80F0E2C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0E38
	bl sub_8011714
locret_80F0E38:
	pop {pc}
.endfunc // sub_80F0DEC

.func
.thumb_func
sub_80F0E3A:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80F0E5C
	mov r2, #0
	mov r4, #0
	ldr r6, [r7,#8]
	bl sub_80D0996
loc_80F0E5C:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	sub r1, #1
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80F0E78
	mov r2, #0
	mov r4, #0
	ldr r6, [r7,#8]
	bl sub_80D0996
loc_80F0E78:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	add r1, #1
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq locret_80F0E94
	mov r2, #0
	mov r4, #0
	ldr r6, [r7,#8]
	bl sub_80D0996
locret_80F0E94:
	pop {r4,r6,pc}
.endfunc // sub_80F0E3A

.func
.thumb_func
sub_80F0E96:
	push {lr}
	ldrb r0, [r5,#0x13]
	cmp r0, #3
	bne loc_80F0EB2
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, [r7,#0x34]
	mul r1, r0
	str r1, [r5,#0x40]
	mov r0, #0
	str r0, [r5,#0x44]
	mov r0, #1
	strb r0, [r7,#0xc]
	b locret_80F0EBE
loc_80F0EB2:
	ldr r1, [r7,#0x34]
	str r1, [r5,#0x44]
	mov r0, #0
	str r0, [r5,#0x40]
	mov r0, #0
	strb r0, [r7,#0xc]
locret_80F0EBE:
	pop {pc}
.endfunc // sub_80F0E96

.func
.thumb_func
sub_80F0EC0:
	push {r4,r6,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #0x14
	mul r0, r1
	ldrb r1, [r7,#0xc]
	lsl r1, r1, #2
	add r0, r0, r1
	ldr r6, off_80F0F4C // =dword_80F0F50 
	add r6, r6, r0
	mov r0, #0
	ldrb r0, [r6,r0]
	mov r1, #1
	ldrb r1, [r6,r1]
	mov r2, #2
	ldrsb r4, [r6,r2]
	mov r3, #3
	ldrsb r6, [r6,r3]
	ldrb r2, [r7,#0xc]
	cmp r2, #1
	beq loc_80F0EF2
	cmp r2, #3
	beq loc_80F0F16
	cmp r2, #4
	beq loc_80F0F2A
	b loc_80F0EFE
loc_80F0EF2:
	push {r0,r1}
	bl sub_80F0F78
	tst r0, r0
	pop {r0,r1}
	bne loc_80F0F36
loc_80F0EFE:
	tst r0, r0
	beq loc_80F0F0A
	ldrb r2, [r5,#0x12]
	cmp r0, r2
	beq loc_80F0F36
	b loc_80F0F46
loc_80F0F0A:
	tst r1, r1
	beq loc_80F0F16
	ldrb r2, [r5,#0x13]
	cmp r1, r2
	beq loc_80F0F36
	b loc_80F0F46
loc_80F0F16:
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r0, r2
	bne loc_80F0F46
	cmp r1, r3
	bne loc_80F0F36
	mov r0, #1
	b locret_80F0F48
loc_80F0F2A:
	ldrb r1, [r5,#0x15]
	ldrb r3, [r5,#0x13]
	cmp r1, r3
	bne loc_80F0F46
	mov r0, #1
	b locret_80F0F48
loc_80F0F36:
	ldr r0, [r7,#0x34]
	mul r4, r0
	mul r6, r0
	str r4, [r5,#0x40]
	str r6, [r5,#0x44]
	ldr r0, [r7,#0xc]
	add r0, #1
	str r0, [r7,#0xc]
loc_80F0F46:
	mov r0, #0
locret_80F0F48:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F0F4C: .word dword_80F0F50
dword_80F0F50: .word 0x10300, 0xFF000006, 0xFF0100, 0x1000001, 0x0
	.word 0xFF0300, 0xFF000001, 0x10100, 0x1000006, 0x0
.endfunc // sub_80F0EC0

.func
.thumb_func
sub_80F0F78:
	push {r7,lr}
	sub sp, sp, #0x18
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80F0F94 // =off_80F0F98 
	ldr r2, [r2,r1]
	mov r3, #0
	add r7, sp, #0
	bl sub_800CFDC
.endfunc // sub_80F0F78

	add sp, sp, #0x18
	pop {r7,pc}
	.balign 4, 0x00
off_80F0F94: .word off_80F0F98
off_80F0F98: .word LCDControl
	.word start_
dword_80F0FA0: .word 0x40000
off_80F0FA4: .word unk_2010308
	.word 0x3, 0x1F4, 0xA
.func
.thumb_func
sub_80F0FB4:
	push {r7,lr}
	ldr r1, off_80F0FC4 // =off_80F0FC8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F0FC4: .word off_80F0FC8
off_80F0FC8: .word sub_80F0FD4+1
	.word sub_80F0FF8+1
	.word sub_80F1032+1
.endfunc // sub_80F0FB4

.func
.thumb_func
sub_80F0FD4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F0FEA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F0FF6
loc_80F0FEA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F0FF6
	mov r0, #4
	strh r0, [r7]
locret_80F0FF6:
	pop {pc}
.endfunc // sub_80F0FD4

.func
.thumb_func
sub_80F0FF8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1014
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	mov r0, #0xc7
	bl sound_play // () -> void
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80F1030
loc_80F1014:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #5
	beq loc_80F1028
	cmp r0, #0
	bgt locret_80F1030
	mov r0, #8
	strh r0, [r7]
	b locret_80F1030
loc_80F1028:
	bl sub_80F10F2
	bl sub_80F111C
locret_80F1030:
	pop {pc}
.endfunc // sub_80F0FF8

.func
.thumb_func
sub_80F1032:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1044
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F1054
loc_80F1044:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1054
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F1054:
	pop {pc}
.endfunc // sub_80F1032

loc_80F1056:
	push {r7,lr}
	ldr r1, off_80F1064 // =off_80F1068 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F1064: .word off_80F1068
off_80F1068: .word sub_80F1074+1
	.word sub_80F10A0+1
	.word sub_80F10CE+1
.func
.thumb_func
sub_80F1074:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1092
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#8]
	ldrh r1, [r7,#6]
	add r0, r0, r1
	strh r0, [r7,#8]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #9
	strh r0, [r7,#0x10]
	b locret_80F109E
loc_80F1092:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F109E
	mov r0, #4
	strh r0, [r7]
locret_80F109E:
	pop {pc}
.endfunc // sub_80F1074

.func
.thumb_func
sub_80F10A0:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F10C0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	bl sub_80F1148
	mov r0, #0xba
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	b locret_80F10CC
loc_80F10C0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F10CC
	mov r0, #8
	strh r0, [r7]
locret_80F10CC:
	pop {r4,pc}
.endfunc // sub_80F10A0

.func
.thumb_func
sub_80F10CE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F10E0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F10F0
loc_80F10E0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F10F0
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F10F0:
	pop {pc}
.endfunc // sub_80F10CE

.func
.thumb_func
sub_80F10F2:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F1114 // =0x705ff04 
	ldr r6, [r7,#8]
	ldr r7, dword_80F1118 // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80F1114: .word 0x705FF04
dword_80F1118: .word 0x3
.endfunc // sub_80F10F2

.func
.thumb_func
sub_80F111C:
	push {r4,lr}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x64 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x18
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,pc}
.endfunc // sub_80F111C

.func
.thumb_func
sub_80F1148:
	push {r4,r6,lr}
	mov r6, #1
loc_80F114C:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r6
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq locret_80F1184
	push {r6}
	ldrb r2, [r7,#2]
	mov r4, #1
	mov r3, #0x3c 
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #1
	lsl r3, r3, #0x10
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80DDA5A
	pop {r6}
	add r6, #1
	cmp r6, #5
	ble loc_80F114C
locret_80F1184:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F1188: .word byte_2010408
	.word 0x4, 0x1F4, 0xA
.endfunc // sub_80F1148

.func
.thumb_func
sub_80F1198:
	push {r7,lr}
	ldr r1, off_80F11A8 // =off_80F11AC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F11A8: .word off_80F11AC
off_80F11AC: .word sub_80F11BC+1
	.word sub_80F1284+1
	.word sub_80F12AC+1
	.word sub_80F1310+1
.endfunc // sub_80F1198

.func
.thumb_func
sub_80F11BC:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1216
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	ldr r0, dword_80F1524 // =0xffff 
	bl object_setInvulnerableTime
	mov r1, #1
	mov r2, #2
	mov r3, #0
	bl sub_801A082
	mov r0, #0
	ldr r1, [r5,#0x54]
	strh r0, [r1,#0x2e]
	strb r0, [r1,#7]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0
	strb r0, [r7,#0xc]
	mov r0, #0
	str r0, [r7,#0x30]
	str r0, [r7,#0x34]
	mov r0, #0xe4
	bl sound_play // () -> void
	ldr r0, dword_80F1528 // =0x60000 
	bl sub_80F146E
	b locret_80F1282
loc_80F1216:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r6, r0, #0
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	cmp r6, r1
	beq loc_80F1242
	add r2, r6, #0
	bl sub_800E708
	tst r0, r0
	beq loc_80F1242
	ldr r0, dword_80F1528 // =0x60000 
	bl sub_80F14BC
	tst r0, r0
	beq loc_80F1242
loc_80F1242:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80F125E
	bl object_isPanelSolid
	tst r0, r0
	beq loc_80F127E
loc_80F125E:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80F1270
	bl sub_80F149C
loc_80F1270:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1282
	mov r0, #8
	strh r0, [r7]
	b locret_80F1282
loc_80F127E:
	mov r0, #4
	strh r0, [r7]
locret_80F1282:
	pop {r4,r6,pc}
.endfunc // sub_80F11BC

.func
.thumb_func
sub_80F1284:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F129E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	bl sub_80F1500
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F12AA
loc_80F129E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F12AA
	mov r0, #8
	strh r0, [r7]
locret_80F12AA:
	pop {pc}
.endfunc // sub_80F1284

.func
.thumb_func
sub_80F12AC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1302
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	bl sub_800EB08
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F130E
loc_80F1302:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F130E
	mov r0, #0xc
	strh r0, [r7]
locret_80F130E:
	pop {pc}
.endfunc // sub_80F12AC

.func
.thumb_func
sub_80F1310:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1326
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F1332
loc_80F1326:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1332
	bl sub_8011714
locret_80F1332:
	pop {pc}
.endfunc // sub_80F1310

.func
.thumb_func
sub_80F1334:
	push {r7,lr}
	ldr r1, off_80F1344 // =off_80F1348 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F1344: .word off_80F1348
off_80F1348: .word sub_80F1350+1
	.word sub_80F1390+1
.endfunc // sub_80F1334

.func
.thumb_func
sub_80F1350:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F136E
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#8]
	ldrh r1, [r7,#6]
	add r0, r0, r1
	strh r0, [r7,#8]
	mov r0, #6
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F138E
loc_80F136E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xb
	beq loc_80F1382
	cmp r0, #0
	bgt locret_80F138E
	mov r0, #4
	strh r0, [r7]
	b locret_80F138E
loc_80F1382:
	bl sub_80F13B4
	mov r0, #0x47 
	add r0, #0xff
	bl sound_play // () -> void
locret_80F138E:
	pop {r4,pc}
.endfunc // sub_80F1350

.func
.thumb_func
sub_80F1390:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F13A2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F13B2
loc_80F13A2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F13B2
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F13B2:
	pop {pc}
.endfunc // sub_80F1390

.func
.thumb_func
sub_80F13B4:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	add r4, r7, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F1430 // =off_80F1434 
	add r1, r1, r0
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80F13B4

	add r6, r0, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F1444 // =dword_80F1448 
	add r1, r1, r0
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0
	add r7, r7, r6
	bl object_getPanelsExceptCurrentFilterred
	add r7, r0, #0
	tst r7, r7
	beq loc_80F13F4
	add r0, sp, #0
	add r0, r0, r6
	add r1, r7, #0
	add r2, r1, #0
	bl sub_8000C72
loc_80F13F4:
	add r6, r6, r7
	mov r3, #1
loc_80F13F8:
	ldrb r0, [r5,#0x16]
	ldr r1, off_80F1458 // =dword_80F145C 
	ldrb r0, [r1,r0]
	add r1, r3, #0
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0
	strb r0, [r1,r6]
	add r6, #1
	add r3, #1
	cmp r3, #3
	ble loc_80F13F8
	add r7, r4, #0
	mov r4, #0
loc_80F1414:
	add r0, sp, #0
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_80F1460
	add r4, #1
	cmp r4, r6
	bge loc_80F142C
	cmp r4, #5
	blt loc_80F1414
loc_80F142C:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
off_80F1430: .word off_80F1434
off_80F1434: .word BG2Rotation_ScalingParameterA_dx_
	.word 0x0
	.word start_
	.word 0x20
off_80F1444: .word dword_80F1448
dword_80F1448: .word 0x20, 0x4000000, 0x0
	.word 0x8000020
off_80F1458: .word dword_80F145C
dword_80F145C: .word 0x7
.func
.thumb_func
sub_80F1460:
	push {r4,r6,lr}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	bl sub_80D5EB0
	pop {r4,r6,pc}
.endfunc // sub_80F1460

.func
.thumb_func
sub_80F146E:
	push {r4,lr}
	add r4, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	str r0, [r5,#0x40]
	mov r0, #7
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80F1484
	mov r0, #0
loc_80F1484:
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	cmp r0, #0
	bge loc_80F148E
	neg r0, r0
loc_80F148E:
	mov r2, #0x28 
	lsl r2, r2, #0x10
	mul r0, r2
	add r1, r4, #0
	svc 6
	strh r0, [r7,#0x10]
	pop {r4,pc}
.endfunc // sub_80F146E

.func
.thumb_func
sub_80F149C:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F14B4 // =0x6050a01 
	ldr r6, [r7,#8]
	ldr r7, dword_80F14B8 // =0x1 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80F14B4: .word 0x6050A01
dword_80F14B8: .word 0x1
.endfunc // sub_80F149C

.func
.thumb_func
sub_80F14BC:
	push {r4,r6,r7,lr}
	add r6, r0, #0
	ldrb r4, [r7,#0xc]
	cmp r4, #2
	bge locret_80F14FE
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	mov r2, #0
	mov r4, #0
	ldrb r3, [r7,#0xc]
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0xff
	lsl r3, r3, #0x18
	orr r4, r3
	add r3, r6, #0
	ldr r6, [r7,#8]
	push {r7}
	add r7, r3, #0
	bl sub_80DB014
	pop {r7}
	mov r1, #0x30 
	ldrb r2, [r7,#0xc]
	lsl r2, r2, #2
	add r1, r1, r2
	str r0, [r7,r1]
	ldrb r0, [r7,#0xc]
	add r0, #1
	strb r0, [r7,#0xc]
locret_80F14FE:
	pop {r4,r6,r7,pc}
.endfunc // sub_80F14BC

.func
.thumb_func
sub_80F1500:
	push {r4,lr}
	mov r4, #0
loc_80F1504:
	ldrb r0, [r7,#0xc]
	lsl r0, r0, #2
	cmp r4, r0
	bge locret_80F1520
	mov r0, #0x30 
	add r0, r0, r4
	ldr r0, [r7,r0]
	tst r0, r0
	beq loc_80F151A
	bl sub_80DB03E
loc_80F151A:
	add r4, #4
	cmp r4, #4
	ble loc_80F1504
locret_80F1520:
	pop {r4,pc}
	.balign 4, 0x00
dword_80F1524: .word 0xFFFF
dword_80F1528: .word 0x60000
off_80F152C: .word unk_2010508
	.word 0x5, 0x1F4, 0xA
.endfunc // sub_80F1500

.func
.thumb_func
sub_80F153C:
	push {r7,lr}
	ldr r1, off_80F154C // =off_80F1550 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F154C: .word off_80F1550
off_80F1550: .word sub_80F1558+1
	.word sub_80F15AA+1
.endfunc // sub_80F153C

.func
.thumb_func
sub_80F1558:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F156E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #8
	strh r0, [r7,#0x10]
	b locret_80F15A8
loc_80F156E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F15A8
	mov r0, #0x14
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r4, #2
	ldr r6, [r7,#8]
	bl sub_80C86B0
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	mov r4, #0x2a 
	orr r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0
	bl sub_80E05F6
	mov r0, #0x2e 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #4
	strh r0, [r7]
locret_80F15A8:
	pop {r4,r6,pc}
.endfunc // sub_80F1558

.func
.thumb_func
sub_80F15AA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F15BC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F15CC
loc_80F15BC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F15CC
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F15CC:
	pop {pc}
.endfunc // sub_80F15AA

loc_80F15CE:
	push {r7,lr}
	ldr r1, off_80F15DC // =off_80F15E0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F15DC: .word off_80F15E0
off_80F15E0: .word sub_80F15FC+1
	.word sub_80F162C+1
	.word sub_80F1694+1
	.word sub_80F16B4+1
	.word sub_80F16E0+1
	.word sub_80F172C+1
	.word sub_80F1756+1
.func
.thumb_func
sub_80F15FC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1612
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0x23 
	strh r0, [r7,#0x10]
	b locret_80F162A
loc_80F1612:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x1e
	beq loc_80F1626
	cmp r0, #0
	bgt locret_80F162A
	mov r0, #4
	strh r0, [r7]
	b locret_80F162A
loc_80F1626:
	mov r0, #0x12
	strb r0, [r5,#0x10]
locret_80F162A:
	pop {pc}
.endfunc // sub_80F15FC

.func
.thumb_func
sub_80F162C:
	push {lr}
	bl object_canMove
	beq loc_80F167C
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, off_80F1688 // =dword_80F168C 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80F1690 - 0x80f168c)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F167C
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	bl sub_801A074 // () -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #2
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
	b locret_80F1684
loc_80F167C:
	mov r0, #2
	strh r0, [r7,#0x10]
	mov r0, #0xc
	strh r0, [r7]
locret_80F1684:
	pop {pc}
	.balign 4, 0x00
off_80F1688: .word dword_80F168C
dword_80F168C: .word 0x10
dword_80F1690: .word 0xF880080
.endfunc // sub_80F162C

.func
.thumb_func
sub_80F1694:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F16B2
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x10
	strh r0, [r7]
locret_80F16B2:
	pop {pc}
.endfunc // sub_80F1694

.func
.thumb_func
sub_80F16B4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F16D2
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F16DE
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #8
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80F16DE
loc_80F16D2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F16DE
	bl sub_8011714
locret_80F16DE:
	pop {pc}
.endfunc // sub_80F16B4

.func
.thumb_func
sub_80F16E0:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F171E
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#8]
	ldrh r1, [r7,#6]
	add r0, r0, r1
	strh r0, [r7,#8]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r4, #4
	mov r3, #2
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0xa
	lsl r3, r3, #0x10
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80C92CC
	mov r0, #0xa
	mov r1, #4
	mul r1, r0
	mov r2, #2
	mul r1, r2
	add r1, r1, r0
	strh r1, [r7,#0x10]
	b locret_80F172A
loc_80F171E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F172A
	mov r0, #0x14
	strh r0, [r7]
locret_80F172A:
	pop {r4,r6,pc}
.endfunc // sub_80F16E0

.func
.thumb_func
sub_80F172C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1748
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #6
	strh r0, [r7,#0x10]
	b locret_80F1754
loc_80F1748:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1754
	mov r0, #0x18
	strh r0, [r7]
locret_80F1754:
	pop {pc}
.endfunc // sub_80F172C

.func
.thumb_func
sub_80F1756:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F17A4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #8
	strh r0, [r7,#0x10]
	b locret_80F17B0
loc_80F17A4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F17B0
	bl sub_8011714
locret_80F17B0:
	pop {pc}
	.balign 4, 0x00
off_80F17B4: .word unk_2010608
	.word 0x6, 0x80001F4, 0xA
.endfunc // sub_80F1756

.func
.thumb_func
sub_80F17C4:
	push {r7,lr}
	ldr r1, off_80F17D4 // =off_80F17D8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F17D4: .word off_80F17D8
off_80F17D8: .word sub_80F17E4+1
	.word sub_80F1808+1
	.word sub_80F1888+1
.endfunc // sub_80F17C4

.func
.thumb_func
sub_80F17E4:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F17FA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_80F1806
loc_80F17FA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1806
	mov r0, #4
	strh r0, [r7]
locret_80F1806:
	pop {r4,r6,pc}
.endfunc // sub_80F17E4

.func
.thumb_func
sub_80F1808:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1826
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	mov r0, #0xb
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F187E
loc_80F1826:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x14
	beq loc_80F183A
	cmp r0, #0
	bgt locret_80F187E
	mov r0, #8
	strh r0, [r7]
	b locret_80F187E
loc_80F183A:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r3, [r7,#8]
	ldrh r6, [r7,#6]
	add r6, r6, r3
	mov r3, #0
	ldr r4, dword_80F1880 // =0x700ff11 
	push {r7}
	ldr r7, dword_80F1884 // =0x1 
	bl sub_80C536A
	pop {r7}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x33 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
locret_80F187E:
	pop {r4,r6,pc}
dword_80F1880: .word 0x700FF11
dword_80F1884: .word 0x1
.endfunc // sub_80F1808

.func
.thumb_func
sub_80F1888:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F189E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	b locret_80F18AA
loc_80F189E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F18AA
	bl sub_8011714
locret_80F18AA:
	pop {pc}
.endfunc // sub_80F1888

.func
.thumb_func
sub_80F18AC:
	push {r7,lr}
	ldr r1, off_80F18BC // =off_80F18C0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F18BC: .word off_80F18C0
off_80F18C0: .word sub_80F18CC+1
	.word sub_80F1902+1
	.word sub_80F194C+1
.endfunc // sub_80F18AC

.func
.thumb_func
sub_80F18CC:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F18F4
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#8]
	ldrh r1, [r7,#6]
	add r0, r0, r1
	strh r0, [r7,#8]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r4, #1
	mov r6, #0x30 
	add r6, r6, r7
	bl sub_80E40C2
	mov r0, #0x10
	strh r0, [r7,#0x10]
	b locret_80F1900
loc_80F18F4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1900
	mov r0, #4
	strh r0, [r7]
locret_80F1900:
	pop {r4,r6,pc}
.endfunc // sub_80F18CC

.func
.thumb_func
sub_80F1902:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1922
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	ldr r2, [r7,#0x30]
	tst r2, r2
	beq locret_80F194A
	mov r1, #1
	strb r1, [r2,#9]
	b locret_80F194A
loc_80F1922:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x14
	beq loc_80F1936
	cmp r0, #0
	bgt locret_80F194A
	mov r0, #8
	strh r0, [r7]
	b locret_80F194A
loc_80F1936:
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
	mov r0, #0xd
	add r0, #0xff
	bl sound_play // () -> void
	bl sub_80F197A
locret_80F194A:
	pop {pc}
.endfunc // sub_80F1902

.func
.thumb_func
sub_80F194C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F196C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	ldr r2, [r7,#0x30]
	tst r2, r2
	beq locret_80F1978
	mov r1, #2
	strb r1, [r2,#9]
	b locret_80F1978
loc_80F196C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1978
	bl sub_8011714
locret_80F1978:
	pop {pc}
.endfunc // sub_80F194C

.func
.thumb_func
sub_80F197A:
	push {r4,r6,lr}
	mov r4, #1
loc_80F197E:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq locret_80F19C0
	push {r4}
	ldrb r2, [r7,#2]
	sub r4, #1
	mov r3, #5
	mul r4, r3
	mov r3, #7
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #5
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0xff
	lsl r3, r3, #0x18
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80D1B22
	pop {r4}
	add r4, #1
	cmp r4, #6
	ble loc_80F197E
locret_80F19C0:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F19C4: .word unk_2010708
	.word 0x7, 0x10040C8, 0xA
.endfunc // sub_80F197A

.func
.thumb_func
sub_80F19D4:
	push {r7,lr}
	ldr r1, off_80F19E4 // =off_80F19E8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F19E4: .word off_80F19E8
off_80F19E8: .word sub_80F19F0+1
	.word sub_80F1A1E+1
.endfunc // sub_80F19D4

.func
.thumb_func
sub_80F19F0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1A10
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	bl sub_80F1ADE
	mov r0, #0xfb
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F1A1C
loc_80F1A10:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1A1C
	mov r0, #4
	strh r0, [r7]
locret_80F1A1C:
	pop {pc}
.endfunc // sub_80F19F0

.func
.thumb_func
sub_80F1A1E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1A34
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F1A44
loc_80F1A34:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1A44
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F1A44:
	pop {pc}
.endfunc // sub_80F1A1E

loc_80F1A46:
	push {r7,lr}
	ldr r1, off_80F1A54 // =off_80F1A58 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F1A54: .word off_80F1A58
off_80F1A58: .word sub_80F1A60+1
	.word sub_80F1AB6+1
.func
.thumb_func
sub_80F1A60:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1AA8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#8]
	ldrh r1, [r7,#6]
	add r0, r0, r1
	strh r0, [r7,#8]
	bl sub_80F1B24
	bl sub_80F1B78
	mov r0, #0xb8
	bl sound_play // () -> void
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	add r4, #0x41 
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x20 
	lsl r3, r3, #0x10
	bl sub_80E05F6
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F1AB4
loc_80F1AA8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1AB4
	mov r0, #4
	strh r0, [r7]
locret_80F1AB4:
	pop {r4,pc}
.endfunc // sub_80F1A60

.func
.thumb_func
sub_80F1AB6:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1ACC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F1ADC
loc_80F1ACC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1ADC
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F1ADC:
	pop {r4,r6,pc}
.endfunc // sub_80F1AB6

.func
.thumb_func
sub_80F1ADE:
	push {r4,lr}
	mov r4, #1
loc_80F1AE2:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	push {r4,r6,r7}
	ldr r6, [r7,#8]
	sub r4, #1
	lsl r4, r4, #2
	ldr r7, off_80F1B14 // =dword_80F1B18 
	ldr r7, [r7,r4]
	ldr r4, dword_80F1B10 // =0x400ff01 
	bl sub_80C536A
	pop {r4,r6,r7}
	add r4, #1
	cmp r4, #3
	ble loc_80F1AE2
	pop {r4,pc}
	.byte 0, 0
dword_80F1B10: .word 0x400FF01
off_80F1B14: .word dword_80F1B18
dword_80F1B18: .word 0x3, 0x3, 0x1000
.endfunc // sub_80F1ADE

.func
.thumb_func
sub_80F1B24:
	push {r4,r6,lr}
	mov r4, #1
	mov r6, #1
loc_80F1B2A:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	sub r1, r1, r4
	mul r0, r1
	cmp r0, #0
	bge loc_80F1B5C
	add r0, r4, #0
	add r1, r6, #0
	bl object_getPanelParameters
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #2
	ldr r3, off_80F1B6C // =dword_80F1B70 
	ldr r2, [r3,r2]
	tst r0, r2
	beq loc_80F1B5C
	push {r6}
	add r0, r4, #0
	add r1, r6, #0
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	bl sub_80D05C4
	pop {r6}
loc_80F1B5C:
	add r4, #1
	cmp r4, #6
	ble loc_80F1B2A
	mov r4, #1
	add r6, #1
	cmp r6, #3
	ble loc_80F1B2A
	pop {r4,r6,pc}
off_80F1B6C: .word dword_80F1B70
dword_80F1B70: .word 0x5800000, 0xA800000
.endfunc // sub_80F1B24

.func
.thumb_func
sub_80F1B78:
	push {r4,r6,r7,lr}
	mov r0, #0
	mov r1, #0
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80F1B90 // =0x102ff80 
	mov r6, #0
	ldr r7, dword_80F1B94 // =0x0 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80F1B90: .word 0x102FF80
dword_80F1B94: .word 0x0
off_80F1B98: .word unk_2010808
	.word 0x8, 0x60001F4, 0xA
.endfunc // sub_80F1B78

.func
.thumb_func
sub_80F1BA8:
	push {r7,lr}
	ldr r1, off_80F1BB8 // =off_80F1BBC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F1BB8: .word off_80F1BBC
off_80F1BBC: .word sub_80F1BC4+1
	.word sub_80F1BF4+1
.endfunc // sub_80F1BA8

.func
.thumb_func
sub_80F1BC4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1BE6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	bl sub_80F1E08
	mov r0, #0x4d 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x46 
	strh r0, [r7,#0x10]
	b locret_80F1BF2
loc_80F1BE6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1BF2
	mov r0, #4
	strh r0, [r7]
locret_80F1BF2:
	pop {pc}
.endfunc // sub_80F1BC4

.func
.thumb_func
sub_80F1BF4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1C0A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F1C1A
loc_80F1C0A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1C1A
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F1C1A:
	pop {pc}
.endfunc // sub_80F1BF4

.func
.thumb_func
sub_80F1C1C:
	push {r7,lr}
	ldr r1, off_80F1C2C // =off_80F1C30 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F1C2C: .word off_80F1C30
off_80F1C30: .word sub_80F1C48+1
	.word sub_80F1C78+1
	.word sub_80F1D30+1
	.word sub_80F1D6C+1
	.word sub_80F1D9A+1
	.word sub_80F1DE4+1
.endfunc // sub_80F1C1C

.func
.thumb_func
sub_80F1C48:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1C6A
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#8]
	ldrh r1, [r7,#6]
	add r0, r0, r1
	strh r0, [r7,#8]
	mov r0, #9
	strb r0, [r7,#0xc]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0xc
	strh r0, [r7,#0x10]
	b locret_80F1C76
loc_80F1C6A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1C76
	mov r0, #4
	strh r0, [r7]
locret_80F1C76:
	pop {pc}
.endfunc // sub_80F1C48

.func
.thumb_func
sub_80F1C78:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1CC6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	ldr r0, dword_80F1F00 // =0xffff 
	bl object_setInvulnerableTime
	ldr r0, dword_80F1F04 // =0x40000 
	bl sub_80F1E50
	mov r0, #0xc1
	add r0, #0xff
	bl sound_play // () -> void
	mov r4, #0
	mov r3, #0xa
	lsl r3, r3, #8
	orr r4, r3
	bl sub_80E7896
	str r0, [r7,#0x30]
	b locret_80F1D18
loc_80F1CC6:
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	cmp r0, r4
	beq loc_80F1CE4
	push {r0,r1}
	bl sub_80F1E7E
	pop {r0,r1}
loc_80F1CE4:
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80F1D1C // =dword_80F1D20 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl object_checkPanelParameters
.endfunc // sub_80F1C78

	tst r0, r0
	beq loc_80F1D14
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1D18
	mov r0, #0xe5
	bl sound_play // () -> void
	mov r0, #8
	strh r0, [r7]
	b locret_80F1D18
loc_80F1D14:
	mov r0, #0xc
	strh r0, [r7]
locret_80F1D18:
	pop {r4,pc}
	.balign 4, 0x00
off_80F1D1C: .word dword_80F1D20
dword_80F1D20: .word 0x10, 0x7800000, 0x10, 0xB800000
.func
.thumb_func
sub_80F1D30:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1D4E
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_80F1E98
	mov r0, #1
	mov r1, #0x14
	bl sub_80302A8
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F1D6A
loc_80F1D4E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1D6A
	ldrb r0, [r7,#0xc]
	sub r0, #1
	strb r0, [r7,#0xc]
	cmp r0, #0
	ble loc_80F1D66
	mov r0, #0
	strb r0, [r7,#1]
	b locret_80F1D6A
loc_80F1D66:
	mov r0, #0xc
	strh r0, [r7]
locret_80F1D6A:
	pop {pc}
.endfunc // sub_80F1D30

.func
.thumb_func
sub_80F1D6C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1D8C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_80F1D98
	bl sub_80E78AE
	b locret_80F1D98
loc_80F1D8C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1D98
	mov r0, #0x10
	strh r0, [r7]
locret_80F1D98:
	pop {pc}
.endfunc // sub_80F1D6C

.func
.thumb_func
sub_80F1D9A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1DD6
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	bl sub_800EB08
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #9
	strh r0, [r7,#0x10]
	b locret_80F1DE2
loc_80F1DD6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1DE2
	mov r0, #0x14
	strh r0, [r7]
locret_80F1DE2:
	pop {pc}
.endfunc // sub_80F1D9A

.func
.thumb_func
sub_80F1DE4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1DFA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F1E06
loc_80F1DFA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1E06
	bl sub_8011714
locret_80F1E06:
	pop {pc}
.endfunc // sub_80F1DE4

.func
.thumb_func
sub_80F1E08:
	push {r4,r6,lr}
	mov r4, #0
	sub r4, #1
loc_80F1E0E:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	add r1, r1, r4
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80F1E3A
	push {r4}
	ldrb r2, [r7,#2]
	add r3, r4, #1
	lsl r3, r3, #1
	ldr r6, off_80F1E44 // =dword_80F1E48 
	ldrh r4, [r6,r3]
	ldr r6, [r7,#8]
	bl sub_80DDFB6
	pop {r4}
loc_80F1E3A:
	add r4, #1
	cmp r4, #1
	ble loc_80F1E0E
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F1E44: .word dword_80F1E48
dword_80F1E48: .word 0xC01, 0x1801
.endfunc // sub_80F1E08

.func
.thumb_func
sub_80F1E50:
	push {r4,lr}
	add r4, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	str r0, [r5,#0x40]
	mov r0, #6
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80F1E66
	mov r0, #1
loc_80F1E66:
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	cmp r0, #0
	bge loc_80F1E70
	neg r0, r0
loc_80F1E70:
	mov r2, #0x28 
	lsl r2, r2, #0x10
	mul r0, r2
	add r1, r4, #0
	svc 6
	strh r0, [r7,#0x10]
	pop {r4,pc}
.endfunc // sub_80F1E50

.func
.thumb_func
sub_80F1E7E:
	push {r4,r6,r7,lr}
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F1E90 // =0x6050a01 
	ldr r6, [r7,#8]
	ldr r7, dword_80F1E94 // =0x63 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_80F1E90: .word 0x6050A01
dword_80F1E94: .word 0x63
.endfunc // sub_80F1E7E

.func
.thumb_func
sub_80F1E98:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F1EEC // =off_80F1EF0 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	add r6, r7, #0
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80F1E98

	add r7, r6, #0
	add r6, r0, #0
	tst r6, r6
	beq loc_80F1EE6
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	ldrb r2, [r7,#2]
	mov r4, #0xa
	mov r3, #0
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x18
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80D54F0
loc_80F1EE6:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80F1EEC: .word off_80F1EF0
off_80F1EF0: .word BG2Rotation_ScalingParameterA_dx_
	.byte 0, 0, 0, 0
	.word start_
	.word 0x20
dword_80F1F00: .word 0xFFFF
dword_80F1F04: .word 0x40000
off_80F1F08: .word unk_2010908
	.word 0x9, 0x100012C, 0xA
.func
.thumb_func
sub_80F1F18:
	push {r7,lr}
	ldr r1, off_80F1F28 // =off_80F1F2C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F1F28: .word off_80F1F2C
off_80F1F2C: .word sub_80F1F34+1
	.word sub_80F1F7C+1
.endfunc // sub_80F1F18

.func
.thumb_func
sub_80F1F34:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1F6E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x17
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r4, #0
	ldr r6, [r7,#8]
	bl sub_80DB800
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x51 
	add r4, r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	mov r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x23 
	strh r0, [r7,#0x10]
	b locret_80F1F7A
loc_80F1F6E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1F7A
	mov r0, #4
	strh r0, [r7]
locret_80F1F7A:
	pop {r4,r6,pc}
.endfunc // sub_80F1F34

.func
.thumb_func
sub_80F1F7C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1F92
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F1F9E
loc_80F1F92:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F1F9E
	bl sub_8011714
locret_80F1F9E:
	pop {pc}
.endfunc // sub_80F1F7C

.func
.thumb_func
sub_80F1FA0:
	push {r7,lr}
	ldr r1, off_80F1FB0 // =off_80F1FB4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_80F1FB0: .word off_80F1FB4
off_80F1FB4: .word sub_80F1FC0+1
	.word sub_80F2004+1
	.word sub_80F204E+1
.endfunc // sub_80F1FA0

.func
.thumb_func
sub_80F1FC0:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F1FF2
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#8]
	ldrh r1, [r7,#6]
	add r0, r0, r1
	strh r0, [r7,#8]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	mov r4, #0
	mov r3, #0xa
	lsl r3, r3, #8
	orr r4, r3
	bl sub_80E887C
	str r0, [r7,#0x30]
	mov r0, #0xad
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b loc_80F1FFE
loc_80F1FF2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_80F1FFE
	mov r0, #4
	strh r0, [r7]
loc_80F1FFE:
	bl sub_80F20A0
.endfunc // sub_80F1FC0

	pop {r4,pc}
.func
.thumb_func
sub_80F2004:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F202C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	mov r4, #0xa
	bl sub_80E8770
	str r0, [r7,#0x34]
	mov r0, #0x28 
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_80F204C
	bl sub_80E8894
	b locret_80F204C
loc_80F202C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x1e
	beq loc_80F2040
	cmp r0, #0
	bgt locret_80F204C
	mov r0, #8
	strh r0, [r7]
	b locret_80F204C
loc_80F2040:
	bl sub_80F207C
	mov r0, #0x7c 
	add r0, #0xff
	bl sound_play // () -> void
locret_80F204C:
	pop {r4,pc}
.endfunc // sub_80F2004

.func
.thumb_func
sub_80F204E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F2060
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F207A
loc_80F2060:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F207A
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
	ldr r0, [r7,#0x34]
	tst r0, r0
	beq locret_80F207A
	bl sub_80E8788
locret_80F207A:
	pop {pc}
.endfunc // sub_80F204E

.func
.thumb_func
sub_80F207C:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F2098 // =0x6050a01 
	ldr r6, [r7,#8]
	ldr r7, dword_80F209C // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_80F2098: .word 0x6050A01
dword_80F209C: .word 0x3
.endfunc // sub_80F207C

.func
.thumb_func
sub_80F20A0:
	push {r4,r6,r7,lr}
	mov r4, #1
loc_80F20A4:
	add r0, r4, #0
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80F20DC // =dword_80F20E0 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F20A0

	tst r0, r0
	pop {r0,r1}
	beq loc_80F20D2
	push {r4}
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80F20F0 // =0x1e05ff01 
	mov r6, #0
	ldr r7, dword_80F20F4 // =0x10 
	bl sub_80C536A
	pop {r4}
loc_80F20D2:
	add r4, #1
	cmp r4, #6
	ble loc_80F20A4
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80F20DC: .word dword_80F20E0
dword_80F20E0: .word 0x20, 0x0, 0x0
	.word 0x20
dword_80F20F0: .word 0x1E05FF01
dword_80F20F4: .word 0x10
.func
.thumb_func
sub_80F20F8:
	push {r7,lr}
	ldr r1, off_80F2108 // =off_80F210C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F2108: .word off_80F210C
off_80F210C: .word sub_80F2124+1
	.word sub_80F2142+1
	.word sub_80F2180+1
	.word sub_80F21FC+1
	.word sub_80F222C+1
	.word sub_80F2268+1
.endfunc // sub_80F20F8

.func
.thumb_func
sub_80F2124:
	push {r4,r6,lr}
	mov r0, #0xad
	bl sound_play // () -> void
	mov r0, #0x1c
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x70]
	bl sub_80DFE1C
	mov r0, #1
	mov r1, #0x76 
	strh r0, [r5,r1]
	mov r0, #4
	strh r0, [r7]
	pop {r4,r6,pc}
.endfunc // sub_80F2124

.func
.thumb_func
sub_80F2142:
	push {r4,r6,lr}
	mov r0, #0x74 
	ldrb r0, [r5,r0]
	tst r0, r0
	beq loc_80F2168
	sub r0, #1
	mov r1, #0x75 
	strb r0, [r5,r1]
	mov r0, #0x1d
	strb r0, [r5,#0x10]
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	mov r4, #0x5e 
	bl sub_80E05F6
	mov r0, #8
	strh r0, [r7]
	b locret_80F217E
loc_80F2168:
	ldr r0, [r5,#0x70]
	bl sub_80DFE1C
	mov r0, r10
	ldr r0, [r0,#4]
	ldrh r0, [r0]
	mov r1, #1
	and r0, r1
	bne locret_80F217E
	mov r0, #0x10
	strh r0, [r7]
locret_80F217E:
	pop {r4,r6,pc}
.endfunc // sub_80F2142

.func
.thumb_func
sub_80F2180:
	push {r4,r6,lr}
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80F21EA
	mov r0, #0x75 
	ldrb r0, [r5,r0]
	cmp r0, #0
	beq loc_80F21DE
	cmp r0, #1
	beq loc_80F21A6
	cmp r0, #2
	beq loc_80F21DE
	cmp r0, #3
	beq loc_80F21B0
	cmp r0, #4
	beq loc_80F21B0
	b loc_80F21E6
loc_80F21A6:
	mov r0, #0x1e
	mov r1, #0
	bl sub_800E2FC
	b loc_80F21E6
loc_80F21B0:
	lsl r0, r0, #1
	ldr r1, off_80F21EC // =dword_80F21F0 
	ldrh r1, [r1,r0]
	ldrh r0, [r5,#0x24]
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80F21C0
	mov r0, #0
loc_80F21C0:
	strh r0, [r5,#0x24]
	mov r0, #0x1f
	strb r0, [r5,#0x10]
	bl sub_80F22DA
	mov r0, #0x6b 
	bl sound_play // () -> void
	bl sub_801A074 // () -> void
	mov r0, #0xff
	strh r0, [r7,#0x10]
	mov r0, #0xc
	strh r0, [r7]
	b locret_80F21EA
loc_80F21DE:
	mov r0, #0xa5
	add r0, #0xff
	bl sound_play // () -> void
loc_80F21E6:
	mov r0, #0x14
	strh r0, [r7]
locret_80F21EA:
	pop {r4,r6,pc}
off_80F21EC: .word dword_80F21F0
dword_80F21F0: .word 0x0
	.word 0x320000, 0x46
.endfunc // sub_80F2180

.func
.thumb_func
sub_80F21FC:
	push {r4,r6,lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	mov r1, #2
	tst r0, r1
	beq loc_80F2212
	ldrb r0, [r5]
	mov r1, #2
	bic r0, r1
	strb r0, [r5]
loc_80F2212:
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80F222A
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #0x14
	strh r0, [r7]
locret_80F222A:
	pop {r4,r6,pc}
.endfunc // sub_80F21FC

.func
.thumb_func
sub_80F222C:
	push {r4,r6,lr}
	mov r0, #0x74 
	ldrb r0, [r5,r0]
	tst r0, r0
	beq loc_80F2252
	sub r0, #1
	mov r1, #0x75 
	strb r0, [r5,r1]
	mov r0, #0x1d
	strb r0, [r5,#0x10]
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	mov r4, #0x5e 
	bl sub_80E05F6
	mov r0, #8
	strh r0, [r7]
	b locret_80F2266
loc_80F2252:
	mov r0, #0x76 
	ldrh r1, [r5,r0]
	sub r1, #1
	strh r1, [r5,r0]
	cmp r1, #0
	bge locret_80F2266
	mov r1, #0
	strh r1, [r5,r0]
	mov r0, #0x14
	strh r0, [r7]
locret_80F2266:
	pop {r4,r6,pc}
.endfunc // sub_80F222C

.func
.thumb_func
sub_80F2268:
	push {lr}
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
	pop {pc}
.endfunc // sub_80F2268

.func
.thumb_func
sub_80F2274:
	push {r7,lr}
	ldr r1, off_80F2284 // =off_80F2288 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F2284: .word off_80F2288
off_80F2288: .word sub_80F2290+1
	.word sub_80F22C2+1
.endfunc // sub_80F2274

.func
.thumb_func
sub_80F2290:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F22A8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x20 
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x78]
	bl sub_80C02CA
	b locret_80F22C0
loc_80F22A8:
	ldr r0, [r5,#0x70]
	bl sub_80DFE28
	bl sub_8002DEA
	mov r1, #0x80
	tst r0, r1
	beq locret_80F22C0
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_80F22C0:
	pop {r4,r6,pc}
.endfunc // sub_80F2290

.func
.thumb_func
sub_80F22C2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F22D4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	b locret_80F22D8
loc_80F22D4:
	bl sub_8011714
locret_80F22D8:
	pop {pc}
.endfunc // sub_80F22C2

.func
.thumb_func
sub_80F22DA:
	push {lr}
	ldrh r0, [r5,#0x28]
	mov r1, #5
	ldrb r2, [r5,#0x16]
	ldrb r3, [r5,#0x17]
	bl sub_8018810
	lsl r3, r1, #0x10
	lsl r1, r0, #0x10
	mov r2, #0
	mov r4, #0
	bl sub_80E8124
	pop {pc}
	.balign 4, 0x00
.endfunc // sub_80F22DA

	push {r4-r7,lr}
	bl sub_802D234
	cmp r0, #9
	bne locret_80F230E
	bl sub_80DFD74
	str r0, [r5,#0x70]
	bl sub_80C02A6
	str r0, [r5,#0x78]
locret_80F230E:
	pop {r4-r7,pc}
off_80F2310: .word unk_2010A08
	.word 0xA, 0x10001F4, 0xA
off_80F2320: .word unk_2010B08
	.word 0xB, 0x1F4, 0xA
.func
.thumb_func
sub_80F2330:
	push {lr}
	ldr r1, off_80F2344 // =off_80F2348 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_801BBAC
	pop {pc}
	.balign 4, 0x00
off_80F2344: .word off_80F2348
off_80F2348: .word sub_8016F56+1
	.word sub_80F2354+1
	.word sub_8016C4E+1
.endfunc // sub_80F2330

.func
.thumb_func
sub_80F2354:
	push {r4,lr}
	ldr r0, [r5,#0x58]
	ldrb r0, [r0,#1]
	lsl r4, r0, #2
	ldr r0, off_80F239C // =off_80F2410 
	ldr r0, [r0,r4]
	mov lr, pc
	bx r0
	ldr r0, off_80F23A4 // =off_80F2474 
	.byte  0
	.byte 0x59 
	.byte 0xFE
	.byte 0x46 
	.byte  0
	.byte 0x47 
	.word 0xFF62F73A, 0xD101280A, 0xFB41F71C, 0x59084909, 0xFDE2F728
	.word 0x59004809, 0x470046FE, 0x7E486DA9, 0xD0014200, 0x76483801
	.word 0xFE40F727, 0xBD10
off_80F239C: .word off_80F2410
	.word off_80F23AC
off_80F23A4: .word off_80F2474
	.word off_80F25A0
off_80F23AC: .word off_80F29B0
	.word off_80F2B14
	.word off_80F39CC
	.word off_80F4894
	.word off_80F58F8
	.word off_80F6454
	.word off_80F763C
	.word off_80F83F4
	.word off_80F8FAC
	.word off_80F9D40
	.word off_80FAD9C
	.word off_80FB9A0
	.word off_80FD104
	.word off_80FDDB0
	.word off_80FE890
	.word dword_80FF7C4+0xEC
	.word byte_81001AC+0xFC
	.word off_80F29B0
	.word dword_810123C+0xEC
	.word byte_8101940
	.word dword_8103B88+0xEC
	.word dword_8105390+0xEC
	.word off_80F29B0
	.word dword_81067FC+0xEC
	.word dword_8107B24+0xEC
off_80F2410: .word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801AA48+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801AAC0+1
	.word sub_801AAC0+1
	.word sub_801AAC0+1
	.word sub_801AAC0+1
	.word sub_801AAC0+1
	.word sub_801AAC0+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801AB40+1
	.word sub_801AB40+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
	.word sub_801A9B8+1
off_80F2474: .word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_80F651C+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_80FAE5C+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_81003A8+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
off_80F24D8: .word dword_80F28C4
	.word dword_80F2A28
	.word dword_80F38E0
	.word dword_80F47A8
	.word dword_80F580C
	.word dword_80F6368
	.word dword_80F7550
	.word dword_80F8308
	.word dword_80F8EC0
	.word dword_80F9C54
	.word dword_80FACB0
	.word dword_80FB86C+0x48
	.word dword_80FD018
	.word dword_80FDCC4
	.word dword_80FE794+0x10
	.word dword_80FF7C4
	.word byte_81001AC+0x10
	.word dword_80F28C4
	.word dword_810123C
	.word byte_8101854
	.word dword_8103B88
	.word dword_8105390
	.word dword_80F28C4
	.word dword_81067FC
	.word dword_8107B24
off_80F253C: .word dword_80F28C4+8
	.word dword_80F2A28+8
	.word dword_80F38E0+8
	.word dword_80F47A8+8
	.word dword_80F580C+8
	.word dword_80F6368+8
	.word dword_80F7550+8
	.word dword_80F8308+8
	.word dword_80F8EC0+8
	.word dword_80F9C54+8
	.word dword_80FACB0+8
	.word dword_80FB86C+0x50
	.word dword_80FD018+8
	.word dword_80FDCC4+8
	.word dword_80FE794+0x18
	.word dword_80FF7C4+8
	.word byte_81001AC+0x18
	.word dword_80F28C4+8
	.word dword_810123C+8
	.word byte_810185C
	.word dword_8103B88+8
	.word dword_8105390+8
	.word dword_80F28C4+8
	.word dword_81067FC+8
	.word dword_8107B24+8
off_80F25A0: .word sub_80F2A1E+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_80F650A+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_80FDEFC+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
off_80F2604: .word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
off_80F2668: .word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_80F3B24+1
	.word locret_80F28C0+1
	.word sub_80F59FE+1
	.word sub_80F64F4+1
	.word locret_80F28C0+1
	.word sub_80F8540+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_80FAE54+1
	.word locret_80F28C0+1
	.word sub_80FD240+1
	.word sub_80FDEC4+1
	.word locret_80F28C0+1
	.word sub_80FFA1A+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_8103D4C+1
	.word sub_8105554+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
off_80F26CC: .word locret_80F28C0+1
	.word sub_80F2C90+1
	.word locret_80F28C0+1
	.word sub_80F4964+1
	.word sub_80F5A1A+1
	.word sub_80F6560+1
	.word sub_80F76F4+1
	.word locret_80F28C0+1
	.word sub_80F9088+1
	.word sub_80F9DF2+1
	.word sub_80FAE60+1
	.word sub_80FBCA2+1
	.word locret_80F28C0+1
	.word sub_80FDF38+1
	.word sub_80FE958+1
	.word sub_80FFA22+1
	.word sub_81003AC+1
	.word locret_80F28C0+1
	.word sub_810146A+1
	.word sub_810214A+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_8106A22+1
	.word sub_8107E72+1
off_80F2730: .word locret_80F28C0+1
	.word sub_80F2C90+1
	.word locret_80F28C0+1
	.word sub_80F4964+1
	.word sub_80F5A1A+1
	.word sub_80F6560+1
	.word sub_80F76F4+1
	.word locret_80F28C0+1
	.word sub_80F9088+1
	.word sub_80F9DF2+1
	.word sub_80FAE60+1
	.word sub_80FBCA2+1
	.word locret_80F28C0+1
	.word sub_80FDF38+1
	.word sub_80FE958+1
	.word sub_80FFA22+1
	.word sub_81003AC+1
	.word locret_80F28C0+1
	.word sub_810146A+1
	.word sub_810214A+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_8106A22+1
	.word sub_8107E72+1
off_80F2794: .word locret_80F28C0+1
	.word sub_80F2C90+1
	.word locret_80F28C0+1
	.word sub_80F4964+1
	.word sub_80F5A1A+1
	.word sub_80F6560+1
	.word sub_80F76F4+1
	.word locret_80F28C0+1
	.word sub_80F9088+1
	.word sub_80F9DF2+1
	.word sub_80FAE60+1
	.word sub_80FBCA2+1
	.word locret_80F28C0+1
	.word sub_80FDF38+1
	.word sub_80FE958+1
	.word sub_80FFA22+1
	.word sub_81003AC+1
	.word locret_80F28C0+1
	.word sub_810146A+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_8106A22+1
	.word sub_8107E72+1
off_80F27F8: .word sub_80F06CE+1
	.word sub_80F2C82+1
	.word locret_80F28C0+1
	.word sub_80F4964+1
	.word sub_80F5A1A+1
	.word sub_80F6560+1
	.word sub_80F76F4+1
	.word locret_80F28C0+1
	.word sub_80F9088+1
	.word sub_80F9DE4+1
	.word sub_80FAE60+1
	.word sub_80FBCA2+1
	.word locret_80F28C0+1
	.word sub_80FDF38+1
	.word sub_80FE950+1
	.word sub_80FFA22+1
	.word sub_81003AC+1
	.word locret_80F28C0+1
	.word sub_8101472+1
	.word sub_8102154+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word locret_80F28C0+1
	.word sub_8106A22+1
	.byte 0x67 
	.byte 0x7E 
	.byte 0x10
	.byte  8
byte_80F285C: .byte 0xCF, 0x6, 0xF, 0x8, 0x91, 0x2C, 0xF, 0x8, 0xC1, 0x28, 0xF
	.byte 0x8, 0x65, 0x49, 0xF, 0x8, 0x1B, 0x5A, 0xF, 0x8, 0x61, 0x65
	.byte 0xF, 0x8, 0xF5, 0x76, 0xF, 0x8, 0xC1, 0x28, 0xF, 0x8, 0x89
	.byte 0x90, 0xF, 0x8, 0xF3, 0x9D, 0xF, 0x8, 0x61, 0xAE, 0xF, 0x8
	.byte 0xA3, 0xBC, 0xF, 0x8, 0xC1, 0x28, 0xF, 0x8, 0x39, 0xDF, 0xF
	.byte 0x8, 0x59, 0xE9, 0xF, 0x8, 0x23, 0xFA, 0xF, 0x8, 0xAD, 0x3
	.byte 0x10, 0x8, 0xC1, 0x28, 0xF, 0x8, 0x6B, 0x14, 0x10, 0x8, 0x4B
	.byte 0x21, 0x10, 0x8, 0xC1, 0x28, 0xF, 0x8, 0xC1, 0x28, 0xF, 0x8
	.byte 0xC1, 0x28, 0xF, 0x8, 0x23, 0x6A, 0x10, 0x8, 0x73, 0x7E, 0x10
	.byte 0x8
.endfunc // sub_80F2354

locret_80F28C0:
	mov pc, lr
	.balign 4, 0x00
dword_80F28C4: .word 0x1010000, 0x1000000, 0x8000FA0, 0x3E8000A, 0x280801
	.word 0x80205DC, 0x7D00050, 0x780803, 0x80409C4, 0xBB800A0
	.word 0xC80805
dword_80F28F0: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0x34B134B1, 0xFFFF34B1, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x349F349F
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0x349F349F, 0x34B134B1, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0x34B134B1, 0xFFFFFFFF, 0x34A934A9, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80F29B0: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80F29D8+1
	.word sub_81097BA+1
loc_80F29D8:
	push {r4,r6,lr}
	ldr r1, off_80F29F8 // =off_80F29FC 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_800FFFE
	ldr r1, dword_80F2A24 // =0x600 
	tst r0, r1
	beq locret_80F29F6
	mov r1, #0
	mov r2, #0
	bl sub_801056A
locret_80F29F6:
	pop {r4,r6,pc}
off_80F29F8: .word off_80F29FC
off_80F29FC: .word sub_80F2A04+1
	.word sub_80F2A16+1
.func
.thumb_func
sub_80F2A04:
	push {lr}
	mov r0, #0xff
	strh r0, [r7,#0x10]
	mov r0, #9
	bl sub_8011680
	mov r0, #4
	strb r0, [r6]
	pop {pc}
.endfunc // sub_80F2A04

.func
.thumb_func
sub_80F2A16:
	push {lr}
	mov r0, #0
	strb r0, [r6]
	pop {pc}
.endfunc // sub_80F2A16

.func
.thumb_func
sub_80F2A1E:
	push {lr}
	pop {pc}
	.balign 4, 0x00
dword_80F2A24: .word 0x600
dword_80F2A28: .word 0x1010108, 0x1000001, 0x40012BC, 0x15DC000A, 0xA0401
	.word 0x402176C, 0x176C000A, 0xA0403, 0x404176C, 0x176C000A
	.word 0xA0405
dword_80F2A54: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80F2B14: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80F2B48+1
	.word loc_80F2ED4+1
	.word loc_80F2FBA+1
	.word loc_80F3124+1
	.word loc_80F3428+1
.endfunc // sub_80F2A1E

loc_80F2B48:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80F2B60 // =off_80F2B64 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.byte 0, 0
off_80F2B60: .word off_80F2B64
off_80F2B64: .word sub_80F2B6C+1
	.word sub_80F2BEE+1
.func
.thumb_func
sub_80F2B6C:
	push {r4,r6,lr}
	ldrb r0, [r6,#4]
	cmp r0, #3
	blt loc_80F2BBE
	ldrb r0, [r6,#5]
	strb r0, [r7,#0xc]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80F2DDC
	bl sub_80F2CE4
	strh r0, [r7,#0x18]
	ldr r0, off_80F2EC4 // =sub_80F3704+1 
	str r0, [r7,#0x28]
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0xa
	bl sub_8011680
	bl sub_800FE36
	cmp r0, #0
	beq loc_80F2BB8
	ldrb r0, [r6,#5]
	mov r1, #1
	eor r0, r1
	strb r0, [r6,#5]
	tst r0, r0
	bne loc_80F2BB8
	mov r0, #0
	strb r0, [r6,#4]
	b locret_80F2BEC
loc_80F2BB8:
	mov r1, #4
	strb r1, [r6]
	b locret_80F2BEC
loc_80F2BBE:
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xc
	bge loc_80F2BD0
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
loc_80F2BD0:
	ldr r0, off_80F2EC8 // =sub_80F36A2+1 
	str r0, [r7,#0x28]
	bl sub_80F2CC2
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
locret_80F2BEC:
	pop {r4,r6,pc}
.endfunc // sub_80F2B6C

.func
.thumb_func
sub_80F2BEE:
	push {r4,r6,lr}
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #6
	bge loc_80F2C32
	bl sub_800FE36
	strb r0, [r7,#3]
	bl sub_80F2D64
	strb r0, [r7,#0xc]
	bl sub_80F2D50
	strb r0, [r7,#0xd]
	mov r0, #1
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_80F2DDC
	bl sub_80F2D08
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	b loc_80F2C70
loc_80F2C32:
	bl sub_800FE36
	strb r0, [r7,#3]
	bl sub_80F2D88
	strb r0, [r7,#0xc]
	bl sub_80F2DAC
	strb r0, [r7,#0xd]
	mov r0, #1
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80F2DDC
	bl sub_80F2D2C
	strh r0, [r7,#0x18]
	ldr r0, off_80F2ECC // =sub_80F3784+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0x6c 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0xc
	bl sub_8011680
loc_80F2C70:
	mov r0, #0
	strb r0, [r6,#4]
	mov r1, #0
	strb r1, [r6]
	pop {r4,r6,pc}
.endfunc // sub_80F2BEE

	push {lr}
	pop {pc}
	push {lr}
	pop {pc}
.func
.thumb_func
sub_80F2C82:
	push {lr}
	ldr r0, [r5,#0x50]
	tst r0, r0
	beq loc_80F2C92
	bl sub_80C44D2
	b loc_80F2C92
.endfunc // sub_80F2C82

.func
.thumb_func
sub_80F2C90:
	push {lr}
loc_80F2C92:
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #0x10
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.endfunc // sub_80F2C90

.func
.thumb_func
sub_80F2CC2:
	push {r4,lr}
	ldr r0, off_80F2CDC // =byte_80F2CE0 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F2ED0 // =0xa000 
	tst r0, r1
	beq loc_80F2CD8
	add r4, #0x3c 
loc_80F2CD8:
	add r0, r4, #0
	pop {r4,pc}
off_80F2CDC: .word byte_80F2CE0
byte_80F2CE0: .byte 0x28, 0x1E, 0x18, 0x14
.endfunc // sub_80F2CC2

.func
.thumb_func
sub_80F2CE4:
	push {r4,lr}
	ldr r0, off_80F2D00 // =byte_80F2D04 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F2ED0 // =0xa000 
	tst r0, r1
	beq loc_80F2CFA
	add r4, #0x3c 
loc_80F2CFA:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
off_80F2D00: .word byte_80F2D04
byte_80F2D04: .byte 0x3C, 0x3C, 0x3C, 0x3C
.endfunc // sub_80F2CE4

.func
.thumb_func
sub_80F2D08:
	push {r4,lr}
	ldr r0, off_80F2D24 // =byte_80F2D28 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F2ED0 // =0xa000 
	tst r0, r1
	beq loc_80F2D1E
	add r4, #0x3c 
loc_80F2D1E:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F2D24: .word byte_80F2D28
byte_80F2D28: .byte 0x28, 0x1E, 0x18, 0x14
.endfunc // sub_80F2D08

.func
.thumb_func
sub_80F2D2C:
	push {r4,lr}
	ldr r0, off_80F2D48 // =byte_80F2D4C 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F2ED0 // =0xa000 
	tst r0, r1
	beq loc_80F2D42
	add r4, #0x3c 
loc_80F2D42:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F2D48: .word byte_80F2D4C
byte_80F2D4C: .byte 0x28, 0x1E, 0x18, 0x14
.endfunc // sub_80F2D2C

.func
.thumb_func
sub_80F2D50:
	push {lr}
	ldr r0, off_80F2D5C // =byte_80F2D60 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F2D5C: .word byte_80F2D60
byte_80F2D60: .byte 0x30, 0x24, 0x18, 0x18
.endfunc // sub_80F2D50

.func
.thumb_func
sub_80F2D64:
	push {lr}
	mov r3, #0
	ldrh r1, [r5,#0x26]
	lsr r1, r1, #1
	ldrh r2, [r5,#0x24]
	cmp r1, r2
	ble loc_80F2D74
	mov r3, #4
loc_80F2D74:
	add r0, r0, r3
	ldr r1, off_80F2D7C // =byte_80F2D80 
	ldrb r0, [r1,r0]
	pop {pc}
off_80F2D7C: .word byte_80F2D80
byte_80F2D80: .byte 0x1, 0x2, 0x3, 0x5, 0x1, 0x3, 0x4, 0x6
.endfunc // sub_80F2D64

.func
.thumb_func
sub_80F2D88:
	push {lr}
	mov r3, #0
	ldrh r1, [r5,#0x26]
	lsr r1, r1, #1
	ldrh r2, [r5,#0x24]
	cmp r1, r2
	ble loc_80F2D98
	mov r3, #4
loc_80F2D98:
	add r0, r0, r3
	ldr r1, off_80F2DA0 // =byte_80F2DA4 
	ldrb r0, [r1,r0]
	pop {pc}
off_80F2DA0: .word byte_80F2DA4
byte_80F2DA4: .byte 0x2, 0x3, 0x4, 0x5, 0x4, 0x5, 0x6, 0x7
.endfunc // sub_80F2D88

.func
.thumb_func
sub_80F2DAC:
	push {lr}
	ldr r0, off_80F2DB8 // =loc_80F2DBC 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F2DB8: .word loc_80F2DBC
.endfunc // sub_80F2DAC

loc_80F2DBC:
	sub r6, r3, #0
	sub r6, r3, #0
	push {r4,lr}
	add r4, r0, #0
	mov r0, #0
	mov r3, #0
loc_80F2DC8:
	add r2, r3, #0
	lsl r2, r2, #2
	ldr r1, [r4,r2]
	tst r1, r1
	bne locret_80F2DDA
	add r3, #1
	cmp r3, #3
	blt loc_80F2DC8
	mov r0, #1
locret_80F2DDA:
	pop {r4,pc}
.func
.thumb_func
sub_80F2DDC:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F2E0C // =dword_80F2E18 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F2E30 // =dword_80F2E3C 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F2E0C: .word dword_80F2E18
	.word dword_80F2E20
	.word dword_80F2E28
dword_80F2E18: .word 0x3C0014, 0xA006E
dword_80F2E20: .word 0x3C0014, 0xA006E
dword_80F2E28: .word 0x780028, 0xA00DC
off_80F2E30: .word dword_80F2E3C
	.word dword_80F2E44
	.word dword_80F2E4C
dword_80F2E3C: .word 0xA000A
	.word 0xA000A
dword_80F2E44: .word 0xA000A
	.word 0xA000A
dword_80F2E4C: .word 0xA000A
	.word 0xA000A
.endfunc // sub_80F2DDC

.func
.thumb_func
sub_80F2E54:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F2E7C // =dword_80F2E88 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F2EA0 // =dword_80F2EAC 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F2E7C: .word dword_80F2E88
	.word dword_80F2E90
	.word dword_80F2E98
dword_80F2E88: .word 0x3C0014, 0xA006E
dword_80F2E90: .word 0x3C0014, 0xA006E
dword_80F2E98: .word 0x780028, 0xA00DC
off_80F2EA0: .word dword_80F2EAC
	.word dword_80F2EB4
	.word dword_80F2EBC
dword_80F2EAC: .word 0xA000A
	.word 0xA000A
dword_80F2EB4: .word 0xA000A
	.word 0xA000A
dword_80F2EBC: .word 0xA000A
	.word 0xA000A
off_80F2EC4: .word sub_80F3704+1
off_80F2EC8: .word sub_80F36A2+1
off_80F2ECC: .word sub_80F3784+1
dword_80F2ED0: .word 0xA000
.endfunc // sub_80F2E54

loc_80F2ED4:
	push {r7,lr}
	ldr r1, off_80F2EE4 // =off_80F2EE8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F2EE4: .word off_80F2EE8
off_80F2EE8: .word sub_80F2EF4+1
	.word sub_80F2F54+1
	.word sub_80F2F80+1
.func
.thumb_func
sub_80F2EF4:
	push {lr}
	bl object_canMove
	beq loc_80F2F30
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F2F40 // =dword_80F2F44 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F2F30
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_80F2F3C
loc_80F2F30:
	mov r0, #0x1e
	strh r0, [r7,#0x18]
	mov r0, #1
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F2F3C:
	pop {pc}
	.byte 0, 0
off_80F2F40: .word dword_80F2F44
dword_80F2F44: .word 0x0
	.word 0xF8800A0, 0x20, 0xF880080
.endfunc // sub_80F2EF4

.func
.thumb_func
sub_80F2F54:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F2F7E
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F2F7E:
	pop {pc}
.endfunc // sub_80F2F54

.func
.thumb_func
sub_80F2F80:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F2FAC
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F2FB8
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80F2FB8
loc_80F2FAC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F2FB8
	bl sub_8011714
locret_80F2FB8:
	pop {pc}
.endfunc // sub_80F2F80

loc_80F2FBA:
	push {r7,lr}
	ldr r1, off_80F2FC8 // =off_80F2FCC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F2FC8: .word off_80F2FCC
off_80F2FCC: .word loc_80F2FE4+1
	.word sub_80F3040+1
	.word sub_80F306C+1
	.word sub_80F308E+1
	.word sub_80F30B2+1
	.word sub_80F3104+1
loc_80F2FE4:
	push {lr}
	bl object_canMove
	beq loc_80F3022
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F302C // =dword_80F3030 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_80F3022
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80F302A
loc_80F3022:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F302A:
	pop {pc}
off_80F302C: .word dword_80F3030
dword_80F3030: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80F3040:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F306A
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F306A:
	pop {pc}
.endfunc // sub_80F3040

.func
.thumb_func
sub_80F306C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F308C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80F308C:
	pop {pc}
.endfunc // sub_80F306C

.func
.thumb_func
sub_80F308E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F30A4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F30B0
loc_80F30A4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F30B0
	mov r0, #0x10
	strh r0, [r7]
locret_80F30B0:
	pop {pc}
.endfunc // sub_80F308E

.func
.thumb_func
sub_80F30B2:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F30CE
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #8
	strh r0, [r7,#0x10]
	b locret_80F30F2
loc_80F30CE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F30F2
	mov r0, #0x10
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	ldrb r3, [r7,#3]
	ldr r2, off_80F30F4 // =off_80F30F8 
	ldrb r1, [r2,r3]
	ldr r2, off_80F30FC // =byte_80F3100 
	ldrb r2, [r2,r3]
	ldrb r3, [r7,#0xc]
	ldr r6, [r7,#8]
	bl sub_80F382C
	mov r0, #0x14
	strh r0, [r7]
locret_80F30F2:
	pop {r4,r6,pc}
off_80F30F4: .word off_80F30F8
off_80F30F8: .word dword_8080AC4+0x148
off_80F30FC: .word byte_80F3100
byte_80F3100: .byte 0x12, 0xC, 0xA, 0x8
.endfunc // sub_80F30B2

.func
.thumb_func
sub_80F3104:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3116
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F3122
loc_80F3116:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F3122
	bl sub_8011714
locret_80F3122:
	pop {pc}
.endfunc // sub_80F3104

loc_80F3124:
	push {r7,lr}
	ldr r1, off_80F3134 // =off_80F3138 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F3134: .word off_80F3138
off_80F3138: .word sub_80F315C+1
	.word sub_80F3180+1
	.word sub_80F31EE+1
	.word sub_80F3230+1
	.word sub_80F32BC+1
	.word sub_80F3312+1
	.word sub_80F336C+1
	.word sub_80F3396+1
	.word sub_80F3400+1
.func
.thumb_func
sub_80F315C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3172
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0xf
	strh r0, [r7,#0x10]
	b locret_80F317E
loc_80F3172:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F317E
	mov r0, #4
	strh r0, [r7]
locret_80F317E:
	pop {pc}
.endfunc // sub_80F315C

.func
.thumb_func
sub_80F3180:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F31D0
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F31E8
	ldr r1, [r7,#0x2c]
	tst r1, r1
	beq loc_80F31E8
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80F31E8
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	bl sub_801A074 // () -> void
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80F31EC
loc_80F31D0:
	ldr r0, [r5,#0x3c]
	mov r1, #0x10
	lsl r1, r1, #0x10
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F31EC
	mov r0, #8
	strh r0, [r7]
	b locret_80F31EC
loc_80F31E8:
	mov r0, #0x20 
	strh r0, [r7]
locret_80F31EC:
	pop {pc}
.endfunc // sub_80F3180

.func
.thumb_func
sub_80F31EE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3214
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80F322E
loc_80F3214:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80F3222
	bl sub_80F38D0
loc_80F3222:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F322E
	mov r0, #0xc
	strh r0, [r7]
locret_80F322E:
	pop {pc}
.endfunc // sub_80F31EE

.func
.thumb_func
sub_80F3230:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3242
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80F32BA
loc_80F3242:
	ldr r0, [r5,#0x3c]
	mov r1, #0x10
	lsl r1, r1, #0x10
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80F325A
	bl sub_80F38D0
loc_80F325A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F32BA
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_8109794
	mov r1, #0x39 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r7,#8]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0xc0
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r7]
	b locret_80F32BA
	mov r0, #0x18
	strh r0, [r7]
locret_80F32BA:
	pop {pc}
.endfunc // sub_80F3230

.func
.thumb_func
sub_80F32BC:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F32F4
	mov r0, #4
	strb r0, [r7,#1]
	bl object_isCurrentPanelSolid
	tst r0, r0
	beq loc_80F330C
	mov r0, #2
	mov r1, #0x14
	bl sub_80302A8
	ldrb r2, [r7,#2]
	ldrb r3, [r7,#0xd]
	lsl r3, r3, #8
	ldrb r4, [r7,#3]
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x10
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80F37D8
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	b locret_80F3310
loc_80F32F4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F3310
	ldrb r0, [r7,#0xc]
	sub r0, #1
	strb r0, [r7,#0xc]
	tst r0, r0
	beq loc_80F330C
	mov r0, #0x14
	strh r0, [r7]
	b locret_80F3310
loc_80F330C:
	mov r0, #0x18
	strh r0, [r7]
locret_80F3310:
	pop {r4,r6,pc}
.endfunc // sub_80F32BC

.func
.thumb_func
sub_80F3312:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F334E
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F3366
	ldr r1, [r7,#0x2c]
	tst r1, r1
	beq loc_80F3366
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80F3366
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	bl sub_801A074 // () -> void
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80F336A
loc_80F334E:
	ldr r0, [r5,#0x3c]
	mov r1, #0x10
	lsl r1, r1, #0x10
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F336A
	mov r0, #8
	strh r0, [r7]
	b locret_80F336A
loc_80F3366:
	mov r0, #0x18
	strh r0, [r7]
locret_80F336A:
	pop {pc}
.endfunc // sub_80F3312

.func
.thumb_func
sub_80F336C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3388
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	bl sub_801A074 // () -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F3394
loc_80F3388:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F3394
	mov r0, #0x1c
	strh r0, [r7]
locret_80F3394:
	pop {pc}
.endfunc // sub_80F336C

.func
.thumb_func
sub_80F3396:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F33F2
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r1, #0x10
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F33FE
loc_80F33F2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F33FE
	mov r0, #0x20 
	strh r0, [r7]
locret_80F33FE:
	pop {pc}
.endfunc // sub_80F3396

.func
.thumb_func
sub_80F3400:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3416
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F3426
loc_80F3416:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F3426
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F3426:
	pop {pc}
.endfunc // sub_80F3400

loc_80F3428:
	push {r7,lr}
	ldr r1, off_80F3438 // =off_80F343C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F3438: .word off_80F343C
off_80F343C: .word sub_80F3460+1
	.word loc_80F3472+1
	.word sub_80F34EC+1
	.word sub_80F3518+1
	.word sub_80F3546+1
	.word sub_80F357C+1
	.word sub_80F35E4+1
	.word sub_80F3628+1
	.word sub_80F367E+1
.func
.thumb_func
sub_80F3460:
	push {lr}
	mov r0, #0
	strb r0, [r7,#0xe]
	mov r0, #0
	strb r0, [r7,#0x16]
	strb r0, [r7,#0x17]
	mov r0, #4
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80F3460

loc_80F3472:
	push {r4,lr}
	ldrb r0, [r7,#0xe]
	add r0, #1
	strb r0, [r7,#0xe]
	bl object_canMove
	beq loc_80F34D0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F34D8 // =dword_80F34DC 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldrb r4, [r7,#0xe]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F34D0
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
	ldrb r0, [r7,#0xe]
	cmp r0, #1
	ble locret_80F34D4
	ldr r3, [r7,#0x30]
	ldr r3, [r3]
	tst r3, r3
	beq locret_80F34D4
	mov r0, #1
	strb r0, [r3,#0xb]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r3,#6]
	strb r1, [r3,#7]
	b locret_80F34D4
loc_80F34D0:
	mov r0, #0x18
	strh r0, [r7]
locret_80F34D4:
	pop {r4,pc}
	.balign 4, 0x00
off_80F34D8: .word dword_80F34DC
dword_80F34DC: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80F34EC:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F3516
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #5
	strh r0, [r7,#0x10]
	mov r0, #0xc
	strh r0, [r7]
locret_80F3516:
	pop {pc}
.endfunc // sub_80F34EC

.func
.thumb_func
sub_80F3518:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F3544
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r7,#0xe]
	cmp r0, #1
	ble loc_80F3540
	mov r0, #0x18
	strh r0, [r7]
	b locret_80F3544
loc_80F3540:
	mov r0, #0x10
	strh r0, [r7]
locret_80F3544:
	pop {pc}
.endfunc // sub_80F3518

.func
.thumb_func
sub_80F3546:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3560
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b loc_80F356C
loc_80F3560:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_80F356C
	mov r0, #0x14
	strh r0, [r7]
loc_80F356C:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs locret_80F357A
	bl sub_80F38AA
locret_80F357A:
	pop {pc}
.endfunc // sub_80F3546

.func
.thumb_func
sub_80F357C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3598
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	bl object_setCounterTime
	mov r0, #0x12
	strh r0, [r7,#0x10]
	b loc_80F35D4
loc_80F3598:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xa
	beq loc_80F35A8
	cmp r0, #0
	ble loc_80F35D0
	b loc_80F35D4
loc_80F35A8:
	push {r4,r6,r7}
	mov r0, #6
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80F35B4
	mov r0, #1
loc_80F35B4:
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldrb r3, [r7,#0xd]
	lsl r3, r3, #8
	ldrb r4, [r7,#3]
	orr r4, r3
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x30]
	bl sub_80C8F74
	pop {r4,r6,r7}
	mov r0, #0x10
	strb r0, [r5,#0x10]
	b loc_80F35D4
loc_80F35D0:
	mov r0, #0x1c
	strh r0, [r7]
loc_80F35D4:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs locret_80F35E2
	bl sub_80F38AA
locret_80F35E2:
	pop {pc}
.endfunc // sub_80F357C

.func
.thumb_func
sub_80F35E4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F35FA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0x26 
	strh r0, [r7,#0x10]
	b loc_80F3618
loc_80F35FA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #8
	beq loc_80F360A
	cmp r0, #0
	ble loc_80F3610
	b loc_80F3618
loc_80F360A:
	mov r0, #0x15
	strb r0, [r5,#0x10]
	b loc_80F3618
loc_80F3610:
	mov r0, #0x10
	strb r0, [r5,#0x10]
	mov r0, #0x1c
	strh r0, [r7]
loc_80F3618:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs locret_80F3626
	bl sub_80F38AA
locret_80F3626:
	pop {pc}
.endfunc // sub_80F35E4

.func
.thumb_func
sub_80F3628:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3654
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80F3678
	ldrb r1, [r0,#9]
	cmp r1, #0
	bne locret_80F367C
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80F3654
	mov r1, #2
	strb r1, [r0,#0xb]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80F367C
loc_80F3654:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F367C
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80F3668
	mov r1, #3
	strb r1, [r0,#0xb]
loc_80F3668:
	ldrb r0, [r7,#0xc]
	sub r0, #1
	strb r0, [r7,#0xc]
	tst r0, r0
	beq loc_80F3678
	mov r0, #4
	strh r0, [r7]
	b locret_80F367C
loc_80F3678:
	mov r0, #0x20 
	strh r0, [r7]
locret_80F367C:
	pop {pc}
.endfunc // sub_80F3628

.func
.thumb_func
sub_80F367E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3694
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F36A0
loc_80F3694:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F36A0
	bl sub_8011714
locret_80F36A0:
	pop {pc}
.endfunc // sub_80F367E

.func
.thumb_func
sub_80F36A2:
	push {r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
.endfunc // sub_80F36A2

	ldr r0, [sp]
	ldrb r0, [r0,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl sub_800CFA6
	add r6, r0, #0
	tst r6, r6
	bne loc_80F36DC
	ldr r0, [sp]
	ldrb r0, [r0,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl sub_800D012
	add r6, r0, #0
	tst r6, r6
	beq loc_80F36F0
loc_80F36DC:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F36F4
loc_80F36F0:
	mov r0, #0
	b loc_80F36F4
loc_80F36F4:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	pop {r0,r1}
	add sp, sp, #0x24
	pop {r6,r7,pc}
.func
.thumb_func
sub_80F3704:
	push {r4,r6,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80F377C // =byte_80F3780 
	add r1, r1, r0
	ldrb r4, [r1]
	ldrb r6, [r1,#1]
	add r0, r4, #0
	add r1, r6, #0
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F3704

	tst r0, r0
	pop {r0,r1}
	bne loc_80F3776
	add r0, r4, #0
	add r1, r6, #0
	sub r1, #1
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80F3776
	add r0, r4, #0
	add r1, r6, #0
	add r1, #1
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80F3776
	bl object_getFlipDirection_800E2CA // () -> int
	add r1, r4, #0
	add r0, r0, r1
	add r1, r6, #0
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80F3776
	mov r0, #0
	b loc_80F3776
loc_80F3776:
	add sp, sp, #0x20
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F377C: .word byte_80F3780
byte_80F3780: .byte 0x1, 0x2, 0x6, 0x2
.func
.thumb_func
sub_80F3784:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	tst r4, r4
	bne loc_80F37BA
	ldr r0, [sp]
	ldrb r0, [r0,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl sub_800D012
	add r6, r0, #0
	tst r6, r6
	beq loc_80F37D0
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F37D4
loc_80F37BA:
	ldrb r0, [r5,#0x12]
	ldr r1, [sp]
	ldrb r1, [r1,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F3784

	tst r0, r0
	pop {r0,r1}
	bne loc_80F37D4
loc_80F37D0:
	mov r0, #0
	b loc_80F37D4
loc_80F37D4:
	add sp, sp, #0x24
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80F37D8:
	push {r4,r6,r7,lr}
	sub sp, sp, #0xc
	str r2, [sp]
	str r4, [sp,#4]
	str r6, [sp,#8]
	mov r7, #0
loc_80F37E4:
	add r0, r7, #0
	lsl r0, r0, #1
	ldr r1, off_80F3820 // =byte_80F3824 
	add r1, r1, r0
	mov r2, #0
	ldrsb r0, [r1,r2]
	mov r2, #0x1 // (byte_80F3825 - 0x80f3824)
	ldrsb r1, [r1,r2]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_80F37D8

	mov r1, #0x10
	tst r0, r1
	pop {r0,r1}
	beq loc_80F3814
	ldr r2, [sp]
	ldr r4, [sp,#4]
	ldr r6, [sp,#8]
	bl sub_80C8DE0
loc_80F3814:
	add r7, #1
	cmp r7, #4
	blt loc_80F37E4
	add sp, sp, #0xc
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80F3820: .word byte_80F3824
byte_80F3824: .byte 0xFF
byte_80F3825: .byte 0x0
	.hword 0x1
	.word 0x100FF00
.func
.thumb_func
sub_80F382C:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	str r3, [sp,#0x14]
	str r6, [sp,#0xc]
	mov r0, #0
	str r0, [sp,#0x10]
loc_80F383E:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r2, [sp,#0x10]
	sub r2, #1
	add r1, r1, r2
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_80F382C

	mov r1, #0x10
	tst r0, r1
	pop {r0,r1}
	beq loc_80F3880
	ldrb r2, [r7,#2]
	ldr r4, [sp,#0x14]
	ldr r3, [sp,#4]
	lsl r3, r3, #8
	orr r4, r3
	ldr r3, [sp,#8]
	lsl r3, r3, #0x10
	orr r4, r3
	ldr r6, [sp,#0x10]
	lsl r6, r6, #2
	ldr r3, [sp]
	add r3, r3, r6
	ldr r6, [sp,#0xc]
	push {r7}
	add r7, r3, #0
	bl sub_80C8C4C
	pop {r7}
loc_80F3880:
	ldr r0, [sp,#0x10]
	add r0, #1
	str r0, [sp,#0x10]
	cmp r0, #2
	ble loc_80F383E
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
	push {r4,lr}
	add r4, r0, #0
	mov r0, #0
	mov r3, #0
loc_80F3896:
	add r2, r3, #0
	lsl r2, r2, #2
	ldr r1, [r4,r2]
	tst r1, r1
	bne locret_80F38A8
	add r3, #1
	cmp r3, #3
	blt loc_80F3896
	mov r0, #1
locret_80F38A8:
	pop {r4,pc}
.func
.thumb_func
sub_80F38AA:
	push {r4,lr}
	mov r6, #6
	ldrb r0, [r5,#0x16]
	tst r0, r0
	beq loc_80F38B6
	mov r6, #1
loc_80F38B6:
	mov r4, #0
loc_80F38B8:
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mul r0, r4
	add r0, r0, r6
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	add r4, #1
	cmp r4, #3
	blt loc_80F38B8
	pop {r4,pc}
.endfunc // sub_80F38AA

.func
.thumb_func
sub_80F38D0:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #9
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	pop {pc}
dword_80F38E0: .word 0x1010208, 0x1000002, 0x6003384, 0x3578000A, 0xA0601
	.word 0x6023708, 0x3708000A, 0xA0603, 0x6043708, 0x3708000A
	.word 0xA0605
dword_80F390C: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80F39CC: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80F3A04+1
	.word loc_80F3D24+1
	.word loc_80F3E2A+1
	.word loc_80F3EC6+1
	.word loc_80F40D8+1
	.word loc_80F4298+1
.endfunc // sub_80F38D0

loc_80F3A04:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80F3A1C // =off_80F3A20 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.balign 4, 0x00
off_80F3A1C: .word off_80F3A20
off_80F3A20: .word sub_80F3A24+1
.func
.thumb_func
sub_80F3A24:
	push {r4,r6,lr}
	bl sub_80F3C1C
	cmp r0, #1
	bgt loc_80F3A5C
	ldrb r0, [r6,#4]
	cmp r0, #3
	blt loc_80F3A56
	mov r0, #0
	strb r0, [r6,#4]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #3
	strb r0, [r7,#2]
	bl sub_80F3B8C
	strh r0, [r7,#0x18]
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0xa
	bl sub_8011680
	b locret_80F3B1E
loc_80F3A56:
	ldrb r1, [r6,#4]
	add r1, #1
	strb r1, [r6,#4]
loc_80F3A5C:
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #4
	blt loc_80F3A94
	cmp r0, #6
	blt loc_80F3ACE
	cmp r0, #8
	blt loc_80F3AF6
	bl sub_800FE36
	strb r0, [r7,#3]
	ldr r0, off_80F3D14 // =sub_80F45B8+1 
	str r0, [r7,#0x28]
	bl sub_80F3B7A
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
	b locret_80F3B1E
loc_80F3A94:
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #3
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80F3C2C
	bl sub_80F3BB0
	strh r0, [r7,#0x18]
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0x64 
	add r0, r0, r5
	str r0, [r7,#0x34]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	ldr r0, dword_80F3D18 // = 
	str r0, [r7,#0x28]
	mov r0, #0xb
	bl sub_8011680
	b locret_80F3B1E
loc_80F3ACE:
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #3
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_80F3C2C
	bl sub_80F3BD4
	strh r0, [r7,#0x18]
	mov r0, #0x68 
	add r0, r0, r5
	str r0, [r7,#0x30]
	ldr r0, off_80F3D1C // =sub_80F45B8+1 
	str r0, [r7,#0x28]
	mov r0, #0xc
	bl sub_8011680
	b locret_80F3B1E
loc_80F3AF6:
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #3
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80F3C2C
	bl sub_80F3BF8
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xd
	bl sub_8011680
locret_80F3B1E:
	pop {r4,r6,pc}
	.word 0xA000
.endfunc // sub_80F3A24

.func
.thumb_func
sub_80F3B24:
	push {r4,r6,r7,lr}
	bl sub_800FE36
	add r4, r0, #0
	mov r0, #0
	bl sub_80F3CA4
	add r6, r0, #0
	mov r2, #3
	mov r0, #0x60 
	add r0, r0, r5
	mov r7, #0x64 
	add r7, r7, r5
	bl sub_80C7544
	pop {r4,r6,r7,pc}
.endfunc // sub_80F3B24

	push {lr}
	pop {pc}
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.func
.thumb_func
sub_80F3B7A:
	push {lr}
	ldr r0, off_80F3B84 // =byte_80F3B88 
	bl sub_800FE28
	pop {pc}
off_80F3B84: .word byte_80F3B88
byte_80F3B88: .byte 0x1E, 0x1E, 0x1E, 0x1E
.endfunc // sub_80F3B7A

.func
.thumb_func
sub_80F3B8C:
	push {r4,lr}
	ldr r0, off_80F3BA8 // =byte_80F3BAC 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F3D20 // =0xa000 
	tst r0, r1
	beq loc_80F3BA2
	add r4, #0x3c 
loc_80F3BA2:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F3BA8: .word byte_80F3BAC
byte_80F3BAC: .byte 0x28, 0x1E, 0x19, 0x14
.endfunc // sub_80F3B8C

.func
.thumb_func
sub_80F3BB0:
	push {r4,lr}
	ldr r0, off_80F3BCC // =byte_80F3BD0 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F3D20 // =0xa000 
	tst r0, r1
	beq loc_80F3BC6
	add r4, #0x3c 
loc_80F3BC6:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F3BCC: .word byte_80F3BD0
byte_80F3BD0: .byte 0x28, 0x1E, 0x19, 0x14
.endfunc // sub_80F3BB0

.func
.thumb_func
sub_80F3BD4:
	push {r4,lr}
	ldr r0, off_80F3BF0 // =byte_80F3BF4 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F3D20 // =0xa000 
	tst r0, r1
	beq loc_80F3BEA
	add r4, #0x3c 
loc_80F3BEA:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
off_80F3BF0: .word byte_80F3BF4
byte_80F3BF4: .byte 0x28, 0x1E, 0x19, 0x14
.endfunc // sub_80F3BD4

.func
.thumb_func
sub_80F3BF8:
	push {r4,lr}
	ldr r0, off_80F3C14 // =byte_80F3C18 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F3D20 // =0xa000 
	tst r0, r1
	beq loc_80F3C0E
	add r4, #0x3c 
loc_80F3C0E:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F3C14: .word byte_80F3C18
byte_80F3C18: .byte 0x3C, 0x3C, 0x28, 0x1E
.endfunc // sub_80F3BF8

.func
.thumb_func
sub_80F3C1C:
	push {lr}
	mov r0, #0
	mov r1, #0x60 
	ldr r1, [r5,r1]
	tst r1, r1
	beq locret_80F3C2A
	ldrb r0, [r1,#5]
locret_80F3C2A:
	pop {pc}
.endfunc // sub_80F3C1C

.func
.thumb_func
sub_80F3C2C:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F3C5C // =dword_80F3C68 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F3C80 // =dword_80F3C8C 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F3C5C: .word dword_80F3C68
	.word dword_80F3C70
	.word dword_80F3C78
dword_80F3C68: .word 0x500028
	.word 0x6E006E
dword_80F3C70: .word 0x500028
	.word 0x6E006E
dword_80F3C78: .word 0xA00050
	.word 0xDC00DC
off_80F3C80: .word dword_80F3C8C
	.word dword_80F3C94
	.word dword_80F3C9C
dword_80F3C8C: .word 0xA000A
	.word 0xA000A
dword_80F3C94: .word 0xA000A
	.word 0xA000A
dword_80F3C9C: .word 0xA000A
	.word 0xA000A
.endfunc // sub_80F3C2C

.func
.thumb_func
sub_80F3CA4:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F3CCC // =dword_80F3CD8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F3CF0 // =dword_80F3CFC 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F3CCC: .word dword_80F3CD8
	.word dword_80F3CE0
	.word dword_80F3CE8
dword_80F3CD8: .word 0x500028
	.word 0x6E006E
dword_80F3CE0: .word 0x500028
	.word 0x6E006E
dword_80F3CE8: .word 0xA00050
	.word 0xDC00DC
off_80F3CF0: .word dword_80F3CFC
	.word dword_80F3D04
	.word dword_80F3D0C
dword_80F3CFC: .word 0xA000A
	.word 0xA000A
dword_80F3D04: .word 0xA000A
	.word 0xA000A
dword_80F3D0C: .word 0xA000A
	.word 0xA000A
off_80F3D14: .word sub_80F45B8+1
dword_80F3D18: .word 0x80F4659
off_80F3D1C: .word sub_80F45B8+1
dword_80F3D20: .word 0xA000
.endfunc // sub_80F3CA4

loc_80F3D24:
	push {r7,lr}
	ldr r1, off_80F3D34 // =off_80F3D38 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F3D34: .word off_80F3D38
off_80F3D38: .word sub_80F3D44+1
	.word sub_80F3DC0+1
	.word sub_80F3E0A+1
.func
.thumb_func
sub_80F3D44:
	push {lr}
	bl object_canMove
	beq loc_80F3D92
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F3D98 // =dword_80F3D9C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F3D92
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	ldrb r2, [r7,#3]
	lsl r2, r2, #2
	ldr r3, dword_80F3D9C+16 // =dword_80F3D9C 
	ldr r2, [r3,r2]
	bl sub_80F46A4
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	strh r2, [r7,#0x10]
	bl sub_80F3DC0
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strh r0, [r7]
	b locret_80F3D96
loc_80F3D92:
	mov r0, #8
	strh r0, [r7]
locret_80F3D96:
	pop {pc}
off_80F3D98: .word dword_80F3D9C
dword_80F3D9C: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080, 0x80F3DB0
	.word 0x4CCC, 0x4CCC, 0x9999, 0xE666
.endfunc // sub_80F3D44

.func
.thumb_func
sub_80F3DC0:
	push {lr}
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F3E08
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A066
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	bl loc_801171C
locret_80F3E08:
	pop {pc}
.endfunc // sub_80F3DC0

.func
.thumb_func
sub_80F3E0A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3E1C
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F3E28
loc_80F3E1C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F3E28
	bl loc_801171C
locret_80F3E28:
	pop {pc}
.endfunc // sub_80F3E0A

loc_80F3E2A:
	push {r7,lr}
	ldr r1, off_80F3E38 // =off_80F3E3C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F3E38: .word off_80F3E3C
off_80F3E3C: .word sub_80F3E48+1
	.word sub_80F3E7A+1
	.word sub_80F3EA2+1
.func
.thumb_func
sub_80F3E48:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3E6C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	mov r1, #1
	strb r1, [r0,#0xb]
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F3E78
loc_80F3E6C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F3E78
	mov r0, #4
	strh r0, [r7]
locret_80F3E78:
	pop {pc}
.endfunc // sub_80F3E48

.func
.thumb_func
sub_80F3E7A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3E94
	mov r0, #4
	strb r0, [r7,#1]
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	mov r1, #2
	strb r1, [r0,#0xb]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80F3EA0
loc_80F3E94:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F3EA0
	mov r0, #8
	strh r0, [r7]
locret_80F3EA0:
	pop {pc}
.endfunc // sub_80F3E7A

.func
.thumb_func
sub_80F3EA2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F3EB4
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F3EC4
loc_80F3EB4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F3EC4
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F3EC4:
	pop {pc}
.endfunc // sub_80F3EA2

loc_80F3EC6:
	push {r7,lr}
	ldr r1, off_80F3ED4 // =off_80F3ED8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F3ED4: .word off_80F3ED8
off_80F3ED8: .word loc_80F3EF0+1
	.word sub_80F3F24+1
	.word sub_80F3FB0+1
	.word sub_80F4008+1
	.word sub_80F404E+1
	.word sub_80F40B4+1
loc_80F3EF0:
	push {lr}
	bl object_canMove
	beq loc_80F3F1E
	mov r0, #0
	str r0, [r7,#0x38]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x34]
	ldr r2, [r7,#0x28]
	mov lr, pc
	bx r2
	tst r0, r0
	beq loc_80F3F1E
	strb r0, [r7,#0xc]
	ldrb r1, [r5,#0x13]
	cmp r0, r1
	bne loc_80F3F18
	mov r0, #0xc
	strh r0, [r7]
	b locret_80F3F22
loc_80F3F18:
	mov r0, #4
	strh r0, [r7]
	b locret_80F3F22
loc_80F3F1E:
	bl sub_8011714
locret_80F3F22:
	pop {pc}
.func
.thumb_func
sub_80F3F24:
	push {lr}
	bl object_canMove
	beq loc_80F3F82
	mov r3, #1
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#0xc]
	cmp r1, r2
	ble loc_80F3F3A
	neg r3, r3
loc_80F3F3A:
	add r1, r1, r3
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80F3F88 // =dword_80F3F8C 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F3F82
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	ldrb r2, [r7,#3]
	lsl r2, r2, #2
	ldr r3, off_80F3F9C // =dword_80F3FA0 
	ldr r2, [r3,r2]
	bl sub_80F46A4
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	strh r2, [r7,#0x10]
	bl sub_80F3FB0
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #8
	strh r0, [r7]
	b locret_80F3F86
loc_80F3F82:
	bl sub_8011714
locret_80F3F86:
	pop {pc}
off_80F3F88: .word dword_80F3F8C
dword_80F3F8C: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
off_80F3F9C: .word dword_80F3FA0
dword_80F3FA0: .word 0x45000, 0x55000, 0x65000, 0x70000
.endfunc // sub_80F3F24

.func
.thumb_func
sub_80F3FB0:
	push {lr}
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F4006
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A066
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x13]
	ldrb r1, [r7,#0xc]
	cmp r0, r1
	beq loc_80F4002
	mov r0, #4
	strh r0, [r7]
	b locret_80F4006
loc_80F4002:
	mov r0, #0xc
	strh r0, [r7]
locret_80F4006:
	pop {pc}
.endfunc // sub_80F3FB0

.func
.thumb_func
sub_80F4008:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4040
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #8
	mov r4, #5
	orr r4, r0
	bl sub_80E3FB4
	str r0, [r7,#0x38]
	mov r0, #6
	bl object_setCounterTime
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F404C
loc_80F4040:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F404C
	mov r0, #0x10
	strh r0, [r7]
locret_80F404C:
	pop {r4,pc}
.endfunc // sub_80F4008

.func
.thumb_func
sub_80F404E:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4090
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x15
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	bl sub_80C8070
	mov r0, #0xba
	bl sound_play // () -> void
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	mov r1, #4
	strb r1, [r0,#0xb]
	ldrb r0, [r7,#3]
	lsl r0, r0, #1
	ldr r1, off_80F40A8 // =dword_80F40AC 
	ldrh r0, [r1,r0]
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq locret_80F40A4
	bl sub_80E3FC4
	b locret_80F40A4
loc_80F4090:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F40A4
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	mov r1, #5
	strb r1, [r0,#0xb]
	mov r0, #0x14
	strh r0, [r7]
locret_80F40A4:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F40A8: .word dword_80F40AC
dword_80F40AC: .word 0x480048
	.word 0x480048
.endfunc // sub_80F404E

.func
.thumb_func
sub_80F40B4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F40CA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F40D6
loc_80F40CA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F40D6
	bl sub_8011714
locret_80F40D6:
	pop {pc}
.endfunc // sub_80F40B4

loc_80F40D8:
	push {r7,lr}
	ldr r1, off_80F40E8 // =off_80F40EC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F40E8: .word off_80F40EC
off_80F40EC: .word sub_80F4108+1
	.word sub_80F4144+1
	.word sub_80F41C0+1
	.word sub_80F420A+1
	.word sub_80F422C+1
	.word sub_80F4256+1
	.word sub_80F4274+1
.func
.thumb_func
sub_80F4108:
	push {r4,r6,lr}
	mov r4, #3
	ldrh r1, [r5,#0x26]
	lsr r1, r1, #1
	ldrh r2, [r5,#0x24]
	cmp r1, r2
	blt loc_80F4118
	mov r4, #4
loc_80F4118:
	bl object_getFlag // () -> int
	ldr r1, dword_80F4140 // =0xa000 
	tst r0, r1
	beq loc_80F4124
	mov r4, #1
loc_80F4124:
	ldrb r2, [r7,#2]
	ldrb r3, [r7,#3]
	lsl r4, r4, #8
	orr r4, r3
	ldr r6, [r7,#8]
	push {r7}
	ldr r7, [r7,#0x30]
	bl sub_80C7A6C
	pop {r7}
	mov r0, #4
	strh r0, [r7]
	pop {r4,r6,pc}
	.byte 0, 0
dword_80F4140: .word 0xA000
.endfunc // sub_80F4108

.func
.thumb_func
sub_80F4144:
	push {lr}
	bl object_canMove
	beq loc_80F4192
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F4198 // =dword_80F419C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F4192
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	ldrb r2, [r7,#3]
	lsl r2, r2, #2
	ldr r3, dword_80F419C+16 // =dword_80F419C 
	ldr r2, [r3,r2]
	bl sub_80F46A4
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	strh r2, [r7,#0x10]
	bl sub_80F41C0
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #8
	strh r0, [r7]
	b locret_80F4196
loc_80F4192:
	mov r0, #0xc
	strh r0, [r7]
locret_80F4196:
	pop {pc}
off_80F4198: .word dword_80F419C
dword_80F419C: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080, 0x80F41B0
	.word 0x4CCC, 0x4CCC, 0x9999, 0xE666
.endfunc // sub_80F4144

.func
.thumb_func
sub_80F41C0:
	push {lr}
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F4208
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A066
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80F4208:
	pop {pc}
.endfunc // sub_80F41C0

.func
.thumb_func
sub_80F420A:
	push {lr}
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80F4226
	ldrb r0, [r0,#9]
	cmp r0, #4
	beq loc_80F4220
	mov r0, #4
	strh r0, [r7]
	b locret_80F422A
loc_80F4220:
	mov r0, #0x10
	strh r0, [r7]
	b locret_80F422A
loc_80F4226:
	mov r0, #0x18
	strh r0, [r7]
locret_80F422A:
	pop {pc}
.endfunc // sub_80F420A

.func
.thumb_func
sub_80F422C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4248
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F4254
loc_80F4248:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4254
	mov r0, #0x14
	strh r0, [r7]
locret_80F4254:
	pop {pc}
.endfunc // sub_80F422C

.func
.thumb_func
sub_80F4256:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4266
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x13
	strb r0, [r5,#0x10]
loc_80F4266:
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	bne locret_80F4272
	mov r0, #0x18
	strh r0, [r7]
locret_80F4272:
	pop {r4,r6,pc}
.endfunc // sub_80F4256

.func
.thumb_func
sub_80F4274:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4286
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F4296
loc_80F4286:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4296
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F4296:
	pop {pc}
.endfunc // sub_80F4274

loc_80F4298:
	push {r7,lr}
	ldr r1, off_80F42A8 // =off_80F42AC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F42A8: .word off_80F42AC
off_80F42AC: .word sub_80F42C8+1
	.word sub_80F42F6+1
	.word sub_80F4384+1
	.word sub_80F43DC+1
	.word sub_80F441C+1
	.word sub_80F44E4+1
	.word sub_80F455C+1
.func
.thumb_func
sub_80F42C8:
	push {lr}
	mov r0, #0
	str r0, [r7,#0x38]
	ldr r2, [r7,#0x2c]
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	ldrb r2, [r5,#0x13]
	cmp r1, r2
	beq loc_80F42EA
	str r1, [r7,#0x30]
	bl object_isValidPanel
	tst r0, r0
	beq loc_80F42F0
	mov r0, #4
	strh r0, [r7]
	b locret_80F42F4
loc_80F42EA:
	mov r0, #0xc
	strh r0, [r7]
	b locret_80F42F4
loc_80F42F0:
	bl sub_8011714
locret_80F42F4:
	pop {pc}
.endfunc // sub_80F42C8

.func
.thumb_func
sub_80F42F6:
	push {lr}
	bl object_canMove
	beq loc_80F4354
	mov r3, #1
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r2, [r7,#0x30]
	cmp r1, r2
	ble loc_80F430C
	neg r3, r3
loc_80F430C:
	add r1, r1, r3
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80F435C // =dword_80F4360 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F4354
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	ldrb r2, [r7,#3]
	lsl r2, r2, #2
	ldr r3, off_80F4370 // =dword_80F4374 
	ldr r2, [r3,r2]
	bl sub_80F46A4
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	strh r2, [r7,#0x10]
	bl sub_80F4384
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #8
	strh r0, [r7]
	b locret_80F4358
loc_80F4354:
	bl sub_8011714
locret_80F4358:
	pop {pc}
	.balign 4, 0x00
off_80F435C: .word dword_80F4360
dword_80F4360: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
off_80F4370: .word dword_80F4374
dword_80F4374: .word 0x45000, 0x55000, 0x65000, 0x70000
.endfunc // sub_80F42F6

.func
.thumb_func
sub_80F4384:
	push {lr}
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F43DA
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A066
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x13]
	ldr r1, [r7,#0x30]
	cmp r0, r1
	beq loc_80F43D6
	mov r0, #4
	strh r0, [r7]
	b locret_80F43DA
loc_80F43D6:
	mov r0, #0xc
	strh r0, [r7]
locret_80F43DA:
	pop {pc}
.endfunc // sub_80F4384

.func
.thumb_func
sub_80F43DC:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F440E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #8
	mov r4, #6
	orr r4, r0
	bl sub_80E3FB4
	str r0, [r7,#0x38]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F441A
loc_80F440E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F441A
	mov r0, #0x10
	strh r0, [r7]
locret_80F441A:
	pop {r4,pc}
.endfunc // sub_80F43DC

.func
.thumb_func
sub_80F441C:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4494
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #6
	bl object_setCounterTime
	bl sub_800E2C0
	add r4, r0, #0
	ldrb r1, [r7,#3]
	lsl r1, r1, #2
	ldr r2, off_80F44CC // =dword_80F44D0 
	ldr r1, [r2,r1]
	add r6, r1, #0
	mul r1, r0
	str r1, [r5,#0x40]
	ldr r2, [r7,#0x2c]
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80F44C6
	ldrb r1, [r5,#0x12]
	sub r1, r0, r1
	mul r1, r4
	sub r1, #1
	cmp r1, #0
	ble loc_80F44C0
	mov r0, #0x28 
	lsl r0, r0, #0x10
	mul r0, r1
	add r1, r6, #0
	svc 6
	strh r0, [r7,#0x10]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq loc_80F4494
	mov r1, #0xf
	strb r1, [r0,#0x10]
loc_80F4494:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	mov r2, #0
	ldr r3, dword_80F44E0 // =0x3800000 
	bl object_checkPanelParameters
.endfunc // sub_80F441C

	tst r0, r0
	beq loc_80F44C6
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F44CA
loc_80F44C0:
	mov r0, #0x14
	strh r0, [r7]
	b locret_80F44CA
loc_80F44C6:
	mov r0, #0x18
	strh r0, [r7]
locret_80F44CA:
	pop {r4,r6,pc}
off_80F44CC: .word dword_80F44D0
dword_80F44D0: .word 0xA0000, 0xB0000, 0xC0000, 0xD0000
dword_80F44E0: .word 0x3800000
.func
.thumb_func
sub_80F44E4:
	push {lr}
	ldrb r0, [r7,#1]
	cmp r0, #1
	beq loc_80F44FA
	cmp r0, #2
	beq loc_80F4544
	mov r0, #1
	strb r0, [r7,#1]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80F4550
loc_80F44FA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4550
	mov r0, #0x11
	strb r0, [r5,#0x10]
	push {r4,r6,r7}
	bl sub_800E2C0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F4554 // =0x705ff04 
	ldr r6, [r7,#8]
	ldr r7, dword_80F4558 // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7}
	mov r0, #0xb0
	bl sound_play // () -> void
	bl sub_80F4778
	mov r0, #0xe
	ldrh r1, [r7,#0x18]
	add r0, r0, r1
	strh r0, [r7,#0x10]
	mov r0, #2
	strb r0, [r7,#1]
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq locret_80F4550
	mov r1, #0x10
	strb r1, [r0,#0x10]
	b locret_80F4550
loc_80F4544:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4550
	mov r0, #0x18
	strh r0, [r7]
locret_80F4550:
	pop {pc}
	.balign 4, 0x00
dword_80F4554: .word 0x705FF04
dword_80F4558: .word 0x3
.endfunc // sub_80F44E4

.func
.thumb_func
sub_80F455C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F45A6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq locret_80F45B6
	bl sub_80E3FC4
	b locret_80F45B6
loc_80F45A6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F45B6
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F45B6:
	pop {pc}
.endfunc // sub_80F455C

.func
.thumb_func
sub_80F45B8:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x14
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	mov r4, #0
	mov r6, #0
	mov r7, #0
loc_80F45C8:
	ldr r2, off_80F464C // =byte_80F4650 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80F4651 - 0x80f4650)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F45B8

	tst r0, r0
	pop {r0,r1}
	beq loc_80F460E
	ldr r2, [sp]
	ldrb r2, [r2,#0x13]
	cmp r1, r2
	beq loc_80F4604
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0xc
	strb r0, [r1,r6]
	add r6, #1
	b loc_80F460E
loc_80F4604:
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x10
	strb r0, [r1,r7]
	add r7, #1
loc_80F460E:
	add r4, #1
	cmp r4, #4
	blt loc_80F45C8
	tst r6, r6
	bne loc_80F4620
	tst r7, r7
	bne loc_80F4634
	mov r0, #0
	b loc_80F4648
loc_80F4620:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F4648
loc_80F4634:
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F4648
loc_80F4648:
	add sp, sp, #0x14
	pop {r4,r6,r7,pc}
off_80F464C: .word byte_80F4650
byte_80F4650: .byte 0xFF
byte_80F4651: .byte 0x0
	.hword 0xFF00
	// <mkdata>
	.hword 0x1 // mov r1, r0
	lsl r0, r0, #4
	push {r4,lr}
	sub sp, sp, #8
	str r0, [sp]
	str r1, [sp,#4]
	bl sub_8001532
	mov r1, #3
	and r0, r1
	add r4, r0, #0
	mov r3, #3
	ldrh r1, [r5,#0x26]
	lsr r1, r1, #2
	ldrh r2, [r5,#0x24]
	cmp r1, r2
	blt loc_80F4678
	mov r3, #1
loc_80F4678:
	cmp r4, r3
	blt loc_80F4688
	ldr r0, [sp,#4]
	ldr r0, [r0]
	bl sub_80F4728
	tst r0, r0
	bne loc_80F46A0
loc_80F4688:
	ldr r1, [sp]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80F469E
	add r0, r1, #0
	b loc_80F46A0
loc_80F469E:
	mov r0, #0
loc_80F46A0:
	add sp, sp, #8
	pop {r4,pc}
.func
.thumb_func
sub_80F46A4:
	push {lr}
	ldrb r3, [r5,#0x12]
	cmp r0, r3
	beq loc_80F46B8
	sub r0, r0, r3
	mul r0, r2
	mov r1, #0
	mov r3, #0x28 
	lsl r3, r3, #0x10
	b loc_80F46C4
loc_80F46B8:
	ldrb r3, [r5,#0x13]
	sub r1, r1, r3
	mul r1, r2
	mov r0, #0
	mov r3, #0x18
	lsl r3, r3, #0x10
loc_80F46C4:
	push {r0,r1}
	add r0, r3, #0
	add r1, r2, #0
	svc 6
	add r2, r0, #0
	pop {r0,r1}
	pop {pc}
.endfunc // sub_80F46A4

	push {r4,r6,lr}
	sub sp, sp, #4
	mov r4, #1
	mov r6, #0
loc_80F46DA:
	ldrb r2, [r0,#0x13]
	cmp r2, r4
	beq loc_80F470A
	ldr r2, [r1]
	tst r2, r2
	beq loc_80F46EC
	ldrb r2, [r2,#0x13]
	cmp r2, r4
	beq loc_80F470A
loc_80F46EC:
	ldr r2, [r1,#4]
	tst r2, r2
	beq loc_80F46F8
	ldrb r2, [r2,#0x13]
	cmp r2, r4
	beq loc_80F470A
loc_80F46F8:
	ldr r2, [r1,#8]
	tst r2, r2
	beq loc_80F4704
	ldrb r2, [r2,#0x13]
	cmp r2, r4
	beq loc_80F470A
loc_80F4704:
	add r2, sp, #0
	strb r4, [r2,r6]
	add r6, #1
loc_80F470A:
	add r4, #1
	cmp r4, #3
	ble loc_80F46DA
	tst r6, r6
	beq loc_80F4722
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	b loc_80F4724
loc_80F4722:
	mov r0, #0
loc_80F4724:
	add sp, sp, #4
	pop {r4,r6,pc}
.func
.thumb_func
sub_80F4728:
	push {r4,r6,lr}
	sub sp, sp, #4
	mov r4, #1
	mov r6, #0
loc_80F4730:
	ldr r2, [r0]
	tst r2, r2
	beq loc_80F473C
	ldrb r2, [r2,#0x13]
	cmp r2, r4
	beq loc_80F4754
loc_80F473C:
	ldr r2, [r0,#4]
	tst r2, r2
	beq loc_80F4748
	ldrb r2, [r2,#0x13]
	cmp r2, r4
	beq loc_80F4754
loc_80F4748:
	ldr r2, [r0,#8]
	tst r2, r2
	beq loc_80F475A
	ldrb r2, [r2,#0x13]
	cmp r2, r4
	bne loc_80F475A
loc_80F4754:
	add r2, sp, #0
	strb r4, [r2,r6]
	add r6, #1
loc_80F475A:
	add r4, #1
	cmp r4, #3
	ble loc_80F4730
	tst r6, r6
	beq loc_80F4772
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	b loc_80F4774
loc_80F4772:
	mov r0, #0
loc_80F4774:
	add sp, sp, #4
	pop {r4,r6,pc}
.endfunc // sub_80F4728

.func
.thumb_func
sub_80F4778:
	push {r4,lr}
	mov r4, #0x16
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	add r4, r4, r0
	mov r0, #3
	lsl r0, r0, #0x10
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,pc}
	.balign 4, 0x00
dword_80F47A8: .word 0x1010308, 0x1108003, 0x320, 0x4B0000A, 0xA0001, 0x205DC
	.word 0x5DC000A, 0xA0003, 0x405DC, 0x5DC000A, 0xA0005
dword_80F47D4: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80F4894: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80F48C8+1
	.word loc_80F4C24+1
	.word loc_80F4D1E+1
	.word loc_80F4FFE+1
	.word loc_80F5280+1
.endfunc // sub_80F4778

loc_80F48C8:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80F48E0 // =off_80F48E4 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.byte 0, 0
off_80F48E0: .word off_80F48E4
off_80F48E4: .word sub_80F48E8+1
.func
.thumb_func
sub_80F48E8:
	push {r4,r6,lr}
	ldrb r0, [r6,#4]
	cmp r0, #5
	blt loc_80F4936
	mov r0, #0
	strb r0, [r6,#4]
	mov r0, #0
	str r0, [r5,#0x70]
	ldrb r0, [r6,#5]
	cmp r0, #4
	bge loc_80F492C
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
	ldrb r0, [r6,#6]
	cmp r0, #2
	bge loc_80F4922
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	ldr r1, off_80F4948 // =loc_80F494C 
	ldrb r0, [r1,r0]
	ldrb r1, [r6,#6]
	add r1, r1, r0
	strb r1, [r6,#6]
	bl sub_80F4AC6
	b locret_80F4946
loc_80F4922:
	mov r0, #0
	strb r0, [r6,#6]
	bl sub_80F4AFE
	b locret_80F4946
loc_80F492C:
	mov r0, #0
	strb r0, [r6,#5]
	bl sub_80F4B34
	b locret_80F4946
loc_80F4936:
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
	bl sub_80F4AB2
	ldr r0, [r5,#0x70]
	add r0, #1
	str r0, [r5,#0x70]
locret_80F4946:
	pop {r4,r6,pc}
off_80F4948: .word loc_80F494C
.endfunc // sub_80F48E8

loc_80F494C:
	lsl r2, r0, #8
	lsl r2, r0, #8
	lsl r2, r0, #8
	lsl r2, r0, #8
	lsl r1, r0, #4
	lsl r1, r0, #4
	lsl r1, r0, #4
	lsl r1, r0, #4
	push {lr}
	pop {pc}
	push {lr}
	pop {pc}
.func
.thumb_func
sub_80F4964:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	ldr r2, [r5,#0x58]
	add r2, #0xa0
	ldrb r0, [r2,#0x16]
	ldrb r1, [r2,#0x17]
	bl sub_801BB46
.endfunc // sub_80F4964

	pop {pc}
.func
.thumb_func
sub_80F49A2:
	push {r4,lr}
	mov r1, #0
	ldr r0, [r5,#0x70]
	cmp r0, #2
	blt loc_80F49AE
	mov r1, #4
loc_80F49AE:
	ldr r0, off_80F49C8 // =byte_80F49CC 
	add r0, r0, r1
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F4C10 // =0xa000 
	tst r0, r1
	beq loc_80F49C4
	add r4, #0x1e
loc_80F49C4:
	add r0, r4, #0
	pop {r4,pc}
off_80F49C8: .word byte_80F49CC
byte_80F49CC: .byte 0x24, 0x1E, 0x18, 0x18, 0x6, 0x3, 0x1, 0x1
.endfunc // sub_80F49A2

.func
.thumb_func
sub_80F49D4:
	push {r4,lr}
	ldr r0, off_80F49F0 // =byte_80F49F4 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F4C10 // =0xa000 
	tst r0, r1
	beq loc_80F49EA
	add r4, #0x1e
loc_80F49EA:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
off_80F49F0: .word byte_80F49F4
byte_80F49F4: .byte 0x1E, 0x1E, 0x18, 0x12
.endfunc // sub_80F49D4

.func
.thumb_func
sub_80F49F8:
	push {r4,lr}
	ldr r0, off_80F4A10 // =byte_80F4A14 
	bl sub_800FE28
	add r4, r0, #0
	ldr r0, off_80F4A10 // =byte_80F4A14 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	add r0, r4, #0
	pop {r4,pc}
off_80F4A10: .word byte_80F4A14
byte_80F4A14: .byte 0x1E, 0x18, 0x18, 0x14, 0xA, 0xA, 0xA, 0xA
.endfunc // sub_80F49F8

.func
.thumb_func
sub_80F4A1C:
	push {lr}
	ldr r0, off_80F4A28 // =byte_80F4A2C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F4A28: .word byte_80F4A2C
byte_80F4A2C: .byte 0x2A, 0x24, 0x1E, 0x1E
.endfunc // sub_80F4A1C

.func
.thumb_func
sub_80F4A30:
	push {r4,lr}
	ldr r0, off_80F4A4C // =byte_80F4A50 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F4C10 // =0xa000 
	tst r0, r1
	beq loc_80F4A46
	add r4, #0x1e
loc_80F4A46:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F4A4C: .word byte_80F4A50
byte_80F4A50: .byte 0x1E, 0x18, 0x12, 0x12
.endfunc // sub_80F4A30

.func
.thumb_func
sub_80F4A54:
	push {r4,lr}
	ldr r0, off_80F4A70 // =byte_80F4A74 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F4C10 // =0xa000 
	tst r0, r1
	beq loc_80F4A6A
	add r4, #0x1e
loc_80F4A6A:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
off_80F4A70: .word byte_80F4A74
byte_80F4A74: .byte 0x3C, 0x28, 0x1E, 0x10
.endfunc // sub_80F4A54

.func
.thumb_func
sub_80F4A78:
	push {lr}
	ldr r0, off_80F4A84 // =byte_80F4A88 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F4A84: .word byte_80F4A88
byte_80F4A88: .byte 0x1E, 0x18, 0x12, 0x12
.endfunc // sub_80F4A78

.func
.thumb_func
sub_80F4A8C:
	push {lr}
	sub sp, sp, #8
	mov r1, #0
loc_80F4A92:
	add r0, sp, #0
	strb r1, [r0,r1]
	add r1, #1
	cmp r1, #7
	ble loc_80F4A92
	add r0, sp, #0
	mov r1, #8
	add r2, r1, #0
	bl sub_8000C72
	add r3, sp, #0
	ldrb r0, [r3]
	ldrb r1, [r3,#1]
	ldrb r2, [r3,#2]
	add sp, sp, #8
	pop {pc}
.endfunc // sub_80F4A8C

.func
.thumb_func
sub_80F4AB2:
	push {lr}
	ldr r0, off_80F4C14 // =sub_80F53EA+1 
	str r0, [r7,#0x28]
	bl sub_80F49A2
	strh r0, [r7,#0x18]
	mov r0, #9
	bl loc_8011690
	pop {pc}
.endfunc // sub_80F4AB2

.func
.thumb_func
sub_80F4AC6:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80F4B74
	bl sub_80F49D4
	strh r0, [r7,#0x18]
	bl sub_80F49F8
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	ldr r0, dword_80F4C18 // = 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F4AC6

.func
.thumb_func
sub_80F4AFE:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_80F4B74
	ldr r0, off_80F4C1C // =sub_80F5518+1 
	str r0, [r7,#0x28]
	bl sub_80F4A30
	strh r0, [r7,#0x18]
	bl sub_80F4A1C
	strb r0, [r7,#0xc]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F4AFE

.func
.thumb_func
sub_80F4B34:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80F4B74
	bl sub_80F4A54
	strh r0, [r7,#0x18]
	bl sub_80F4A78
	str r0, [r7,#0x30]
	ldr r0, off_80F4C20 // =sub_80F55AC+1 
	str r0, [r7,#0x28]
	bl sub_80F4A8C
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	strb r2, [r7,#0xe]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F4B34

.func
.thumb_func
sub_80F4B74:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F4BC8 // =dword_80F4BD4 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F4BEC // =dword_80F4BF8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_80F4B74

	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F4BC8 // =dword_80F4BD4 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F4BEC // =dword_80F4BF8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
off_80F4BC8: .word dword_80F4BD4
	.word dword_80F4BDC
	.word dword_80F4BE4
dword_80F4BD4: .word 0x46001E, 0x780078
dword_80F4BDC: .word 0x8C003C, 0xF000F0
dword_80F4BE4: .word 0x46001E, 0x780078
off_80F4BEC: .word dword_80F4BF8
	.word dword_80F4C00
	.word dword_80F4C08
dword_80F4BF8: .word 0xA000A
	.word 0xA000A
dword_80F4C00: .word 0xA000A
	.word 0xA000A
dword_80F4C08: .word 0xA000A
	.word 0xA000A
dword_80F4C10: .word 0xA000
off_80F4C14: .word sub_80F53EA+1
dword_80F4C18: .word 0x80F5485
off_80F4C1C: .word sub_80F5518+1
off_80F4C20: .word sub_80F55AC+1
loc_80F4C24:
	push {r7,lr}
	ldr r1, off_80F4C34 // =off_80F4C38 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F4C34: .word off_80F4C38
off_80F4C38: .word sub_80F4C44+1
	.word sub_80F4CB4+1
	.word sub_80F4CFA+1
.func
.thumb_func
sub_80F4C44:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4C88
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F4C96
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F4CA0 // =dword_80F4CA4 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_80F4C96
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	bl sub_80F57DE
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F4C9E
loc_80F4C88:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4C9E
	mov r0, #4
	strh r0, [r7]
	b locret_80F4C9E
loc_80F4C96:
	mov r0, #0x50 
	strh r0, [r7,#0x18]
	mov r0, #8
	strh r0, [r7]
locret_80F4C9E:
	pop {pc}
off_80F4CA0: .word dword_80F4CA4
dword_80F4CA4: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80F4C44

.func
.thumb_func
sub_80F4CB4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4CEC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F4CF8
loc_80F4CEC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4CF8
	mov r0, #8
	strh r0, [r7]
locret_80F4CF8:
	pop {pc}
.endfunc // sub_80F4CB4

.func
.thumb_func
sub_80F4CFA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4D10
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F4D1C
loc_80F4D10:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4D1C
	bl sub_8011714
locret_80F4D1C:
	pop {pc}
.endfunc // sub_80F4CFA

loc_80F4D1E:
	push {r7,lr}
	ldr r1, off_80F4D2C // =off_80F4D30 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F4D2C: .word off_80F4D30
off_80F4D30: .word sub_80F4D50+1
	.word sub_80F4DC4+1
	.word sub_80F4DF8+1
	.word sub_80F4E44+1
	.word sub_80F4ECC+1
	.word sub_80F4F14+1
	.word sub_80F4F88+1
	.word sub_80F4FA8+1
.func
.thumb_func
sub_80F4D50:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4DA0
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F4DAE
	ldr r1, off_80F4DB8 // =dword_80F4DBC 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_80F4DC0 - 0x80f4dbc)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F4DAE
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	bl sub_80F57DE
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F4DB6
loc_80F4DA0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4DB6
	mov r0, #4
	strh r0, [r7]
	b locret_80F4DB6
loc_80F4DAE:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F4DB6:
	pop {pc}
off_80F4DB8: .word dword_80F4DBC
dword_80F4DBC: .word 0x10
dword_80F4DC0: .word 0xF880080
.endfunc // sub_80F4D50

.func
.thumb_func
sub_80F4DC4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4DEA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F4DF6
loc_80F4DEA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4DF6
	mov r0, #8
	strh r0, [r7]
locret_80F4DF6:
	pop {pc}
.endfunc // sub_80F4DC4

.func
.thumb_func
sub_80F4DF8:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4E12
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80F4E42
loc_80F4E12:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_80F4E20
	mov r0, #0xc
	strh r0, [r7]
	b locret_80F4E42
loc_80F4E20:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs locret_80F4E42
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #4
	ldrb r3, [r5,#0x17]
	lsl r3, r3, #8
	ldrb r4, [r5,#0x16]
	orr r3, r4
	bl object_highlightPanelRegion
locret_80F4E42:
	pop {r4,pc}
.endfunc // sub_80F4DF8

.func
.thumb_func
sub_80F4E44:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4EA8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x59 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x10
	strb r0, [r5,#0x10]
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0xc
	strh r0, [r7,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F4EC4 // =0x700ff04 
	ldr r6, [r7,#8]
	push {r7}
	ldr r7, dword_80F4EC8 // =0x3 
	bl sub_80C536A
	pop {r7}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x39 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	b locret_80F4EC0
loc_80F4EA8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4EC0
	ldrb r0, [r7,#3]
	cmp r0, #0
	beq loc_80F4EBC
	mov r0, #0x10
	strh r0, [r7]
	b locret_80F4EC0
loc_80F4EBC:
	mov r0, #0x18
	strh r0, [r7]
locret_80F4EC0:
	pop {r4,r6,pc}
	.balign 4, 0x00
dword_80F4EC4: .word 0x700FF04
dword_80F4EC8: .word 0x3
.endfunc // sub_80F4E44

.func
.thumb_func
sub_80F4ECC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4EE2
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80F4F12
loc_80F4EE2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_80F4EF0
	mov r0, #0x14
	strh r0, [r7]
	b locret_80F4F12
loc_80F4EF0:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs locret_80F4F12
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #2
	ldrb r3, [r5,#0x17]
	lsl r3, r3, #8
	ldrb r4, [r5,#0x16]
	orr r3, r4
	bl object_highlightPanelRegion
locret_80F4F12:
	pop {pc}
.endfunc // sub_80F4ECC

.func
.thumb_func
sub_80F4F14:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4F70
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc7
	bl sound_play // () -> void
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0xc
	strh r0, [r7,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F4F80 // =0x700ff02 
	ldr r6, [r7,#8]
	push {r7}
	ldr r7, dword_80F4F84 // =0x3 
	bl sub_80C536A
	pop {r7}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x3a 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	b locret_80F4F7C
loc_80F4F70:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4F7C
	mov r0, #0x18
	strh r0, [r7]
locret_80F4F7C:
	pop {r4,r6,pc}
	.byte 0, 0
dword_80F4F80: .word 0x700FF02
dword_80F4F84: .word 0x3
.endfunc // sub_80F4F14

.func
.thumb_func
sub_80F4F88:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4F9A
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F4FA6
loc_80F4F9A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4FA6
	mov r0, #0x1c
	strh r0, [r7]
locret_80F4FA6:
	pop {pc}
.endfunc // sub_80F4F88

.func
.thumb_func
sub_80F4FA8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F4FF0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0xd
	strh r0, [r7,#0x10]
	b locret_80F4FFC
loc_80F4FF0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F4FFC
	bl sub_8011714
locret_80F4FFC:
	pop {pc}
.endfunc // sub_80F4FA8

loc_80F4FFE:
	push {r7,lr}
	ldr r1, off_80F500C // =off_80F5010 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F500C: .word off_80F5010
off_80F5010: .word loc_80F5028+1
	.word sub_80F50A0+1
	.word sub_80F50E2+1
	.word sub_80F5168+1
	.word sub_80F5208+1
	.word sub_80F5260+1
loc_80F5028:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5072
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F5080
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F508C // =dword_80F5090 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F5080
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	bl sub_80F57DE
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F5088
loc_80F5072:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5088
	mov r0, #4
	strh r0, [r7]
	b locret_80F5088
loc_80F5080:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F5088:
	pop {pc}
	.balign 4, 0x00
off_80F508C: .word dword_80F5090
dword_80F5090: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80F50A0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F50D4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F50E0
loc_80F50D4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F50E0
	mov r0, #8
	strh r0, [r7]
locret_80F50E0:
	pop {pc}
.endfunc // sub_80F50A0

.func
.thumb_func
sub_80F50E2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F50F8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_80F5150
loc_80F50F8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5150
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0x65 
	add r0, #0xff
	bl sound_play // () -> void
	mov r1, #0x53 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r7,#8]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, off_80F5154 // =dword_80F5158 
	ldrb r2, [r7,#3]
	lsl r2, r2, #2
	ldr r2, [r1,r2]
	mul r2, r0
	str r2, [r7,#0x30]
	str r2, [r5,#0x40]
	mov r0, #0
	str r0, [r5,#0x44]
	mov r0, #0
	strb r0, [r7,#0xd]
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0xc
	strh r0, [r7]
locret_80F5150:
	pop {pc}
	.balign 4, 0x00
off_80F5154: .word dword_80F5158
dword_80F5158: .word 0x70000, 0x80000, 0x90000, 0x90000
.endfunc // sub_80F50E2

.func
.thumb_func
sub_80F5168:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	ldrb r6, [r7,#0xd]
	lsr r6, r6, #1
	bcs loc_80F517C
	add r4, r0, #0
	b loc_80F517E
loc_80F517C:
	add r4, r1, #0
loc_80F517E:
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r2, [r5,#0x44]
	ldr r3, [r5,#0x38]
	add r2, r2, r3
	str r2, [r5,#0x38]
	push {r0-r3}
	add r1, r2, #0
	bl sub_800E258
	ldr r3, off_80F51FC // =dword_80F5200 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80F5204 - 0x80f5200)
	bl object_checkPanelParameters
.endfunc // sub_80F5168

	tst r0, r0
	pop {r0-r3}
	beq loc_80F51F4
	ldrb r6, [r7,#0xd]
	lsr r6, r6, #1
	bcs loc_80F51B2
	add r6, r1, #0
	add r3, r0, #0
	b loc_80F51B6
loc_80F51B2:
	add r6, r3, #0
	add r3, r2, #0
loc_80F51B6:
	cmp r4, r6
	beq loc_80F51D4
	add r0, r3, #0
	add r1, r6, #0
	add r2, r4, #0
	bl sub_800E708
	cmp r0, #0
	beq loc_80F51D4
	bl sub_800E29C // () -> void
	bl sub_80F5704
	tst r0, r0
	bne loc_80F51F4
loc_80F51D4:
	ldrb r4, [r5,#0x12]
	ldrb r6, [r5,#0x13]
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	bne loc_80F51EC
	ldrb r0, [r5,#0x13]
	cmp r0, r6
	beq locret_80F51F8
loc_80F51EC:
	mov r0, #1
	bl sub_801A07C
	b locret_80F51F8
loc_80F51F4:
	mov r0, #0x10
	strh r0, [r7]
locret_80F51F8:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80F51FC: .word dword_80F5200
dword_80F5200: .word 0x10010
dword_80F5204: .word 0x800000
.func
.thumb_func
sub_80F5208:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5252
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	b locret_80F525E
loc_80F5252:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F525E
	mov r0, #0x14
	strh r0, [r7]
locret_80F525E:
	pop {pc}
.endfunc // sub_80F5208

.func
.thumb_func
sub_80F5260:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5272
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F527E
loc_80F5272:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F527E
	bl sub_8011714
locret_80F527E:
	pop {pc}
.endfunc // sub_80F5260

loc_80F5280:
	push {r7,lr}
	ldr r1, off_80F5290 // =off_80F5294 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_80F5290: .word off_80F5294
off_80F5294: .word sub_80F52A8+1
	.word sub_80F531C+1
	.word sub_80F5366+1
	.word sub_80F5390+1
	.word sub_80F53CA+1
.func
.thumb_func
sub_80F52A8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F52F0
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F52FE
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F5308 // =dword_80F530C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_80F52FE
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	bl sub_80F57DE
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F5306
loc_80F52F0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5306
	mov r0, #4
	strh r0, [r7]
	b locret_80F5306
loc_80F52FE:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F5306:
	pop {pc}
off_80F5308: .word dword_80F530C
dword_80F530C: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80F52A8

.func
.thumb_func
sub_80F531C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5354
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F5364
loc_80F5354:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5364
	mov r0, #0
	strb r0, [r7,#0xf]
	mov r0, #8
	strh r0, [r7]
locret_80F5364:
	pop {pc}
.endfunc // sub_80F531C

.func
.thumb_func
sub_80F5366:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5382
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl sub_80F5668
	ldr r0, [r7,#0x30]
	add r0, #1
	strh r0, [r7,#0x10]
	b locret_80F538E
loc_80F5382:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F538E
	mov r0, #0xc
	strh r0, [r7]
locret_80F538E:
	pop {pc}
.endfunc // sub_80F5366

.func
.thumb_func
sub_80F5390:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F53AC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #6
	bl object_setCounterTime
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F53C8
loc_80F53AC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F53C8
	ldrb r0, [r7,#0xf]
	add r0, #1
	strb r0, [r7,#0xf]
	cmp r0, #3
	bge loc_80F53C4
	mov r0, #8
	strh r0, [r7]
	b locret_80F53C8
loc_80F53C4:
	mov r0, #0x10
	strh r0, [r7]
locret_80F53C8:
	pop {r4,r6,pc}
.endfunc // sub_80F5390

.func
.thumb_func
sub_80F53CA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F53DC
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F53E8
loc_80F53DC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F53E8
	bl sub_8011714
locret_80F53E8:
	pop {pc}
.endfunc // sub_80F53CA

.func
.thumb_func
sub_80F53EA:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	mov r4, #0
loc_80F53F4:
	ldr r2, off_80F5478 // =byte_80F547C 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80F547D - 0x80f547c)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB1C
.endfunc // sub_80F53EA

	add r4, #1
	cmp r4, #4
	blt loc_80F53F4
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	mov r4, #0
loc_80F5424:
	ldr r2, off_80F5478 // =byte_80F547C 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80F547D - 0x80f547c)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB46
	add r4, #1
	cmp r4, #4
	blt loc_80F5424
	tst r6, r6
	bne loc_80F545A
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_80F546E
loc_80F545A:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F5472
loc_80F546E:
	mov r0, #0
	b loc_80F5472
loc_80F5472:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80F5478: .word byte_80F547C
byte_80F547C: .byte 0xFF
byte_80F547D: .byte 0x0
	.hword 0xFF00
	// <mkdata>
	.hword 0x1 // mov r1, r0
	lsl r0, r0, #4
	push {r6,lr}
	sub sp, sp, #0x14
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	ldrb r1, [r0,#0x12]
	ldrb r2, [r0,#0x13]
	push {r1,r2}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	pop {r1,r2}
	add r0, r0, r1
	add r1, r2, #0
	str r0, [sp]
	str r1, [sp,#4]
	mov r6, #0
	ldr r0, [sp]
	ldr r1, [sp,#4]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80F5514
	ldr r0, [sp]
	ldr r1, [sp,#4]
	sub r1, #1
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F54D8
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x10
	strb r0, [r1,r6]
	add r6, #1
loc_80F54D8:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	add r1, #1
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F54F8
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x10
	strb r0, [r1,r6]
	add r6, #1
loc_80F54F8:
	tst r6, r6
	beq loc_80F5510
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F5514
loc_80F5510:
	mov r0, #0
	b loc_80F5514
loc_80F5514:
	add sp, sp, #0x14
	pop {r6,pc}
.func
.thumb_func
sub_80F5518:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80F552E
	mov r0, #6
	mov r4, #1
	mov r6, #0
loc_80F552E:
	add r1, r4, #0
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F5518

	tst r0, r0
	pop {r0,r1}
	beq loc_80F554E
	add r7, r0, #0
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #8
	strb r0, [r1,r6]
	add r6, #1
	add r0, r7, #0
loc_80F554E:
	add r4, #2
	cmp r4, #3
	ble loc_80F552E
	tst r6, r6
	bne loc_80F5590
	mov r0, #2
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80F5566
	mov r0, #5
	mov r4, #1
	mov r6, #0
loc_80F5566:
	add r1, r4, #0
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F5586
	add r7, r0, #0
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #8
	strb r0, [r1,r6]
	add r6, #1
	add r0, r7, #0
loc_80F5586:
	add r4, #2
	cmp r4, #3
	ble loc_80F5566
	tst r6, r6
	beq loc_80F55A4
loc_80F5590:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F55A8
loc_80F55A4:
	mov r0, #0
	b loc_80F55A8
loc_80F55A8:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80F55AC:
	push {lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80F55CC // =loc_80F55D0 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F55AC

	tst r0, r0
	pop {r0,r1}
	bne locret_80F55C8
	mov r0, #0
locret_80F55C8:
	pop {pc}
	.balign 4, 0x00
off_80F55CC: .word loc_80F55D0
loc_80F55D0:
	lsl r1, r0, #8
	lsl r6, r0, #8
	push {r4,r6,lr}
	cmp r0, #7
	bgt locret_80F5624
	cmp r0, #0
	blt locret_80F5624
	mov r6, #6
	mul r6, r0
	ldr r1, off_80F5628 // =dword_80F562C 
	add r6, r6, r1
	mov r4, #0
loc_80F55E8:
	add r2, r6, r4
	ldrb r0, [r2]
	ldrb r1, [r2,#1]
	ldrb r3, [r5,#0x16]
	tst r3, r3
	beq loc_80F55F8
	mov r3, #7
	sub r0, r3, r0
loc_80F55F8:
	ldr r3, off_80F565C // =dword_80F5660 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80F5664 - 0x80f5660)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F561E
	push {r4,r6}
	ldrb r2, [r7,#2]
	ldr r3, [r7,#0x30]
	lsl r3, r3, #8
	ldrb r4, [r7,#3]
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80CC918
	pop {r4,r6}
loc_80F561E:
	add r4, #2
	cmp r4, #6
	blt loc_80F55E8
locret_80F5624:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F5628: .word dword_80F562C
dword_80F562C: .word 0x2030103, 0x1030301, 0x303, 0x1020203, 0x1020301
	.word 0x302, 0x3010203, 0x2030000, 0x102, 0x3020102
	.word 0x3030000, 0x202
off_80F565C: .word dword_80F5660
dword_80F5660: .word 0x10000
dword_80F5664: .word 0xF800000
.func
.thumb_func
sub_80F5668:
	push {r4,r6,lr}
	bl sub_8001532
	mov r1, #3
	svc 6
	lsl r1, r1, #2
	ldr r0, [r7,#0x2c]
	ldrb r0, [r0,#0x13]
	cmp r0, #1
	blt loc_80F5680
	cmp r0, #3
	ble loc_80F5682
loc_80F5680:
	mov r0, #2
loc_80F5682:
	sub r0, #1
	mov r2, #0xc
	mul r0, r2
	add r0, r0, r1
	ldr r6, off_80F56D0 // =dword_80F56D4 
	add r6, r6, r0
	mov r4, #0
loc_80F5690:
	add r2, r6, r4
	ldrb r0, [r2]
	ldrb r1, [r2,#1]
	ldrb r3, [r5,#0x16]
	tst r3, r3
	beq loc_80F56A0
	mov r3, #7
	sub r0, r3, r0
loc_80F56A0:
	ldr r3, off_80F56F8 // =dword_80F56FC 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80F5700 - 0x80f56fc)
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F5668

	tst r0, r0
	pop {r0,r1}
	beq loc_80F56C6
	push {r4,r6}
	ldrb r2, [r7,#2]
	ldr r3, [r7,#0x30]
	lsl r3, r3, #8
	ldrb r4, [r7,#3]
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80CC918
	pop {r4,r6}
loc_80F56C6:
	add r4, #2
	cmp r4, #4
	blt loc_80F5690
	pop {r4,r6,pc}
	.byte 0, 0
off_80F56D0: .word dword_80F56D4
dword_80F56D4: .word 0x3010103, 0x3030102, 0x2030103, 0x2020303, 0x2020103
	.word 0x3030203, 0x3010103, 0x3010203, 0x3020202
off_80F56F8: .word dword_80F56FC
dword_80F56FC: .word 0x10000
dword_80F5700: .word 0xF800000
.func
.thumb_func
sub_80F5704:
	push {r4,lr}
	ldr r4, [r7,#0x30]
	ldrb r0, [r7,#0xd]
	cmp r0, #0
	bne loc_80F5742
	ldr r0, [r7,#0x2c]
	ldrb r0, [r0,#0x12]
	ldrb r1, [r5,#0x12]
	ldrb r2, [r5,#0x16]
	cmp r2, #1
	beq loc_80F5724
	cmp r1, r0
	bge loc_80F572E
	cmp r1, #6
	beq loc_80F572E
	b loc_80F57DA
loc_80F5724:
	cmp r1, r0
	ble loc_80F572E
	cmp r1, #1
	beq loc_80F572E
	b loc_80F57DA
loc_80F572E:
	mov r2, #1
	strb r2, [r7,#0xd]
	ldrb r0, [r5,#0x13]
	cmp r0, #1
	bne loc_80F573A
	neg r4, r4
loc_80F573A:
	str r4, [r5,#0x44]
	mov r4, #0
	str r4, [r5,#0x40]
	b loc_80F57DA
loc_80F5742:
	cmp r0, #1
	bne loc_80F576E
	ldr r0, [r5,#0x44]
	ldrb r1, [r5,#0x13]
	cmp r0, #0
	bgt loc_80F5752
	mov r2, #1
	b loc_80F5754
loc_80F5752:
	mov r2, #3
loc_80F5754:
	cmp r1, r2
	bne loc_80F57DA
	mov r2, #2
	strb r2, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	sub r0, #1
	neg r0, r0
	mul r4, r0
	str r4, [r5,#0x40]
	mov r4, #0
	str r4, [r5,#0x44]
	b loc_80F57DA
loc_80F576E:
	cmp r0, #2
	bne loc_80F57A4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x14]
	ldrb r2, [r5,#0x16]
	cmp r2, #1
	beq loc_80F5786
	cmp r0, r1
	ble loc_80F5790
	cmp r0, #1
	beq loc_80F5790
	b loc_80F57DA
loc_80F5786:
	cmp r0, r1
	bge loc_80F5790
	cmp r0, #6
	beq loc_80F5790
	b loc_80F57DA
loc_80F5790:
	mov r2, #3
	strb r2, [r7,#0xd]
	ldrb r0, [r5,#0x13]
	cmp r0, #1
	bne loc_80F579C
	neg r4, r4
loc_80F579C:
	str r4, [r5,#0x44]
	mov r4, #0
	str r4, [r5,#0x40]
	b loc_80F57DA
loc_80F57A4:
	cmp r0, #3
	bne loc_80F57CE
	ldrb r0, [r5,#0x13]
	ldrb r1, [r5,#0x15]
	cmp r0, r1
	bne loc_80F57DA
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x14]
	cmp r0, r1
	bne loc_80F57BC
	mov r0, #1
	pop {r4,pc}
loc_80F57BC:
	mov r2, #4
	strb r2, [r7,#0xd]
	cmp r0, r1
	bgt loc_80F57C6
	neg r4, r4
loc_80F57C6:
	str r4, [r5,#0x40]
	mov r4, #0
	str r4, [r5,#0x44]
	b loc_80F57DA
loc_80F57CE:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x14]
	cmp r0, r1
	bne loc_80F57DA
	mov r0, #1
	pop {r4,pc}
loc_80F57DA:
	mov r0, #0
	pop {r4,pc}
.endfunc // sub_80F5704

.func
.thumb_func
sub_80F57DE:
	push {r4,r6,r7,lr}
	bl sub_800E456 // () -> int
	lsl r0, r0, #0x18
	mov r4, #0
	lsl r4, r4, #0x10
	orr r4, r0
	ldr r0, off_80F5800 // =0x308 
	orr r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80F5804 // =0xbc0f 
	ldr r7, dword_80F5808 // =0x10014 
	bl sub_80E33FA
	pop {r4,r6,r7,pc}
off_80F5800: .word 0x308
dword_80F5804: .word 0xBC0F
dword_80F5808: .word 0x10014
dword_80F580C: .word 0x1010408, 0x1204004, 0x320, 0x4B0000A, 0xA0001, 0x20640
	.word 0x640000A, 0xA0003, 0x40640, 0x640000A, 0xA0005
dword_80F5838: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80F58F8: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80F5928+1
	.word sub_80F5B84+1
	.word loc_80F5C66+1
	.word loc_80F5DD2+1
.endfunc // sub_80F57DE

loc_80F5928:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80F5940 // =off_80F5944 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.byte 0, 0
off_80F5940: .word off_80F5944
off_80F5944: .word sub_80F594C+1
	.word sub_80F59E8+1
.func
.thumb_func
sub_80F594C:
	push {r4,r6,lr}
	bl sub_800FE36
	ldr r1, off_80F59E0 // =byte_80F59E4 
	ldrb r0, [r1,r0]
	ldrb r1, [r6,#4]
	cmp r1, r0
	blt loc_80F59B4
	mov r0, #0
	strb r0, [r6,#4]
	bl sub_8001532
	mov r1, #1
	and r0, r1
	mov r1, #3
	add r0, r0, r1
	ldrb r1, [r6,#5]
	cmp r1, r0
	bge loc_80F59AA
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80F5AD4
	ldr r0, off_80F5B70 // =sub_80F6154+1 
	str r0, [r7,#0x28]
	bl sub_80F5A8C
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	mov r1, #4
	strb r1, [r6]
	b locret_80F59DC
loc_80F59AA:
	mov r0, #0
	strb r0, [r6,#5]
	bl sub_80F5AA0
	b locret_80F59DC
loc_80F59B4:
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
	bl sub_800FE36
	strb r0, [r7,#3]
	ldr r0, off_80F5B74 // =sub_80F60C4+1 
	str r0, [r7,#0x28]
	bl sub_80F5A58
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
locret_80F59DC:
	pop {r4,r6,pc}
	.byte 0, 0
off_80F59E0: .word byte_80F59E4
byte_80F59E4: .byte 0x5, 0x4, 0x4, 0x3
.endfunc // sub_80F594C

.func
.thumb_func
sub_80F59E8:
	push {r4,r6,lr}
	ldrb r0, [r7,#0x1a]
	tst r0, r0
	bne loc_80F59F8
	mov r0, #0
	strb r0, [r6,#5]
	bl sub_80F5AA0
loc_80F59F8:
	mov r1, #0
	strb r1, [r6]
	pop {r4,r6,pc}
.endfunc // sub_80F59E8

.func
.thumb_func
sub_80F59FE:
	push {r4,r6,lr}
	bl sub_800FE36
	add r4, r0, #0
	mov r0, #1
	bl sub_80F5B02
	add r6, r0, #0
	mov r2, #0
	bl sub_80E9A1C
	pop {r4,r6,pc}
.endfunc // sub_80F59FE

	push {lr}
	pop {pc}
.func
.thumb_func
sub_80F5A1A:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	ldr r2, [r5,#0x58]
	add r2, #0xa0
	ldrb r0, [r2,#0x16]
	ldrb r1, [r2,#0x17]
	bl sub_801BB46
.endfunc // sub_80F5A1A

	pop {pc}
.func
.thumb_func
sub_80F5A58:
	push {r4,lr}
	bl sub_8001532
	mov r1, #1
	and r0, r1
	lsl r0, r0, #2
	ldr r1, off_80F5A80 // =byte_80F5A84 
	add r0, r0, r1
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F5B78 // =0xa000 
	tst r0, r1
	beq loc_80F5A7A
	add r4, #0x1e
loc_80F5A7A:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
off_80F5A80: .word byte_80F5A84
byte_80F5A84: .byte 0x3C, 0x32, 0x28, 0x1E, 0x28, 0x1E, 0x19, 0x14
.endfunc // sub_80F5A58

.func
.thumb_func
sub_80F5A8C:
	push {lr}
	ldr r0, off_80F5A98 // =byte_80F5A9C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F5A98: .word byte_80F5A9C
byte_80F5A9C: .byte 0x3C, 0x32, 0x28, 0x1E
.endfunc // sub_80F5A8C

.func
.thumb_func
sub_80F5AA0:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #3
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80F5AD4
	ldr r0, off_80F5B7C // =sub_80F61B6+1 
	str r0, [r7,#0x28]
	ldr r0, off_80F5B80 // =sub_80F61E4+1 
	str r0, [r7,#0x30]
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x34]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F5AA0

.func
.thumb_func
sub_80F5AD4:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F5B28 // =dword_80F5B34 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F5B4C // =dword_80F5B58 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_80F5AD4

.func
.thumb_func
sub_80F5B02:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F5B28 // =dword_80F5B34 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F5B4C // =dword_80F5B58 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
off_80F5B28: .word dword_80F5B34
	.word dword_80F5B3C
	.word dword_80F5B44
dword_80F5B34: .word 0x5A003C
	.word 0x780078
dword_80F5B3C: .word 0x32001E, 0x460046
dword_80F5B44: .word 0xAA0064, 0xF000F0
off_80F5B4C: .word dword_80F5B58
	.word dword_80F5B60
	.word dword_80F5B68
dword_80F5B58: .word 0xA000A
	.word 0xA000A
dword_80F5B60: .word 0xA000A
	.word 0xA000A
dword_80F5B68: .word 0xA000A
	.word 0xA000A
off_80F5B70: .word sub_80F6154+1
off_80F5B74: .word sub_80F60C4+1
dword_80F5B78: .word 0xA000
off_80F5B7C: .word sub_80F61B6+1
off_80F5B80: .word sub_80F61E4+1
.endfunc // sub_80F5B02

.func
.thumb_func
sub_80F5B84:
	push {r7,lr}
	ldr r1, off_80F5B94 // =jt_80F5B98 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F5B94: .word jt_80F5B98
jt_80F5B98: .word sub_80F5BA4+1
	.word sub_80F5C00+1
	.word sub_80F5C2C+1
.endfunc // sub_80F5B84

.func
.thumb_func
sub_80F5BA4:
	push {lr}
	bl object_canMove
	beq loc_80F5BE0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F5BEC // =dword_80F5BF0 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F5BE0
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_80F5BE8
loc_80F5BE0:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F5BE8:
	pop {pc}
	.balign 4, 0x00
off_80F5BEC: .word dword_80F5BF0
dword_80F5BF0: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80F5BA4

.func
.thumb_func
sub_80F5C00:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5C2A
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F5C2A:
	pop {pc}
.endfunc // sub_80F5C00

.func
.thumb_func
sub_80F5C2C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5C58
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5C64
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80F5C64
loc_80F5C58:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5C64
	bl sub_8011714
locret_80F5C64:
	pop {pc}
.endfunc // sub_80F5C2C

loc_80F5C66:
	push {r7,lr}
	ldr r1, off_80F5C74 // =off_80F5C78 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F5C74: .word off_80F5C78
off_80F5C78: .word sub_80F5C90+1
	.word sub_80F5CF0+1
	.word sub_80F5D1C+1
	.word sub_80F5D3E+1
	.word sub_80F5D74+1
	.word sub_80F5DAE+1
.func
.thumb_func
sub_80F5C90:
	push {lr}
	bl object_canMove
	beq loc_80F5CD0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F5CDC // =dword_80F5CE0 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F5CD0
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80F5CD8
loc_80F5CD0:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F5CD8:
	pop {pc}
	.balign 4, 0x00
off_80F5CDC: .word dword_80F5CE0
dword_80F5CE0: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80F5C90

.func
.thumb_func
sub_80F5CF0:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5D1A
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F5D1A:
	pop {pc}
.endfunc // sub_80F5CF0

.func
.thumb_func
sub_80F5D1C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5D3C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80F5D3C:
	pop {pc}
.endfunc // sub_80F5D1C

.func
.thumb_func
sub_80F5D3E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5D5E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0x28 
	bl object_setCounterTime
	ldrb r0, [r7,#3]
	ldr r1, off_80F5D6C // =byte_80F5D70 
	ldrb r0, [r1,r0]
	strh r0, [r7,#0x10]
	b locret_80F5D6A
loc_80F5D5E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5D6A
	mov r0, #0x10
	strh r0, [r7]
locret_80F5D6A:
	pop {pc}
off_80F5D6C: .word byte_80F5D70
byte_80F5D70: .byte 0x28, 0x23, 0x1E, 0x19
.endfunc // sub_80F5D3E

.func
.thumb_func
sub_80F5D74:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5D90
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	mov r0, #0xc7
	bl sound_play // () -> void
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80F5DAC
loc_80F5D90:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #5
	beq loc_80F5DA4
	cmp r0, #0
	bgt locret_80F5DAC
	mov r0, #0x14
	strh r0, [r7]
	b locret_80F5DAC
loc_80F5DA4:
	bl sub_80F622A
	bl sub_80F6254
locret_80F5DAC:
	pop {r4,pc}
.endfunc // sub_80F5D74

.func
.thumb_func
sub_80F5DAE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5DC0
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F5DD0
loc_80F5DC0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5DD0
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F5DD0:
	pop {pc}
.endfunc // sub_80F5DAE

loc_80F5DD2:
	push {r7,lr}
	ldr r1, off_80F5DE0 // =off_80F5DE4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F5DE0: .word off_80F5DE4
off_80F5DE4: .word loc_80F5E18+1
	.word sub_80F5E70+1
	.word sub_80F5E9C+1
	.word sub_80F5EBE+1
	.word sub_80F5EDE+1
	.word sub_80F5F26+1
	.word sub_80F5F98+1
	.word sub_80F5FC0+1
	.word sub_80F5FD4+1
	.word sub_80F5FF4+1
	.word sub_80F602E+1
	.word sub_80F6052+1
	.word sub_80F60A0+1
loc_80F5E18:
	push {lr}
	bl object_canMove
	beq loc_80F5E52
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F5E5C // =dword_80F5E60 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_80F5E52
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_80F5E5A
loc_80F5E52:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F5E5A:
	pop {pc}
off_80F5E5C: .word dword_80F5E60
dword_80F5E60: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80F5E70:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5E9A
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F5E9A:
	pop {pc}
.endfunc // sub_80F5E70

.func
.thumb_func
sub_80F5E9C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5EBC
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80F5EBC:
	pop {pc}
.endfunc // sub_80F5E9C

.func
.thumb_func
sub_80F5EBE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5ED0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F5EDC
loc_80F5ED0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5EDC
	mov r0, #0x10
	strh r0, [r7]
locret_80F5EDC:
	pop {pc}
.endfunc // sub_80F5EBE

.func
.thumb_func
sub_80F5EDE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5EFA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0xf
	add r0, #0xff
	bl sound_play // () -> void
	bl sub_80F62EC
loc_80F5EFA:
	ldr r2, [r7,#0x34]
	ldr r2, [r2]
	tst r2, r2
	beq loc_80F5F20
	ldrb r0, [r2,#5]
	tst r0, r0
	beq locret_80F5F24
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	strb r0, [r7,#0xe]
	strb r1, [r7,#0xf]
	cmp r1, #2
	beq loc_80F5F1A
	mov r0, #0x14
	strh r0, [r7]
	b locret_80F5F24
loc_80F5F1A:
	mov r0, #0x20 
	strh r0, [r7]
	b locret_80F5F24
loc_80F5F20:
	bl sub_8011714
locret_80F5F24:
	pop {pc}
.endfunc // sub_80F5EDE

.func
.thumb_func
sub_80F5F26:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5F38
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F5F88
loc_80F5F38:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5F88
	bl object_canMove
	beq loc_80F5F80
	ldr r0, off_80F5F8C // =dword_80F5F90 
	ldr r2, [r0]
	ldr r3, [r0,#0x4] // (dword_80F5F94 - 0x80f5f90)
	ldrb r0, [r7,#0xe]
	ldr r1, [r7,#0x30]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F5F80
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #0x18
	strh r0, [r7]
	b locret_80F5F88
loc_80F5F80:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F5F88:
	pop {pc}
	.balign 4, 0x00
off_80F5F8C: .word dword_80F5F90
dword_80F5F90: .word 0x10
dword_80F5F94: .word 0xF880080
.endfunc // sub_80F5F26

.func
.thumb_func
sub_80F5F98:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5FBE
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #0x1c
	strh r0, [r7]
locret_80F5FBE:
	pop {pc}
.endfunc // sub_80F5F98

.func
.thumb_func
sub_80F5FC0:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5FD2
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x24 
	strh r0, [r7]
locret_80F5FD2:
	pop {pc}
.endfunc // sub_80F5FC0

.func
.thumb_func
sub_80F5FD4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F5FE6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F5FF2
loc_80F5FE6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F5FF2
	mov r0, #0x24 
	strh r0, [r7]
locret_80F5FF2:
	pop {pc}
.endfunc // sub_80F5FD4

.func
.thumb_func
sub_80F5FF4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6014
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	mov r0, #0xba
	bl sound_play // () -> void
	bl sub_80F6310
	b locret_80F602C
loc_80F6014:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F602C
	ldrb r0, [r7,#0xf]
	cmp r0, #2
	beq loc_80F6028
	mov r0, #0x28 
	strh r0, [r7]
	b locret_80F602C
loc_80F6028:
	mov r0, #0x30 
	strh r0, [r7]
locret_80F602C:
	pop {pc}
.endfunc // sub_80F5FF4

.func
.thumb_func
sub_80F602E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6044
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F6050
loc_80F6044:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F6050
	mov r0, #0x2c 
	strh r0, [r7]
locret_80F6050:
	pop {pc}
.endfunc // sub_80F602E

.func
.thumb_func
sub_80F6052:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6092
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F609E
loc_80F6092:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F609E
	mov r0, #0x30 
	strh r0, [r7]
locret_80F609E:
	pop {pc}
.endfunc // sub_80F6052

.func
.thumb_func
sub_80F60A0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F60B6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F60C2
loc_80F60B6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F60C2
	bl sub_8011714
locret_80F60C2:
	pop {pc}
.endfunc // sub_80F60A0

.func
.thumb_func
sub_80F60C4:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	str r0, [sp]
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	bl object_getFlag // () -> int
	ldr r1, dword_80F6364 // =0xa000 
	tst r0, r1
	bne loc_80F612C
	bl sub_800D58C
	add r4, r0, #0
	bl sub_800E2C0
	neg r0, r0
	add r0, r0, r4
	str r0, [sp,#4]
	mov r4, #1
	ldrb r0, [r5,#0x16]
	tst r0, r0
	beq loc_80F60F2
	mov r4, #6
loc_80F60F2:
	mov r6, #0
loc_80F60F4:
	ldr r0, [sp,#4]
	cmp r4, r0
	beq loc_80F6114
	add r0, r4, #0
	ldrb r1, [r5,#0x13]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	add r7, sp, #0x10
	add r7, r7, r6
	bl sub_800CF14
	add r6, r6, r0
	bl sub_800E2C0
	add r4, r4, r0
	b loc_80F60F4
loc_80F6114:
	tst r6, r6
	bne loc_80F613C
	ldr r0, [sp,#4]
	ldrb r1, [r5,#0x13]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	add r7, sp, #0x10
	bl sub_800CF14
	add r6, r0, #0
	tst r6, r6
	bne loc_80F613C
loc_80F612C:
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	add r7, sp, #0x10
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80F60C4

	add r6, r0, #0
	tst r6, r6
	beq loc_80F6150
loc_80F613C:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F6150
loc_80F6150:
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80F6154:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	push {r0}
	bl object_getFlag // () -> int
	ldr r1, dword_80F6364 // =0xa000 
	tst r0, r1
	pop {r0}
	bne loc_80F6190
	add r4, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r1, #2
	mul r0, r1
	ldrb r1, [r4,#0x12]
	add r0, r0, r1
	ldrb r1, [r4,#0x13]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80F61B2
	mov r0, #0
	b loc_80F61B2
loc_80F6190:
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
.endfunc // sub_80F6154

	add r6, r0, #0
	tst r6, r6
	beq loc_80F61B2
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80F61B2:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80F61B6:
	push {r4,r6,lr}
	sub sp, sp, #8
	str r2, [sp]
	str r3, [sp,#4]
	mov r6, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80F61C8
	mov r6, #6
loc_80F61C8:
	bl sub_800E2C0
	add r4, r0, #0
	add r0, r6, #0
	mov r1, #2
	ldr r2, [sp]
	ldr r3, [sp,#4]
	bl sub_800D0BC
.endfunc // sub_80F61B6

	tst r0, r0
	bne loc_80F61E0
	mov r0, #0
loc_80F61E0:
	add sp, sp, #8
	pop {r4,r6,pc}
.func
.thumb_func
sub_80F61E4:
	push {lr}
	push {r0,r2,r3}
	bl sub_800E2C0
	add r1, r0, #0
	neg r1, r1
	pop {r0,r2,r3}
	add r0, r0, r1
	mov r1, #2
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F61E4

	tst r0, r0
	pop {r0,r1}
	bne locret_80F6204
	mov r0, #0
locret_80F6204:
	pop {pc}
	push {r6,lr}
	add r6, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r1, #2
	mul r0, r1
	ldrb r1, [r6,#0x12]
	add r0, r0, r1
	ldrb r1, [r6,#0x13]
	push {r0,r1}
	bl object_isCurrentPanelValid
	tst r0, r0
	pop {r0,r1}
	bne locret_80F6228
	mov r0, #0
locret_80F6228:
	pop {r6,pc}
.func
.thumb_func
sub_80F622A:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F624C // =0x705ff04 
	ldr r6, [r7,#8]
	ldr r7, dword_80F6250 // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80F624C: .word 0x705FF04
dword_80F6250: .word 0x3
.endfunc // sub_80F622A

.func
.thumb_func
sub_80F6254:
	push {r4,lr}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x64 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x18
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,pc}
.endfunc // sub_80F6254

	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	add r6, r7, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F62D8 // =dword_80F62DC 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
	add r4, r0, #0
	tst r4, r4
	beq loc_80F62D4
	add r0, sp, #0
	add r1, r4, #0
	add r2, r4, #0
	bl sub_8000C72
	add r7, r6, #0
	mov r6, #0
loc_80F62AC:
	add r0, sp, #0
	ldrb r0, [r0,r6]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	push {r4,r6,r7}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x2c]
	bl sub_80D1182
	pop {r4,r6,r7}
	add r6, #1
	cmp r6, r4
	bge loc_80F62D2
	ldrb r0, [r7,#0xc]
	cmp r6, r0
	blt loc_80F62AC
loc_80F62D2:
	add r0, r6, #0
loc_80F62D4:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
off_80F62D8: .word dword_80F62DC
dword_80F62DC: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80F62EC:
	push {r4,r6,lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80F6308 // =byte_80F630C 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#0x34]
	bl sub_80D16D6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F6308: .word byte_80F630C
byte_80F630C: .byte 0x1, 0x1, 0x6, 0x1
.endfunc // sub_80F62EC

.func
.thumb_func
sub_80F6310:
	push {r4,r6,lr}
	mov r6, #1
loc_80F6314:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r6
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r7,#0xf]
	sub r1, #1
	ldr r2, off_80F635C // =dword_80F6360 
	add r1, r1, r2
	mov r3, #0
	ldrsb r2, [r1,r3]
	mul r2, r6
	ldrb r1, [r5,#0x13]
	add r1, r1, r2
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq locret_80F6358
	push {r6}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#0xf]
	sub r4, #1
	ldrh r3, [r7,#0x10]
	lsl r3, r3, #8
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80D18AE
	pop {r6}
	add r6, #1
	cmp r6, #5
	ble loc_80F6314
locret_80F6358:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F635C: .word dword_80F6360
dword_80F6360: .word 0x100FF
dword_80F6364: .word 0xA000
dword_80F6368: .word 0x1010508, 0x1000005, 0x10013E8, 0x15DC0032, 0x500101
	.word 0x10217D0, 0x17D000A0, 0xA00103, 0x10417D0, 0x17D000A0
	.word 0xA00105
dword_80F6394: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80F6454: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80F648C+1
	.word loc_80F6724+1
	.word loc_80F68C4+1
	.word loc_80F6BEA+1
	.word loc_80F6DE4+1
	.word loc_80F66EC+1
.endfunc // sub_80F6310

loc_80F648C:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80F64A4 // =off_80F64A8 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.balign 4, 0x00
off_80F64A4: .word off_80F64A8
off_80F64A8: .word sub_80F64B0+1
	.word sub_80F64E6+1
.func
.thumb_func
sub_80F64B0:
	push {r4,r6,lr}
	ldrb r0, [r6,#4]
	cmp r0, #5
	bge loc_80F64D6
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
	ldrb r0, [r6,#5]
	mov r1, #1
	eor r1, r0
	strb r1, [r6,#5]
	tst r0, r0
	bne loc_80F64D0
	bl sub_80F65C4
	b loc_80F64E0
loc_80F64D0:
	bl sub_80F661E
	b loc_80F64E0
loc_80F64D6:
	mov r0, #0
	strb r0, [r6,#4]
	bl sub_80F65EE
	b loc_80F64E0
loc_80F64E0:
	mov r0, #4
	strb r0, [r6]
	pop {r4,r6,pc}
.endfunc // sub_80F64B0

.func
.thumb_func
sub_80F64E6:
	push {r4,r6,lr}
	mov r0, #0xd
	bl sub_8011680
	mov r1, #0
	strb r1, [r6]
	pop {r4,r6,pc}
.endfunc // sub_80F64E6

.func
.thumb_func
sub_80F64F4:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	str r0, [r5,#0x60]
	str r1, [r5,#0x64]
	mov r1, #0x35 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	pop {pc}
.endfunc // sub_80F64F4

.func
.thumb_func
sub_80F650A:
	push {lr}
	ldr r0, [r5,#0x60]
	ldr r1, [r5,#0x64]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	mov r0, #1
	ldr r1, [r5,#0x58]
	strh r0, [r1,#0x38]
	pop {pc}
.endfunc // sub_80F650A

.func
.thumb_func
sub_80F651C:
	push {r4,lr}
	ldr r0, [r5,#0x54]
	mov r1, #0x80
	ldrh r4, [r0,r1]
	tst r4, r4
	beq locret_80F6548
	ldr r0, off_80F66D8 // =0x100 
	bl sub_801A176
	bl sub_800FE36
	lsl r0, r0, #2
	ldr r1, off_80F654C // =off_80F6550 
	ldr r0, [r1,r0]
	cmp r4, r0
	bge loc_80F6542
	bl sub_800EABA
	b locret_80F6548
loc_80F6542:
	mov r0, #4
	bl sub_801A16C
locret_80F6548:
	pop {r4,pc}
	.balign 4, 0x00
off_80F654C: .word off_80F6550
off_80F6550: .word 0x28
	.word 0x28
	.word 0x28
	.word 0x28
.endfunc // sub_80F651C

.func
.thumb_func
sub_80F6560:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #0x35 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.endfunc // sub_80F6560

.func
.thumb_func
sub_80F6592:
	push {lr}
	ldr r0, off_80F659C // =dword_80F65A0 
	bl sub_800FE28
	pop {pc}
off_80F659C: .word dword_80F65A0
dword_80F65A0: .word 0x3C3C3C3C
.endfunc // sub_80F6592

.func
.thumb_func
sub_80F65A4:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	ldr r0, off_80F66DC // =sub_80F6FD0+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
	pop {pc}
.endfunc // sub_80F65A4

.func
.thumb_func
sub_80F65C4:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_80F663C
	ldr r0, off_80F66E0 // =sub_80F6FD0+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F65C4

.func
.thumb_func
sub_80F65EE:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80F663C
	bl sub_80F6592
	strh r0, [r7,#0x18]
	ldr r0, off_80F66E4 // =sub_80F6FEC+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F65EE

.func
.thumb_func
sub_80F661E:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80F663C
	ldr r0, off_80F66E8 // =sub_80F70A0+1 
	str r0, [r7,#0x28]
	mov r0, #0xc
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F661E

.func
.thumb_func
sub_80F663C:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F6690 // =dword_80F669C 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F66B4 // =dword_80F66C0 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_80F663C

	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F6690 // =dword_80F669C 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F66B4 // =dword_80F66C0 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
off_80F6690: .word dword_80F669C
	.word dword_80F66A4
	.word dword_80F66AC
dword_80F669C: .word 0x960064, 0x12C012C
dword_80F66A4: .word 0x500032, 0xA000A0
dword_80F66AC: .word 0x820050, 0x1040104
off_80F66B4: .word dword_80F66C0
	.word dword_80F66C8
	.word dword_80F66D0
dword_80F66C0: .word 0xA000A
	.word 0xA000A
dword_80F66C8: .word 0xA000A
	.word 0xA000A
dword_80F66D0: .word 0xA000A
	.word 0xA000A
off_80F66D8: .word 0x100
off_80F66DC: .word sub_80F6FD0+1
off_80F66E0: .word sub_80F6FD0+1
off_80F66E4: .word sub_80F6FEC+1
off_80F66E8: .word sub_80F70A0+1
loc_80F66EC:
	push {r7,lr}
	ldr r1, off_80F66FC // =off_80F6700 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F66FC: .word off_80F6700
off_80F6700: .word sub_80F6704+1
.func
.thumb_func
sub_80F6704:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6716
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	b locret_80F6722
loc_80F6716:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F6722
	bl sub_8011714
locret_80F6722:
	pop {pc}
.endfunc // sub_80F6704

loc_80F6724:
	push {r7,lr}
	ldr r1, off_80F6734 // =off_80F6738 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F6734: .word off_80F6738
off_80F6738: .word sub_80F6748+1
	.word sub_80F678E+1
	.word sub_80F67B6+1
	.word sub_80F6880+1
.func
.thumb_func
sub_80F6748:
	push {lr}
	bl object_canMove
	beq loc_80F6784
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r1, r1
	beq loc_80F6784
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r7,#0x30]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_80F678C
loc_80F6784:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F678C:
	pop {pc}
.endfunc // sub_80F6748

.func
.thumb_func
sub_80F678E:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F67B4
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl sub_80F7154
	mov r0, #8
	strh r0, [r7]
locret_80F67B4:
	pop {pc}
.endfunc // sub_80F678E

.func
.thumb_func
sub_80F67B6:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F67E4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #9
	bl sub_80F7500
	str r0, [r7,#0x30]
	ldrb r0, [r5,#0x16]
	ldr r1, off_80F686C // =dword_80F6870 
	ldrb r0, [r1,r0]
	ldrb r1, [r7,#3]
	lsl r1, r1, #2
	ldr r2, off_80F6858 // =dword_80F685C 
	ldr r1, [r2,r1]
	bl sub_80F70E0
	str r0, [r5,#0x40]
	strh r1, [r7,#0x10]
loc_80F67E4:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_80F716E
.endfunc // sub_80F67B6

	tst r0, r0
	beq loc_80F684C
	ldrb r4, [r5,#0x12]
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80F6874 // =dword_80F6878 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80F680A
	bl sub_801A074 // () -> void
loc_80F680A:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80F681E
	mov r0, #1
	bl sub_801A07C
loc_80F681E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F6854
	ldr r0, [r7,#0x30]
	bl sub_80F7514
	bl sub_80F7140
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
	b locret_80F6854
loc_80F684C:
	bl sub_80F7520
	mov r0, #0xc
	strh r0, [r7]
locret_80F6854:
	pop {r4,pc}
	.balign 4, 0x00
off_80F6858: .word dword_80F685C
dword_80F685C: .word 0x25000, 0x30000, 0x35000, 0x40000
off_80F686C: .word dword_80F6870
dword_80F6870: .word 0x7
off_80F6874: .word dword_80F6878
dword_80F6878: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80F6880:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6896
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F68C2
loc_80F6896:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F68C2
	ldr r0, [r7,#0x30]
	bl sub_80F7514
	bl sub_80F7140
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80F68C2:
	pop {pc}
.endfunc // sub_80F6880

loc_80F68C4:
	push {r7,lr}
	ldr r1, off_80F68D4 // =off_80F68D8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F68D4: .word off_80F68D8
off_80F68D8: .word sub_80F68F8+1
	.word loc_80F6908+1
	.word sub_80F695C+1
	.word sub_80F6994+1
	.word sub_80F6A5C+1
	.word sub_80F6ABC+1
	.word sub_80F6B94+1
	.word sub_80F6BB8+1
.func
.thumb_func
sub_80F68F8:
	push {lr}
	mov r0, #0
	strb r0, [r7,#0xd]
	mov r0, #0
	str r0, [r7,#0x30]
	mov r0, #4
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80F68F8

loc_80F6908:
	push {lr}
	bl object_canMove
	beq loc_80F6946
	ldr r1, off_80F6950 // =dword_80F6954 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_80F6958 - 0x80f6954)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r1, r1
	beq loc_80F6946
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
	b locret_80F694E
loc_80F6946:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F694E:
	pop {pc}
off_80F6950: .word dword_80F6954
dword_80F6954: .word 0x10
dword_80F6958: .word 0xF880080
.func
.thumb_func
sub_80F695C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F6992
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl sub_80F7154
	ldrb r0, [r7,#0xd]
	tst r0, r0
	bne loc_80F698E
	bl sub_80F73CA
	mov r0, #0xc
	strh r0, [r7]
	b locret_80F6992
loc_80F698E:
	mov r0, #0x14
	strh r0, [r7]
locret_80F6992:
	pop {pc}
.endfunc // sub_80F695C

.func
.thumb_func
sub_80F6994:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F69E4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xa
	bl sub_80F7500
	str r0, [r7,#0x30]
	mov r1, #0x51 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r7,#8]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	mov r0, #9
	add r0, r0, r5
	mov r1, #0xff
	mov r4, #1
	bl sub_80D4C0A
	ldrb r0, [r5,#0x16]
	ldr r1, off_80F6A48 // =dword_80F6A4C 
	ldrb r0, [r1,r0]
	ldrb r1, [r7,#3]
	lsl r1, r1, #2
	ldr r2, off_80F6A34 // =dword_80F6A38 
	ldr r1, [r2,r1]
	bl sub_80F70E0
	str r0, [r5,#0x40]
	strh r1, [r7,#0x10]
loc_80F69E4:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_80F71A8
.endfunc // sub_80F6994

	tst r0, r0
	beq loc_80F6A2C
	ldrb r4, [r5,#0x12]
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80F6A50 // =dword_80F6A54 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80F6A0A
	bl sub_801A074 // () -> void
loc_80F6A0A:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80F6A1E
	mov r0, #1
	bl sub_801A07C
loc_80F6A1E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F6A30
	mov r0, #0x10
	strh r0, [r7]
	b locret_80F6A30
loc_80F6A2C:
	mov r0, #0x1c
	strh r0, [r7]
locret_80F6A30:
	pop {r4,pc}
	.balign 4, 0x00
off_80F6A34: .word dword_80F6A38
dword_80F6A38: .word 0x20000, 0x20000, 0x20000, 0x20000
off_80F6A48: .word dword_80F6A4C
dword_80F6A4C: .word 0x502
off_80F6A50: .word dword_80F6A54
dword_80F6A54: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80F6A5C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6A80
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	mov r0, #0xe3
	bl sound_play // () -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	mov r0, #0x20 
	str r0, [r7,#0x34]
	b locret_80F6ABA
loc_80F6A80:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80F6A9C
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #7
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80F6A9C:
	ldr r0, [r7,#0x34]
	sub r0, #1
	str r0, [r7,#0x34]
	bgt loc_80F6AAE
	mov r0, #0xe3
	bl sound_play // () -> void
	mov r0, #0x20 
	str r0, [r7,#0x34]
loc_80F6AAE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F6ABA
	mov r0, #0x14
	strh r0, [r7]
locret_80F6ABA:
	pop {pc}
.endfunc // sub_80F6A5C

.func
.thumb_func
sub_80F6ABC:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6AE8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0xe4
	bl sound_play // () -> void
	ldrb r0, [r5,#0x16]
	ldr r1, off_80F6B80 // =dword_80F6B84 
	ldrb r0, [r1,r0]
	ldrb r1, [r7,#3]
	lsl r1, r1, #2
	ldr r2, off_80F6B6C // =dword_80F6B70 
	ldr r1, [r2,r1]
	bl sub_80F70E0
	str r0, [r5,#0x40]
	strh r1, [r7,#0x10]
loc_80F6AE8:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_80F71A8
.endfunc // sub_80F6ABC

	tst r0, r0
	beq loc_80F6B54
	ldrb r4, [r5,#0x12]
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80F6B88 // =dword_80F6B8C 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80F6B0E
	bl sub_801A074 // () -> void
loc_80F6B0E:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80F6B22
	mov r0, #1
	bl sub_801A07C
loc_80F6B22:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F6B68
	ldrb r0, [r7,#0xd]
	add r0, #1
	strb r0, [r7,#0xd]
	cmp r0, #5
	bge loc_80F6B5A
	bl sub_80F7140
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #4
	strh r0, [r7]
	b locret_80F6B68
loc_80F6B54:
	mov r0, #0x1c
	strh r0, [r7]
	b locret_80F6B68
loc_80F6B5A:
	ldr r0, [r7,#0x30]
	bl sub_80F7514
	bl sub_80F7140
	mov r0, #0x18
	strh r0, [r7]
locret_80F6B68:
	pop {r4,pc}
	.balign 4, 0x00
off_80F6B6C: .word dword_80F6B70
dword_80F6B70: .word 0x80000, 0x90000, 0xA0000, 0xB0000
off_80F6B80: .word dword_80F6B84
dword_80F6B84: .word 0x7
off_80F6B88: .word dword_80F6B8C
dword_80F6B8C: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80F6B94:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6BA6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F6BB6
loc_80F6BA6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F6BB6
	bl sub_80F73FA
	bl sub_8011714
locret_80F6BB6:
	pop {pc}
.endfunc // sub_80F6B94

.func
.thumb_func
sub_80F6BB8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6BCE
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F6BE8
loc_80F6BCE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F6BE8
	ldr r0, [r7,#0x30]
	bl sub_80F7514
	bl sub_80F7140
	bl sub_80F73FA
	bl sub_8011714
locret_80F6BE8:
	pop {pc}
.endfunc // sub_80F6BB8

loc_80F6BEA:
	push {r7,lr}
	ldr r1, off_80F6BF8 // =off_80F6BFC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F6BF8: .word off_80F6BFC
off_80F6BFC: .word sub_80F6C10+1
	.word loc_80F6C1C+1
	.word sub_80F6C76+1
	.word sub_80F6C96+1
	.word sub_80F6DA0+1
.func
.thumb_func
sub_80F6C10:
	push {lr}
	mov r0, #0
	strb r0, [r7,#0xe]
	mov r0, #4
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80F6C10

loc_80F6C1C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6C5E
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F6C6C
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r1, r1
	beq loc_80F6C6C
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	strb r0, [r7,#0xd]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F6C74
loc_80F6C5E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F6C74
	mov r0, #8
	strh r0, [r7]
	b locret_80F6C74
loc_80F6C6C:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F6C74:
	pop {pc}
.func
.thumb_func
sub_80F6C76:
	push {lr}
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl sub_80F7154
	mov r0, #0xc
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80F6C76

.func
.thumb_func
sub_80F6C96:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6CBC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x16]
	ldr r1, off_80F6D8C // =dword_80F6D90 
	ldrb r0, [r1,r0]
	ldrb r1, [r7,#3]
	lsl r1, r1, #2
	ldr r2, off_80F6D78 // =dword_80F6D7C 
	ldr r1, [r2,r1]
	bl sub_80F70E0
	str r0, [r5,#0x40]
	strh r1, [r7,#0x10]
loc_80F6CBC:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r6, r0, #0
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	push {r0,r1}
	bl sub_80F716E
.endfunc // sub_80F6C96

	tst r0, r0
	pop {r0,r1}
	beq loc_80F6D6C
	cmp r6, r1
	beq loc_80F6D10
	add r2, r6, #0
	bl sub_800E708
	cmp r0, #0
	beq loc_80F6D10
	bl sub_80F71E0
	tst r0, r0
	beq loc_80F6D10
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x47 
	add r0, #0xff
	bl sound_play // () -> void
	mov r4, #0
	mov r3, #1
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0xb
	lsl r3, r3, #0x10
	orr r4, r3
	bl sub_80E7BD8
loc_80F6D10:
	ldrb r4, [r5,#0x12]
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80F6D94 // =dword_80F6D98 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80F6D26
	bl sub_801A074 // () -> void
loc_80F6D26:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80F6D3A
	mov r0, #1
	bl sub_801A07C
loc_80F6D3A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F6D74
	bl sub_80F7140
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	ldrb r0, [r7,#0xe]
	add r0, #1
	strb r0, [r7,#0xe]
	cmp r0, #5
	bge loc_80F6D6C
	mov r0, #4
	strh r0, [r7]
	b locret_80F6D74
loc_80F6D6C:
	bl sub_80F7520
	mov r0, #0x10
	strh r0, [r7]
locret_80F6D74:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F6D78: .word dword_80F6D7C
dword_80F6D7C: .word 0x30000, 0x38000, 0x40000, 0x48000
off_80F6D8C: .word dword_80F6D90
dword_80F6D90: .word 0x7
off_80F6D94: .word dword_80F6D98
dword_80F6D98: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80F6DA0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6DB6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F6DE2
loc_80F6DB6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F6DE2
	ldr r0, [r7,#0x30]
	bl sub_80F7514
	bl sub_80F7140
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
locret_80F6DE2:
	pop {pc}
.endfunc // sub_80F6DA0

loc_80F6DE4:
	push {r7,lr}
	ldr r1, off_80F6DF4 // =off_80F6DF8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F6DF4: .word off_80F6DF8
off_80F6DF8: .word sub_80F6E0C+1
	.word loc_80F6E20+1
	.word sub_80F6E76+1
	.word sub_80F6EA6+1
	.word sub_80F6F7C+1
.func
.thumb_func
sub_80F6E0C:
	push {lr}
	mov r0, #0
	strb r0, [r7,#0xc]
	mov r0, #0
	strb r0, [r7,#0xd]
	mov r0, #0
	str r0, [r7,#0x30]
	mov r0, #4
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80F6E0C

loc_80F6E20:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6E5E
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F6E6C
	ldrb r0, [r7,#0xc]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r1, r1
	beq loc_80F6E6C
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F6E74
loc_80F6E5E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F6E74
	mov r0, #8
	strh r0, [r7]
	b locret_80F6E74
loc_80F6E6C:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F6E74:
	pop {pc}
.func
.thumb_func
sub_80F6E76:
	push {lr}
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl sub_80F7154
	ldr r0, [r7,#8]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	mov r0, #0xc
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80F6E76

.func
.thumb_func
sub_80F6EA6:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6ED0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0xe3
	bl sound_play // () -> void
	bl sub_80F742E
	mov r0, #0xc
	bl sub_80F7500
	str r0, [r7,#0x30]
	bl sub_80F710A
	str r0, [r5,#0x40]
	strh r1, [r7,#0x10]
loc_80F6ED0:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r6, r0, #0
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	push {r0,r1}
	bl sub_80F716E
.endfunc // sub_80F6EA6

	tst r0, r0
	pop {r0,r1}
	beq loc_80F6F66
	ldrb r4, [r5,#0x12]
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80F6F70 // =dword_80F6F74 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80F6F04
	bl sub_801A074 // () -> void
loc_80F6F04:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80F6F18
	mov r0, #1
	bl sub_801A07C
loc_80F6F18:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80F6F6E
	ldr r0, [r7,#0x30]
	bl sub_80F7514
	bl sub_80F7140
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	ldrb r0, [r7,#0xd]
	add r0, #1
	strb r0, [r7,#0xd]
	cmp r0, #5
	bge loc_80F6F66
	bl sub_8001532
	mov r1, #7
	and r0, r1
	ldrb r1, [r7,#0xc]
	cmp r0, r1
	bne loc_80F6F5E
	add r0, #1
	mov r1, #7
	and r0, r1
loc_80F6F5E:
	strb r0, [r7,#0xc]
	mov r0, #4
	strh r0, [r7]
	b locret_80F6F6E
loc_80F6F66:
	bl sub_80F7520
	mov r0, #0x10
	strh r0, [r7]
locret_80F6F6E:
	pop {r4,r6,pc}
off_80F6F70: .word dword_80F6F74
dword_80F6F74: .word 0x5800000, 0xA800000
.func
.thumb_func
sub_80F6F7C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F6F92
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F6FCE
loc_80F6F92:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F6FCE
	ldr r0, [r7,#0x30]
	bl sub_80F7514
	bl sub_80F7140
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	bl sub_8011714
locret_80F6FCE:
	pop {pc}
.endfunc // sub_80F6F7C

.func
.thumb_func
sub_80F6FD0:
	push {lr}
	add r2, r0, #0
	mov r0, #0
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80F6FDE
	mov r0, #7
loc_80F6FDE:
	ldrb r1, [r2,#0x13]
	cmp r1, #1
	blt loc_80F6FE8
	cmp r1, #3
	ble locret_80F6FEA
loc_80F6FE8:
	mov r1, #0
locret_80F6FEA:
	pop {pc}
.endfunc // sub_80F6FD0

.func
.thumb_func
sub_80F6FEC:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x10
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r0, [r0,#0x13]
	str r0, [sp,#8]
	bl object_getFlag // () -> int
	ldr r1, dword_80F709C // =0xa000 
	tst r0, r1
	bne loc_80F7056
	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80F700C
	mov r0, #6
loc_80F700C:
	ldr r1, [sp,#8]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80F7088
	mov r4, #1
	neg r4, r4
	mov r6, #0
loc_80F7024:
	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80F702E
	mov r0, #6
loc_80F702E:
	ldr r1, [sp,#8]
	add r1, r1, r4
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F704C
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0xc
	strb r0, [r1,r6]
	add r6, #1
loc_80F704C:
	add r4, #2
	cmp r4, #1
	ble loc_80F7024
	tst r6, r6
	bne loc_80F7070
loc_80F7056:
	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80F7060
	mov r0, #6
loc_80F7060:
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #0xc
	bl sub_800CFDC
.endfunc // sub_80F6FEC

	add r6, r0, #0
	tst r6, r6
	beq loc_80F7084
loc_80F7070:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F7088
loc_80F7084:
	mov r1, #0
	b loc_80F7096
loc_80F7088:
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	add r2, r0, #0
	pop {r0,r1}
	add r0, r0, r2
loc_80F7096:
	add sp, sp, #0x10
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80F709C: .word 0xA000
.func
.thumb_func
sub_80F70A0:
	push {lr}
	lsl r0, r0, #1
	ldr r1, off_80F70CC // =byte_80F70D0 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80F70B6
	mov r2, #7
	sub r0, r2, r0
loc_80F70B6:
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	neg r2, r2
	mov r3, #3
	mul r2, r3
	pop {r0,r1}
	add r0, r0, r2
	pop {pc}
	.balign 4, 0x00
off_80F70CC: .word byte_80F70D0
byte_80F70D0: .byte 0x3, 0x2, 0x3, 0x1, 0x3, 0x3, 0x1, 0x2, 0x3, 0x2, 0x1, 0x3, 0x1, 0x3, 0x3, 0x2
.endfunc // sub_80F70A0

.func
.thumb_func
sub_80F70E0:
	push {r4,lr}
	add r4, r1, #0
	ldrb r2, [r5,#0x12]
	sub r2, r2, r0
	cmp r2, #0
	blt loc_80F70EE
	neg r1, r1
loc_80F70EE:
	add r0, r1, #0
	cmp r2, #0
	bge loc_80F70F6
	neg r2, r2
loc_80F70F6:
	mov r3, #0x28 
	lsl r3, r3, #0x10
	mul r3, r2
	push {r0}
	add r0, r3, #0
	add r1, r4, #0
	svc 6
	add r1, r0, #0
	pop {r0}
	pop {r4,pc}
.endfunc // sub_80F70E0

.func
.thumb_func
sub_80F710A:
	push {r4,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r7,#3]
	lsl r0, r0, #2
	ldr r1, off_80F712C // =dword_80F7130 
	ldr r1, [r1,r0]
	mul r4, r1
	mov r0, #9
	mov r2, #0x28 
	lsl r2, r2, #0x10
	mul r0, r2
	svc 6
	add r1, r0, #0
	add r0, r4, #0
	pop {r4,pc}
off_80F712C: .word dword_80F7130
dword_80F7130: .word 0x30000, 0x38000, 0x40000, 0x48000
.endfunc // sub_80F710A

.func
.thumb_func
sub_80F7140:
	push {lr}
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	bl sub_8002F90 // () -> void
	bl sub_801A074 // () -> void
	bl sub_801DD34
	pop {pc}
.endfunc // sub_80F7140

.func
.thumb_func
sub_80F7154:
	push {lr}
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_8002E3C
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	pop {pc}
.endfunc // sub_80F7154

.func
.thumb_func
sub_80F716E:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	ldr r3, off_80F719C // =dword_80F71A0 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80F71A4 - 0x80f71a0)
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F716E

	tst r0, r0
	pop {r0,r1}
	bne locret_80F7198
	bl object_isValidPanel
	tst r0, r0
	bne loc_80F7196
	mov r0, #1
	b locret_80F7198
loc_80F7196:
	mov r0, #0
locret_80F7198:
	pop {pc}
	.balign 4, 0x00
off_80F719C: .word dword_80F71A0
dword_80F71A0: .word 0x10010
dword_80F71A4: .word 0x800000
.func
.thumb_func
sub_80F71A8:
	push {lr}
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x38]
	bl sub_800E258
	ldr r3, off_80F71D4 // =dword_80F71D8 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80F71DC - 0x80f71d8)
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F71A8

	tst r0, r0
	pop {r0,r1}
	bne locret_80F71D2
	bl object_isValidPanel
	tst r0, r0
	bne loc_80F71D0
	mov r0, #1
	b locret_80F71D2
loc_80F71D0:
	mov r0, #0
locret_80F71D2:
	pop {pc}
off_80F71D4: .word dword_80F71D8
dword_80F71D8: .word 0x10010
dword_80F71DC: .word 0x0
.func
.thumb_func
sub_80F71E0:
	push {r4,lr}
	mov r4, #0
	ldrb r0, [r7,#0xd]
	cmp r0, #3
	bge loc_80F7216
	ldrb r1, [r5,#0x16]
	mov r2, #3
	mul r1, r2
	add r0, r0, r1
	ldr r1, off_80F721C // =dword_80F7220 
	ldrb r0, [r1,r0]
	ldrb r1, [r5,#0x12]
	cmp r0, r1
	bne loc_80F7216
	ldrb r0, [r7,#3]
	mov r1, #3
	mul r0, r1
	ldrb r1, [r7,#0xd]
	add r0, r0, r1
	ldr r1, off_80F7228 // =byte_80F722C 
	ldrb r0, [r1,r0]
	bl sub_80F7238
	ldrb r0, [r7,#0xd]
	add r0, #1
	strb r0, [r7,#0xd]
	mov r4, #1
loc_80F7216:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F721C: .word dword_80F7220
dword_80F7220: .word 0x4050403, 0x203
off_80F7228: .word byte_80F722C
byte_80F722C: .byte 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x2, 0x2
.endfunc // sub_80F71E0

.func
.thumb_func
sub_80F7238:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x2c
	str r0, [sp]
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	str r0, [sp,#4]
	str r1, [sp,#8]
	mov r0, #0
	str r0, [sp,#0xc]
	str r0, [sp,#0x10]
	mov r6, #0
	ldr r0, [sp,#4]
	ldr r1, [sp,#8]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80F7394 // =dword_80F7398 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F7238

	tst r0, r0
	pop {r0,r1}
	beq loc_80F7278
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x14
	strb r0, [r1,r6]
	add r6, #1
	str r6, [sp,#0xc]
loc_80F7278:
	mov r4, #0
	mov r6, #0
loc_80F727C:
	ldr r2, off_80F737C // =byte_80F7380 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80F7381 - 0x80f7380)
	ldrsb r1, [r2,r1]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r0, r0, r2
	add r1, r1, r3
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80F7394 // =dword_80F7398 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F72BA
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x14
	ldr r2, [sp,#0xc]
	add r1, r1, r2
	strb r0, [r1,r6]
	add r6, #1
loc_80F72BA:
	add r4, #1
	cmp r4, #8
	blt loc_80F727C
	str r6, [sp,#0x10]
	mov r4, #0
loc_80F72C4:
	ldr r2, off_80F737C // =byte_80F7380 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80F7381 - 0x80f7380)
	ldrsb r1, [r2,r1]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB1C
	add r4, #1
	cmp r4, #9
	blt loc_80F72C4
	add r4, r7, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F73A8 // =dword_80F73AC 
	add r1, r1, r0
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0x14
	ldr r0, [sp,#0xc]
	add r7, r7, r0
	ldr r0, [sp,#0x10]
	add r7, r7, r0
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	add r7, r4, #0
	mov r4, #0
loc_80F7308:
	ldr r2, off_80F737C // =byte_80F7380 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80F7381 - 0x80f7380)
	ldrsb r1, [r2,r1]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB46
	add r4, #1
	cmp r4, #9
	blt loc_80F7308
	ldr r0, [sp,#0x10]
	cmp r0, #1
	ble loc_80F733E
	add r0, sp, #0x14
	ldr r1, [sp,#0xc]
	add r0, r0, r1
	ldr r1, [sp,#0x10]
	add r2, r1, #0
	bl sub_8000C72
loc_80F733E:
	cmp r6, #1
	ble loc_80F7354
	add r0, sp, #0x14
	ldr r1, [sp,#0xc]
	add r0, r0, r1
	ldr r1, [sp,#0x10]
	add r0, r0, r1
	add r1, r6, #0
	add r2, r6, #0
	bl sub_8000C72
loc_80F7354:
	mov r4, #0
	ldr r0, [sp,#0xc]
	ldr r1, [sp,#0x10]
	add r0, r0, r1
	add r6, r6, r0
loc_80F735E:
	cmp r6, r4
	ble loc_80F7378
	add r0, sp, #0x14
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_80F73BC
	add r4, #1
	ldr r0, [sp]
	cmp r4, r0
	blt loc_80F735E
loc_80F7378:
	add sp, sp, #0x2c
	pop {r4,r6,r7,pc}
off_80F737C: .word byte_80F7380
byte_80F7380: .byte 0xFF
byte_80F7381: .byte 0xFF
	.hword 0x1FF
	.word 0x101FF01, 0xFF0000FF, 0x1000001, 0x0
off_80F7394: .word dword_80F7398
dword_80F7398: .word 0x10020, 0x0
	.word 0x10000, 0x20
off_80F73A8: .word dword_80F73AC
dword_80F73AC: .word 0x10020, 0x80, 0x10000, 0xA0
.func
.thumb_func
sub_80F73BC:
	push {r4,r6,lr}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	bl sub_80D5EB0
	pop {r4,r6,pc}
.endfunc // sub_80F73BC

.func
.thumb_func
sub_80F73CA:
	push {r4,r6,lr}
	mov r6, #1
loc_80F73CE:
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mul r0, r6
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	push {r6,r7}
	ldrb r4, [r7,#3]
	sub r6, #1
	lsl r6, r6, #8
	orr r4, r6
	ldr r6, [r7,#8]
	ldrh r7, [r7,#0x18]
	bl sub_80D61A8
	pop {r6,r7}
	add r6, #1
	cmp r6, #3
	ble loc_80F73CE
	pop {r4,r6,pc}
.endfunc // sub_80F73CA

.func
.thumb_func
sub_80F73FA:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r1, #0x35 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.endfunc // sub_80F73FA

.func
.thumb_func
sub_80F742E:
	push {r4,r6,lr}
	mov r4, #0
loc_80F7432:
	ldrb r0, [r7,#0xc]
	mov r1, #6
	mul r0, r1
	ldr r2, off_80F7474 // =byte_80F7478 
	add r2, r2, r0
	mov r0, #3
	mul r0, r4
	add r2, r2, r0
	ldrb r0, [r2]
	ldrb r1, [r2,#1]
	ldrb r6, [r2,#2]
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80F7452
	mov r2, #7
	sub r0, r2, r0
loc_80F7452:
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	neg r2, r2
	mov r3, #3
	mul r2, r3
	pop {r0,r1}
	add r0, r0, r2
	add r2, r4, #0
	add r3, r6, #0
	bl sub_80F74A8
	add r4, #1
	cmp r4, #2
	blt loc_80F7432
	pop {r4,r6,pc}
off_80F7474: .word byte_80F7478
byte_80F7478: .byte 0x1, 0x1, 0x0, 0x1, 0x3, 0x0, 0x1, 0x2, 0x0, 0x3, 0x3, 0x0, 0x1, 0x1, 0x0, 0x2, 0x2
	.byte 0x0, 0x2, 0x3, 0x0, 0x3, 0x1, 0x0, 0x1, 0x1, 0x0, 0x2, 0x3, 0x0, 0x3, 0x1, 0x0, 0x2
	.byte 0x2, 0x0, 0x2, 0x1, 0x0, 0x3, 0x2, 0x0, 0x1, 0x1, 0x0, 0x2, 0x3, 0x0
.endfunc // sub_80F742E

.func
.thumb_func
sub_80F74A8:
	push {r4,r6,lr}
	add r6, r2, #0
	lsl r6, r6, #8
	ldrb r4, [r7,#3]
	orr r4, r6
	lsl r3, r3, #0x10
	orr r4, r3
	lsl r2, r2, #4
	ldrb r3, [r7,#3]
	lsl r3, r3, #2
	add r3, r3, r2
	ldr r6, off_80F74CC // =byte_80F74D0 
	ldr r6, [r6,r3]
	ldrb r2, [r7,#2]
	bl sub_80D63FC
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F74CC: .word byte_80F74D0
byte_80F74D0: .byte 0x1E, 0x0, 0xA, 0x0, 0x32, 0x0, 0xA, 0x0, 0x64, 0x0, 0xA, 0x0
	.byte 0x64, 0x0, 0xA, 0x0, 0x1E, 0x0, 0xA, 0x0, 0x32, 0x0, 0xA, 0x0
	.byte 0x64, 0x0, 0xA, 0x0, 0x64, 0x0, 0xA, 0x0, 0x1E, 0x0, 0xA, 0x0
	.byte 0x32, 0x0, 0xA, 0x0, 0x64, 0x0, 0xA, 0x0, 0x64, 0x0, 0xA, 0x0
.endfunc // sub_80F74A8

.func
.thumb_func
sub_80F7500:
	push {r4,lr}
	mov r4, #0
	mov r3, #0
	lsl r3, r3, #8
	orr r4, r3
	lsl r0, r0, #0x10
	orr r4, r0
	bl sub_80E7BD8
	pop {r4,pc}
.endfunc // sub_80F7500

.func
.thumb_func
sub_80F7514:
	push {lr}
	tst r0, r0
	beq locret_80F751E
	bl sub_80E7BF0
locret_80F751E:
	pop {pc}
.endfunc // sub_80F7514

.func
.thumb_func
sub_80F7520:
	push {r4,r6,r7,lr}
	bl sub_800E2C0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_isPanelSolid
.endfunc // sub_80F7520

	tst r0, r0
	pop {r0,r1}
	beq locret_80F7546
	mov r2, #0
	mov r3, #0
	ldr r4, dword_80F7548 // =0x4050601 
	ldr r6, [r5,#0x2c]
	ldr r7, dword_80F754C // =0x3 
	bl sub_80C536A
locret_80F7546:
	pop {r4,r6,r7,pc}
dword_80F7548: .word 0x4050601
dword_80F754C: .word 0x3
dword_80F7550: .word 0x1010608, 0x1000006, 0x2258, 0x2514000A, 0xA0001
	.word 0x226A4, 0x26A4000A, 0xA0003, 0x426A4, 0x26A4000A
	.word 0xA0005
dword_80F757C: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80F763C: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80F7670+1
	.word sub_80F79F0+1
	.word loc_80F7AD2+1
	.word loc_80F7C5E+1
	.word loc_80F7EA6+1
loc_80F7670:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80F7688 // =off_80F768C 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.balign 4, 0x00
off_80F7688: .word off_80F768C
off_80F768C: .word sub_80F7690+1
.func
.thumb_func
sub_80F7690:
	push {r4,r6,lr}
	ldrb r0, [r6,#4]
	cmp r0, #4
	blt loc_80F76A4
	mov r0, #0
	strb r0, [r6,#4]
	ldrb r0, [r6,#5]
	tst r0, r0
	beq loc_80F76C8
	b loc_80F76D2
loc_80F76A4:
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xc
	bge loc_80F76B6
	ldrb r1, [r6,#4]
	add r1, #1
	strb r1, [r6,#4]
loc_80F76B6:
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #8
	blt loc_80F76E4
	bl sub_80F7856
	b locret_80F76EA
loc_80F76C8:
	bl sub_80F7886
	mov r0, #1
	strb r0, [r6,#5]
	b locret_80F76EA
loc_80F76D2:
	bl sub_80F77E8
	tst r0, r0
	beq locret_80F76EA
	bl sub_80F78C4
	mov r0, #0
	strb r0, [r6,#5]
	b locret_80F76EA
loc_80F76E4:
	bl sub_80F7830
	b locret_80F76EA
locret_80F76EA:
	pop {r4,r6,pc}
.endfunc // sub_80F7690

	push {lr}
	pop {pc}
	push {lr}
	pop {pc}
.func
.thumb_func
sub_80F76F4:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	ldr r2, [r5,#0x58]
	add r2, #0xa0
	ldrb r0, [r2,#0x16]
	ldrb r1, [r2,#0x17]
	bl sub_801BB46
.endfunc // sub_80F76F4

	pop {pc}
.func
.thumb_func
sub_80F7732:
	push {lr}
	ldr r0, off_80F773C // =byte_80F7740 
	bl sub_800FE28
	pop {pc}
off_80F773C: .word byte_80F7740
byte_80F7740: .byte 0x1E, 0x18, 0x12, 0x12
.endfunc // sub_80F7732

.func
.thumb_func
sub_80F7744:
	push {r4,lr}
	ldr r0, off_80F7760 // =byte_80F7764 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F79E0 // =0xa000 
	tst r0, r1
	beq loc_80F775A
	add r4, #0x3c 
loc_80F775A:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
off_80F7760: .word byte_80F7764
byte_80F7764: .byte 0x1E, 0x18, 0x14, 0x10
.endfunc // sub_80F7744

.func
.thumb_func
sub_80F7768:
	push {r4,lr}
	ldr r0, off_80F7784 // =byte_80F7788 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F79E0 // =0xa000 
	tst r0, r1
	beq loc_80F777E
	add r4, #0x3c 
loc_80F777E:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F7784: .word byte_80F7788
byte_80F7788: .byte 0x1E, 0x18, 0x14, 0x10
.endfunc // sub_80F7768

.func
.thumb_func
sub_80F778C:
	push {lr}
	ldr r0, off_80F77A4 // =byte_80F77A8 
	bl sub_800FE28
	push {r0}
	ldr r0, off_80F77A4 // =byte_80F77A8 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_80F77A4: .word byte_80F77A8
byte_80F77A8: .byte 0x2, 0x3, 0x5, 0x5, 0x18, 0x12, 0xC, 0xC
.endfunc // sub_80F778C

.func
.thumb_func
sub_80F77B0:
	push {r4,lr}
	ldr r0, off_80F77CC // =byte_80F77D0 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F79E0 // =0xa000 
	tst r0, r1
	beq loc_80F77C6
	add r4, #0x3c 
loc_80F77C6:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F77CC: .word byte_80F77D0
byte_80F77D0: .byte 0x1E, 0x18, 0x14, 0x10
.endfunc // sub_80F77B0

.func
.thumb_func
sub_80F77D4:
	push {lr}
	ldr r0, off_80F77E0 // =byte_80F77E4 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_80F77E0: .word byte_80F77E4
byte_80F77E4: .byte 0x2, 0x3, 0x3, 0x3
.endfunc // sub_80F77D4

.func
.thumb_func
sub_80F77E8:
	push {r4,lr}
	mov r4, #0
loc_80F77EC:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	add r1, r4, #0
	lsl r1, r1, #1
	add r0, r0, r1
	ldr r1, off_80F7824 // =byte_80F7828 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	ldr r3, off_80F7818 // =dword_80F781C 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80F7820 - 0x80f781c)
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F77E8

	tst r0, r0
	pop {r0,r1}
	bne locret_80F7816
	add r4, #1
	cmp r4, #2
	blt loc_80F77EC
locret_80F7816:
	pop {r4,pc}
off_80F7818: .word dword_80F781C
dword_80F781C: .word 0x10
dword_80F7820: .word 0xF8800C0
off_80F7824: .word byte_80F7828
byte_80F7828: .byte 0x5, 0x2, 0x6, 0x2, 0x2, 0x2, 0x1, 0x2
.func
.thumb_func
sub_80F7830:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	ldr r0, off_80F79E4 // =sub_80F811A+1 
	str r0, [r7,#0x28]
	bl sub_80F7732
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
	pop {pc}
.endfunc // sub_80F7830

.func
.thumb_func
sub_80F7856:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #2
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80F78FA
	bl sub_80F7744
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	ldr r0, dword_80F79E8 // = 
	str r0, [r7,#0x28]
	mov r0, #0xa
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F7856

.func
.thumb_func
sub_80F7886:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #2
	strb r0, [r7,#2]
	bl sub_80F7768
	strh r0, [r7,#0x18]
	bl sub_80F778C
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	mov r0, #1
	bl sub_80F78FA
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	ldr r0, off_80F79EC // =sub_80F8256+1 
	str r0, [r7,#0x28]
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0xb
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F7886

.func
.thumb_func
sub_80F78C4:
	push {lr}
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #2
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80F78FA
	bl sub_80F77B0
	strh r0, [r7,#0x18]
	bl sub_80F77D4
	strh r0, [r7,#0xc]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F78C4

.func
.thumb_func
sub_80F78FA:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F7928 // =dword_80F7934 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F794C // =dword_80F7958 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
off_80F7928: .word dword_80F7934
	.word dword_80F793C
	.word dword_80F7944
dword_80F7934: .word 0x3C0014, 0x6E006E
dword_80F793C: .word 0x780028, 0xDC00DC
dword_80F7944: .word 0x3C0014, 0x6E006E
off_80F794C: .word dword_80F7958
	.word dword_80F7960
	.word dword_80F7968
dword_80F7958: .word 0xA000A
	.word 0xA000A
dword_80F7960: .word 0xA000A
	.word 0xA000A
dword_80F7968: .word 0xA000A
	.word 0xA000A
.endfunc // sub_80F78FA

.func
.thumb_func
sub_80F7970:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F7998 // =dword_80F79A4 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F79BC // =dword_80F79C8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F7998: .word dword_80F79A4
	.word dword_80F79AC
	.word dword_80F79B4
dword_80F79A4: .word 0x3C0014, 0x6E006E
dword_80F79AC: .word 0x780028, 0xDC00DC
dword_80F79B4: .word 0x3C0014, 0x6E006E
off_80F79BC: .word dword_80F79C8
	.word dword_80F79D0
	.word dword_80F79D8
dword_80F79C8: .word 0xA000A
	.word 0xA000A
dword_80F79D0: .word 0xA000A
	.word 0xA000A
dword_80F79D8: .word 0xA000A
	.word 0xA000A
dword_80F79E0: .word 0xA000
off_80F79E4: .word sub_80F811A+1
dword_80F79E8: .word 0x80F81C1
off_80F79EC: .word sub_80F8256+1
.endfunc // sub_80F7970

.func
.thumb_func
sub_80F79F0:
	push {r7,lr}
	ldr r1, off_80F7A00 // =off_80F7A04 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_80F7A00: .word off_80F7A04
off_80F7A04: .word sub_80F7A10+1
	.word sub_80F7A6C+1
	.word sub_80F7A98+1
.endfunc // sub_80F79F0

.func
.thumb_func
sub_80F7A10:
	push {lr}
	bl object_canMove
	beq loc_80F7A4C
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F7A58 // =dword_80F7A5C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F7A4C
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #6
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_80F7A54
loc_80F7A4C:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F7A54:
	pop {pc}
	.balign 4, 0x00
off_80F7A58: .word dword_80F7A5C
dword_80F7A5C: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80F7A10

.func
.thumb_func
sub_80F7A6C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7A96
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #8
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F7A96:
	pop {pc}
.endfunc // sub_80F7A6C

.func
.thumb_func
sub_80F7A98:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7AC4
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7AD0
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80F7AD0
loc_80F7AC4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7AD0
	bl sub_8011714
locret_80F7AD0:
	pop {pc}
.endfunc // sub_80F7A98

loc_80F7AD2:
	push {r7,lr}
	ldr r1, off_80F7AE0 // =off_80F7AE4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F7AE0: .word off_80F7AE4
off_80F7AE4: .word sub_80F7AFC+1
	.word sub_80F7B70+1
	.word sub_80F7B9C+1
	.word sub_80F7BBE+1
	.word sub_80F7BDE+1
	.word sub_80F7C3A+1
.func
.thumb_func
sub_80F7AFC:
	push {lr}
	bl object_canMove
	beq loc_80F7B52
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F7B5C // =dword_80F7B60 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F7B52
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r0, r2
	bne loc_80F7B28
	cmp r1, r3
	beq loc_80F7B48
loc_80F7B28:
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #6
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80F7B5A
loc_80F7B48:
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #0xc
	strh r0, [r7]
	b locret_80F7B5A
loc_80F7B52:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F7B5A:
	pop {pc}
off_80F7B5C: .word dword_80F7B60
dword_80F7B60: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80F7AFC

.func
.thumb_func
sub_80F7B70:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7B9A
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #8
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F7B9A:
	pop {pc}
.endfunc // sub_80F7B70

.func
.thumb_func
sub_80F7B9C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7BBC
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80F7BBC:
	pop {pc}
.endfunc // sub_80F7B9C

.func
.thumb_func
sub_80F7BBE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7BD0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F7BDC
loc_80F7BD0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7BDC
	mov r0, #0x10
	strh r0, [r7]
locret_80F7BDC:
	pop {pc}
.endfunc // sub_80F7BBE

.func
.thumb_func
sub_80F7BDE:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7BFA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F7C38
loc_80F7BFA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7C38
	mov r0, #0x14
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	bl sub_80C86B0
	push {r4}
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	mov r4, #0x2a 
	orr r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	mov r3, #0
	bl sub_80E05F6
	pop {r4}
	mov r0, #0x2e 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x14
	strh r0, [r7]
locret_80F7C38:
	pop {r4,r6,pc}
.endfunc // sub_80F7BDE

.func
.thumb_func
sub_80F7C3A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7C4C
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F7C5C
loc_80F7C4C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7C5C
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80F7C5C:
	pop {pc}
.endfunc // sub_80F7C3A

loc_80F7C5E:
	push {r7,lr}
	ldr r1, off_80F7C6C // =off_80F7C70 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F7C6C: .word off_80F7C70
off_80F7C70: .word sub_80F7C8C+1
	.word sub_80F7CF0+1
	.word sub_80F7D1C+1
	.word sub_80F7D34+1
	.word sub_80F7DBA+1
	.word sub_80F7E30+1
	.word sub_80F7E68+1
.func
.thumb_func
sub_80F7C8C:
	push {lr}
	bl object_canMove
	beq loc_80F7CCC
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F7CDC // =dword_80F7CE0 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F7CCC
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #6
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80F7CD8
loc_80F7CCC:
	mov r0, #0x1e
	strh r0, [r7,#0x18]
	mov r0, #1
	strh r0, [r7,#0x10]
	mov r0, #0x18
	strh r0, [r7]
locret_80F7CD8:
	pop {pc}
	.balign 4, 0x00
off_80F7CDC: .word dword_80F7CE0
dword_80F7CE0: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80F7C8C

.func
.thumb_func
sub_80F7CF0:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7D1A
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #8
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F7D1A:
	pop {pc}
.endfunc // sub_80F7CF0

.func
.thumb_func
sub_80F7D1C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7D32
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0
	strb r0, [r7,#0xe]
	mov r0, #0xc
	strh r0, [r7]
locret_80F7D32:
	pop {pc}
.endfunc // sub_80F7D1C

.func
.thumb_func
sub_80F7D34:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7D6E
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_80F82E2
	strb r0, [r7,#0x16]
	mov r0, #0x24 
	ldrb r1, [r7,#0xd]
	add r0, r0, r1
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	ldrb r0, [r7,#0xe]
	tst r0, r0
	bne locret_80F7DB8
	push {r4,r7}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r4, [r7,#3]
	ldr r7, [r7,#0x30]
	bl sub_80E3976
	pop {r4,r7}
	mov r0, #0xf
	strb r0, [r5,#0x10]
	b locret_80F7DB8
loc_80F7D6E:
	ldrh r0, [r7,#0x10]
	cmp r0, #0x1b
	blt loc_80F7D8A
	ldrb r1, [r7,#0xd]
	add r1, #0x1b
	cmp r0, r1
	bgt loc_80F7D8A
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80F7D8A
	bl sub_80F82B0
loc_80F7D8A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	ldrb r1, [r7,#0xd]
	add r1, #0x1b
	cmp r0, r1
	beq loc_80F7DA6
	cmp r0, #0x1b
	beq loc_80F7DAC
	cmp r0, #0
	bgt locret_80F7DB8
	mov r0, #0x10
	strh r0, [r7]
	b locret_80F7DB8
loc_80F7DA6:
	mov r0, #0x10
	strb r0, [r5,#0x10]
	b locret_80F7DB8
loc_80F7DAC:
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq locret_80F7DB8
	mov r1, #1
	strb r1, [r0,#0xb]
locret_80F7DB8:
	pop {pc}
.endfunc // sub_80F7D34

.func
.thumb_func
sub_80F7DBA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7E06
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0x8a
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r7,#0xe]
	add r0, #1
	strb r0, [r7,#0xe]
	ldrb r0, [r7,#3]
	ldr r1, off_80F7E28 // =dword_80F7E2C 
	ldrb r0, [r1,r0]
	strh r0, [r7,#0x10]
	push {r4,r6}
	add r3, r0, #0
	lsl r3, r3, #8
	ldrb r4, [r7,#3]
	orr r4, r3
	ldrb r3, [r7,#0x16]
	lsl r3, r3, #0x10
	orr r4, r3
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	bl sub_80C6EE0
	pop {r4,r6}
	b locret_80F7E26
loc_80F7E06:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7E26
	mov r0, #0x10
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	sub r0, #1
	strb r0, [r7,#0xc]
	tst r0, r0
	bne loc_80F7E22
	mov r0, #0x18
	strh r0, [r7]
	b locret_80F7E26
loc_80F7E22:
	mov r0, #0x14
	strh r0, [r7]
locret_80F7E26:
	pop {pc}
off_80F7E28: .word dword_80F7E2C
dword_80F7E2C: .word 0x50505050
.endfunc // sub_80F7DBA

.func
.thumb_func
sub_80F7E30:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7E52
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#3]
	ldr r1, off_80F7E60 // =byte_80F7E64 
	ldrb r0, [r1,r0]
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq locret_80F7E5E
	mov r1, #1
	strb r1, [r0,#0xb]
	b locret_80F7E5E
loc_80F7E52:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7E5E
	mov r0, #0xc
	strh r0, [r7]
locret_80F7E5E:
	pop {pc}
off_80F7E60: .word byte_80F7E64
byte_80F7E64: .byte 0x6, 0x6, 0x6, 0x6
.endfunc // sub_80F7E30

.func
.thumb_func
sub_80F7E68:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7E98
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq locret_80F7EA4
	mov r1, #2
	strb r1, [r0,#0xb]
	b locret_80F7EA4
loc_80F7E98:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7EA4
	bl sub_8011714
locret_80F7EA4:
	pop {pc}
.endfunc // sub_80F7E68

loc_80F7EA6:
	push {r7,lr}
	ldr r1, off_80F7EB4 // =off_80F7EB8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F7EB4: .word off_80F7EB8
off_80F7EB8: .word sub_80F7ED8+1
	.word sub_80F7F1E+1
	.word sub_80F7F7C+1
	.word sub_80F7FA2+1
	.word sub_80F7FC2+1
	.word sub_80F8014+1
	.word sub_80F803E+1
	.word sub_80F8094+1
.func
.thumb_func
sub_80F7ED8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7EF2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0x23 
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80F7F1C
loc_80F7EF2:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80F7F04
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl object_highlightPanel
loc_80F7F04:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x1e
	beq loc_80F7F18
	cmp r0, #0
	bgt locret_80F7F1C
	mov r0, #4
	strh r0, [r7]
	b locret_80F7F1C
loc_80F7F18:
	mov r0, #0x12
	strb r0, [r5,#0x10]
locret_80F7F1C:
	pop {pc}
.endfunc // sub_80F7ED8

.func
.thumb_func
sub_80F7F1E:
	push {lr}
	bl object_canMove
	beq loc_80F7F60
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldr r3, off_80F7F70 // =dword_80F7F74 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80F7F78 - 0x80f7f74)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F7F60
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #2
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #8
	strh r0, [r7]
	b locret_80F7F6C
loc_80F7F60:
	mov r0, #0x1e
	strh r0, [r7,#0x18]
	mov r0, #1
	strh r0, [r7,#0x10]
	mov r0, #0x1c
	strh r0, [r7]
locret_80F7F6C:
	pop {pc}
	.byte 0, 0
off_80F7F70: .word dword_80F7F74
dword_80F7F74: .word 0x10
dword_80F7F78: .word 0xF880080
.endfunc // sub_80F7F1E

.func
.thumb_func
sub_80F7F7C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7FA0
	mov r0, #0x18
	bl object_setCounterTime
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0xc
	strh r0, [r7]
locret_80F7FA0:
	pop {pc}
.endfunc // sub_80F7F7C

.func
.thumb_func
sub_80F7FA2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7FB4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F7FC0
loc_80F7FB4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F7FC0
	mov r0, #0x10
	strh r0, [r7]
locret_80F7FC0:
	pop {pc}
.endfunc // sub_80F7FA2

.func
.thumb_func
sub_80F7FC2:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F7FFE
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r3, off_80F800C // =byte_80F8010 
	ldrb r3, [r3,r4]
	lsl r3, r3, #0x10
	orr r4, r3
	ldrb r3, [r7,#0xc]
	lsl r3, r3, #8
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80C92CC
	ldrb r0, [r7,#3]
	ldr r1, off_80F800C // =byte_80F8010 
	ldrb r0, [r1,r0]
	mov r1, #4
	mul r1, r0
	ldrb r2, [r7,#0xc]
	mul r1, r2
	add r1, r1, r0
	strh r1, [r7,#0x10]
	b locret_80F800A
loc_80F7FFE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F800A
	mov r0, #0x14
	strh r0, [r7]
locret_80F800A:
	pop {r4,r6,pc}
off_80F800C: .word byte_80F8010
byte_80F8010: .byte 0x12, 0x10, 0xE, 0xC
.endfunc // sub_80F7FC2

.func
.thumb_func
sub_80F8014:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8030
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #6
	strh r0, [r7,#0x10]
	b locret_80F803C
loc_80F8030:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F803C
	mov r0, #0x18
	strh r0, [r7]
locret_80F803C:
	pop {pc}
.endfunc // sub_80F8014

.func
.thumb_func
sub_80F803E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8086
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #8
	strh r0, [r7,#0x10]
	b locret_80F8092
loc_80F8086:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8092
	mov r0, #0x1c
	strh r0, [r7]
locret_80F8092:
	pop {pc}
.endfunc // sub_80F803E

.func
.thumb_func
sub_80F8094:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F80AA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F80B6
loc_80F80AA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F80B6
	bl sub_8011714
locret_80F80B6:
	pop {pc}
.endfunc // sub_80F8094

	push {r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
	ldr r0, [sp]
	ldrb r0, [r0,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl sub_800CFA6
	add r6, r0, #0
	tst r6, r6
	bne loc_80F80F2
	ldr r0, [sp]
	ldrb r0, [r0,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl sub_800D012
	add r6, r0, #0
	tst r6, r6
	beq loc_80F8106
loc_80F80F2:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F810A
loc_80F8106:
	mov r0, #0
	b loc_80F810A
loc_80F810A:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	pop {r0,r1}
	add sp, sp, #0x24
	pop {r6,r7,pc}
.func
.thumb_func
sub_80F811A:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x14
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	mov r4, #0
	mov r6, #0
	mov r7, #0
loc_80F812A:
	ldrb r2, [r5,#0x12]
	add r2, r4, #0
	lsl r2, r2, #1
	ldr r3, off_80F81B4 // =byte_80F81B8 
	add r3, r3, r2
	mov r2, #0
	ldrsb r2, [r3,r2]
	ldrb r0, [r5,#0x12]
	add r0, r0, r2
	mov r2, #0x1 // (byte_80F81B9 - 0x80f81b8)
	ldrsb r2, [r3,r2]
	ldrb r1, [r5,#0x13]
	add r1, r1, r2
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F811A

	tst r0, r0
	pop {r0,r1}
	beq loc_80F8172
	ldr r2, [sp]
	ldrb r2, [r2,#0x13]
	cmp r1, r2
	beq loc_80F8168
	add r2, sp, #0xc
	lsl r1, r1, #4
	orr r0, r1
	strb r0, [r2,r6]
	add r6, #1
	b loc_80F8172
loc_80F8168:
	add r2, sp, #0x10
	lsl r1, r1, #4
	orr r0, r1
	strb r0, [r2,r7]
	add r7, #1
loc_80F8172:
	add r4, #1
	cmp r4, #4
	blt loc_80F812A
	tst r6, r6
	bne loc_80F8182
	tst r7, r7
	bne loc_80F8196
	b loc_80F81AA
loc_80F8182:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F81AE
loc_80F8196:
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F81AE
loc_80F81AA:
	mov r0, #0
	b loc_80F81AE
loc_80F81AE:
	add sp, sp, #0x14
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80F81B4: .word byte_80F81B8
byte_80F81B8: .byte 0x0
byte_80F81B9: .byte 0x1
	.hword 0xFF00
	lsl r7, r7, #3
	// <mkdata>
	.hword 0x1 // mov r1, r0
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	ldrb r1, [r0,#0x12]
	ldrb r2, [r0,#0x13]
	str r1, [sp]
	str r2, [sp,#4]
	mov r6, #0
	bl sub_800E2C0
	neg r0, r0
	mov r1, #2
	mul r0, r1
	ldr r1, [sp]
	add r0, r0, r1
	ldr r1, [sp,#4]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F81FC
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x10
	strb r0, [r1,r6]
	add r6, #1
loc_80F81FC:
	bl sub_800E2C0
	neg r0, r0
	mov r1, #3
	mul r0, r1
	ldr r1, [sp]
	add r0, r0, r1
	ldr r1, [sp,#4]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F8226
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x10
	strb r0, [r1,r6]
	add r6, #1
loc_80F8226:
	tst r6, r6
	bne loc_80F823A
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	add r7, sp, #0x10
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_80F824E
loc_80F823A:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F8252
loc_80F824E:
	mov r0, #0
	b loc_80F8252
loc_80F8252:
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80F8256:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80F82A8 // =byte_80F82AC 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80F8256

	tst r0, r0
	pop {r0,r1}
	bne loc_80F82A2
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl sub_800CFDC
	add r6, r0, #0
	tst r6, r6
	beq loc_80F829E
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F82A2
loc_80F829E:
	mov r0, #0
	b loc_80F82A2
loc_80F82A2:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80F82A8: .word byte_80F82AC
byte_80F82AC: .byte 0x2, 0x2, 0x5, 0x2
.func
.thumb_func
sub_80F82B0:
	push {lr}
	ldrb r0, [r7,#0x16]
	ldrb r1, [r5,#0x13]
	mov r2, #4
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	mov r6, #1
loc_80F82C6:
	ldrb r0, [r5,#0x12]
	add r1, r6, #0
	mul r1, r4
	add r0, r0, r1
	ldrb r1, [r7,#0x16]
	cmp r0, r1
	beq locret_80F82E0
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	add r6, #1
	cmp r6, #6
	blt loc_80F82C6
locret_80F82E0:
	pop {pc}
.endfunc // sub_80F82B0

.func
.thumb_func
sub_80F82E2:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r1, r1, r0
	ldr r2, [r7,#0x2c]
	ldrb r2, [r2,#0x12]
	sub r1, r1, r2
	mul r0, r1
	cmp r0, #0
	ble loc_80F8302
	mov r2, #6
	ldrb r0, [r5,#0x16]
	tst r0, r0
	beq loc_80F8302
	mov r2, #1
loc_80F8302:
	add r0, r2, #0
	pop {pc}
	.balign 4, 0x00
dword_80F8308: .word 0x1010708, 0x1000007, 0x10043E8, 0x45DC000A, 0xA0101
	.word 0x10247D0, 0x47D0000A, 0xA0103, 0x10447D0, 0x47D0000A
	.word 0xA0105
dword_80F8334: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80F83F4: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80F8428+1
	.word loc_80F870C+1
	.word loc_80F87FE+1
	.word loc_80F8996+1
	.word loc_80F8B44+1
.endfunc // sub_80F82E2

loc_80F8428:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80F8440 // =off_80F8444 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.byte 0, 0
off_80F8440: .word off_80F8444
off_80F8444: .word sub_80F8448+1
.func
.thumb_func
sub_80F8448:
	push {r4,r6,lr}
	mov r3, #4
	ldrh r1, [r5,#0x26]
	lsr r1, r1, #1
	ldrh r2, [r5,#0x24]
	cmp r1, r2
	ble loc_80F8458
	mov r3, #2
loc_80F8458:
	ldrb r0, [r6,#4]
	cmp r0, r3
	blt loc_80F8518
	mov r0, #0
	strb r0, [r6,#4]
	bl sub_800FE36
	ldr r1, off_80F8538 // =byte_80F853C 
	ldrb r0, [r1,r0]
	ldrb r1, [r6,#5]
	cmp r1, r0
	bge loc_80F84E0
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
	bl sub_80F8610
	cmp r0, #3
	bge loc_80F84AC
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #4
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_80F865C
	bl sub_80F85D4
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	ldr r0, dword_80F86F8 // = 
	str r0, [r7,#0x28]
	mov r0, #0xb
	bl sub_8011680
	b locret_80F8534
loc_80F84AC:
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #4
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80F865C
	bl sub_80F85E8
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	ldr r0, off_80F86FC // =sub_80F8D3E+1 
	str r0, [r7,#0x28]
	mov r0, #0x64 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0xa
	bl sub_8011680
	b locret_80F8534
loc_80F84E0:
	mov r0, #0
	strb r0, [r6,#5]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80F865C
	bl sub_80F85FC
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	ldr r0, off_80F8700 // =sub_80F8DFE+1 
	str r0, [r7,#0x28]
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0xc
	bl sub_8011680
	b locret_80F8534
loc_80F8518:
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
	bl sub_800FE36
	strb r0, [r7,#3]
	ldr r0, off_80F8704 // =sub_80F8CF8+1 
	str r0, [r7,#0x28]
	bl sub_80F85B2
	strh r0, [r7,#0x18]
	mov r0, #9
	bl loc_8011690
locret_80F8534:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F8538: .word byte_80F853C
byte_80F853C: .byte 0x6, 0x3, 0x3, 0x3
.endfunc // sub_80F8448

.func
.thumb_func
sub_80F8540:
	push {r4,r6,r7,lr}
	bl sub_800FE36
	add r4, r0, #0
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	add r6, r0, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80F8574 // =loc_80F8578 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	mov r7, #0x60 
	add r7, r7, r5
	push {r0,r1}
	bl sub_80CC486
	pop {r0,r1}
	bl sub_80CC584
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80F8574: .word loc_80F8578
.endfunc // sub_80F8540

loc_80F8578:
	lsl r1, r0, #8
	lsl r6, r0, #8
	push {lr}
	pop {pc}
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.func
.thumb_func
sub_80F85B2:
	push {r4,lr}
	ldr r0, off_80F85CC // =byte_80F85D0 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F8708 // =0xa000 
	tst r0, r1
	beq loc_80F85C8
	add r4, #0x3c 
loc_80F85C8:
	add r0, r4, #0
	pop {r4,pc}
off_80F85CC: .word byte_80F85D0
byte_80F85D0: .byte 0x28, 0x1E, 0x14, 0xA
.endfunc // sub_80F85B2

.func
.thumb_func
sub_80F85D4:
	push {lr}
	ldr r0, off_80F85E0 // =byte_80F85E4 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_80F85E0: .word byte_80F85E4
byte_80F85E4: .byte 0x26, 0x1E, 0x18, 0x10
.endfunc // sub_80F85D4

.func
.thumb_func
sub_80F85E8:
	push {lr}
	ldr r0, off_80F85F4 // =byte_80F85F8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F85F4: .word byte_80F85F8
byte_80F85F8: .byte 0x14, 0x10, 0x8, 0x0
.endfunc // sub_80F85E8

.func
.thumb_func
sub_80F85FC:
	push {lr}
	ldr r0, off_80F8608 // =byte_80F860C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F8608: .word byte_80F860C
byte_80F860C: .byte 0x3C, 0x32, 0x1E, 0x10
.endfunc // sub_80F85FC

.func
.thumb_func
sub_80F8610:
	push {r4,r6,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	ldrb r4, [r0,#0x12]
	ldrb r6, [r0,#0x13]
	ldrb r0, [r5,#0x16]
	add r1, r6, #0
	add r2, r0, #0
	lsl r2, r2, #3
	ldr r3, off_80F8648 // =dword_80F864C 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D086
.endfunc // sub_80F8610

	tst r0, r0
	beq locret_80F8644
	ldrb r1, [r5,#0x16]
	tst r1, r1
	bne loc_80F8642
	sub r0, r4, r0
	b locret_80F8644
loc_80F8642:
	sub r0, r0, r4
locret_80F8644:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F8648: .word dword_80F864C
dword_80F864C: .word 0x0
	.word 0x20, 0x20, 0x0
.func
.thumb_func
sub_80F865C:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F86B0 // =dword_80F86BC 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F86D4 // =dword_80F86E0 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_80F865C

	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F86B0 // =dword_80F86BC 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F86D4 // =dword_80F86E0 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
off_80F86B0: .word dword_80F86BC
	.word dword_80F86C4
	.word dword_80F86CC
dword_80F86BC: .word 0x500028
	.word 0x780078
dword_80F86C4: .word 0x500028
	.word 0x780078
dword_80F86CC: .word 0xA00050
	.word 0xF000F0
off_80F86D4: .word dword_80F86E0
	.word dword_80F86E8
	.word dword_80F86F0
dword_80F86E0: .word 0xA000A
	.word 0xA000A
dword_80F86E8: .word 0xA000A
	.word 0xA000A
dword_80F86F0: .word 0xA000A
	.word 0xA000A
dword_80F86F8: .word 0x80F8DA9
off_80F86FC: .word sub_80F8D3E+1
off_80F8700: .word sub_80F8DFE+1
off_80F8704: .word sub_80F8CF8+1
dword_80F8708: .word 0xA000
loc_80F870C:
	push {r7,lr}
	ldr r1, off_80F871C // =off_80F8720 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F871C: .word off_80F8720
off_80F8720: .word sub_80F872C+1
	.word sub_80F8794+1
	.word sub_80F87DA+1
.func
.thumb_func
sub_80F872C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8768
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F8776
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F8780 // =dword_80F8784 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F877E
loc_80F8768:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F877E
	mov r0, #4
	strh r0, [r7]
	b locret_80F877E
loc_80F8776:
	mov r0, #0x50 
	strh r0, [r7,#0x18]
	mov r0, #8
	strh r0, [r7]
locret_80F877E:
	pop {pc}
off_80F8780: .word dword_80F8784
dword_80F8784: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80F872C

.func
.thumb_func
sub_80F8794:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F87CC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F87D8
loc_80F87CC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F87D8
	mov r0, #8
	strh r0, [r7]
locret_80F87D8:
	pop {pc}
.endfunc // sub_80F8794

.func
.thumb_func
sub_80F87DA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F87F0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F87FC
loc_80F87F0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F87FC
	bl sub_8011714
locret_80F87FC:
	pop {pc}
.endfunc // sub_80F87DA

loc_80F87FE:
	push {r7,lr}
	ldr r1, off_80F880C // =off_80F8810 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F880C: .word off_80F8810
off_80F8810: .word sub_80F882C+1
	.word sub_80F8890+1
	.word sub_80F88BC+1
	.word sub_80F88DA+1
	.word sub_80F8914+1
	.word sub_80F8962+1
	.word sub_80F8972+1
.func
.thumb_func
sub_80F882C:
	push {lr}
	bl object_canMove
	beq loc_80F8872
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F887C // =dword_80F8880 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F8872
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	ldr r0, [r7,#0x2c]
	ldrb r0, [r0,#0x12]
	strb r0, [r7,#0xc]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80F887A
loc_80F8872:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F887A:
	pop {pc}
off_80F887C: .word dword_80F8880
dword_80F8880: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80F882C

.func
.thumb_func
sub_80F8890:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F88BA
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F88BA:
	pop {pc}
.endfunc // sub_80F8890

.func
.thumb_func
sub_80F88BC:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F88D8
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80F88D8:
	pop {pc}
.endfunc // sub_80F88BC

.func
.thumb_func
sub_80F88DA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F88F0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80F8912
loc_80F88F0:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80F8906
	ldrb r0, [r7,#0xc]
	mov r1, #2
	mov r2, #4
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80F8906:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8912
	mov r0, #0x10
	strh r0, [r7]
locret_80F8912:
	pop {pc}
.endfunc // sub_80F88DA

.func
.thumb_func
sub_80F8914:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8952
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldrb r3, [r7,#0xc]
	lsl r3, r3, #8
	ldrb r4, [r7,#3]
	orr r4, r3
	ldr r6, [r7,#8]
	push {r7}
	ldr r7, [r7,#0x30]
	bl sub_80CB410
	pop {r7}
	mov r0, #0xa
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	b locret_80F8960
loc_80F8952:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8960
	mov r0, #0x14
	strh r0, [r7]
	b locret_80F8960
locret_80F8960:
	pop {r4,r6,pc}
.endfunc // sub_80F8914

.func
.thumb_func
sub_80F8962:
	push {lr}
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	bne locret_80F8970
	mov r0, #0x18
	strh r0, [r7]
locret_80F8970:
	pop {pc}
.endfunc // sub_80F8962

.func
.thumb_func
sub_80F8972:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8988
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F8994
loc_80F8988:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8994
	bl sub_8011714
locret_80F8994:
	pop {pc}
.endfunc // sub_80F8972

loc_80F8996:
	push {r7,lr}
	ldr r1, off_80F89A4 // =off_80F89A8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F89A4: .word off_80F89A8
off_80F89A8: .word loc_80F89C0+1
	.word sub_80F8A1C+1
	.word sub_80F8A48+1
	.word sub_80F8A66+1
	.word sub_80F8A9C+1
	.word sub_80F8B20+1
loc_80F89C0:
	push {lr}
	bl object_canMove
	beq loc_80F89FE
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F8A08 // =dword_80F8A0C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_80F89FE
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80F8A06
loc_80F89FE:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F8A06:
	pop {pc}
off_80F8A08: .word dword_80F8A0C
dword_80F8A0C: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80F8A1C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8A46
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F8A46:
	pop {pc}
.endfunc // sub_80F8A1C

.func
.thumb_func
sub_80F8A48:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8A64
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80F8A64:
	pop {pc}
.endfunc // sub_80F8A48

.func
.thumb_func
sub_80F8A66:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8A80
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	mov r0, #0x18
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80F8A9A
loc_80F8A80:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80F8A8E
	bl sub_80F8EAA
loc_80F8A8E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8A9A
	mov r0, #0x10
	strh r0, [r7]
locret_80F8A9A:
	pop {pc}
.endfunc // sub_80F8A66

.func
.thumb_func
sub_80F8A9C:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8AC0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0xb
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F8B14
loc_80F8AC0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x14
	beq loc_80F8AD4
	cmp r0, #0
	bgt locret_80F8B14
	mov r0, #0x14
	strh r0, [r7]
	b locret_80F8B14
loc_80F8AD4:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80F8B18 // =0x700ff11 
	ldr r6, [r7,#8]
	push {r7}
	ldr r7, dword_80F8B1C // =0x3 
	bl sub_80C536A
	pop {r7}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x33 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
locret_80F8B14:
	pop {r4,r6,pc}
	.balign 4, 0x00
dword_80F8B18: .word 0x700FF11
dword_80F8B1C: .word 0x3
.endfunc // sub_80F8A9C

.func
.thumb_func
sub_80F8B20:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8B36
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F8B42
loc_80F8B36:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8B42
	bl sub_8011714
locret_80F8B42:
	pop {pc}
.endfunc // sub_80F8B20

loc_80F8B44:
	push {r7,lr}
	ldr r1, off_80F8B54 // =off_80F8B58 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F8B54: .word off_80F8B58
off_80F8B58: .word sub_80F8B74+1
	.word sub_80F8BD8+1
	.word sub_80F8C04+1
	.word sub_80F8C22+1
	.word sub_80F8C4C+1
	.word sub_80F8C7A+1
	.word sub_80F8CCA+1
.func
.thumb_func
sub_80F8B74:
	push {lr}
	bl object_canMove
	beq loc_80F8BB8
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F8BC4 // =dword_80F8BC8 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F8BB8
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r7,#0x34]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80F8BC0
loc_80F8BB8:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F8BC0:
	pop {pc}
	.balign 4, 0x00
off_80F8BC4: .word dword_80F8BC8
dword_80F8BC8: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80F8B74

.func
.thumb_func
sub_80F8BD8:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8C02
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80F8C02:
	pop {pc}
.endfunc // sub_80F8BD8

.func
.thumb_func
sub_80F8C04:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8C20
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80F8C20:
	pop {pc}
.endfunc // sub_80F8C04

.func
.thumb_func
sub_80F8C22:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8C3E
	ldr r0, [r7,#0x30]
	bl sub_80F8E90
	tst r0, r0
	beq locret_80F8C4A
	mov r0, #0x10
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80F8C4A
loc_80F8C3E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8C4A
	mov r0, #0x10
	strh r0, [r7]
locret_80F8C4A:
	pop {pc}
.endfunc // sub_80F8C22

.func
.thumb_func
sub_80F8C4C:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8C6C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r4, #0
	mov r6, #0x34 
	add r6, r6, r7
	bl sub_80E40C2
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80F8C78
loc_80F8C6C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8C78
	mov r0, #0x14
	strh r0, [r7]
locret_80F8C78:
	pop {r4,r6,pc}
.endfunc // sub_80F8C4C

.func
.thumb_func
sub_80F8C7A:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8CA8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	mov r0, #8
	bl object_setCounterTime
	mov r0, #0xd
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	ldr r2, [r7,#0x34]
	tst r2, r2
	beq locret_80F8CC8
	mov r1, #1
	strb r1, [r2,#9]
	b locret_80F8CC8
loc_80F8CA8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x14
	beq loc_80F8CBC
	cmp r0, #0
	bgt locret_80F8CC8
	mov r0, #0x18
	strh r0, [r7]
	b locret_80F8CC8
loc_80F8CBC:
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
	bl sub_80F8E48
locret_80F8CC8:
	pop {r4,r6,pc}
.endfunc // sub_80F8C7A

.func
.thumb_func
sub_80F8CCA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F8CEA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	ldr r2, [r7,#0x34]
	tst r2, r2
	beq locret_80F8CF6
	mov r1, #2
	strb r1, [r2,#9]
	b locret_80F8CF6
loc_80F8CEA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F8CF6
	bl sub_8011714
locret_80F8CF6:
	pop {pc}
.endfunc // sub_80F8CCA

.func
.thumb_func
sub_80F8CF8:
	push {r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r0, [r5,#0x13]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl sub_800CFA6
	add r6, r0, #0
	tst r6, r6
	bne loc_80F8D22
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_80F8D36
loc_80F8D22:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F8D3A
loc_80F8D36:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
loc_80F8D3A:
	add sp, sp, #0x20
	pop {r6,r7,pc}
.endfunc // sub_80F8CF8

.func
.thumb_func
sub_80F8D3E:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x24
	ldrb r0, [r0,#0x12]
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	mov r4, #1
	mov r6, #0
loc_80F8D4E:
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r2, [sp]
	sub r2, r2, r4
	mul r0, r2
	cmp r0, #2
	blt loc_80F8D7A
	add r0, r4, #0
	mov r1, #2
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80F8D7A
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0xc
	strb r0, [r1,r6]
	add r6, #1
loc_80F8D7A:
	add r4, #1
	cmp r4, #6
	ble loc_80F8D4E
	tst r6, r6
	beq loc_80F8D98
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F8D9C
loc_80F8D98:
	mov r0, #0
	b loc_80F8D9C
loc_80F8D9C:
	add sp, sp, #0x24
	pop {r4,r6,r7,pc}
.endfunc // sub_80F8D3E

	ldrh r4, [r4,#0x2c]
	lsr r7, r1, #0x20
	lsl r2, r0, #8
	lsl r5, r0, #8
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	str r2, [sp]
	str r3, [sp,#4]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	str r0, [sp,#8]
	mov r6, #0
	mov r4, #6
	ldrb r0, [r5,#0x16]
	tst r0, r0
	beq loc_80F8DC4
	mov r4, #1
loc_80F8DC4:
	add r0, r4, #0
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #0xc
	bl sub_800CFDC
	add r6, r0, #0
	tst r6, r6
	bne loc_80F8DE4
	ldr r0, [sp,#8]
	add r4, r4, r0
	cmp r4, #1
	blt loc_80F8DF8
	cmp r4, #6
	bgt loc_80F8DF8
	b loc_80F8DC4
loc_80F8DE4:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F8DFA
loc_80F8DF8:
	mov r0, #0
loc_80F8DFA:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80F8DFE:
	push {r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	ldr r0, [sp]
	ldrb r0, [r0,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl sub_800D012
.endfunc // sub_80F8DFE

	add r6, r0, #0
	tst r6, r6
	bne loc_80F8E2C
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_80F8E40
loc_80F8E2C:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F8E44
loc_80F8E40:
	mov r0, #0
	b loc_80F8E44
loc_80F8E44:
	add sp, sp, #0x24
	pop {r6,r7,pc}
.func
.thumb_func
sub_80F8E48:
	push {r4,r6,lr}
	mov r4, #1
loc_80F8E4C:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq locret_80F8E8E
	push {r4}
	ldrb r2, [r7,#2]
	sub r4, #1
	mov r3, #5
	mul r4, r3
	mov r3, #0x42 
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #5
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #9
	lsl r3, r3, #0x18
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80D1B22
	pop {r4}
	add r4, #1
	cmp r4, #6
	ble loc_80F8E4C
locret_80F8E8E:
	pop {r4,r6,pc}
.endfunc // sub_80F8E48

.func
.thumb_func
sub_80F8E90:
	push {lr}
	mov r1, #0
	ldr r2, [r0]
	tst r2, r2
	beq loc_80F8EA6
	ldrb r0, [r2,#9]
	cmp r0, #0
	bne loc_80F8EA6
	mov r0, #2
	strb r0, [r2,#7]
	mov r1, #1
loc_80F8EA6:
	add r0, r1, #0
	pop {pc}
.endfunc // sub_80F8E90

.func
.thumb_func
sub_80F8EAA:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0x11
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	pop {pc}
dword_80F8EC0: .word 0x1010808, 0x1802008, 0x6000320, 0x4B0000A, 0xA0601
	.word 0x60205DC, 0x5DC000A, 0xA0603, 0x60405DC, 0x5DC000A
	.word 0xA0605
dword_80F8EEC: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80F8FAC: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80F8FE0+1
	.word sub_80F92D0+1
	.word loc_80F93C2+1
	.word loc_80F953C+1
	.word loc_80F96C2+1
.endfunc // sub_80F8EAA

loc_80F8FE0:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80F8FF8 // =off_80F8FFC 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.balign 4, 0x00
off_80F8FF8: .word off_80F8FFC
off_80F8FFC: .word sub_80F9000+1
.func
.thumb_func
sub_80F9000:
	push {r4,r6,lr}
	mov r3, #5
	ldrh r1, [r5,#0x26]
	lsr r1, r1, #1
	ldrh r2, [r5,#0x24]
	cmp r1, r2
	ble loc_80F9010
	mov r3, #3
loc_80F9010:
	ldrb r0, [r6,#4]
	cmp r0, r3
	blt loc_80F9066
	mov r0, #0
	strb r0, [r6,#4]
	mov r3, #7
	ldrh r1, [r5,#0x26]
	lsr r1, r1, #1
	ldrh r2, [r5,#0x24]
	cmp r1, r2
	ble loc_80F9028
	mov r3, #4
loc_80F9028:
	ldrb r0, [r6,#5]
	cmp r0, r3
	bge loc_80F905C
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
	ldrb r0, [r6,#6]
	cmp r0, #1
	bge loc_80F9052
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xe
	bge loc_80F904C
	ldrb r0, [r6,#6]
	add r0, #1
	strb r0, [r6,#6]
loc_80F904C:
	bl sub_80F9168
	b locret_80F907E
loc_80F9052:
	mov r0, #0
	strb r0, [r6,#6]
	bl sub_80F91A2
	b locret_80F907E
loc_80F905C:
	mov r0, #0
	strb r0, [r6,#5]
	bl sub_80F91F6
	b locret_80F907E
loc_80F9066:
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xe
	bge loc_80F9078
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
loc_80F9078:
	bl sub_80F9154
	b locret_80F907E
locret_80F907E:
	pop {r4,r6,pc}
.endfunc // sub_80F9000

	push {lr}
	pop {pc}
	push {lr}
	pop {pc}
.func
.thumb_func
sub_80F9088:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #0x10
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.endfunc // sub_80F9088

.func
.thumb_func
sub_80F90BA:
	push {r4,lr}
	mov r4, #0
	ldr r0, [r5,#0x64]
	cmp r0, #1
	blt loc_80F90CC
	mov r0, #0
	str r0, [r5,#0x64]
	mov r4, #4
	b loc_80F90DE
loc_80F90CC:
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #8
	bgt loc_80F90DE
	ldr r0, [r5,#0x64]
	add r0, #1
	str r0, [r5,#0x64]
loc_80F90DE:
	ldr r0, off_80F90F8 // =byte_80F90FC 
	add r0, r0, r4
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80F92C0 // =0xa000 
	tst r0, r1
	beq loc_80F90F4
	add r4, #0x1e
loc_80F90F4:
	add r0, r4, #0
	pop {r4,pc}
off_80F90F8: .word byte_80F90FC
byte_80F90FC: .byte 0x30, 0x24, 0x18, 0x18, 0x1, 0x1, 0x1, 0x1
.endfunc // sub_80F90BA

.func
.thumb_func
sub_80F9104:
	push {lr}
	ldr r0, off_80F9110 // =byte_80F9114 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_80F9110: .word byte_80F9114
byte_80F9114: .byte 0x18, 0x12, 0x12, 0xC
.endfunc // sub_80F9104

.func
.thumb_func
sub_80F9118:
	push {lr}
	ldr r0, off_80F9124 // =byte_80F9128 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F9124: .word byte_80F9128
byte_80F9128: .byte 0x14, 0x10, 0xC, 0x8
.endfunc // sub_80F9118

.func
.thumb_func
sub_80F912C:
	push {lr}
	ldr r0, off_80F9138 // =byte_80F913C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F9138: .word byte_80F913C
byte_80F913C: .byte 0x1E, 0x1A, 0x16, 0x12
.endfunc // sub_80F912C

.func
.thumb_func
sub_80F9140:
	push {lr}
	ldr r0, off_80F914C // =byte_80F9150 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F914C: .word byte_80F9150
byte_80F9150: .byte 0x14, 0x10, 0x10, 0xC
.endfunc // sub_80F9140

.func
.thumb_func
sub_80F9154:
	push {lr}
	ldr r0, off_80F92C4 // =sub_80F993A+1 
	str r0, [r7,#0x28]
	bl sub_80F90BA
	strh r0, [r7,#0x18]
	mov r0, #9
	bl loc_8011690
	pop {pc}
.endfunc // sub_80F9154

.func
.thumb_func
sub_80F9168:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80F9222
	bl sub_80F9118
	strh r0, [r7,#0x18]
	bl sub_80F9104
	strh r0, [r7,#0xc]
	ldr r0, off_80F92C8 // =sub_80F9980+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	bl loc_80F93C2
	pop {pc}
.endfunc // sub_80F9168

.func
.thumb_func
sub_80F91A2:
	push {r4,lr}
	bl sub_8001532
	mov r1, #3
	and r0, r1
	ldr r1, [r5,#0x60]
	cmp r0, r1
	bne loc_80F91B8
	add r0, #1
	mov r1, #3
	and r0, r1
loc_80F91B8:
	str r0, [r5,#0x60]
	add r4, r0, #0
	bl sub_800FE36
	cmp r0, #0
	beq loc_80F91C6
	add r4, #4
loc_80F91C6:
	strb r4, [r7,#0xd]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0x20 
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_80F9222
	bl sub_80F912C
	strb r0, [r7,#0xc]
	ldr r0, off_80F92CC // =sub_80F9992+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {r4,pc}
.endfunc // sub_80F91A2

.func
.thumb_func
sub_80F91F6:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80F9222
	bl sub_80F9140
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F91F6

.func
.thumb_func
sub_80F9222:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F9278 // =dword_80F9284 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F929C // =dword_80F92A8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_80F9222

	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80F9278 // =dword_80F9284 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80F929C // =dword_80F92A8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F9278: .word dword_80F9284
	.word dword_80F928C
	.word dword_80F9294
dword_80F9284: .word 0x46001E, 0x820082
dword_80F928C: .word 0x46001E, 0x820082
dword_80F9294: .word 0x8C003C, 0x1040104
off_80F929C: .word dword_80F92A8
	.word dword_80F92B0
	.word dword_80F92B8
dword_80F92A8: .word 0xA000A
	.word 0xA000A
dword_80F92B0: .word 0xA000A
	.word 0xA000A
dword_80F92B8: .word 0xA000A
	.word 0xA000A
dword_80F92C0: .word 0xA000
off_80F92C4: .word sub_80F993A+1
off_80F92C8: .word sub_80F9980+1
off_80F92CC: .word sub_80F9992+1
.func
.thumb_func
sub_80F92D0:
	push {r7,lr}
	ldr r1, off_80F92E0 // =off_80F92E4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_80F92E0: .word off_80F92E4
off_80F92E4: .word sub_80F92F0+1
	.word sub_80F9358+1
	.word sub_80F939E+1
.endfunc // sub_80F92D0

.func
.thumb_func
sub_80F92F0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F932C
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F933A
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F9344 // =dword_80F9348 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F9342
loc_80F932C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F9342
	mov r0, #4
	strh r0, [r7]
	b locret_80F9342
loc_80F933A:
	mov r0, #0x50 
	strh r0, [r7,#0x18]
	mov r0, #8
	strh r0, [r7]
locret_80F9342:
	pop {pc}
off_80F9344: .word dword_80F9348
dword_80F9348: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.endfunc // sub_80F92F0

.func
.thumb_func
sub_80F9358:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F9390
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F939C
loc_80F9390:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F939C
	mov r0, #8
	strh r0, [r7]
locret_80F939C:
	pop {pc}
.endfunc // sub_80F9358

.func
.thumb_func
sub_80F939E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F93B4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F93C0
loc_80F93B4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F93C0
	bl sub_8011714
locret_80F93C0:
	pop {pc}
.endfunc // sub_80F939E

loc_80F93C2:
	push {r7,lr}
	ldr r1, off_80F93D0 // =off_80F93D4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F93D0: .word off_80F93D4
off_80F93D4: .word loc_80F93E8+1
	.word sub_80F945C+1
	.word sub_80F94A2+1
	.word sub_80F94D8+1
	.word sub_80F9518+1
loc_80F93E8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F942E
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F943C
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F9448 // =dword_80F944C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F943C
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F9444
loc_80F942E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F9444
	mov r0, #4
	strh r0, [r7]
	b locret_80F9444
loc_80F943C:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F9444:
	pop {pc}
	.balign 4, 0x00
off_80F9448: .word dword_80F944C
dword_80F944C: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.func
.thumb_func
sub_80F945C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F9494
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F94A0
loc_80F9494:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F94A0
	mov r0, #8
	strh r0, [r7]
locret_80F94A0:
	pop {pc}
.endfunc // sub_80F945C

.func
.thumb_func
sub_80F94A2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F94BC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x15
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80F94D6
loc_80F94BC:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80F94CA
	bl sub_80F99FC
loc_80F94CA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F94D6
	mov r0, #0xc
	strh r0, [r7]
locret_80F94D6:
	pop {pc}
.endfunc // sub_80F94A2

.func
.thumb_func
sub_80F94D8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F94FA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	mov r0, #0xfb
	bl sound_play // () -> void
	mov r0, #6
	bl object_setCounterTime
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80F9516
loc_80F94FA:
	bl sub_80F99FC
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x11
	beq loc_80F9512
	cmp r0, #0
	bgt locret_80F9516
	mov r0, #0x10
	strh r0, [r7]
	b locret_80F9516
loc_80F9512:
	bl sub_80F99CA
locret_80F9516:
	pop {pc}
.endfunc // sub_80F94D8

.func
.thumb_func
sub_80F9518:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F952E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F953A
loc_80F952E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F953A
	bl sub_8011714
locret_80F953A:
	pop {pc}
.endfunc // sub_80F9518

loc_80F953C:
	push {r7,lr}
	ldr r1, off_80F954C // =off_80F9550 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80F954C: .word off_80F9550
off_80F9550: .word loc_80F9560+1
	.word sub_80F95D4+1
	.word sub_80F961A+1
	.word sub_80F96A0+1
loc_80F9560:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F95A6
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80F95B4
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80F95C0 // =dword_80F95C4 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80F95B4
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F95BC
loc_80F95A6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F95BC
	mov r0, #4
	strh r0, [r7]
	b locret_80F95BC
loc_80F95B4:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80F95BC:
	pop {pc}
	.byte 0, 0
off_80F95C0: .word dword_80F95C4
dword_80F95C4: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.func
.thumb_func
sub_80F95D4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F960C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F9618
loc_80F960C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F9618
	mov r0, #8
	strh r0, [r7]
locret_80F9618:
	pop {pc}
.endfunc // sub_80F95D4

.func
.thumb_func
sub_80F961A:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F9650
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0x18
	ldrb r1, [r7,#0xd]
	cmp r1, #6
	blt loc_80F9638
	mov r0, #0x28 
loc_80F9638:
	lsl r0, r0, #0x10
	lsl r0, r0, #1
	ldrb r1, [r7,#3]
	lsl r1, r1, #2
	ldr r2, off_80F968C // =dword_80F9690 
	ldr r1, [r2,r1]
	svc 6
	strb r0, [r7,#0xe]
	ldrb r0, [r7,#0xd]
	bl sub_80F9A18
	b locret_80F9688
loc_80F9650:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F9688
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x10
	strb r0, [r5,#0x10]
	mov r0, #0xb8
	bl sound_play // () -> void
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	add r4, #0x41 
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x20 
	lsl r3, r3, #0x10
	bl sub_80E05F6
	mov r0, #0xc
	strh r0, [r7]
locret_80F9688:
	pop {r4,pc}
	.balign 4, 0x00
off_80F968C: .word dword_80F9690
dword_80F9690: .word 0x18000, 0x20000, 0x28000, 0x30000
.endfunc // sub_80F961A

.func
.thumb_func
sub_80F96A0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F96B4
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xe]
	add r0, #0x78 
	strh r0, [r7,#0x10]
	b locret_80F96C0
loc_80F96B4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F96C0
	bl sub_8011714
locret_80F96C0:
	pop {pc}
.endfunc // sub_80F96A0

loc_80F96C2:
	push {r7,lr}
	ldr r1, off_80F96D0 // =off_80F96D4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80F96D0: .word off_80F96D4
off_80F96D4: .word sub_80F96EC+1
	.word sub_80F9716+1
	.word sub_80F975A+1
	.word sub_80F97C0+1
	.word sub_80F98C0+1
	.word sub_80F9932+1
.func
.thumb_func
sub_80F96EC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F9708
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #6
	bl object_setCounterTime
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80F9714
loc_80F9708:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F9714
	mov r0, #4
	strh r0, [r7]
locret_80F9714:
	pop {pc}
.endfunc // sub_80F96EC

.func
.thumb_func
sub_80F9716:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F974C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	ldr r0, [r7,#0x2c]
	ldrb r1, [r7,#3]
	bl sub_80F9B4C
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	strb r2, [r7,#0xc]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F9758
loc_80F974C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F9758
	mov r0, #8
	strh r0, [r7]
locret_80F9758:
	pop {pc}
.endfunc // sub_80F9716

.func
.thumb_func
sub_80F975A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F9798
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	ldrb r0, [r7,#0xc]
	ldr r1, off_80F97B8 // =byte_80F97BC 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	bl sub_8002F90 // () -> void
	bl sub_801A074 // () -> void
	bl sub_801DD34
	mov r0, #0x14
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80F97B6
loc_80F9798:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_80F97A6
	mov r0, #0xc
	strh r0, [r7]
	b locret_80F97B6
loc_80F97A6:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs locret_80F97B6
	ldrb r0, [r7,#0xc]
	bl sub_80F9BDC
locret_80F97B6:
	pop {pc}
off_80F97B8: .word byte_80F97BC
byte_80F97BC: .byte 0x13, 0x12, 0x14, 0x13
.endfunc // sub_80F975A

.func
.thumb_func
sub_80F97C0:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F9830
	mov r0, #4
	strb r0, [r7,#1]
	mov r1, #0x35 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r7,#8]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	mov r0, #4
	bl sub_801A07C
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_8002E3C
	mov r0, #0x3d 
	add r0, #0xff
	bl sound_play // () -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r7,#3]
	lsl r1, r1, #3
	ldr r2, off_80F9880 // =dword_80F9884 
	add r2, r2, r1
	ldr r1, [r2]
	ldr r2, [r2,#4]
	add r3, r1, #0
	mul r1, r0
	str r1, [r5,#0x40]
	ldrb r0, [r7,#0xc]
	ldr r1, off_80F98A4 // =dword_80F98A8 
	ldrsb r0, [r1,r0]
	mul r2, r0
	str r2, [r5,#0x44]
	mov r0, #0x28 
	lsl r0, r0, #0x10
	ldrb r1, [r7,#0xc]
	ldr r2, off_80F98AC // =dword_80F98B0 
	ldrb r1, [r2,r1]
	mul r0, r1
	add r1, r3, #0
	svc 6
	strh r0, [r7,#0x10]
	b locret_80F987C
loc_80F9830:
	ldr r1, [r5,#0x54]
	ldr r0, [r1,#0x70]
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80F98B4 // =dword_80F98B8 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80F9844
	bl sub_801A074 // () -> void
loc_80F9844:
	ldr r0, [r5,#0x34]
	ldr r1, [r5,#0x40]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r0, [r5,#0x38]
	ldr r1, [r5,#0x44]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldrb r4, [r5,#0x12]
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80F9870
	mov r0, #4
	bl sub_801A07C
	ldrb r0, [r5,#0x10]
	bl sub_80F9C28
loc_80F9870:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F987C
	mov r0, #0x10
	strh r0, [r7]
locret_80F987C:
	pop {r4,pc}
	.byte 0, 0
off_80F9880: .word dword_80F9884
dword_80F9884: .word 0xA0000, 0x60000, 0xC0000, 0x73333, 0xC0000, 0x73333
	.word 0xE0000, 0x86666
off_80F98A4: .word dword_80F98A8
dword_80F98A8: .word 0x1FF00
off_80F98AC: .word dword_80F98B0
dword_80F98B0: .word 0x7050507
off_80F98B4: .word dword_80F98B8
dword_80F98B8: .word 0x5800000, 0xA800000
.endfunc // sub_80F97C0

.func
.thumb_func
sub_80F98C0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80F9924
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	push {r0,r1}
	bl sub_800E29C // () -> void
	pop {r0,r1}
	bl sub_801BB46
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r1, #0x10
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80F9930
loc_80F9924:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80F9930
	mov r0, #0x14
	strh r0, [r7]
locret_80F9930:
	pop {pc}
.endfunc // sub_80F98C0

.func
.thumb_func
sub_80F9932:
	push {lr}
	bl sub_8011714
	pop {pc}
.endfunc // sub_80F9932

.func
.thumb_func
sub_80F993A:
	push {r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r0, [r5,#0x13]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl sub_800CFA6
	add r6, r0, #0
	tst r6, r6
	bne loc_80F9964
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_80F9978
loc_80F9964:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F997C
loc_80F9978:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
loc_80F997C:
	add sp, sp, #0x20
	pop {r6,r7,pc}
.endfunc // sub_80F993A

.func
.thumb_func
sub_80F9980:
	push {lr}
	ldrb r1, [r0,#0x13]
	ldrb r0, [r5,#0x16]
	bl sub_800D086
.endfunc // sub_80F9980

	tst r0, r0
	bne locret_80F9990
	mov r0, #0
locret_80F9990:
	pop {pc}
.func
.thumb_func
sub_80F9992:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	add r4, r0, #0
	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80F99A2
	mov r0, #6
loc_80F99A2:
	ldrb r1, [r4,#0x13]
	add r7, sp, #0
	bl sub_800CF14
	add r6, r0, #0
	tst r6, r6
	beq loc_80F99C4
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80F99C6
loc_80F99C4:
	mov r0, #0
loc_80F99C6:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
.endfunc // sub_80F9992

.func
.thumb_func
sub_80F99CA:
	push {r4,r6,lr}
	mov r4, #1
loc_80F99CE:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	push {r4,r7}
	ldr r4, dword_80F99F4 // =0x400ff01 
	ldr r6, [r7,#8]
	ldr r7, dword_80F99F8 // =0x3 
	bl sub_80C536A
	pop {r4,r7}
	add r4, #1
	cmp r4, #3
	ble loc_80F99CE
	pop {r4,r6,pc}
dword_80F99F4: .word 0x400FF01
dword_80F99F8: .word 0x3
.endfunc // sub_80F99CA

.func
.thumb_func
sub_80F99FC:
	push {r4,lr}
	mov r4, #1
loc_80F9A00:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	add r4, #1
	cmp r4, #3
	ble loc_80F9A00
	pop {r4,pc}
.endfunc // sub_80F99FC

.func
.thumb_func
sub_80F9A18:
	push {r4,r6,lr}
	sub sp, sp, #4
	cmp r0, #7
	bgt loc_80F9A8A
	cmp r0, #0
	blt loc_80F9A8A
	mov r6, #9
	mul r6, r0
	ldr r1, off_80F9A90 // =dword_80F9A94 
	add r6, r6, r1
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	neg r4, r4
	bl sub_80F9AE8
	mul r0, r4
	str r0, [sp]
	mov r4, #0
loc_80F9A3E:
	add r2, r6, r4
	ldrb r0, [r2]
	ldrb r1, [r2,#1]
	ldrb r2, [r2,#2]
	ldrb r3, [r5,#0x16]
	tst r3, r3
	bne loc_80F9A50
	mov r3, #7
	sub r0, r3, r0
loc_80F9A50:
	ldr r3, [sp]
	add r0, r0, r3
	push {r0-r2}
	ldr r3, off_80F9ADC // =dword_80F9AE0 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_80F9AE4 - 0x80f9ae0)
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0-r2}
	beq loc_80F9A84
	push {r4,r6}
	lsl r2, r2, #8
	ldrb r4, [r7,#3]
	orr r4, r2
	ldrb r2, [r7,#0xc]
	lsl r2, r2, #0x10
	orr r4, r2
	ldrb r2, [r7,#0xe]
	lsl r2, r2, #0x18
	orr r4, r2
	ldr r6, [r7,#8]
	ldrb r2, [r7,#2]
	bl sub_80CCFAC
	pop {r4,r6}
loc_80F9A84:
	add r4, #3
	cmp r4, #9
	blt loc_80F9A3E
loc_80F9A8A:
	add sp, sp, #4
	pop {r4,r6,pc}
	.byte 0, 0
off_80F9A90: .word dword_80F9A94
dword_80F9A94: .word 0x2000301, 0x1030101, 0x30101, 0x3010102, 0x3010003
	.word 0x30200, 0x1010103, 0x3020101, 0x1010300, 0x2000301
	.word 0x1030101, 0x30101, 0x3000302, 0x1010101, 0x2020102
	.word 0x1030303, 0x3010202, 0x3010302
off_80F9ADC: .word dword_80F9AE0
dword_80F9AE0: .word 0x10000
dword_80F9AE4: .word 0x0
.endfunc // sub_80F9A18

.func
.thumb_func
sub_80F9AE8:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	mov r4, #1
	ldrb r0, [r5,#0x16]
	tst r0, r0
	beq loc_80F9AFC
	mov r4, #6
loc_80F9AFC:
	add r0, r4, #0
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80F9B38 // =dword_80F9B3C 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	add r7, sp, #0
	bl sub_800CFDC
.endfunc // sub_80F9AE8

	tst r0, r0
	bne loc_80F9B1E
	add r4, r4, r6
	cmp r4, #1
	blt loc_80F9B1E
	cmp r4, #6
	blt loc_80F9AFC
loc_80F9B1E:
	mov r0, #4
	ldrb r0, [r5,#0x16]
	tst r0, r0
	beq loc_80F9B28
	mov r0, #3
loc_80F9B28:
	sub r0, r0, r4
	mul r0, r6
	cmp r0, #0
	bgt loc_80F9B32
	mov r0, #0
loc_80F9B32:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80F9B38: .word dword_80F9B3C
dword_80F9B3C: .word 0x20, 0x0, 0x0
	.word 0x20
.func
.thumb_func
sub_80F9B4C:
	push {r4,r6,lr}
	sub sp, sp, #8
	ldrb r2, [r0,#0x12]
	ldrb r3, [r0,#0x13]
	str r2, [sp]
	str r3, [sp,#4]
	cmp r1, #0
	bne loc_80F9B68
	mov r6, #0
	ldr r0, [sp,#4]
	cmp r0, #3
	bne loc_80F9B96
	mov r6, #3
	b loc_80F9B96
loc_80F9B68:
	mov r4, #0
loc_80F9B6A:
	add r1, r4, #0
	mov r2, #3
	mul r1, r2
	ldr r2, off_80F9BB4 // =dword_80F9BB8 
	add r2, r2, r1
	ldrb r0, [r2]
	ldrb r1, [r2,#1]
	ldrb r6, [r2,#2]
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80F9B84
	mov r2, #7
	sub r0, r2, r0
loc_80F9B84:
	ldr r2, [sp]
	ldr r3, [sp,#4]
	cmp r0, r2
	bne loc_80F9B90
	cmp r1, r3
	beq loc_80F9B96
loc_80F9B90:
	add r4, #1
	cmp r4, #6
	ble loc_80F9B6A
loc_80F9B96:
	add r3, r6, #0
	lsl r3, r3, #1
	ldr r0, off_80F9BD0 // =byte_80F9BD4 
	add r3, r3, r0
	ldrb r0, [r3]
	ldrb r1, [r3,#1]
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80F9BAC
	mov r2, #7
	sub r0, r2, r0
loc_80F9BAC:
	add r2, r6, #0
	add sp, sp, #8
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80F9BB4: .word dword_80F9BB8
dword_80F9BB8: .word 0x2000206, 0x3020002, 0x1030301, 0x6010105, 0x101
	.word 0x2
off_80F9BD0: .word byte_80F9BD4
byte_80F9BD4: .byte 0x0
byte_80F9BD5: .byte 0x1
	.hword 0x402
	.byte 0x2, 0x0
byte_80F9BDA: .byte 0x0
byte_80F9BDB: .byte 0x3
.endfunc // sub_80F9B4C

.func
.thumb_func
sub_80F9BDC:
	push {r4,lr}
	add r3, r0, #0
	lsl r0, r0, #1
	ldr r1, off_80F9C08 // =dword_80F9C0C 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80F9BF4
	mov r2, #7
	sub r0, r2, r0
loc_80F9BF4:
	lsl r3, r3, #2
	ldr r2, off_80F9C14 // =dword_80F9C18 
	ldr r2, [r2,r3]
	ldrb r3, [r5,#0x17]
	lsl r3, r3, #8
	ldrb r4, [r5,#0x16]
	orr r3, r4
	bl object_highlightPanelRegion
	pop {r4,pc}
off_80F9C08: .word dword_80F9C0C
dword_80F9C0C: .word 0x2040101, 0x3010204
off_80F9C14: .word dword_80F9C18
dword_80F9C18: .word 0x23, 0x24, 0x25, 0x23
.endfunc // sub_80F9BDC

.func
.thumb_func
sub_80F9C28:
	push {r4,r6,r7,lr}
	lsl r4, r0, #0x10
	bl sub_800E456 // () -> int
	lsl r0, r0, #0x18
	orr r4, r0
	ldr r0, dword_80F9C48 // =0x808 
	add r4, r4, r0
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80F9C4C // =0x8318 
	ldr r7, dword_80F9C50 // =0x101000f 
	bl sub_80E33FA
	pop {r4,r6,r7,pc}
dword_80F9C48: .word 0x808
dword_80F9C4C: .word 0x8318
dword_80F9C50: .word 0x101000F
dword_80F9C54: .word 0x1010908, 0x1401009, 0x10003E8, 0x5DC000A, 0xA0101
	.word 0x10207D0, 0x7D0000A, 0xA0103, 0x10407D0, 0x7D0000A
	.word 0xA0105
dword_80F9C80: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80F9D40: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80F9D74+1
	.word sub_80FA0B0+1
	.word loc_80FA1AE+1
	.word loc_80FA41E+1
	.word loc_80FA6D4+1
.endfunc // sub_80F9C28

loc_80F9D74:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80F9D8C // =off_80F9D90 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.balign 4, 0x00
off_80F9D8C: .word off_80F9D90
off_80F9D90: .word sub_80F9D94+1
.func
.thumb_func
sub_80F9D94:
	push {r4,r6,lr}
	ldrb r0, [r6,#4]
	cmp r0, #2
	blt loc_80F9DCE
	mov r0, #0
	strb r0, [r6,#4]
	ldrb r0, [r6,#5]
	cmp r0, #2
	blt loc_80F9DBC
	mov r0, #0
	strb r0, [r6,#5]
	ldrb r0, [r6,#6]
	mov r1, #1
	eor r1, r0
	strb r1, [r6,#6]
	tst r0, r0
	bne loc_80F9DC8
	bl sub_80F9F76
	b locret_80F9DDA
loc_80F9DBC:
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
	bl sub_80F9F44
	b locret_80F9DDA
loc_80F9DC8:
	bl sub_80F9FA6
	b locret_80F9DDA
loc_80F9DCE:
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
	bl sub_80F9F24
	b locret_80F9DDA
locret_80F9DDA:
	pop {r4,r6,pc}
.endfunc // sub_80F9D94

	push {lr}
	pop {pc}
	push {lr}
	pop {pc}
.func
.thumb_func
sub_80F9DE4:
	push {lr}
	ldr r0, [r5,#0x50]
	tst r0, r0
	beq loc_80F9DF4
	bl sub_80C44D2
	b loc_80F9DF4
.endfunc // sub_80F9DE4

.func
.thumb_func
sub_80F9DF2:
	push {lr}
loc_80F9DF4:
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	bl sub_8002E3C
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.endfunc // sub_80F9DF2

.func
.thumb_func
sub_80F9E34:
	push {r4,lr}
	ldr r0, off_80F9E50 // =byte_80F9E54 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FA0A0 // =0xa000 
	tst r0, r1
	beq loc_80F9E4A
	add r4, #0x3c 
loc_80F9E4A:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
off_80F9E50: .word byte_80F9E54
byte_80F9E54: .byte 0x1E, 0x19, 0x14, 0xF
.endfunc // sub_80F9E34

.func
.thumb_func
sub_80F9E58:
	push {lr}
	ldr r0, off_80F9E64 // =byte_80F9E68 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F9E64: .word byte_80F9E68
byte_80F9E68: .byte 0x18, 0x14, 0x12, 0x10
.endfunc // sub_80F9E58

.func
.thumb_func
sub_80F9E6C:
	push {r4,lr}
	ldr r0, off_80F9E88 // =byte_80F9E8C 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FA0A0 // =0xa000 
	tst r0, r1
	beq loc_80F9E82
	add r4, #0x3c 
loc_80F9E82:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F9E88: .word byte_80F9E8C
byte_80F9E8C: .byte 0x1E, 0x19, 0x14, 0xF
.endfunc // sub_80F9E6C

.func
.thumb_func
sub_80F9E90:
	push {lr}
	ldr r0, off_80F9E9C // =byte_80F9EA0 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F9E9C: .word byte_80F9EA0
byte_80F9EA0: .byte 0x18, 0x14, 0x12, 0x10
.endfunc // sub_80F9E90

.func
.thumb_func
sub_80F9EA4:
	push {r4,lr}
	ldr r0, off_80F9EC0 // =byte_80F9EC4 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FA0A0 // =0xa000 
	tst r0, r1
	beq loc_80F9EBA
	add r4, #0x3c 
loc_80F9EBA:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
off_80F9EC0: .word byte_80F9EC4
byte_80F9EC4: .byte 0x3C, 0x32, 0x28, 0x1E
.endfunc // sub_80F9EA4

.func
.thumb_func
sub_80F9EC8:
	push {lr}
	ldr r0, off_80F9ED4 // =byte_80F9ED8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80F9ED4: .word byte_80F9ED8
byte_80F9ED8: .byte 0x1E, 0x1A, 0x16, 0x16
.endfunc // sub_80F9EC8

.func
.thumb_func
sub_80F9EDC:
	push {lr}
	ldr r0, off_80F9EF4 // =byte_80F9EF8 
	bl sub_800FE28
	push {r0}
	ldr r0, off_80F9EF4 // =byte_80F9EF8 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_80F9EF4: .word byte_80F9EF8
byte_80F9EF8: .byte 0x3, 0x3, 0x4, 0x5, 0x2, 0x3, 0x3, 0x3
.endfunc // sub_80F9EDC

.func
.thumb_func
sub_80F9F00:
	push {r4,lr}
	ldr r0, off_80F9F1C // =byte_80F9F20 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FA0A0 // =0xa000 
	tst r0, r1
	beq loc_80F9F16
	add r4, #0x3c 
loc_80F9F16:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80F9F1C: .word byte_80F9F20
byte_80F9F20: .byte 0x3C, 0x32, 0x28, 0x1E
.endfunc // sub_80F9F00

.func
.thumb_func
sub_80F9F24:
	push {lr}
	ldr r0, off_80FA0A4 // =sub_80FAA04+1 
	str r0, [r7,#0x28]
	bl sub_80F9E34
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
	pop {pc}
.endfunc // sub_80F9F24

.func
.thumb_func
sub_80F9F44:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80F9FEC
	bl sub_80F9E6C
	strh r0, [r7,#0x18]
	bl sub_80F9E58
	strb r0, [r7,#0xc]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F9F44

.func
.thumb_func
sub_80F9F76:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_80F9FEC
	bl sub_80F9EA4
	strh r0, [r7,#0x18]
	bl sub_80F9E90
	strb r0, [r7,#0xc]
	ldr r0, dword_80FA0A8 // = 
	str r0, [r7,#0x28]
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0xb
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F9F76

.func
.thumb_func
sub_80F9FA6:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80F9FEC
	bl sub_80F9F00
	strh r0, [r7,#0x18]
	bl sub_80F9EC8
	strb r0, [r7,#0xc]
	bl sub_80F9EDC
	strb r0, [r7,#0xd]
	strb r1, [r7,#0xe]
	mov r0, #3
	bl sub_80FA01A
	str r0, [r7,#0x30]
	ldr r0, dword_80FA0AC // = 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {pc}
.endfunc // sub_80F9FA6

.func
.thumb_func
sub_80F9FEC:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FA040 // =dword_80FA050 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FA070 // =dword_80FA080 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_80F9FEC

.func
.thumb_func
sub_80FA01A:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FA040 // =dword_80FA050 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FA070 // =dword_80FA080 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
off_80FA040: .word dword_80FA050
	.word dword_80FA058
	.word dword_80FA060
	.word dword_80FA068
dword_80FA050: .word 0x64003C, 0x960096
dword_80FA058: .word 0x96005A, 0xE600E6
dword_80FA060: .word 0xC80078, 0x12C012C
dword_80FA068: .word 0x64003C, 0xA0096
off_80FA070: .word dword_80FA080
	.word dword_80FA088
	.word dword_80FA090
	.word dword_80FA098
dword_80FA080: .word 0xA000A
	.word 0xA000A
dword_80FA088: .word 0xA000A
	.word 0xA000A
dword_80FA090: .word 0xA000A
	.word 0xA000A
dword_80FA098: .word 0xA000A
	.word 0xA000A
dword_80FA0A0: .word 0xA000
off_80FA0A4: .word sub_80FAA04+1
dword_80FA0A8: .word 0x80FAAAD
dword_80FA0AC: .word 0x80FAAD5
.endfunc // sub_80FA01A

.func
.thumb_func
sub_80FA0B0:
	push {r7,lr}
	ldr r1, off_80FA0C0 // =off_80FA0C4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_80FA0C0: .word off_80FA0C4
off_80FA0C4: .word loc_80FA0D0+1
	.word sub_80FA144+1
	.word sub_80FA18A+1
.endfunc // sub_80FA0B0

loc_80FA0D0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA116
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FA124
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FA130 // =dword_80FA134 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FA124
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_80FA12C
loc_80FA116:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA12C
	mov r0, #4
	strh r0, [r7]
	b locret_80FA12C
loc_80FA124:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FA12C:
	pop {pc}
	.byte 0, 0
off_80FA130: .word dword_80FA134
dword_80FA134: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80FA144:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA17C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #9
	strh r0, [r7,#0x10]
	b locret_80FA188
loc_80FA17C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA188
	mov r0, #8
	strh r0, [r7]
locret_80FA188:
	pop {pc}
.endfunc // sub_80FA144

.func
.thumb_func
sub_80FA18A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA1A0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FA1AC
loc_80FA1A0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA1AC
	bl sub_8011714
locret_80FA1AC:
	pop {pc}
.endfunc // sub_80FA18A

loc_80FA1AE:
	push {r7,lr}
	ldr r1, off_80FA1BC // =off_80FA1C0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FA1BC: .word off_80FA1C0
off_80FA1C0: .word sub_80FA1D8+1
	.word sub_80FA22A+1
	.word sub_80FA284+1
	.word sub_80FA31E+1
	.word sub_80FA37C+1
	.word sub_80FA3FA+1
.func
.thumb_func
sub_80FA1D8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA1EE
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_80FA228
loc_80FA1EE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA228
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	bl sub_801A074 // () -> void
	bl sub_801DD34
	bl sub_8002F90 // () -> void
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	mov r0, #1
	strb r0, [r7,#0xd]
	mov r0, #4
	strh r0, [r7]
locret_80FA228:
	pop {pc}
.endfunc // sub_80FA1D8

.func
.thumb_func
sub_80FA22A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA256
	mov r0, #4
	strb r0, [r7,#1]
	ldr r2, [r7,#0x2c]
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80FA27E
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80FA282
loc_80FA256:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80FA268
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl object_highlightPanel
loc_80FA268:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA282
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_80FAB2C
	mov r0, #8
	strh r0, [r7]
	b locret_80FA282
loc_80FA27E:
	mov r0, #0x10
	strh r0, [r7]
locret_80FA282:
	pop {pc}
.endfunc // sub_80FA22A

.func
.thumb_func
sub_80FA284:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA2F0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	mov r0, #0xc0
	add r0, #0xff
	bl sound_play // () -> void
	mov r1, #0x3a 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r7,#8]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_breakPanel_dup2
	bl sub_8002E3C
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FA31C
loc_80FA2F0:
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80FA370 // =dword_80FA374 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80FA304
	bl sub_801A074 // () -> void
loc_80FA304:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x10
	beq loc_80FA318
	cmp r0, #0
	bgt locret_80FA31C
	mov r0, #0xc
	strh r0, [r7]
	b locret_80FA31C
loc_80FA318:
	mov r0, #0x14
	strb r0, [r5,#0x10]
locret_80FA31C:
	pop {pc}
.endfunc // sub_80FA284

.func
.thumb_func
sub_80FA31E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA330
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80FA36E
loc_80FA330:
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80FA370 // =dword_80FA374 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80FA344
	bl sub_801A074 // () -> void
loc_80FA344:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA36E
	bl sub_801A074 // () -> void
	bl sub_801DD34
	bl sub_8002F90 // () -> void
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	ldrb r0, [r7,#0xd]
	sub r0, #1
	strb r0, [r7,#0xd]
	ble loc_80FA36A
	mov r0, #4
	strh r0, [r7]
	b locret_80FA36E
loc_80FA36A:
	mov r0, #0x10
	strh r0, [r7]
locret_80FA36E:
	pop {pc}
off_80FA370: .word dword_80FA374
dword_80FA374: .word 0x5800000, 0xA800000
.endfunc // sub_80FA31E

.func
.thumb_func
sub_80FA37C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA3EC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	bl sub_8002E3C
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #9
	strh r0, [r7,#0x10]
	b locret_80FA3F8
loc_80FA3EC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA3F8
	mov r0, #0x14
	strh r0, [r7]
locret_80FA3F8:
	pop {pc}
.endfunc // sub_80FA37C

.func
.thumb_func
sub_80FA3FA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA410
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FA41C
loc_80FA410:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA41C
	bl sub_8011714
locret_80FA41C:
	pop {pc}
.endfunc // sub_80FA3FA

loc_80FA41E:
	push {r7,lr}
	ldr r1, off_80FA42C // =off_80FA430 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FA42C: .word off_80FA430
off_80FA430: .word sub_80FA44C+1
	.word sub_80FA4BC+1
	.word sub_80FA4FE+1
	.word sub_80FA540+1
	.word sub_80FA5B4+1
	.word sub_80FA644+1
	.word sub_80FA6B0+1
.func
.thumb_func
sub_80FA44C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA490
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FA49E
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FA4A8 // =dword_80FA4AC 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_80FA49E
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_80FA4A6
loc_80FA490:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA4A6
	mov r0, #4
	strh r0, [r7]
	b locret_80FA4A6
loc_80FA49E:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FA4A6:
	pop {pc}
off_80FA4A8: .word dword_80FA4AC
dword_80FA4AC: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80FA44C

.func
.thumb_func
sub_80FA4BC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA4F0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #9
	strh r0, [r7,#0x10]
	b locret_80FA4FC
loc_80FA4F0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA4FC
	mov r0, #8
	strh r0, [r7]
locret_80FA4FC:
	pop {pc}
.endfunc // sub_80FA4BC

.func
.thumb_func
sub_80FA4FE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA51A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0
	str r0, [r7,#0x34]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FA53E
loc_80FA51A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA53E
	ldrh r0, [r5,#0x24]
	str r0, [r7,#0x38]
	bl sub_80FAB48
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #0x4d 
	add r0, #0xff
	bl sound_play // () -> void
	bl sub_80FAB2C
	mov r0, #0xc
	strh r0, [r7]
locret_80FA53E:
	pop {pc}
.endfunc // sub_80FA4FE

.func
.thumb_func
sub_80FA540:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA59C
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r5,#0x3e]
	mov r1, #0x35 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r7,#8]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80FA634 // =0x49000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_80FA5B2
loc_80FA59C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA5B2
	mov r0, #0x10
	strh r0, [r7]
	b locret_80FA5B2
	bl sub_80FABEC
	mov r0, #0x14
	strh r0, [r7]
locret_80FA5B2:
	pop {pc}
.endfunc // sub_80FA540

.func
.thumb_func
sub_80FA5B4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA5EA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	mov r0, #0xf0
	bl sound_play // () -> void
	mov r0, #0
	add r0, r0, r7
	mov r1, #0xff
	push {r4}
	mov r4, #1
	bl sub_80D4C0A
	pop {r4}
	mov r0, #0x28 
	lsl r0, r0, #0x10
	mov r1, #6
	mul r0, r1
	ldr r1, dword_80FA634 // =0x49000 
	svc 6
	strh r0, [r7,#0x10]
	b locret_80FA632
loc_80FA5EA:
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80FA638 // =dword_80FA63C 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80FA608
	bl sub_801A074 // () -> void
loc_80FA608:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80FA61C
	mov r0, #1
	bl sub_801A07C
loc_80FA61C:
	ldr r0, [r7,#0x34]
	tst r0, r0
	bne loc_80FA62A
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA632
loc_80FA62A:
	bl sub_80FABEC
	mov r0, #0x14
	strh r0, [r7]
locret_80FA632:
	pop {pc}
dword_80FA634: .word 0x49000
off_80FA638: .word dword_80FA63C
dword_80FA63C: .word 0x5800000, 0xA800000
.endfunc // sub_80FA5B4

.func
.thumb_func
sub_80FA644:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA6A2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	strh r0, [r5,#0x3e]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	mov r0, #9
	strh r0, [r7,#0x10]
	b locret_80FA6AE
loc_80FA6A2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA6AE
	mov r0, #0x18
	strh r0, [r7]
locret_80FA6AE:
	pop {pc}
.endfunc // sub_80FA644

.func
.thumb_func
sub_80FA6B0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA6C6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FA6D2
loc_80FA6C6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA6D2
	bl sub_8011714
locret_80FA6D2:
	pop {pc}
.endfunc // sub_80FA6B0

loc_80FA6D4:
	push {r7,lr}
	ldr r1, off_80FA6E4 // =off_80FA6E8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FA6E4: .word off_80FA6E8
off_80FA6E8: .word loc_80FA708+1
	.word sub_80FA780+1
	.word sub_80FA7C2+1
	.word sub_80FA7F2+1
	.word sub_80FA81E+1
	.word sub_80FA8F0+1
	.word sub_80FA968+1
	.word sub_80FA9E0+1
loc_80FA708:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA752
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FA760
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FA76C // =dword_80FA770 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FA760
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r7,#0x34]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_80FA768
loc_80FA752:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA768
	mov r0, #4
	strh r0, [r7]
	b locret_80FA768
loc_80FA760:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FA768:
	pop {pc}
	.balign 4, 0x00
off_80FA76C: .word dword_80FA770
dword_80FA770: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80FA780:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA7B4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #9
	strh r0, [r7,#0x10]
	b locret_80FA7C0
loc_80FA7B4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA7C0
	mov r0, #8
	strh r0, [r7]
locret_80FA7C0:
	pop {pc}
.endfunc // sub_80FA780

.func
.thumb_func
sub_80FA7C2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA7E4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0xe6
	bl sound_play // () -> void
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FA7F0
loc_80FA7E4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA7F0
	mov r0, #0xc
	strh r0, [r7]
locret_80FA7F0:
	pop {pc}
.endfunc // sub_80FA7C2

.func
.thumb_func
sub_80FA7F2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA810
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	mov r0, #0xc1
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	b locret_80FA81C
loc_80FA810:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA81C
	mov r0, #0x10
	strh r0, [r7]
locret_80FA81C:
	pop {pc}
.endfunc // sub_80FA7F2

.func
.thumb_func
sub_80FA81E:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA89E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc2
	add r0, #0xff
	bl sound_play // () -> void
	mov r1, #0x35 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r7,#8]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r1, dword_80FA8EC // =0x120000 
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	add r0, r0, r7
	mov r1, #0xff
	mov r4, #1
	bl sub_80D4C0A
	mov r4, #0
	mov r3, #0xc
	lsl r3, r3, #8
	orr r4, r3
	bl sub_80E7896
	str r0, [r7,#0x34]
	mov r0, #0x28 
	lsl r0, r0, #0x10
	ldrb r1, [r5,#0x12]
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80FA890
	mov r2, #1
	sub r1, r1, r2
	b loc_80FA894
loc_80FA890:
	mov r2, #6
	sub r1, r2, r1
loc_80FA894:
	mul r0, r1
	ldr r1, dword_80FA8EC // =0x120000 
	svc 6
	strh r0, [r7,#0x10]
	b locret_80FA8E8
loc_80FA89E:
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80FA95C // =dword_80FA960 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80FA8BC
	bl sub_801A074 // () -> void
loc_80FA8BC:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80FA8D0
	mov r0, #1
	bl sub_801A07C
loc_80FA8D0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA8E8
	mov r0, #0xe5
	bl sound_play // () -> void
	mov r0, #0x14
	strh r0, [r7]
	b locret_80FA8E8
	mov r0, #0x18
	strh r0, [r7]
locret_80FA8E8:
	pop {r4,pc}
	.balign 4, 0x00
dword_80FA8EC: .word 0x120000
.endfunc // sub_80FA81E

.func
.thumb_func
sub_80FA8F0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA912
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_80FAC34
	ldrb r0, [r7,#0xc]
	add r0, #0x14
	strh r0, [r7,#0x10]
	mov r0, #1
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strh r0, [r7,#0x12]
loc_80FA912:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	cmp r0, #0
	bgt loc_80FA928
	mov r0, #1
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strh r0, [r7,#0x12]
loc_80FA928:
	ldr r2, [r5,#0x54]
	ldr r2, [r2,#0x70]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #2
	ldr r1, off_80FA95C // =dword_80FA960 
	ldr r0, [r1,r0]
	tst r0, r2
	beq loc_80FA93C
	bl sub_801A074 // () -> void
loc_80FA93C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA958
	ldrb r0, [r7,#0xd]
	sub r0, #1
	strb r0, [r7,#0xd]
	cmp r0, #0
	ble loc_80FA954
	mov r0, #0
	strb r0, [r7,#1]
	b locret_80FA958
loc_80FA954:
	mov r0, #0x18
	strh r0, [r7]
locret_80FA958:
	pop {pc}
	.balign 4, 0x00
off_80FA95C: .word dword_80FA960
dword_80FA960: .word 0x5800000, 0xA800000
.endfunc // sub_80FA8F0

.func
.thumb_func
sub_80FA968:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA9D2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	mov r0, #9
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x34]
	tst r0, r0
	beq locret_80FA9DE
	bl sub_80E78AE
	b locret_80FA9DE
loc_80FA9D2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FA9DE
	mov r0, #0x1c
	strh r0, [r7]
locret_80FA9DE:
	pop {pc}
.endfunc // sub_80FA968

.func
.thumb_func
sub_80FA9E0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FA9F6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FAA02
loc_80FA9F6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FAA02
	bl sub_8011714
locret_80FAA02:
	pop {pc}
.endfunc // sub_80FA9E0

.func
.thumb_func
sub_80FAA04:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	ldrb r0, [r0,#0x13]
	str r0, [sp,#8]
	str r2, [sp]
	str r3, [sp,#4]
	mov r4, #0
	mov r6, #0
	mov r7, #0
loc_80FAA16:
	ldr r2, off_80FAA98 // =byte_80FAA9C 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80FAA9D - 0x80faa9c)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80FAA04

	tst r0, r0
	pop {r0,r1}
	beq loc_80FAA5A
	ldr r2, [sp,#8]
	cmp r1, r2
	beq loc_80FAA50
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x10
	strb r0, [r1,r6]
	add r6, #1
	b loc_80FAA5A
loc_80FAA50:
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x18
	strb r0, [r1,r7]
	add r7, #1
loc_80FAA5A:
	add r4, #1
	cmp r4, #8
	blt loc_80FAA16
	tst r6, r6
	bne loc_80FAA6C
	tst r7, r7
	bne loc_80FAA80
	mov r0, #0
	b loc_80FAA94
loc_80FAA6C:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FAA94
loc_80FAA80:
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #0x18
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FAA94
loc_80FAA94:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
off_80FAA98: .word byte_80FAA9C
byte_80FAA9C: .byte 0xFF
byte_80FAA9D: .byte 0x0
	.hword 0xFF00
	.word 0x1000001, 0xFFFF01FF, 0xFF010101, 0x7DA8B500, 0x49060040
	.word 0x78081809, 0xB4037849, 0xF8E3F712, 0xBC034200, 0x2000D100
	.word 0xBD00, 0x80FAAD0, 0x2060201, 0xB089B5D0, 0x90027CC0
	.word 0x93019200, 0x7DA92601, 0xD0004209, 0xF7132606, 0x1C04FBEE
	.word 0x99021C30, 0x9B019A00, 0xFAE0F712, 0xD1134200, 0x9B019A00
	.word 0xF712AF03, 0x1C06F9AD, 0xD0094236, 0xFD0FF706, 0xDF061C31
	.word 0x5C40A803, 0x7400901, 0xE0010F40, 0xE7FF2000, 0xBDD0B009
.func
.thumb_func
sub_80FAB2C:
	push {r4,r6,r7,lr}
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80FAB40 // =0x605ff01 
	mov r6, #0
	ldr r7, dword_80FAB44 // =0x0 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.byte 0, 0
dword_80FAB40: .word 0x605FF01
dword_80FAB44: .word 0x0
.endfunc // sub_80FAB2C

.func
.thumb_func
sub_80FAB48:
	push {r4,r6,r7,lr}
	bl sub_8001532
	mov r1, #3
	and r0, r1
	mov r1, #6
	mul r0, r1
	ldr r6, off_80FABD0 // =byte_80FABD4 
	add r6, r6, r0
	ldrb r0, [r6,#2]
	ldrb r1, [r6,#3]
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80FAB68
	mov r2, #7
	sub r0, r2, r0
loc_80FAB68:
	mov r2, #0x10
	mov r3, #0x34 
	add r3, r3, r7
	push {r6,r7}
	ldrb r4, [r7,#3]
	ldrb r6, [r7,#0xc]
	lsl r6, r6, #8
	orr r4, r6
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x30]
	add r7, #0
	bl sub_80D52C4
	pop {r6,r7}
	ldrb r0, [r6,#4]
	ldrb r1, [r6,#5]
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_80FAB92
	mov r2, #7
	sub r0, r2, r0
loc_80FAB92:
	mov r2, #0x10
	mov r3, #0x34 
	add r3, r3, r7
	push {r6,r7}
	ldrb r6, [r7,#0xc]
	lsl r6, r6, #8
	orr r4, r6
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x30]
	add r7, #4
	bl sub_80D52C4
	pop {r6,r7}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	push {r6,r7}
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x30]
	add r7, #8
	bl sub_80D50FC
	pop {r6,r7}
	ldrb r0, [r6]
	ldrb r1, [r6,#1]
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq locret_80FABCE
	mov r2, #7
	sub r0, r2, r0
locret_80FABCE:
	pop {r4,r6,r7,pc}
off_80FABD0: .word byte_80FABD4
byte_80FABD4: .byte 0x1, 0x2, 0x1, 0x1, 0x3, 0x3, 0x1, 0x1, 0x1, 0x3, 0x3, 0x2, 0x1, 0x2, 0x1, 0x3, 0x3
	.byte 0x1, 0x1, 0x2, 0x3, 0x1, 0x3, 0x3
.endfunc // sub_80FAB48

.func
.thumb_func
sub_80FABEC:
	push {lr}
	mov r0, #1
	ldr r1, [r7,#0x30]
	ldr r1, [r1]
	tst r1, r1
	beq loc_80FABFA
	strb r0, [r1,#0xb]
loc_80FABFA:
	ldr r1, [r7,#0x30]
	ldr r1, [r1,#4]
	tst r1, r1
	beq loc_80FAC04
	strb r0, [r1,#0xb]
loc_80FAC04:
	ldr r1, [r7,#0x30]
	ldr r1, [r1,#8]
	tst r1, r1
	beq locret_80FAC0E
	strb r0, [r1,#0xb]
locret_80FAC0E:
	pop {pc}
.endfunc // sub_80FABEC

	push {lr}
	mov r3, #0
	ldrb r0, [r7,#3]
	ldr r1, off_80FAC2C // =byte_80FAC30 
	ldrb r0, [r1,r0]
	ldr r1, [r7,#0x38]
	ldrh r2, [r5,#0x24]
	sub r1, r1, r2
	cmp r1, r0
	blt loc_80FAC26
	mov r3, #1
loc_80FAC26:
	add r0, r3, #0
	pop {pc}
	.balign 4, 0x00
off_80FAC2C: .word byte_80FAC30
byte_80FAC30: .byte 0xA, 0x14, 0x1E, 0x28
.func
.thumb_func
sub_80FAC34:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x1c
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	bl sub_80FAC8A
	str r7, [sp]
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	ldr r2, dword_80FACAC // =0x10000 
	mov r3, #0
	mov r4, #0x10
	ldrb r6, [r5,#0x16]
	add r7, sp, #4
	bl sub_800D3FE
	add r4, r0, #0
	tst r4, r4
	beq loc_80FAC86
	add r0, sp, #4
	add r1, r4, #0
	add r2, r4, #0
	bl sub_8000C72
	ldr r7, [sp]
	mov r6, #1
loc_80FAC6C:
	add r0, sp, #4
	ldrb r0, [r0,r6]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_80FAC8A
	add r6, #1
	cmp r6, r4
	bge loc_80FAC86
	ldrb r0, [r7,#0xe]
	cmp r6, r0
	blt loc_80FAC6C
loc_80FAC86:
	add sp, sp, #0x1c
	pop {r4,r6,r7,pc}
.endfunc // sub_80FAC34

.func
.thumb_func
sub_80FAC8A:
	push {r4,r6,lr}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#0xc]
	mov r3, #0
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x18
	orr r4, r3
	ldr r6, [r7,#0x30]
	bl sub_80D54F0
	pop {r4,r6,pc}
	.balign 4, 0x00
dword_80FACAC: .word 0x10000
dword_80FACB0: .word 0x1010A08, 0x140100A, 0x1000384, 0x514000A, 0xA0101
	.word 0x1020708, 0x708000A, 0xA0103, 0x1040708, 0x708000A
	.word 0xA0105
dword_80FACDC: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80FAD9C: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80FADD0+1
	.word sub_80FB114+1
	.word loc_80FB206+1
	.word loc_80FB3F8+1
.endfunc // sub_80FAC8A

	push {r0,r3-r5,r7,lr}
	lsr r7, r1, #0x20
loc_80FADD0:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80FADE8 // =off_80FADEC 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.balign 4, 0x00
off_80FADE8: .word off_80FADEC
off_80FADEC: .word sub_80FADF0+1
.func
.thumb_func
sub_80FADF0:
	push {r4,r6,lr}
	ldrb r0, [r6,#4]
	cmp r0, #1
	blt loc_80FAE48
	mov r0, #0
	strb r0, [r6,#4]
	mov r3, #7
	ldrh r1, [r5,#0x26]
	lsr r1, r1, #1
	ldrh r2, [r5,#0x24]
	cmp r1, r2
	ble loc_80FAE0A
	mov r3, #5
loc_80FAE0A:
	ldrb r0, [r6,#5]
	cmp r0, r3
	bge loc_80FAE3E
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
	ldrb r0, [r6,#6]
	cmp r0, #1
	bge loc_80FAE34
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xc
	bge loc_80FAE2E
	ldrb r0, [r6,#6]
	add r0, #1
	strb r0, [r6,#6]
loc_80FAE2E:
	bl sub_80FAFF2
	b locret_80FAE52
loc_80FAE34:
	mov r0, #0
	strb r0, [r6,#6]
	bl sub_80FB028
	b locret_80FAE52
loc_80FAE3E:
	mov r0, #0
	strb r0, [r6,#5]
	bl sub_80FAFB4
	b locret_80FAE52
loc_80FAE48:
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
	bl sub_80FAFA0
locret_80FAE52:
	pop {r4,r6,pc}
.endfunc // sub_80FADF0

.func
.thumb_func
sub_80FAE54:
	push {lr}
	pop {pc}
.endfunc // sub_80FAE54

	push {lr}
	pop {pc}
.func
.thumb_func
sub_80FAE5C:
	push {lr}
	pop {pc}
.endfunc // sub_80FAE5C

.func
.thumb_func
sub_80FAE60:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq locret_80FAE9E
	bl sub_80E5410
	mov r0, #0
	str r0, [r5,#0x60]
locret_80FAE9E:
	pop {pc}
.endfunc // sub_80FAE60

.func
.thumb_func
sub_80FAEA0:
	push {r4,lr}
	ldr r0, off_80FAEBC // =byte_80FAEC0 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FB100 // =0xa000 
	tst r0, r1
	beq loc_80FAEB6
	add r4, #0x3c 
loc_80FAEB6:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80FAEBC: .word byte_80FAEC0
byte_80FAEC0: .byte 0x1E, 0x18, 0x12, 0x12
.endfunc // sub_80FAEA0

.func
.thumb_func
sub_80FAEC4:
	push {lr}
	ldr r0, off_80FAEDC // =byte_80FAEE0 
	bl sub_800FE28
	push {r0}
	ldr r0, off_80FAEDC // =byte_80FAEE0 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_80FAEDC: .word byte_80FAEE0
byte_80FAEE0: .byte 0x2, 0x2, 0x2, 0x2, 0x30, 0x30, 0x30, 0x30
.endfunc // sub_80FAEC4

.func
.thumb_func
sub_80FAEE8:
	push {r4,lr}
	ldr r0, off_80FAF04 // =byte_80FAF08 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FB100 // =0xa000 
	tst r0, r1
	beq loc_80FAEFE
	add r4, #0x3c 
loc_80FAEFE:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80FAF04: .word byte_80FAF08
byte_80FAF08: .byte 0x1E, 0x18, 0x12, 0xC
.endfunc // sub_80FAEE8

.func
.thumb_func
sub_80FAF0C:
	push {r4,lr}
	ldr r0, off_80FAF28 // =byte_80FAF2C 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FB100 // =0xa000 
	tst r0, r1
	beq loc_80FAF22
	add r4, #0x3c 
loc_80FAF22:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80FAF28: .word byte_80FAF2C
byte_80FAF2C: .byte 0x18, 0x18, 0x12, 0x12
.endfunc // sub_80FAF0C

.func
.thumb_func
sub_80FAF30:
	push {lr}
	ldr r0, off_80FAF3C // =byte_80FAF40 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FAF3C: .word byte_80FAF40
byte_80FAF40: .byte 0x12, 0x12, 0xC, 0xC
.endfunc // sub_80FAF30

.func
.thumb_func
sub_80FAF44:
	push {lr}
	ldr r0, off_80FAF6C // =byte_80FAF70 
	bl sub_800FE28
	push {r0}
	ldr r0, off_80FAF6C // =byte_80FAF70 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	ldr r0, off_80FAF6C // =byte_80FAF70 
	add r0, #8
	bl sub_800FE28
	add r2, r0, #0
	pop {r0,r1}
	pop {pc}
	.balign 4, 0x00
off_80FAF6C: .word byte_80FAF70
byte_80FAF70: .byte 0x12, 0x12, 0x12, 0x12, 0x3, 0x3, 0x3, 0x3, 0xC, 0xC, 0xC
	.byte 0xC
.endfunc // sub_80FAF44

.func
.thumb_func
sub_80FAF7C:
	push {r4,lr}
	ldr r0, off_80FAF98 // =byte_80FAF9C 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FB100 // =0xa000 
	tst r0, r1
	beq loc_80FAF92
	add r4, #0x3c 
loc_80FAF92:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80FAF98: .word byte_80FAF9C
byte_80FAF9C: .byte 0x1E, 0x1E, 0x18, 0x18
.endfunc // sub_80FAF7C

.func
.thumb_func
sub_80FAFA0:
	push {lr}
	ldr r0, dword_80FB104 // =dword_80FB484 
	str r0, [r7,#0x28]
	bl sub_80FAEA0
	strh r0, [r7,#0x18]
	mov r0, #9
	bl loc_8011690
	pop {pc}
.endfunc // sub_80FAFA0

.func
.thumb_func
sub_80FAFB4:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0x10
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80FB062
	bl sub_80FAEE8
	strh r0, [r7,#0x18]
	bl sub_80FAEC4
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x30]
	ldr r0, dword_80FB108 // =dword_80FB484 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {pc}
.endfunc // sub_80FAFB4

.func
.thumb_func
sub_80FAFF2:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0x10
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_80FB062
	bl sub_80FAF0C
	strh r0, [r7,#0x18]
	bl sub_80FAF30
	strb r0, [r7,#0xc]
	ldr r0, off_80FB10C // =sub_80FB7B4+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {pc}
.endfunc // sub_80FAFF2

.func
.thumb_func
sub_80FB028:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0x10
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80FB062
	bl sub_80FAF7C
	strh r0, [r7,#0x18]
	bl sub_80FAF44
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	strb r2, [r7,#0xe]
	ldr r0, off_80FB110 // =sub_80FB812+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {pc}
.endfunc // sub_80FB028

.func
.thumb_func
sub_80FB062:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FB0B8 // =dword_80FB0C4 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FB0DC // =dword_80FB0E8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_80FB062

	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FB0B8 // =dword_80FB0C4 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FB0DC // =dword_80FB0E8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80FB0B8: .word dword_80FB0C4
	.word dword_80FB0CC
	.word dword_80FB0D4
dword_80FB0C4: .word 0x960064, 0xC800C8
dword_80FB0CC: .word 0x500032
	.word 0x6E006E
dword_80FB0D4: .word 0x32001E, 0x460046
off_80FB0DC: .word dword_80FB0E8
	.word dword_80FB0F0
	.word dword_80FB0F8
dword_80FB0E8: .word 0xA000A
	.word 0xA000A
dword_80FB0F0: .word 0xA000A
	.word 0xA000A
dword_80FB0F8: .word 0xA000A
	.word 0xA000A
dword_80FB100: .word 0xA000
dword_80FB104: .word 0x80FB725
dword_80FB108: .word 0x80FB76B
off_80FB10C: .word sub_80FB7B4+1
off_80FB110: .word sub_80FB812+1
.func
.thumb_func
sub_80FB114:
	push {r7,lr}
	ldr r1, off_80FB124 // =off_80FB128 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FB124: .word off_80FB128
off_80FB128: .word sub_80FB134+1
	.word sub_80FB19C+1
	.word sub_80FB1E2+1
.endfunc // sub_80FB114

.func
.thumb_func
sub_80FB134:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FB170
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FB17E
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FB188 // =dword_80FB18C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_80FB186
loc_80FB170:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FB186
	mov r0, #4
	strh r0, [r7]
	b locret_80FB186
loc_80FB17E:
	mov r0, #0x50 
	strh r0, [r7,#0x18]
	mov r0, #8
	strh r0, [r7]
locret_80FB186:
	pop {pc}
off_80FB188: .word dword_80FB18C
dword_80FB18C: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80FB134

.func
.thumb_func
sub_80FB19C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FB1D4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80FB1E0
loc_80FB1D4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FB1E0
	mov r0, #8
	strh r0, [r7]
locret_80FB1E0:
	pop {pc}
.endfunc // sub_80FB19C

.func
.thumb_func
sub_80FB1E2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FB1F8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FB204
loc_80FB1F8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FB204
	bl sub_8011714
locret_80FB204:
	pop {pc}
.endfunc // sub_80FB1E2

loc_80FB206:
	push {r7,lr}
	ldr r1, off_80FB214 // =off_80FB218 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FB214: .word off_80FB218
off_80FB218: .word loc_80FB230+1
	.word sub_80FB2A4+1
	.word sub_80FB2EA+1
	.word sub_80FB30E+1
	.word sub_80FB366+1
	.word sub_80FB3CA+1
loc_80FB230:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FB278
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FB286
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FB290 // =dword_80FB294 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FB286
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r7,#0x38]
	str r0, [r7,#0x3c]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_80FB28E
loc_80FB278:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FB28E
	mov r0, #4
	strh r0, [r7]
	b locret_80FB28E
loc_80FB286:
	mov r0, #0x50 
	strh r0, [r7,#0x18]
	mov r0, #0x14
	strh r0, [r7]
locret_80FB28E:
	pop {pc}
off_80FB290: .word dword_80FB294
dword_80FB294: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80FB2A4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FB2DC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80FB2E8
loc_80FB2DC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FB2E8
	mov r0, #8
	strh r0, [r7]
locret_80FB2E8:
	pop {pc}
.endfunc // sub_80FB2A4

.func
.thumb_func
sub_80FB2EA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FB300
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x10
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_80FB30C
loc_80FB300:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FB30C
	mov r0, #0xc
	strh r0, [r7]
locret_80FB30C:
	pop {pc}
.endfunc // sub_80FB2EA

.func
.thumb_func
sub_80FB30E:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FB348
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #0xad
	bl sound_play // () -> void
	mov r0, #0x18
	bl object_setCounterTime
	mov r4, #1
	bl sub_80E532C
	ldr r1, [r7,#0x30]
	str r0, [r1]
	mov r4, #0
	mov r3, #0xa
	lsl r3, r3, #8
	orr r4, r3
	bl sub_80E887C
	str r0, [r7,#0x38]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	b locret_80FB364
loc_80FB348:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	ldrb r1, [r7,#0xd]
	sub r1, #9
	cmp r0, r1
	beq loc_80FB360
	cmp r0, #0
	bgt locret_80FB364
	mov r0, #0x10
	strh r0, [r7]
	b locret_80FB364
loc_80FB360:
	mov r0, #0x12
	strb r0, [r5,#0x10]
locret_80FB364:
	pop {r4,pc}
.endfunc // sub_80FB30E

.func
.thumb_func
sub_80FB366:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FB3A0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	mov r4, #0xa
	bl sub_80E8770
	str r0, [r7,#0x3c]
	mov r0, #0x16
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80FB394
	bl sub_80E5410
	mov r0, #0
	ldr r1, [r7,#0x30]
	str r0, [r1]
loc_80FB394:
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq locret_80FB3C8
	bl sub_80E8894
	b locret_80FB3C8
loc_80FB3A0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xc
	beq loc_80FB3B4
	cmp r0, #0
	bgt locret_80FB3C8
	mov r0, #0x14
	strh r0, [r7]
	b locret_80FB3C8
loc_80FB3B4:
	mov r0, #0x7c 
	add r0, #0xff
	bl sound_play // () -> void
	bl sub_80FB81E
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
locret_80FB3C8:
	pop {r4,pc}
.endfunc // sub_80FB366

.func
.thumb_func
sub_80FB3CA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FB3DC
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FB3F6
loc_80FB3DC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FB3F6
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
	ldr r0, [r7,#0x3c]
	tst r0, r0
	beq locret_80FB3F6
	bl sub_80E8788
locret_80FB3F6:
	pop {pc}
.endfunc // sub_80FB3CA

loc_80FB3F8:
	push {r7,lr}
	ldr r1, off_80FB408 // =off_80FB40C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FB408: .word off_80FB40C
off_80FB40C: .word sub_80FB424+1
pt_80FB410: .word dword_80FB484+17
	.word dword_80FB484+87
	.word dword_80FB484+123
	.word dword_80FB484+189
	.word dword_80FB484+273
.func
.thumb_func
sub_80FB424:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FB466
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FB474
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FB480 // =dword_80FB484 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FB474
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_80FB47C
loc_80FB466:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FB47C
	mov r0, #4
	strh r0, [r7]
	b locret_80FB47C
loc_80FB474:
	mov r0, #0x50 
	strh r0, [r7,#0x18]
	mov r0, #0x14
	strh r0, [r7]
locret_80FB47C:
	pop {pc}
	.byte 0, 0
off_80FB480: .word dword_80FB484
dword_80FB484: .word 0x10, 0xF8800A0, 0x30, 0xF880080, 0x7878B500, 0xD1174200
	.word 0x70782004, 0x74282003, 0x7D697D28, 0x74E974A8, 0xFB4BF720, 0xFEF4F712
	.word 0xFDCAF71E, 0xF71E2040, 0x2001FE4F, 0xF71E04C0, 0x200AFE46, 0xE0058238
	.word 0x38018A38, 0xDC018238, 0x80382008, 0xB500BD00, 0x42007878, 0x2004D106
	.word 0x200F7078, 0x20197428, 0xE0058238, 0x38018A38, 0xDC018238, 0x8038200C
	.word 0xB510BD00, 0x42007878, 0x2004D10C, 0x20117078, 0xF0007428, 0x75B8F9BA
	.word 0x7B3875F9, 0x20008238, 0xE00E8278, 0x30018A78, 0x8C08278, 0x7DB8D203
	.word 0xF7117DF9, 0x8A38FB53, 0x82383801, 0x2010DC01, 0xBD108038, 0x7878B550
	.word 0xD11E4200, 0x70782004, 0x74282017, 0xF7132012, 0x20FFFA43, 0xF838F705
	.word 0x7CE97CA8, 0x78FC78BA, 0x21B8AFB, 0x68BE431C, 0xFA39F7DA, 0xFF71F712
	.word 0x20510204, 0x6B691824, 0x6BEB6BAA, 0x82382023, 0x8A38E005, 0x82383801
	.word 0x2014DC01, 0xBD508038, 0x7878B500, 0xD1064200, 0x70782004, 0x74282000
	.word 0x82388B38, 0x8A38E005, 0x82383801, 0xF716DC01, 0xBD00F8AF, 0x4903B580
	.word 0x58097838, 0x470846FE, 0xBD80, 0x80FB5CC, 0x80FB5E1, 0x80FB651
	.word 0x80FB697, 0x80FB6C1, 0x80FB701, 0x7878B500, 0xD11C4200, 0x70782004
	.word 0xFFF9F712, 0x7DA8D01E, 0x491100C0, 0x68021840, 0x6AF86843, 0x46FE6AB9
	.word 0x42004708, 0x7528D012, 0xF7207569, 0x2040FA85, 0xFD9DF71E, 0x74282004
	.word 0x82382004, 0x8A38E00A, 0x82383801, 0x2004DC06, 0xE0038038, 0x83382050
	.word 0x80382010, 0xBD00, 0x80FB640, 0x10, 0xF8800A0, 0x30
	.word 0xF880080, 0x7878B500, 0xD1174200, 0x70782004, 0x74282003, 0x7D697D28
	.word 0x74E974A8, 0xFA6DF720, 0xFE16F712, 0xFCECF71E, 0xF71E2040, 0x2001FD71
	.word 0xF71E04C0, 0x200AFD68, 0xE0058238, 0x38018A38, 0xDC018238, 0x80382008
	.word 0xB510BD00, 0x42007878, 0x2004D109, 0x20117078, 0x20127428, 0xF998F713
	.word 0x82387B38, 0x8A38E005, 0x82383801, 0x200CDC01, 0xBD108038, 0x7878B550
	.word 0xD10C4200, 0x70782004, 0x74282012, 0xF8D0F000, 0x30FF2021, 0xFF78F704
	.word 0x82387BB8, 0x8A38E00D, 0x82383801, 0x7B78DC09, 0x73783801, 0xDD022800
	.word 0x70782000, 0x2010E001, 0xBD508038, 0x7878B500, 0xD1064200, 0x70782004
	.word 0x74282000, 0x82388B38, 0x8A38E005, 0x82383801, 0xF715DC01, 0xBD00FFF9
	.word 0xB088B5C0, 0x93019200, 0x9A007CE8, 0xAF029B01, 0xFC37F711, 0x42361C06
	.word 0x9A00D107, 0xAF029B01, 0xFB8EF711, 0x42361C06, 0xF705D009, 0x1C31FEF0
	.word 0xA802DF06, 0x9015C40, 0xF400740, 0x7CA8E001, 0xB0087CE9, 0xB5D0BDC0
	.word 0x9200B082, 0x7CC19301, 0xC27DA8, 0x189B4B09, 0x685B681A, 0xFC81F711
	.word 0xD0084200, 0x9B019A00, 0xF711B403, 0x4200FA7A, 0xD100BC03, 0xB0022000
	.word 0xBDD0, 0x80FB7A4, 0x0
	.word 0x20, 0x20, 0x0
.endfunc // sub_80FB424

.func
.thumb_func
sub_80FB7B4:
	push {r6,r7,lr}
	sub sp, sp, #0x24
	ldrb r0, [r0,#0x13]
	str r0, [sp,#8]
	str r2, [sp]
	str r3, [sp,#4]
	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80FB7CA
	mov r0, #6
loc_80FB7CA:
	ldr r1, [sp,#8]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80FB7B4

	tst r0, r0
	pop {r0,r1}
	bne loc_80FB80E
	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80FB7E6
	mov r0, #6
loc_80FB7E6:
	ldr r1, [sp,#8]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #0xc
	bl sub_800CF14
	add r6, r0, #0
	tst r6, r6
	beq loc_80FB80C
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FB80E
loc_80FB80C:
	mov r0, #0
loc_80FB80E:
	add sp, sp, #0x24
	pop {r6,r7,pc}
.func
.thumb_func
sub_80FB812:
	push {lr}
	ldrb r1, [r0,#0x13]
	ldrb r0, [r5,#0x16]
	bl sub_800D086
.endfunc // sub_80FB812

	pop {pc}
.func
.thumb_func
sub_80FB81E:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80FB83C // =0x6050a01 
	ldr r6, [r7,#8]
	ldr r7, dword_80FB840 // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_80FB83C: .word 0x6050A01
dword_80FB840: .word 0x3
.endfunc // sub_80FB81E

	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	ldr r2, off_80FB868 // =dword_80FB86C 
	ldr r1, [r2,r1]
	tst r0, r1
	beq loc_80FB864
	mov r0, #1
	b locret_80FB866
loc_80FB864:
	mov r0, #0
locret_80FB866:
	pop {pc}
off_80FB868: .word dword_80FB86C
dword_80FB86C: .word 0x5800000, 0xA800000, 0x7CA8B550, 0x78BA7CE9, 0x68BE78FC
	.word 0xF9BEF7DA, 0xB510BD50, 0xFD1AF712, 0x6AF91C04, 0x7CE97C88
	.word 0xF711B403, 0x4200F9EC, 0xD003BC03, 0x1A837CAA, 0xDC044363
	.word 0x7DAA2006, 0xD0004212, 0xBD102001, 0x1010B08, 0x100000B
	.word 0x708, 0x7D0000A, 0xA0001, 0x207D0, 0xAF0000A
	.word 0xA0003, 0x40AF0, 0xAF0000A, 0xA0005
dword_80FB8E0: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80FB9A0: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80FBC8A+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80FB9DC+1
	.word loc_80FC074+1
	.word loc_80FC152+1
	.word loc_80FC302+1
	.word loc_80FC5FA+1
	.word loc_80FC7E6+1
	.word loc_80FC9C8+1
loc_80FB9DC:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80FB9F4 // =off_80FB9F8 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.balign 4, 0x00
off_80FB9F4: .word off_80FB9F8
off_80FB9F8: .word sub_80FBA0C+1
	.word sub_80FBA24+1
	.word sub_80FBA9A+1
	.word sub_80FBB34+1
	.word sub_80FBBCA+1
.func
.thumb_func
sub_80FBA0C:
	push {lr}
	bl sub_800FE36
	ldr r1, off_80FBA1C // =byte_80FBA20 
	ldrb r0, [r1,r0]
	strb r0, [r6]
	pop {pc}
	.balign 4, 0x00
off_80FBA1C: .word byte_80FBA20
byte_80FBA20: .byte 0x4, 0xC, 0xC, 0xC
.endfunc // sub_80FBA0C

.func
.thumb_func
sub_80FBA24:
	push {r4,r6,lr}
	ldrb r0, [r6,#4]
	cmp r0, #4
	blt loc_80FBA6E
	mov r0, #0
	strb r0, [r6,#4]
	ldrb r0, [r6,#5]
	cmp r0, #2
	bge loc_80FBA64
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
	ldrb r0, [r6,#6]
	cmp r0, #1
	bge loc_80FBA5A
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xc
	bge loc_80FBA54
	ldrb r0, [r6,#6]
	add r0, #1
	strb r0, [r6,#6]
loc_80FBA54:
	bl sub_80FBE60
	b loc_80FBA82
loc_80FBA5A:
	mov r0, #0
	strb r0, [r6,#6]
	bl sub_80FBEE8
	b loc_80FBA82
loc_80FBA64:
	mov r0, #0
	strb r0, [r6,#5]
	bl sub_80FBF24
	b loc_80FBA82
loc_80FBA6E:
	bl sub_8001532
	mov r1, #1
	and r0, r1
	add r0, #1
	ldrb r1, [r6,#4]
	add r1, r1, r0
	strb r1, [r6,#4]
	bl sub_80FBE4C
loc_80FBA82:
	ldrh r0, [r5,#0x26]
	lsr r0, r0, #1
	ldrh r1, [r5,#0x24]
	cmp r0, r1
	blt locret_80FBA98
	mov r1, #8
	strb r1, [r6]
	mov r0, #0
	str r0, [r6,#4]
	mov r0, #0
	strh r0, [r6,#2]
locret_80FBA98:
	pop {r4,r6,pc}
.endfunc // sub_80FBA24

.func
.thumb_func
sub_80FBA9A:
	push {r4,r6,lr}
	bl sub_80FBDF4
	tst r0, r0
	beq loc_80FBABC
	ldrb r0, [r6,#4]
	cmp r0, #2
	bge loc_80FBAFE
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xe
	bge loc_80FBABC
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
loc_80FBABC:
	ldrb r0, [r6,#5]
	cmp r0, #3
	blt loc_80FBB08
	mov r0, #0
	strb r0, [r6,#5]
	ldrb r0, [r6,#6]
	cmp r0, #2
	bge loc_80FBAF4
	bl sub_8001532
	mov r1, #1
	and r0, r1
	add r0, #1
	ldrb r1, [r6,#6]
	add r1, r1, r0
	strb r1, [r6,#6]
	ldrb r0, [r6,#2]
	mov r1, #1
	eor r1, r0
	strb r1, [r6,#2]
	tst r0, r0
	bne loc_80FBAEE
	bl sub_80FBE60
	b loc_80FBB1C
loc_80FBAEE:
	bl sub_80FBEE8
	b loc_80FBB1C
loc_80FBAF4:
	mov r0, #0
	strb r0, [r6,#6]
	bl sub_80FBF24
	b loc_80FBB1C
loc_80FBAFE:
	mov r0, #0
	strb r0, [r6,#4]
	bl sub_80FBF54
	b loc_80FBB1C
loc_80FBB08:
	bl sub_8001532
	mov r1, #1
	and r0, r1
	add r0, #1
	ldrb r1, [r6,#5]
	add r1, r1, r0
	strb r1, [r6,#5]
	bl sub_80FBE4C
loc_80FBB1C:
	ldrh r0, [r5,#0x26]
	lsr r0, r0, #1
	ldrh r1, [r5,#0x24]
	cmp r0, r1
	bge locret_80FBB32
	mov r1, #4
	strb r1, [r6]
	mov r0, #0
	str r0, [r6,#4]
	mov r0, #0
	strh r0, [r6,#2]
locret_80FBB32:
	pop {r4,r6,pc}
.endfunc // sub_80FBA9A

.func
.thumb_func
sub_80FBB34:
	push {r4,r6,lr}
	ldrb r0, [r6,#4]
	cmp r0, #3
	bge loc_80FBB4A
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
	ldrb r0, [r6,#7]
	cmp r0, #4
	bge loc_80FBB8C
	b loc_80FBB96
loc_80FBB4A:
	mov r0, #0
	strb r0, [r6,#4]
	ldrb r0, [r6,#5]
	cmp r0, #2
	bge loc_80FBB82
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
	ldrb r0, [r6,#6]
	cmp r0, #1
	bge loc_80FBB78
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xc
	bge loc_80FBB72
	ldrb r0, [r6,#6]
	add r0, #1
	strb r0, [r6,#6]
loc_80FBB72:
	bl sub_80FBE60
	b loc_80FBBB2
loc_80FBB78:
	mov r0, #0
	strb r0, [r6,#6]
	bl sub_80FBEE8
	b loc_80FBBB2
loc_80FBB82:
	mov r0, #0
	strb r0, [r6,#5]
	bl sub_80FBF24
	b loc_80FBBB2
loc_80FBB8C:
	mov r0, #0
	strb r0, [r6,#7]
	bl sub_80FBE9C
	b loc_80FBBB2
loc_80FBB96:
	ldrb r0, [r6,#7]
	add r0, #1
	strb r0, [r6,#7]
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xc
	bge loc_80FBBAE
	ldrb r0, [r6,#7]
	add r0, #1
	strb r0, [r6,#7]
loc_80FBBAE:
	bl sub_80FBE4C
loc_80FBBB2:
	ldrh r0, [r5,#0x26]
	lsr r0, r0, #1
	ldrh r1, [r5,#0x24]
	cmp r0, r1
	blt locret_80FBBC8
	mov r1, #0x10
	strb r1, [r6]
	mov r0, #0
	str r0, [r6,#4]
	mov r0, #0
	strh r0, [r6,#2]
locret_80FBBC8:
	pop {r4,r6,pc}
.endfunc // sub_80FBB34

.func
.thumb_func
sub_80FBBCA:
	push {r4,r6,lr}
	bl sub_80FBDF4
	tst r0, r0
	beq loc_80FBBEC
	ldrb r0, [r6,#4]
	cmp r0, #2
	bge loc_80FBC48
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xe
	bge loc_80FBBEC
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
loc_80FBBEC:
	ldrb r0, [r6,#5]
	cmp r0, #2
	bge loc_80FBC06
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #8
	blt loc_80FBC42
	b loc_80FBC52
loc_80FBC06:
	mov r0, #0
	strb r0, [r6,#5]
	ldrb r0, [r6,#6]
	cmp r0, #2
	bge loc_80FBC38
	bl sub_8001532
	mov r1, #1
	and r0, r1
	add r0, #1
	ldrb r1, [r6,#6]
	add r1, r1, r0
	strb r1, [r6,#6]
	ldrb r0, [r6,#2]
	mov r1, #1
	eor r1, r0
	strb r1, [r6,#2]
	tst r0, r0
	bne loc_80FBC32
	bl sub_80FBE60
	b loc_80FBC66
loc_80FBC32:
	bl sub_80FBEE8
	b loc_80FBC66
loc_80FBC38:
	mov r0, #0
	strb r0, [r6,#6]
	bl sub_80FBF24
	b loc_80FBC66
loc_80FBC42:
	bl sub_80FBE9C
	b loc_80FBC66
loc_80FBC48:
	mov r0, #0
	strb r0, [r6,#4]
	bl sub_80FBF54
	b loc_80FBC66
loc_80FBC52:
	bl sub_8001532
	mov r1, #1
	and r0, r1
	add r0, #1
	ldrb r1, [r6,#5]
	add r1, r1, r0
	strb r1, [r6,#5]
	bl sub_80FBE4C
loc_80FBC66:
	ldrh r0, [r5,#0x26]
	lsr r0, r0, #1
	ldrh r1, [r5,#0x24]
	cmp r0, r1
	bge locret_80FBC7C
	mov r1, #0xc
	strb r1, [r6]
	mov r0, #0
	str r0, [r6,#4]
	mov r0, #0
	strh r0, [r6,#2]
locret_80FBC7C:
	pop {r4,r6,pc}
.endfunc // sub_80FBBCA

	push {lr}
	pop {pc}
	push {lr}
	pop {pc}
	push {r4,lr}
	pop {r4,pc}
.func
.thumb_func
sub_80FBC8A:
	push {lr}
	bl sub_80170C4
	ldrb r0, [r5,#0x10]
	cmp r0, #2
	bne locret_80FBCA0
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq locret_80FBCA0
	mov r1, #0
	str r1, [r5,#0x64]
locret_80FBCA0:
	pop {pc}
.endfunc // sub_80FBC8A

.func
.thumb_func
sub_80FBCA2:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r2, [r5,#0x58]
	add r2, #0xa0
	ldrb r0, [r2,#0x16]
	ldrb r1, [r2,#0x17]
	bl sub_801BB46
.endfunc // sub_80FBCA2

	ldr r0, [r5,#0x64]
	tst r0, r0
	beq locret_80FBCF0
	mov r1, #0
	str r1, [r5,#0x64]
locret_80FBCF0:
	pop {pc}
.func
.thumb_func
sub_80FBCF2:
	push {lr}
	ldr r0, off_80FBCFC // =byte_80FBD00 
	bl sub_800FE28
	pop {pc}
off_80FBCFC: .word byte_80FBD00
byte_80FBD00: .byte 0x14, 0x10, 0xE, 0xC
.endfunc // sub_80FBCF2

.func
.thumb_func
sub_80FBD04:
	push {lr}
	ldr r0, off_80FBD10 // =byte_80FBD14 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_80FBD10: .word byte_80FBD14
byte_80FBD14: .byte 0x14, 0x10, 0xE, 0xC
.endfunc // sub_80FBD04

.func
.thumb_func
sub_80FBD18:
	push {lr}
	ldr r0, off_80FBD24 // =byte_80FBD28 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FBD24: .word byte_80FBD28
byte_80FBD28: .byte 0x10, 0xE, 0xC, 0xA
.endfunc // sub_80FBD18

.func
.thumb_func
sub_80FBD2C:
	push {lr}
	ldr r0, off_80FBD38 // =byte_80FBD3C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FBD38: .word byte_80FBD3C
byte_80FBD3C: .byte 0x14, 0x10, 0xE, 0xC
.endfunc // sub_80FBD2C

.func
.thumb_func
sub_80FBD40:
	push {lr}
	ldr r0, off_80FBD4C // =byte_80FBD50 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FBD4C: .word byte_80FBD50
byte_80FBD50: .byte 0xC, 0xA, 0x8, 0x6
.endfunc // sub_80FBD40

.func
.thumb_func
sub_80FBD54:
	push {lr}
	ldr r0, off_80FBD60 // =byte_80FBD64 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_80FBD60: .word byte_80FBD64
byte_80FBD64: .byte 0x3C, 0x32, 0x28, 0x1E
.endfunc // sub_80FBD54

.func
.thumb_func
sub_80FBD68:
	push {lr}
	ldr r0, off_80FBD74 // =byte_80FBD78 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FBD74: .word byte_80FBD78
byte_80FBD78: .byte 0x14, 0x10, 0xE, 0xC
.endfunc // sub_80FBD68

.func
.thumb_func
sub_80FBD7C:
	push {lr}
	ldr r0, off_80FBD88 // =byte_80FBD8C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FBD88: .word byte_80FBD8C
byte_80FBD8C: .byte 0x10, 0xE, 0xC, 0xA
.endfunc // sub_80FBD7C

.func
.thumb_func
sub_80FBD90:
	push {lr}
	ldr r0, off_80FBD9C // =byte_80FBDA0 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FBD9C: .word byte_80FBDA0
byte_80FBDA0: .byte 0x14, 0x10, 0xE, 0xC
.endfunc // sub_80FBD90

.func
.thumb_func
sub_80FBDA4:
	push {lr}
	ldr r0, off_80FBDB0 // =byte_80FBDB4 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_80FBDB0: .word byte_80FBDB4
byte_80FBDB4: .byte 0x14, 0x10, 0xE, 0xC
.endfunc // sub_80FBDA4

.func
.thumb_func
sub_80FBDB8:
	push {lr}
	ldr r0, off_80FBDC4 // =byte_80FBDC8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FBDC4: .word byte_80FBDC8
byte_80FBDC8: .byte 0x14, 0x10, 0xE, 0xC
.endfunc // sub_80FBDB8

.func
.thumb_func
sub_80FBDCC:
	push {lr}
	ldr r0, off_80FBDD8 // =byte_80FBDDC 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FBDD8: .word byte_80FBDDC
byte_80FBDDC: .byte 0x14, 0x10, 0xE, 0xC
.endfunc // sub_80FBDCC

.func
.thumb_func
sub_80FBDE0:
	push {lr}
	ldr r0, off_80FBDEC // =byte_80FBDF0 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FBDEC: .word byte_80FBDF0
byte_80FBDF0: .byte 0x2, 0x4, 0x4, 0x4
.endfunc // sub_80FBDE0

.func
.thumb_func
sub_80FBDF4:
	push {r4,lr}
	sub sp, sp, #8
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	ldrb r1, [r0,#0x12]
	ldrb r2, [r0,#0x13]
	str r1, [sp]
	str r2, [sp,#4]
	mov r4, #0
loc_80FBE0C:
	ldrb r0, [r5,#0x16]
	mov r1, #6
	mul r0, r1
	ldr r1, off_80FBE3C // =byte_80FBE40 
	add r0, r0, r1
	add r1, r4, #0
	lsl r1, r1, #1
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	cmp r0, r2
	bne loc_80FBE30
	cmp r1, r3
	bne loc_80FBE30
	mov r0, #1
	b loc_80FBE38
loc_80FBE30:
	add r4, #1
	cmp r4, #3
	blt loc_80FBE0C
	mov r0, #0
loc_80FBE38:
	add sp, sp, #8
	pop {r4,pc}
off_80FBE3C: .word byte_80FBE40
byte_80FBE40: .byte 0x3, 0x2, 0x4, 0x2, 0x5, 0x2, 0x4, 0x2, 0x3, 0x2, 0x2, 0x2
.endfunc // sub_80FBDF4

.func
.thumb_func
sub_80FBE4C:
	push {r4,lr}
	ldr r0, off_80FC060 // =sub_80FCCBC+1 
	str r0, [r7,#0x28]
	bl sub_80FBCF2
	strh r0, [r7,#0x18]
	mov r0, #9
	bl loc_8011690
	pop {r4,pc}
.endfunc // sub_80FBE4C

.func
.thumb_func
sub_80FBE60:
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80FBF92
	ldr r0, dword_80FC064 // = 
	str r0, [r7,#0x28]
	bl sub_80FBD04
	strh r0, [r7,#0x18]
	bl sub_80FBD18
	strb r0, [r7,#0xc]
	mov r0, #0x64 
	add r0, r0, r5
	str r0, [r7,#0x30]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {r4,pc}
.endfunc // sub_80FBE60

.func
.thumb_func
sub_80FBE9C:
	push {r4,lr}
	mov r0, #0
	str r0, [r5,#0x60]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_80FBF92
	ldr r0, off_80FC068 // =sub_80FCD92+1 
	str r0, [r7,#0x28]
	bl sub_80FBD2C
	strh r0, [r7,#0x18]
	bl sub_80FBD40
	strb r0, [r7,#0xc]
	bl sub_80FBD54
	strb r0, [r7,#0xd]
	mov r0, #0x64 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x34]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {r4,pc}
.endfunc // sub_80FBE9C

.func
.thumb_func
sub_80FBEE8:
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80FBF92
	ldr r0, off_80FC06C // =sub_80FCDBA+1 
	str r0, [r7,#0x28]
	bl sub_80FBD68
	strh r0, [r7,#0x18]
	bl sub_80FBD7C
	strb r0, [r7,#0xc]
	mov r0, #0x64 
	add r0, r0, r5
	str r0, [r7,#0x30]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {r4,pc}
.endfunc // sub_80FBEE8

.func
.thumb_func
sub_80FBF24:
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #3
	bl sub_80FBF92
	ldr r0, off_80FC070 // =sub_80FCDDE+1 
	str r0, [r7,#0x28]
	bl sub_80FBD90
	strh r0, [r7,#0x18]
	bl sub_80FBDA4
	strb r0, [r7,#0xc]
	mov r0, #0x64 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0xd
	bl sub_8011680
	pop {r4,pc}
.endfunc // sub_80FBF24

.func
.thumb_func
sub_80FBF54:
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #4
	bl sub_80FBF92
	bl sub_80FBDB8
	strh r0, [r7,#0x18]
	bl sub_80FBDCC
	strb r0, [r7,#0xc]
	bl sub_80FBDE0
	strb r0, [r7,#0xd]
	mov r0, #0x64 
	add r0, r0, r5
	str r0, [r7,#0x30]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xe
	bl sub_8011680
	pop {r4,pc}
.endfunc // sub_80FBF54

.func
.thumb_func
sub_80FBF92:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FBFE8 // =dword_80FBFFC 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FC024 // =dword_80FC038 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_80FBF92

	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FBFE8 // =dword_80FBFFC 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FC024 // =dword_80FC038 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80FBFE8: .word dword_80FBFFC
	.word dword_80FC004
	.word dword_80FC00C
	.word dword_80FC014
	.word dword_80FC01C
dword_80FBFFC: .word 0x960064, 0xDC0096
dword_80FC004: .word 0x640046
	.word 0x960064
dword_80FC00C: .word 0x82005A, 0xC80082
dword_80FC014: .word 0xDC0096, 0x14A00DC
dword_80FC01C: .word 0x780050
	.word 0xB40078
off_80FC024: .word dword_80FC038
	.word dword_80FC040
	.word dword_80FC048
	.word dword_80FC050
	.word dword_80FC058
dword_80FC038: .word 0xA000A
	.word 0xA000A
dword_80FC040: .word 0xA000A
	.word 0xA000A
dword_80FC048: .word 0xA000A
	.word 0xA000A
dword_80FC050: .word 0xA000A
	.word 0xA000A
dword_80FC058: .word 0xA000A
	.word 0xA000A
off_80FC060: .word sub_80FCCBC+1
dword_80FC064: .word 0x80FCD71
off_80FC068: .word sub_80FCD92+1
off_80FC06C: .word sub_80FCDBA+1
off_80FC070: .word sub_80FCDDE+1
loc_80FC074:
	push {r7,lr}
	ldr r1, off_80FC084 // =off_80FC088 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FC084: .word off_80FC088
off_80FC088: .word loc_80FC094+1
	.word sub_80FC0EC+1
	.word sub_80FC118+1
loc_80FC094:
	push {lr}
	bl object_canMove
	beq loc_80FC0CE
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FC0D8 // =dword_80FC0DC 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_80FC0CE
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_80FC0D6
loc_80FC0CE:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FC0D6:
	pop {pc}
off_80FC0D8: .word dword_80FC0DC
dword_80FC0DC: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80FC0EC:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC116
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FC116:
	pop {pc}
.endfunc // sub_80FC0EC

.func
.thumb_func
sub_80FC118:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC144
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC150
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80FC150
loc_80FC144:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC150
	bl sub_8011714
locret_80FC150:
	pop {pc}
.endfunc // sub_80FC118

loc_80FC152:
	push {r7,lr}
	ldr r1, off_80FC160 // =off_80FC164 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FC160: .word off_80FC164
off_80FC164: .word sub_80FC17C+1
	.word sub_80FC1DC+1
	.word sub_80FC208+1
	.word sub_80FC226+1
	.word sub_80FC26A+1
	.word sub_80FC2DC+1
.func
.thumb_func
sub_80FC17C:
	push {lr}
	bl object_canMove
	beq loc_80FC1BC
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FC1C8 // =dword_80FC1CC 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FC1BC
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80FC1C4
loc_80FC1BC:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FC1C4:
	pop {pc}
	.balign 4, 0x00
off_80FC1C8: .word dword_80FC1CC
dword_80FC1CC: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80FC17C

.func
.thumb_func
sub_80FC1DC:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC206
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FC206:
	pop {pc}
.endfunc // sub_80FC1DC

.func
.thumb_func
sub_80FC208:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC224
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80FC224:
	pop {pc}
.endfunc // sub_80FC208

.func
.thumb_func
sub_80FC226:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC240
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80FC268
loc_80FC240:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80FC25C
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #6
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80FC25C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC268
	mov r0, #0x10
	strh r0, [r7]
locret_80FC268:
	pop {pc}
.endfunc // sub_80FC226

.func
.thumb_func
sub_80FC26A:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC292
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	bl sub_80FCF90
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FC2DA
loc_80FC292:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x14
	beq loc_80FC2A6
	cmp r0, #0
	bgt locret_80FC2DA
	mov r0, #0x14
	strh r0, [r7]
	b locret_80FC2DA
loc_80FC2A6:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #6
	bl sub_80FCE40
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x25 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
locret_80FC2DA:
	pop {r4,pc}
.endfunc // sub_80FC26A

.func
.thumb_func
sub_80FC2DC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC2EE
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FC300
loc_80FC2EE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC300
	ldr r0, [r7,#0x30]
	bl sub_80FCF9C
	bl sub_8011714
locret_80FC300:
	pop {pc}
.endfunc // sub_80FC2DC

loc_80FC302:
	push {r7,lr}
	ldr r1, off_80FC310 // =off_80FC314 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FC310: .word off_80FC314
off_80FC314: .word sub_80FC338+1
	.word sub_80FC398+1
	.word sub_80FC3C4+1
	.word sub_80FC3E2+1
	.word sub_80FC444+1
	.word sub_80FC4D2+1
	.word sub_80FC51C+1
	.word sub_80FC58E+1
	.word sub_80FC5AE+1
.func
.thumb_func
sub_80FC338:
	push {lr}
	bl object_canMove
	beq loc_80FC378
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FC384 // =dword_80FC388 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FC378
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80FC380
loc_80FC378:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FC380:
	pop {pc}
	.balign 4, 0x00
off_80FC384: .word dword_80FC388
dword_80FC388: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_80FC338

.func
.thumb_func
sub_80FC398:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC3C2
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FC3C2:
	pop {pc}
.endfunc // sub_80FC398

.func
.thumb_func
sub_80FC3C4:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC3E0
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80FC3E0:
	pop {pc}
.endfunc // sub_80FC3C4

.func
.thumb_func
sub_80FC3E2:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC40E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #1
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x34]
	ldrb r1, [r7,#0xd]
	bl sub_80D1BF4
	mov r0, #0xa0
	bl sound_play // () -> void
	bl sub_80E7A88
	str r0, [r7,#0x38]
	b locret_80FC442
loc_80FC40E:
	ldr r0, [r7,#0x34]
	ldr r0, [r0]
	tst r0, r0
	bne loc_80FC434
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC442
	mov r0, #1
	bl object_clearFlag // (int bitfield) -> void
	bl sub_8011714
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq locret_80FC442
	bl sub_80E7AA0
	b locret_80FC442
loc_80FC434:
	mov r0, #0x10
	strh r0, [r7]
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq locret_80FC442
	bl sub_80E7AA0
locret_80FC442:
	pop {r4,pc}
.endfunc // sub_80FC3E2

.func
.thumb_func
sub_80FC444:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC49A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #1
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	str r0, [r7,#0x3c]
	bl sub_80FCE5C
	tst r0, r0
	beq loc_80FC4CC
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r0, r2
	bne loc_80FC472
	cmp r1, r3
	beq loc_80FC4C6
loc_80FC472:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	bl sub_80FCFA8
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	bl sub_80FCE7E
	mov r0, #9
	add r0, r0, r5
	mov r1, #0xff
	mov r4, #1
	bl sub_80D4C0A
	str r0, [r7,#0x3c]
loc_80FC49A:
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldrb r4, [r5,#0x12]
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80FC4BE
	bl sub_80FCFA8
loc_80FC4BE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC4D0
loc_80FC4C6:
	mov r0, #0x14
	strh r0, [r7]
	b locret_80FC4D0
loc_80FC4CC:
	bl sub_8011714
locret_80FC4D0:
	pop {r4,pc}
.endfunc // sub_80FC444

.func
.thumb_func
sub_80FC4D2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC4F2
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	ldr r0, [r7,#0x3c]
	tst r0, r0
	beq locret_80FC51A
	bl sub_80D4C34
	b locret_80FC51A
loc_80FC4F2:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80FC50E
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #1
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80FC50E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC51A
	mov r0, #0x18
	strh r0, [r7]
locret_80FC51A:
	pop {pc}
.endfunc // sub_80FC4D2

.func
.thumb_func
sub_80FC51C:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC544
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	bl sub_80FCF90
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FC58C
loc_80FC544:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x14
	beq loc_80FC558
	cmp r0, #0
	bgt locret_80FC58C
	mov r0, #0x1c
	strh r0, [r7]
	b locret_80FC58C
loc_80FC558:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #1
	bl sub_80FCE40
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x18
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
locret_80FC58C:
	pop {r4,pc}
.endfunc // sub_80FC51C

.func
.thumb_func
sub_80FC58E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC5A0
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FC5AC
loc_80FC5A0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC5AC
	mov r0, #0x20 
	strh r0, [r7]
locret_80FC5AC:
	pop {pc}
.endfunc // sub_80FC58E

.func
.thumb_func
sub_80FC5AE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC5EC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	bl sub_80FCF9C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xd
	strh r0, [r7,#0x10]
	b locret_80FC5F8
loc_80FC5EC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC5F8
	bl sub_8011714
locret_80FC5F8:
	pop {pc}
.endfunc // sub_80FC5AE

loc_80FC5FA:
	push {r7,lr}
	ldr r1, off_80FC608 // =off_80FC60C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FC608: .word off_80FC60C
off_80FC60C: .word loc_80FC628+1
	.word sub_80FC684+1
	.word sub_80FC6AC+1
	.word sub_80FC6BC+1
	.word sub_80FC700+1
	.word sub_80FC772+1
	.word sub_80FC792+1
loc_80FC628:
	push {lr}
	bl object_canMove
	beq loc_80FC66E
	ldr r1, off_80FC678 // =dword_80FC67C 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_80FC680 - 0x80fc67c)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FC66E
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80FC676
loc_80FC66E:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FC676:
	pop {pc}
off_80FC678: .word dword_80FC67C
dword_80FC67C: .word 0x10
dword_80FC680: .word 0xF880080
.func
.thumb_func
sub_80FC684:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC6AA
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FC6AA:
	pop {pc}
.endfunc // sub_80FC684

.func
.thumb_func
sub_80FC6AC:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC6BA
	mov r0, #0xc
	strh r0, [r7]
locret_80FC6BA:
	pop {pc}
.endfunc // sub_80FC6AC

.func
.thumb_func
sub_80FC6BC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC6D6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80FC6FE
loc_80FC6D6:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80FC6F2
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #4
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80FC6F2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC6FE
	mov r0, #0x10
	strh r0, [r7]
locret_80FC6FE:
	pop {pc}
.endfunc // sub_80FC6BC

.func
.thumb_func
sub_80FC700:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC728
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	bl sub_80FCF90
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FC770
loc_80FC728:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x14
	beq loc_80FC73C
	cmp r0, #0
	bgt locret_80FC770
	mov r0, #0x14
	strh r0, [r7]
	b locret_80FC770
loc_80FC73C:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #4
	bl sub_80FCE40
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x27 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
locret_80FC770:
	pop {r4,pc}
.endfunc // sub_80FC700

.func
.thumb_func
sub_80FC772:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC784
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FC790
loc_80FC784:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC790
	mov r0, #0x18
	strh r0, [r7]
locret_80FC790:
	pop {pc}
.endfunc // sub_80FC772

.func
.thumb_func
sub_80FC792:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC7D8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	bl sub_80FCF9C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xd
	strh r0, [r7,#0x10]
	b locret_80FC7E4
loc_80FC7D8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC7E4
	bl sub_8011714
locret_80FC7E4:
	pop {pc}
.endfunc // sub_80FC792

loc_80FC7E6:
	push {r7,lr}
	ldr r1, off_80FC7F4 // =off_80FC7F8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FC7F4: .word off_80FC7F8
off_80FC7F8: .word loc_80FC810+1
	.word sub_80FC86C+1
	.word sub_80FC898+1
	.word sub_80FC8B6+1
	.word sub_80FC8FE+1
	.word sub_80FC9A2+1
loc_80FC810:
	push {lr}
	bl object_canMove
	beq loc_80FC84E
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FC858 // =dword_80FC85C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_80FC84E
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80FC856
loc_80FC84E:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FC856:
	pop {pc}
off_80FC858: .word dword_80FC85C
dword_80FC85C: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80FC86C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC896
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FC896:
	pop {pc}
.endfunc // sub_80FC86C

.func
.thumb_func
sub_80FC898:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC8B4
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80FC8B4:
	pop {pc}
.endfunc // sub_80FC898

.func
.thumb_func
sub_80FC8B6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC8D0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xf
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80FC8FC
loc_80FC8D0:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80FC8F0
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #9
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80FC8F0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC8FC
	mov r0, #0x10
	strh r0, [r7]
locret_80FC8FC:
	pop {pc}
.endfunc // sub_80FC8B6

.func
.thumb_func
sub_80FC8FE:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC926
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	bl sub_80FCF90
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FC9A0
loc_80FC926:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x14
	beq loc_80FC93E
	cmp r0, #0xf
	beq loc_80FC97A
	cmp r0, #0
	bgt locret_80FC9A0
	mov r0, #0x14
	strh r0, [r7]
	b locret_80FC9A0
loc_80FC93E:
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #9
	bl sub_80FCE40
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x27 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	bl sub_80E05F6
	b locret_80FC9A0
loc_80FC97A:
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x25 
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #1
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	bl sub_80E05F6
locret_80FC9A0:
	pop {r4,pc}
.endfunc // sub_80FC8FE

.func
.thumb_func
sub_80FC9A2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FC9B4
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FC9C6
loc_80FC9B4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FC9C6
	ldr r0, [r7,#0x30]
	bl sub_80FCF9C
	bl sub_8011714
locret_80FC9C6:
	pop {pc}
.endfunc // sub_80FC9A2

loc_80FC9C8:
	push {r7,lr}
	ldr r1, off_80FC9D8 // =off_80FC9DC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FC9D8: .word off_80FC9DC
off_80FC9DC: .word sub_80FC9F8+1
	.word sub_80FCA4E+1
	.word sub_80FCAC0+1
	.word sub_80FCB64+1
	.word sub_80FCC02+1
	.word sub_80FCC22+1
	.word sub_80FCC4C+1
.func
.thumb_func
sub_80FC9F8:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FCA2E
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #3
	add r4, r4, r0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	mov r0, #0x77 
	bl sound_play // () -> void
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80FCA4C
loc_80FCA2E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FCA4C
	bl sub_80FCF04
	tst r0, r0
	beq loc_80FCA48
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #4
	strh r0, [r7]
	b locret_80FCA4C
loc_80FCA48:
	bl sub_8011714
locret_80FCA4C:
	pop {r4,pc}
.endfunc // sub_80FC9F8

.func
.thumb_func
sub_80FCA4E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FCA64
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80FCABE
loc_80FCA64:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80FCA7A
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	mov r2, #0x12
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80FCA7A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FCABE
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r1, #0x53 
	mov r2, #2
	mov r3, #1
	bl sub_801A082
	ldr r0, [r7,#8]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	mov r0, #0
	strb r0, [r7,#0xe]
	mov r0, #8
	strh r0, [r7]
locret_80FCABE:
	pop {pc}
.endfunc // sub_80FCA4E

.func
.thumb_func
sub_80FCAC0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FCADC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	bl sub_80FCF9C
	mov r0, #6
	strh r0, [r7,#0x10]
	b locret_80FCB42
loc_80FCADC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #3
	beq loc_80FCAF0
	cmp r0, #0
	bgt locret_80FCB42
	mov r0, #0xc
	strh r0, [r7]
	b locret_80FCB42
loc_80FCAF0:
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xe]
	ldr r1, off_80FCB58 // =dword_80FCB5C 
	ldrb r0, [r1,r0]
	ldrb r1, [r5,#0x16]
	eor r0, r1
	strb r0, [r7,#0xf]
	bl sub_8002F5C
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldrb r1, [r7,#0xe]
	lsl r1, r1, #1
	add r0, r0, r1
	ldr r1, off_80FCB44 // =dword_80FCB48 
	add r0, r0, r1
	mov r2, #0
	ldrsb r2, [r0,r2]
	mov r3, #1
	ldrsb r3, [r0,r3]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	add r0, r0, r2
	add r1, r1, r3
	push {r0,r1}
	bl object_getPanelParameters
	ldr r1, dword_80FCB60 // =0x800000 
	tst r0, r1
	pop {r0,r1}
	bne loc_80FCB3E
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	b locret_80FCB42
loc_80FCB3E:
	mov r0, #0x14
	strh r0, [r7]
locret_80FCB42:
	pop {pc}
off_80FCB44: .word dword_80FCB48
dword_80FCB48: .word 0x10101FF, 0x100FF, 0x1FF0101, 0xFF0001
off_80FCB58: .word dword_80FCB5C
dword_80FCB5C: .word 0x1000100
dword_80FCB60: .word 0x800000
.endfunc // sub_80FCAC0

.func
.thumb_func
sub_80FCB64:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FCBA2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	bl sub_80FCFD2
	ldr r0, [r7,#0x30]
	bl sub_80FCF90
	mov r0, #0xb0
	bl sound_play // () -> void
	bl sub_80FCF36
	mov r0, #9
	add r0, r0, r5
	mov r1, #0xff
	mov r4, #1
	bl sub_80D4C0A
	str r0, [r7,#0x34]
	ldrb r0, [r7,#0xe]
	tst r0, r0
	bne loc_80FCBA2
	mov r0, #6
	bl object_setCounterTime
loc_80FCBA2:
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x44]
	ldr r1, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_80FCBC8
	bl sub_801A074 // () -> void
loc_80FCBC8:
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_80FCBD8
	mov r0, #1
	bl sub_801A07C
	bl sub_80FCFD2
loc_80FCBD8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FCC00
	ldr r0, [r7,#0x34]
	tst r0, r0
	beq loc_80FCBEA
	bl sub_80D4C34
loc_80FCBEA:
	ldrb r0, [r7,#0xe]
	add r0, #1
	strb r0, [r7,#0xe]
	ldrb r1, [r7,#0xd]
	cmp r0, r1
	bge loc_80FCBFC
	mov r0, #8
	strh r0, [r7]
	b locret_80FCC00
loc_80FCBFC:
	mov r0, #0x10
	strh r0, [r7]
locret_80FCC00:
	pop {r4,pc}
.endfunc // sub_80FCB64

.func
.thumb_func
sub_80FCC02:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FCC14
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FCC20
loc_80FCC14:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FCC20
	mov r0, #0x14
	strh r0, [r7]
locret_80FCC20:
	pop {pc}
.endfunc // sub_80FCC02

.func
.thumb_func
sub_80FCC22:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FCC3E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	bl sub_80FCF9C
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_80FCC4A
loc_80FCC3E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FCC4A
	mov r0, #0x18
	strh r0, [r7]
locret_80FCC4A:
	pop {pc}
.endfunc // sub_80FCC22

.func
.thumb_func
sub_80FCC4C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FCCAE
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xd
	strh r0, [r7,#0x10]
	b locret_80FCCBA
loc_80FCCAE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FCCBA
	bl sub_8011714
locret_80FCCBA:
	pop {pc}
.endfunc // sub_80FCC4C

.func
.thumb_func
sub_80FCCBC:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x24
	str r2, [sp,#4]
	str r3, [sp,#8]
	mov r0, #0
	str r0, [sp]
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xc
	bge loc_80FCD1E
	mov r4, #0
	mov r6, #0
loc_80FCCD8:
	add r0, r4, #0
	lsl r0, r0, #1
	ldr r1, off_80FCD60 // =byte_80FCD64 
	add r1, r1, r0
	mov r2, #0
	ldrsb r0, [r1,r2]
	mov r2, #1
	ldrsb r1, [r1,r2]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80FCD0A
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0xc
	strb r0, [r1,r6]
	add r6, #1
loc_80FCD0A:
	add r4, #1
	cmp r4, #6
	blt loc_80FCCD8
	tst r6, r6
	bne loc_80FCD42
	ldr r0, [sp]
	add r0, #1
	str r0, [sp]
	cmp r0, #2
	bge loc_80FCD56
loc_80FCD1E:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	mov r4, #0x10
	ldrb r6, [r5,#0x16]
	add r7, sp, #0xc
	bl sub_800D3FE
	add r6, r0, #0
	tst r6, r6
	bne loc_80FCD42
	ldr r0, [sp]
	add r0, #1
	str r0, [sp]
	cmp r0, #2
	blt loc_80FCCD8
	b loc_80FCD56
loc_80FCD42:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FCD5A
loc_80FCD56:
	mov r0, #0
	b loc_80FCD5A
loc_80FCD5A:
	add sp, sp, #0x24
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80FCD60: .word byte_80FCD64
byte_80FCD64: .byte 0xFF
	.byte 0xFE
	.hword 0xFE00
	.word 0x2FFFE01, 0x2010200, 0x1C04B510, 0x7CE17DA8, 0xF985F710
	.word 0xD0074200, 0x1A127CA2
	.byte 0x0
	.byte 0x2A
.endfunc // sub_80FCCBC

	bge loc_80FCD8A
	neg r2, r2
loc_80FCD8A:
	cmp r2, #3
	ble locret_80FCD90
	mov r0, #0
locret_80FCD90:
	pop {r4,pc}
.func
.thumb_func
sub_80FCD92:
	push {r6,r7,lr}
	sub sp, sp, #0x18
	ldrb r0, [r0,#0x13]
	add r7, sp, #0
	bl sub_800D012
.endfunc // sub_80FCD92

	add r6, r0, #0
	tst r6, r6
	beq loc_80FCDB6
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80FCDB6:
	add sp, sp, #0x18
	pop {r6,r7,pc}
.func
.thumb_func
sub_80FCDBA:
	push {r4,lr}
	add r4, r0, #0
	push {r2,r3}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldrb r1, [r4,#0x12]
	add r0, r0, r1
	ldrb r1, [r4,#0x13]
	pop {r2,r3}
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80FCDBA

	tst r0, r0
	pop {r0,r1}
	bne locret_80FCDDC
	mov r0, #0
locret_80FCDDC:
	pop {r4,pc}
.func
.thumb_func
sub_80FCDDE:
	push {r4,r6,lr}
	add r4, r2, #0
	add r6, r3, #0
	ldrb r0, [r5,#0x16]
	mov r1, #2
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80FCE2C // =dword_80FCE30 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D086
.endfunc // sub_80FCDDE

	tst r0, r0
	beq locret_80FCE28
	push {r0,r1}
	add r2, r4, #0
	add r3, r6, #0
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80FCE26
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r2, #2
	mul r2, r0
	pop {r0,r1}
	push {r0,r1}
	add r0, r0, r2
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	bne locret_80FCE28
loc_80FCE26:
	mov r0, #0
locret_80FCE28:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80FCE2C: .word dword_80FCE30
dword_80FCE30: .word 0x0
	.word 0x20, 0x20, 0x0
.func
.thumb_func
sub_80FCE40:
	push {r4,r6,r7,lr}
	ldr r4, dword_80FCE54 // =0x705ff00 
	orr r4, r2
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r6, [r7,#8]
	ldr r7, dword_80FCE58 // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_80FCE54: .word 0x705FF00
dword_80FCE58: .word 0x3
.endfunc // sub_80FCE40

.func
.thumb_func
sub_80FCE5C:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldr r2, [r7,#0x2c]
	ldrb r1, [r2,#0x12]
	ldrb r2, [r2,#0x13]
	add r0, r0, r1
	add r1, r2, #0
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	bne locret_80FCE7C
	mov r0, #0
locret_80FCE7C:
	pop {pc}
.endfunc // sub_80FCE5C

.func
.thumb_func
sub_80FCE7E:
	push {r4,lr}
	ldr r4, dword_80FCFFC // =0x90000 
	ldrb r0, [r5,#0x12]
	ldrb r1, [r7,#0x16]
	cmp r0, r1
	beq loc_80FCED6
	mov r2, #1
	ldrb r0, [r5,#0x12]
	ldrb r1, [r7,#0x16]
	cmp r0, r1
	blt loc_80FCE96
	neg r2, r2
loc_80FCE96:
	mul r2, r4
	str r2, [r5,#0x40]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r7,#0x16]
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80FCEA6
	neg r0, r0
loc_80FCEA6:
	mov r1, #0x28 
	lsl r1, r1, #0x10
	mul r0, r1
	add r1, r4, #0
	svc 6
	strh r0, [r7,#0x10]
	mov r2, #1
	ldrb r0, [r5,#0x13]
	ldrb r1, [r7,#0x17]
	cmp r0, r1
	blt loc_80FCEBE
	neg r2, r2
loc_80FCEBE:
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80FCEC6
	neg r0, r0
loc_80FCEC6:
	mov r1, #0x18
	lsl r1, r1, #0x10
	mul r0, r1
	ldrh r1, [r7,#0x10]
	svc 6
	mul r0, r2
	str r0, [r5,#0x44]
	b locret_80FCF02
loc_80FCED6:
	mov r0, #0
	str r0, [r5,#0x40]
	mov r2, #1
	ldrb r0, [r5,#0x13]
	ldrb r1, [r7,#0x17]
	cmp r0, r1
	blt loc_80FCEE6
	neg r2, r2
loc_80FCEE6:
	mul r2, r4
	str r2, [r5,#0x44]
	ldrb r0, [r5,#0x13]
	ldrb r1, [r7,#0x17]
	sub r0, r0, r1
	cmp r0, #0
	bge loc_80FCEF6
	neg r0, r0
loc_80FCEF6:
	mov r1, #0x18
	lsl r1, r1, #0x10
	mul r0, r1
	add r1, r4, #0
	svc 6
	strh r0, [r7,#0x10]
locret_80FCF02:
	pop {r4,pc}
.endfunc // sub_80FCE7E

.func
.thumb_func
sub_80FCF04:
	push {r4,lr}
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	cmp r1, #2
	bne loc_80FCF28
	mov r4, #0
loc_80FCF12:
	ldrb r2, [r5,#0x16]
	mov r3, #3
	mul r2, r3
	ldr r3, off_80FCF2C // =byte_80FCF30 
	add r2, r2, r3
	ldrb r2, [r2,r4]
	cmp r0, r2
	beq locret_80FCF2A
	add r4, #1
	cmp r4, #3
	blt loc_80FCF12
loc_80FCF28:
	mov r0, #0
locret_80FCF2A:
	pop {r4,pc}
off_80FCF2C: .word byte_80FCF30
byte_80FCF30: .byte 0x3, 0x4, 0x5, 0x4, 0x3, 0x2
.endfunc // sub_80FCF04

.func
.thumb_func
sub_80FCF36:
	push {lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldrb r1, [r7,#0xe]
	lsl r1, r1, #1
	add r0, r0, r1
	ldr r1, off_80FCF68 // =dword_80FCF6C 
	add r0, r0, r1
	mov r1, #0
	ldrsb r2, [r0,r1]
	mov r1, #1
	ldrsb r3, [r0,r1]
	ldr r0, dword_80FD000 // =0xc8000 
	ldr r1, dword_80FD004 // =0x78000 
	mul r0, r2
	mul r1, r3
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	ldrb r0, [r7,#0xe]
	lsl r0, r0, #2
	ldr r1, off_80FCF7C // =dword_80FCF80 
	ldr r0, [r1,r0]
	strh r0, [r7,#0x10]
	pop {pc}
	.balign 4, 0x00
off_80FCF68: .word dword_80FCF6C
dword_80FCF6C: .word 0xFFFFFF01, 0xFF0001, 0xFF01FFFF, 0x100FF
off_80FCF7C: .word dword_80FCF80
dword_80FCF80: .word 0x6, 0x6, 0x6, 0x9
.endfunc // sub_80FCF36

.func
.thumb_func
sub_80FCF90:
	push {r4,r7,lr}
	ldr r4, dword_80FD008 // =0xb11 
	add r7, r0, #0
	bl sub_80B8E30
	pop {r4,r7,pc}
.endfunc // sub_80FCF90

.func
.thumb_func
sub_80FCF9C:
	push {lr}
	tst r0, r0
	beq locret_80FCFA6
	mov r1, #0
	str r1, [r0]
locret_80FCFA6:
	pop {pc}
.endfunc // sub_80FCF9C

.func
.thumb_func
sub_80FCFA8:
	push {r4,r6,r7,lr}
	bl sub_800E456 // () -> int
	add r4, r0, #0
	lsl r4, r4, #8
	ldrb r0, [r5,#0x10]
	add r4, r4, r0
	lsl r4, r4, #8
	mov r1, #8
	mov r2, #0xb
	add r4, r4, r2
	lsl r4, r4, #8
	add r4, r4, r1
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80FD00C // =0x8318 
	ldr r7, dword_80FD010 // =0x101001e 
	bl sub_80E33FA
	pop {r4,r6,r7,pc}
.endfunc // sub_80FCFA8

.func
.thumb_func
sub_80FCFD2:
	push {r4,r6,r7,lr}
	ldrb r4, [r7,#0xf]
	lsl r4, r4, #8
	mov r0, #0
	add r4, r4, r0
	lsl r4, r4, #8
	mov r1, #8
	mov r2, #0xb
	add r4, r4, r2
	lsl r4, r4, #8
	add r4, r4, r1
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	ldr r6, dword_80FD00C // =0x8318 
	push {r7}
	ldr r7, dword_80FD014 // =0x101000f 
	bl sub_80E33FA
	pop {r7}
	pop {r4,r6,r7,pc}
dword_80FCFFC: .word 0x90000
dword_80FD000: .word 0xC8000
dword_80FD004: .word 0x78000
dword_80FD008: .word 0xB11
dword_80FD00C: .word 0x8318
dword_80FD010: .word 0x101001E
dword_80FD014: .word 0x101000F
dword_80FD018: .word 0x1010C08, 0x100000C, 0x2001190, 0x1320000A, 0xA0201
	.word 0x2021578, 0x17D0000A, 0xA0203, 0x20417D0, 0x17D0000A
	.word 0xA0205
dword_80FD044: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80FD104: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80FD138+1
	.word sub_80FD4C8+1
	.word loc_80FD5AE+1
	.word loc_80FD718+1
	.word loc_80FD8D4+1
.endfunc // sub_80FCFD2

loc_80FD138:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80FD150 // =off_80FD154 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.byte 0, 0
off_80FD150: .word off_80FD154
off_80FD154: .word sub_80FD158+1
.func
.thumb_func
sub_80FD158:
	push {r4,r6,lr}
	ldrb r0, [r6,#4]
	cmp r0, #3
	blt loc_80FD216
	mov r0, #0
	strb r0, [r6,#4]
	bl sub_80FD31C
	tst r0, r0
	bne loc_80FD1B8
	ldrb r0, [r6,#5]
	cmp r0, #2
	blt loc_80FD184
	mov r0, #0
	strb r0, [r6,#5]
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #8
	blt loc_80FD1B8
	b loc_80FD1EC
loc_80FD184:
	ldrb r1, [r6,#5]
	add r1, #1
	strb r1, [r6,#5]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	ldr r0, off_80FD4B4 // =sub_80FDAC4+1 
	str r0, [r7,#0x28]
	bl sub_80FD29C
	strh r0, [r7,#0x18]
	mov r0, #0
	bl sub_80FD3CC
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	b locret_80FD23E
loc_80FD1B8:
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	ldr r0, dword_80FD4B8 // = 
	str r0, [r7,#0x28]
	bl sub_80FD2C0
	strh r0, [r7,#0x18]
	bl sub_80FD2E4
	strb r0, [r7,#0xc]
	mov r0, #1
	bl sub_80FD3CC
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	b locret_80FD23E
loc_80FD1EC:
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	ldr r0, off_80FD4BC // =sub_80FDBCC+1 
	str r0, [r7,#0x28]
	bl sub_80FD2F8
	strh r0, [r7,#0x18]
	bl sub_80FD376
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	mov r0, #2
	bl sub_80FD3CC
	mov r0, #0xc
	bl sub_8011680
	b locret_80FD23E
loc_80FD216:
	ldrb r1, [r6,#4]
	add r1, #1
	strb r1, [r6,#4]
	bl sub_800FE36
	strb r0, [r7,#3]
	ldr r0, off_80FD4C0 // =sub_80FDA62+1 
	str r0, [r7,#0x28]
	bl sub_80FD27A
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
locret_80FD23E:
	pop {r4,r6,pc}
.endfunc // sub_80FD158

.func
.thumb_func
sub_80FD240:
	push {lr}
	pop {pc}
.endfunc // sub_80FD240

	push {lr}
	pop {pc}
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.func
.thumb_func
sub_80FD27A:
	push {r4,lr}
	ldr r0, off_80FD294 // =byte_80FD298 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FD4C4 // =0xa000 
	tst r0, r1
	beq loc_80FD290
	add r4, #0x3c 
loc_80FD290:
	add r0, r4, #0
	pop {r4,pc}
off_80FD294: .word byte_80FD298
byte_80FD298: .byte 0x3C, 0x18, 0x12, 0xC
.endfunc // sub_80FD27A

.func
.thumb_func
sub_80FD29C:
	push {r4,lr}
	ldr r0, off_80FD2B8 // =byte_80FD2BC 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FD4C4 // =0xa000 
	tst r0, r1
	beq loc_80FD2B2
	add r4, #0x3c 
loc_80FD2B2:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80FD2B8: .word byte_80FD2BC
byte_80FD2BC: .byte 0x1E, 0x18, 0x10, 0xC
.endfunc // sub_80FD29C

.func
.thumb_func
sub_80FD2C0:
	push {r4,lr}
	ldr r0, off_80FD2DC // =byte_80FD2E0 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FD4C4 // =0xa000 
	tst r0, r1
	beq loc_80FD2D6
	add r4, #0x3c 
loc_80FD2D6:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80FD2DC: .word byte_80FD2E0
byte_80FD2E0: .byte 0x50, 0x46, 0x3C, 0x32
.endfunc // sub_80FD2C0

.func
.thumb_func
sub_80FD2E4:
	push {lr}
	ldr r0, off_80FD2F0 // =byte_80FD2F4 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_80FD2F0: .word byte_80FD2F4
byte_80FD2F4: .byte 0x3, 0x4, 0x4, 0x5
.endfunc // sub_80FD2E4

.func
.thumb_func
sub_80FD2F8:
	push {r4,lr}
	ldr r0, off_80FD314 // =byte_80FD318 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FD4C4 // =0xa000 
	tst r0, r1
	beq loc_80FD30E
	add r4, #0x3c 
loc_80FD30E:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80FD314: .word byte_80FD318
byte_80FD318: .byte 0x3C, 0x32, 0x28, 0x1E
.endfunc // sub_80FD2F8

.func
.thumb_func
sub_80FD31C:
	push {r4,r6,lr}
	sub sp, sp, #8
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	ldrb r1, [r0,#0x12]
	ldrb r2, [r0,#0x13]
	str r1, [sp]
	str r2, [sp,#4]
	mov r0, #0xa0
	mov r6, r10
	ldr r6, [r6,#0x18]
	add r6, r6, r0
	mov r4, #0
loc_80FD33C:
	ldr r3, [r6,r4]
	tst r3, r3
	beq loc_80FD36A
	ldrh r0, [r3,#0x28]
	mov r1, #0xd2
	cmp r0, r1
	bne loc_80FD36A
	ldrb r0, [r3,#0x13]
	ldr r1, [sp,#4]
	cmp r0, r1
	bne loc_80FD36A
	ldrb r0, [r3,#0x12]
	ldr r1, [sp]
	sub r1, r1, r0
	push {r1}
	bl sub_800E2C0
	pop {r1}
	mul r1, r0
	cmp r1, #1
	bne loc_80FD36A
	mov r0, #1
	b loc_80FD372
loc_80FD36A:
	add r4, #4
	cmp r4, #0x1c
	ble loc_80FD33C
	mov r0, #0
loc_80FD372:
	add sp, sp, #8
	pop {r4,r6,pc}
.endfunc // sub_80FD31C

.func
.thumb_func
sub_80FD376:
	push {r4,lr}
	mov r4, #0
	bl sub_800FE36
	cmp r0, #0
	beq loc_80FD394
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #4
	add r0, r0, r2
	ldr r1, off_80FD3A0 // =dword_80FD3A4 
	ldrb r4, [r1,r0]
loc_80FD394:
	ldr r0, off_80FD3C4 // =byte_80FD3C8 
	bl sub_800FE28
	add r1, r0, #0
	add r0, r4, #0
	pop {r4,pc}
off_80FD3A0: .word dword_80FD3A4
dword_80FD3A4: .word 0x0
	.word 0x1010101, 0x2020101, 0x3030302, 0x0
	.word 0x1010000, 0x2020101, 0x3030302
off_80FD3C4: .word byte_80FD3C8
byte_80FD3C8: .byte 0x78, 0x78, 0x78, 0x78
.endfunc // sub_80FD376

.func
.thumb_func
sub_80FD3CC:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FD3FC // =a2z 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FD420 // =dword_80FD42C 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80FD3FC: .word a2z
	.word dword_80FD410
	.word dword_80FD418
a2z: .asciz "\n"
	.word 0x5A0032
	.hword 0x8C
dword_80FD410: .word 0x32000A
	.word 0x8C005A
dword_80FD418: .word 0x500014, 0x10E0096
off_80FD420: .word dword_80FD42C
	.word dword_80FD434
	.word dword_80FD43C
dword_80FD42C: .word 0xA000A
	.word 0xA000A
dword_80FD434: .word 0xA000A
	.word 0xA000A
dword_80FD43C: .word 0xA000A
	.word 0xA000A
.endfunc // sub_80FD3CC

.func
.thumb_func
sub_80FD444:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FD46C // =dword_80FD478 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FD490 // =dword_80FD49C 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80FD46C: .word dword_80FD478
	.word dword_80FD480
	.word dword_80FD488
dword_80FD478: .word 0x32000A
	.word 0x8C005A
dword_80FD480: .word 0x32000A
	.word 0x8C005A
dword_80FD488: .word 0x500014, 0x10E0096
off_80FD490: .word dword_80FD49C
	.word dword_80FD4A4
	.word dword_80FD4AC
dword_80FD49C: .word 0xA000A
	.word 0xA000A
dword_80FD4A4: .word 0xA000A
	.word 0xA000A
dword_80FD4AC: .word 0xA000A
	.word 0xA000A
off_80FD4B4: .word sub_80FDAC4+1
dword_80FD4B8: .word 0x80FDB85
off_80FD4BC: .word sub_80FDBCC+1
off_80FD4C0: .word sub_80FDA62+1
dword_80FD4C4: .word 0xA000
.endfunc // sub_80FD444

.func
.thumb_func
sub_80FD4C8:
	push {r7,lr}
	ldr r1, off_80FD4D8 // =off_80FD4DC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FD4D8: .word off_80FD4DC
off_80FD4DC: .word sub_80FD4E8+1
	.word sub_80FD548+1
	.word sub_80FD574+1
.endfunc // sub_80FD4C8

.func
.thumb_func
sub_80FD4E8:
	push {lr}
	bl object_canMove
	beq loc_80FD524
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FD534 // =dword_80FD538 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FD524
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_80FD530
loc_80FD524:
	mov r0, #0x50 
	strh r0, [r7,#0x18]
	mov r0, #1
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FD530:
	pop {pc}
	.balign 4, 0x00
off_80FD534: .word dword_80FD538
dword_80FD538: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.endfunc // sub_80FD4E8

.func
.thumb_func
sub_80FD548:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD572
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #4
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FD572:
	pop {pc}
.endfunc // sub_80FD548

.func
.thumb_func
sub_80FD574:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FD5A0
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD5AC
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_80FD5AC
loc_80FD5A0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD5AC
	bl sub_8011714
locret_80FD5AC:
	pop {pc}
.endfunc // sub_80FD574

loc_80FD5AE:
	push {r7,lr}
	ldr r1, off_80FD5BC // =off_80FD5C0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FD5BC: .word off_80FD5C0
off_80FD5C0: .word sub_80FD5D8+1
	.word sub_80FD638+1
	.word sub_80FD664+1
	.word sub_80FD682+1
	.word sub_80FD6A6+1
	.word sub_80FD6F4+1
.func
.thumb_func
sub_80FD5D8:
	push {lr}
	bl object_canMove
	beq loc_80FD618
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FD624 // =dword_80FD628 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FD618
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80FD620
loc_80FD618:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FD620:
	pop {pc}
	.balign 4, 0x00
off_80FD624: .word dword_80FD628
dword_80FD628: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.endfunc // sub_80FD5D8

.func
.thumb_func
sub_80FD638:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD662
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #4
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FD662:
	pop {pc}
.endfunc // sub_80FD638

.func
.thumb_func
sub_80FD664:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD680
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80FD680:
	pop {pc}
.endfunc // sub_80FD664

.func
.thumb_func
sub_80FD682:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FD698
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FD6A4
loc_80FD698:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD6A4
	mov r0, #0x10
	strh r0, [r7]
locret_80FD6A4:
	pop {pc}
.endfunc // sub_80FD682

.func
.thumb_func
sub_80FD6A6:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FD6C2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0x18
	strh r0, [r7,#0x10]
	b locret_80FD6EA
loc_80FD6C2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD6EA
	ldrb r4, [r7,#3]
	ldr r0, off_80FD6EC // =byte_80FD6F0 
	ldrb r0, [r0,r4]
	lsl r0, r0, #8
	orr r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	bl sub_80C81A6
	mov r0, #0x14
	strh r0, [r7]
locret_80FD6EA:
	pop {r4,r6,pc}
off_80FD6EC: .word byte_80FD6F0
byte_80FD6F0: .byte 0xE, 0xC, 0xA, 0x8
.endfunc // sub_80FD6A6

.func
.thumb_func
sub_80FD6F4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FD706
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FD716
loc_80FD706:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD716
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80FD716:
	pop {pc}
.endfunc // sub_80FD6F4

loc_80FD718:
	push {r7,lr}
	ldr r1, off_80FD728 // =off_80FD72C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FD728: .word off_80FD72C
off_80FD72C: .word sub_80FD748+1
	.word sub_80FD7A8+1
	.word sub_80FD7D4+1
	.word sub_80FD7F2+1
	.word sub_80FD822+1
	.word sub_80FD852+1
	.word sub_80FD8B0+1
.func
.thumb_func
sub_80FD748:
	push {lr}
	bl object_canMove
	beq loc_80FD788
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FD794 // =dword_80FD798 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FD788
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80FD790
loc_80FD788:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FD790:
	pop {pc}
	.balign 4, 0x00
off_80FD794: .word dword_80FD798
dword_80FD798: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.endfunc // sub_80FD748

.func
.thumb_func
sub_80FD7A8:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD7D2
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #4
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FD7D2:
	pop {pc}
.endfunc // sub_80FD7A8

.func
.thumb_func
sub_80FD7D4:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD7F0
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80FD7F0:
	pop {pc}
.endfunc // sub_80FD7D4

.func
.thumb_func
sub_80FD7F2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FD808
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80FD820
loc_80FD808:
	ldrh r0, [r7,#0x10]
	lsr r0, r0, #3
	bcs loc_80FD814
	ldrb r0, [r7,#0xc]
	bl sub_80FDCA4
loc_80FD814:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD820
	mov r0, #0x10
	strh r0, [r7]
locret_80FD820:
	pop {pc}
.endfunc // sub_80FD7F2

.func
.thumb_func
sub_80FD822:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FD838
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FD850
loc_80FD838:
	ldrh r0, [r7,#0x10]
	lsr r0, r0, #3
	bcs loc_80FD844
	ldrb r0, [r7,#0xc]
	bl sub_80FDCA4
loc_80FD844:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD850
	mov r0, #0x14
	strh r0, [r7]
locret_80FD850:
	pop {pc}
.endfunc // sub_80FD822

.func
.thumb_func
sub_80FD852:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FD898
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x18
	bl object_setCounterTime
	mov r0, #9
	strb r0, [r5,#0x10]
	ldrb r1, [r7,#3]
	add r4, r1, #0
	ldr r0, off_80FD8A8 // =dword_80FD8AC 
	ldrb r0, [r0,r1]
	lsl r0, r0, #8
	orr r4, r0
	ldrb r0, [r7,#0xc]
	lsl r0, r0, #0x10
	orr r4, r0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	bl sub_80C82A8
	mov r0, #0x7f
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r7,#3]
	ldr r1, off_80FD8A8 // =dword_80FD8AC 
	ldrb r0, [r1,r0]
	strh r0, [r7,#0x10]
	b locret_80FD8A4
loc_80FD898:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD8A4
	mov r0, #0x18
	strh r0, [r7]
locret_80FD8A4:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80FD8A8: .word dword_80FD8AC
dword_80FD8AC: .word 0x50505050
.endfunc // sub_80FD852

.func
.thumb_func
sub_80FD8B0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FD8C6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FD8D2
loc_80FD8C6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD8D2
	bl sub_8011714
locret_80FD8D2:
	pop {pc}
.endfunc // sub_80FD8B0

loc_80FD8D4:
	push {r7,lr}
	ldr r1, off_80FD8E4 // =off_80FD8E8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FD8E4: .word off_80FD8E8
off_80FD8E8: .word loc_80FD904+1
	.word sub_80FD960+1
	.word sub_80FD98C+1
	.word sub_80FD9AA+1
	.word sub_80FD9CE+1
	.word sub_80FDA0E+1
	.word sub_80FDA3E+1
loc_80FD904:
	push {lr}
	bl object_canMove
	beq loc_80FD942
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FD94C // =dword_80FD950 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FD942
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_80FD94A
loc_80FD942:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FD94A:
	pop {pc}
off_80FD94C: .word dword_80FD950
dword_80FD950: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.func
.thumb_func
sub_80FD960:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD98A
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #4
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FD98A:
	pop {pc}
.endfunc // sub_80FD960

.func
.thumb_func
sub_80FD98C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD9A8
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80FD9A8:
	pop {pc}
.endfunc // sub_80FD98C

.func
.thumb_func
sub_80FD9AA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FD9C0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_80FD9CC
loc_80FD9C0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FD9CC
	mov r0, #0x10
	strh r0, [r7]
locret_80FD9CC:
	pop {pc}
.endfunc // sub_80FD9AA

.func
.thumb_func
sub_80FD9CE:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FD9F2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xa
	strb r0, [r5,#0x10]
	ldrh r4, [r7,#0xc]
	bl sub_80E2244
	mov r0, #0x12
	bl object_setCounterTime
	ldrb r0, [r7,#0xd]
	add r0, #9
	strh r0, [r7,#0x10]
	b locret_80FDA0C
loc_80FD9F2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	ldrb r1, [r7,#0xd]
	cmp r0, r1
	beq loc_80FDA08
	cmp r0, #0
	bgt locret_80FDA0C
	mov r0, #0x14
	strh r0, [r7]
	b locret_80FDA0C
loc_80FDA08:
	mov r0, #0xc
	strb r0, [r5,#0x10]
locret_80FDA0C:
	pop {r4,pc}
.endfunc // sub_80FD9CE

.func
.thumb_func
sub_80FDA0E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FDA24
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xb
	strb r0, [r5,#0x10]
	mov r0, #9
	strh r0, [r7,#0x10]
	b locret_80FDA3C
loc_80FDA24:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FDA3C
	bl sub_80FDC2A
	mov r0, #0x80
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x18
	strh r0, [r7]
locret_80FDA3C:
	pop {pc}
.endfunc // sub_80FDA0E

.func
.thumb_func
sub_80FDA3E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FDA50
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FDA60
loc_80FDA50:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FDA60
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80FDA60:
	pop {pc}
.endfunc // sub_80FDA3E

.func
.thumb_func
sub_80FDA62:
	push {r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
.endfunc // sub_80FDA62

	ldr r0, [sp]
	ldrb r0, [r0,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl sub_800CFA6
	add r6, r0, #0
	tst r6, r6
	bne loc_80FDA9C
	ldr r0, [sp]
	ldrb r0, [r0,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl sub_800D012
	add r6, r0, #0
	tst r6, r6
	beq loc_80FDAB0
loc_80FDA9C:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FDAB4
loc_80FDAB0:
	mov r0, #0
	b loc_80FDAB4
loc_80FDAB4:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	pop {r0,r1}
	add sp, sp, #0x24
	pop {r6,r7,pc}
.func
.thumb_func
sub_80FDAC4:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
.endfunc // sub_80FDAC4

	mov r4, #0
	mov r6, #0
loc_80FDADA:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80FDB7C // =loc_80FDB80 
	add r1, r1, r0
	ldrb r0, [r1,r4]
	ldr r1, [sp]
	ldrb r1, [r1,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80FDB02
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0xc
	strb r0, [r1,r6]
	add r6, #1
loc_80FDB02:
	add r4, #1
	cmp r4, #2
	blt loc_80FDADA
	tst r6, r6
	bne loc_80FDB54
	ldr r3, [sp]
	ldrb r2, [r3,#0x13]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	cmp r1, r2
	bne loc_80FDB2E
	mov r4, #0
loc_80FDB1A:
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #1
	ldr r3, off_80FDB7C // =loc_80FDB80 
	add r3, r3, r2
	ldrb r2, [r3,r4]
	cmp r0, r2
	beq loc_80FDB6C
	add r4, #1
	cmp r4, #2
	blt loc_80FDB1A
loc_80FDB2E:
	mov r4, #0
	mov r6, #0
loc_80FDB32:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_80FDB7C // =loc_80FDB80 
	add r1, r1, r0
	ldrb r0, [r1,r4]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	add r7, r7, r6
	bl sub_800CFDC
	add r6, r6, r0
	add r4, #1
	cmp r4, #2
	blt loc_80FDB32
	tst r6, r6
	beq loc_80FDB68
loc_80FDB54:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FDB6C
loc_80FDB68:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
loc_80FDB6C:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	pop {r0,r1}
	add sp, sp, #0x24
	pop {r4,r6,r7,pc}
off_80FDB7C: .word loc_80FDB80
loc_80FDB80:
	lsl r1, r0, #8
	lsl r6, r0, #0x14
	push {r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	ldrb r0, [r5,#0x16]
	ldr r1, [sp]
	ldrb r1, [r1,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	bl sub_800D086
	tst r0, r0
	bne loc_80FDBC8
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl object_getPanelsExceptCurrentFilterred
	add r7, r0, #0
	bne loc_80FDBB4
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	b loc_80FDBC8
loc_80FDBB4:
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FDBC8
loc_80FDBC8:
	add sp, sp, #0x24
	pop {r7,pc}
.func
.thumb_func
sub_80FDBCC:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
.endfunc // sub_80FDBCC

	mov r4, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80FDBE6
	mov r4, #6
loc_80FDBE6:
	add r0, r4, #0
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl sub_800CFDC
	add r6, r0, #0
	tst r6, r6
	bne loc_80FDC02
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	cmp r0, r4
	beq loc_80FDC1A
	b loc_80FDC16
loc_80FDC02:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FDC1A
loc_80FDC16:
	mov r0, #0
	b loc_80FDC1A
loc_80FDC1A:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	pop {r0,r1}
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80FDC2A:
	push {r4,r6,lr}
	mov r6, #1
	ldrb r0, [r7,#0xc]
	cmp r0, #2
	bge loc_80FDC5C
loc_80FDC34:
	mov r0, #7
	ldrb r1, [r7,#0xc]
	cmp r1, #0
	beq loc_80FDC3E
	mov r0, #0
loc_80FDC3E:
	add r1, r6, #0
	ldrb r2, [r7,#2]
	ldrb r3, [r7,#0xc]
	lsl r3, r3, #8
	ldrb r4, [r7,#3]
	orr r4, r3
	push {r6}
	ldr r6, [r7,#8]
	bl sub_80C8514
	pop {r6}
	add r6, #1
	cmp r6, #3
	ble loc_80FDC34
	b locret_80FDC84
loc_80FDC5C:
	mov r1, #4
	ldrb r0, [r7,#0xc]
	cmp r0, #2
	beq loc_80FDC66
	mov r1, #0
loc_80FDC66:
	add r0, r6, #0
	ldrb r2, [r7,#2]
	ldrb r3, [r7,#0xc]
	lsl r3, r3, #8
	ldrb r4, [r7,#3]
	orr r4, r3
	push {r6}
	ldr r6, [r7,#8]
	bl sub_80C8514
	pop {r6}
	add r6, #1
	cmp r6, #6
	ble loc_80FDC5C
	b locret_80FDC84
locret_80FDC84:
	pop {r4,r6,pc}
	.balign 4, 0x00
	.word byte_80FDC8C
byte_80FDC8C: .byte 0x7, 0x1, 0x7, 0x2, 0x7, 0x3, 0x0, 0x1, 0x0, 0x2, 0x0, 0x3, 0x1, 0x4, 0x2, 0x4, 0x3
	.byte 0x4, 0x1, 0x0, 0x2, 0x0, 0x3, 0x0
.endfunc // sub_80FDC2A

.func
.thumb_func
sub_80FDCA4:
	push {r4,r6,lr}
	mov r4, #1
	add r6, r0, #0
loc_80FDCAA:
	bl object_getFlipDirection_800E2CA // () -> int
	mul r0, r4
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl object_highlightPanel
	add r4, #1
	cmp r4, r6
	ble loc_80FDCAA
	pop {r4,r6,pc}
	.balign 4, 0x00
dword_80FDCC4: .word 0x1010D08, 0x100000D, 0x21F4, 0x23E8000A, 0xA0001
	.word 0x225DC, 0x276C000A, 0xA0003, 0x4276C, 0x276C000A
	.word 0xA0005
dword_80FDCF0: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80FDDB0: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80FDDE4+1
	.word sub_80FE0D4+1
	.word loc_80FE21E+1
	.word loc_80FE330+1
	.word loc_80FE452+1
.endfunc // sub_80FDCA4

loc_80FDDE4:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80FDDFC // =off_80FDE00 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.balign 4, 0x00
off_80FDDFC: .word off_80FDE00
off_80FDE00: .word sub_80FDE04+1
.func
.thumb_func
sub_80FDE04:
	push {r4,r6,lr}
	ldrb r0, [r6,#4]
	cmp r0, #2
	blt loc_80FDE94
	mov r0, #0
	strb r0, [r6,#4]
	ldrb r0, [r6,#5]
	cmp r0, #3
	bge loc_80FDE6C
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #6
	blt loc_80FDE3C
	bl sub_800FE36
	strb r0, [r7,#3]
	bl sub_80FDF98
	strh r0, [r7,#0x18]
	mov r0, #0xc
	bl sub_8011680
	b locret_80FDEC2
loc_80FDE3C:
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_80FDFE4
	bl sub_80FDF60
	strh r0, [r7,#0x18]
	bl sub_80FDF84
	strh r0, [r7,#0xc]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	b locret_80FDEC2
loc_80FDE6C:
	mov r0, #0
	strb r0, [r6,#5]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #2
	strb r0, [r7,#2]
	bl sub_80FDFAC
	strh r0, [r7,#0x18]
	bl sub_80FDFD0
	strb r0, [r7,#0xc]
	mov r0, #1
	bl sub_80FDFE4
	mov r0, #0xb
	bl sub_8011680
	b locret_80FDEC2
loc_80FDE94:
	ldrb r0, [r6,#4]
	add r0, #1
	strb r0, [r6,#4]
	bl sub_800FE36
	strb r0, [r7,#3]
	ldr r0, off_80FE0CC // =sub_80FE4D0+1 
	str r0, [r7,#0x28]
	bl sub_80FDF4C
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	ldr r0, [r5,#0x64]
	str r0, [r7,#0x30]
	mov r0, #9
	bl loc_8011690
	b locret_80FDEC2
locret_80FDEC2:
	pop {r4,r6,pc}
.endfunc // sub_80FDE04

.func
.thumb_func
sub_80FDEC4:
	push {r4,r6,lr}
	bl sub_800FE36
	add r4, r0, #0
	mov r0, #2
	bl sub_80FE05C
	add r6, r0, #0
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	mov r2, #2
	push {r7}
	mov r7, #0x60 
	add r7, r7, r5
	bl sub_80CAC58
	pop {r7}
	mov r0, #0
	str r0, [r5,#0x64]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	lsl r1, r1, #4
	orr r0, r1
	str r0, [r5,#0x68]
	pop {r4,r6,pc}
.endfunc // sub_80FDEC4

.func
.thumb_func
sub_80FDEFC:
	push {lr}
	bl sub_801032C
	ldr r1, dword_80FDF34 // =0x20 
	tst r0, r1
	beq loc_80FDF0E
	mov r0, #4
	bl object_setFlag // (int a1) -> void
loc_80FDF0E:
	ldr r0, [r5,#0x68]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r0, r2
	bne loc_80FDF22
	cmp r1, r3
	beq locret_80FDF32
loc_80FDF22:
	lsl r1, r1, #4
	orr r0, r1
	str r0, [r5,#0x64]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	lsl r1, r1, #4
	orr r0, r1
	str r0, [r5,#0x68]
locret_80FDF32:
	pop {pc}
dword_80FDF34: .word 0x20
.endfunc // sub_80FDEFC

.func
.thumb_func
sub_80FDF38:
	push {lr}
	mov r0, #4
	bl object_clearFlag // (int bitfield) -> void
	ldr r0, dword_80FDF48 // =0x20 
	bl sub_801031C
	pop {pc}
dword_80FDF48: .word 0x20
.endfunc // sub_80FDF38

.func
.thumb_func
sub_80FDF4C:
	push {lr}
	ldr r0, off_80FDF58 // =dword_80FDF5C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FDF58: .word dword_80FDF5C
dword_80FDF5C: .word 0x0
.endfunc // sub_80FDF4C

.func
.thumb_func
sub_80FDF60:
	push {r4,lr}
	ldr r0, off_80FDF7C // =byte_80FDF80 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FE0D0 // =0xa000 
	tst r0, r1
	beq loc_80FDF76
	add r4, #0x3c 
loc_80FDF76:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80FDF7C: .word byte_80FDF80
byte_80FDF80: .byte 0x1E, 0x14, 0x10, 0x8
.endfunc // sub_80FDF60

.func
.thumb_func
sub_80FDF84:
	push {lr}
	ldr r0, off_80FDF90 // =byte_80FDF94 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_80FDF90: .word byte_80FDF94
byte_80FDF94: .byte 0x2, 0x2, 0x2, 0x2
.endfunc // sub_80FDF84

.func
.thumb_func
sub_80FDF98:
	push {lr}
	ldr r0, off_80FDFA4 // =byte_80FDFA8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FDFA4: .word byte_80FDFA8
byte_80FDFA8: .byte 0x2A, 0x24, 0x1E, 0x18
.endfunc // sub_80FDF98

.func
.thumb_func
sub_80FDFAC:
	push {r4,lr}
	ldr r0, off_80FDFC8 // =byte_80FDFCC 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FE0D0 // =0xa000 
	tst r0, r1
	beq loc_80FDFC2
	add r4, #0x3c 
loc_80FDFC2:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80FDFC8: .word byte_80FDFCC
byte_80FDFCC: .byte 0x14, 0x14, 0x14, 0x14
.endfunc // sub_80FDFAC

.func
.thumb_func
sub_80FDFD0:
	push {lr}
	ldr r0, off_80FDFDC // =byte_80FDFE0 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FDFDC: .word byte_80FDFE0
byte_80FDFE0: .byte 0x14, 0x14, 0x14, 0x14
.endfunc // sub_80FDFD0

.func
.thumb_func
sub_80FDFE4:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FE014 // =dword_80FE020 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FE038 // =dword_80FE044 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80FE014: .word dword_80FE020
	.word dword_80FE028
	.word dword_80FE030
dword_80FE020: .word 0x280014, 0xB40064
dword_80FE028: .word 0x3C001E, 0x10E0096
dword_80FE030: .word 0x14000A, 0x5A0032
off_80FE038: .word dword_80FE044
	.word dword_80FE04C
	.word dword_80FE054
dword_80FE044: .word 0xA000A
	.word 0xA000A
dword_80FE04C: .word 0xA000A
	.word 0xA000A
dword_80FE054: .word 0xA000A
	.word 0xA000A
.endfunc // sub_80FDFE4

.func
.thumb_func
sub_80FE05C:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FE084 // =dword_80FE090 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FE0A8 // =dword_80FE0B4 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80FE084: .word dword_80FE090
	.word dword_80FE098
	.word dword_80FE0A0
dword_80FE090: .word 0x280014, 0xB40064
dword_80FE098: .word 0x3C001E, 0x10E0096
dword_80FE0A0: .word 0x14000A, 0x5A0032
off_80FE0A8: .word dword_80FE0B4
	.word dword_80FE0BC
	.word dword_80FE0C4
dword_80FE0B4: .word 0xA000A
	.word 0xA000A
dword_80FE0BC: .word 0xA000A
	.word 0xA000A
dword_80FE0C4: .word 0xA000A
	.word 0xA000A
off_80FE0CC: .word sub_80FE4D0+1
dword_80FE0D0: .word 0xA000
.endfunc // sub_80FE05C

.func
.thumb_func
sub_80FE0D4:
	push {r7,lr}
	ldr r1, off_80FE0E4 // =off_80FE0E8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FE0E4: .word off_80FE0E8
off_80FE0E8: .word sub_80FE0F8+1
	.word loc_80FE130+1
	.word sub_80FE1B4+1
	.word sub_80FE1FE+1
.endfunc // sub_80FE0D4

.func
.thumb_func
sub_80FE0F8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE11E
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_801032C
	ldr r1, dword_80FE12C // =0x20 
	tst r0, r1
	bne loc_80FE126
	ldr r0, dword_80FE12C // =0x20 
	bl sub_8010312
	mov r0, #8
	strb r0, [r5,#0x10]
	mov r0, #0xe
	strh r0, [r7,#0x10]
	b locret_80FE12A
loc_80FE11E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FE12A
loc_80FE126:
	mov r0, #4
	strh r0, [r7]
locret_80FE12A:
	pop {pc}
dword_80FE12C: .word 0x20
.endfunc // sub_80FE0F8

loc_80FE130:
	push {r6,lr}
	mov r0, #3
	strb r0, [r5,#0x10]
	bl object_canMove
	beq loc_80FE184
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FE18C // =dword_80FE190 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r6, [r7,#0x30]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FE184
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	ldrb r2, [r7,#3]
	lsl r2, r2, #2
	ldr r3, dword_80FE190+16 // =dword_80FE190 
	ldr r2, [r3,r2]
	bl sub_80FE5C0
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	strh r2, [r7,#0x10]
	bl sub_80FE1B4
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #8
	strh r0, [r7]
	b locret_80FE188
loc_80FE184:
	mov r0, #0xc
	strh r0, [r7]
locret_80FE188:
	pop {r6,pc}
	.balign 4, 0x00
off_80FE18C: .word dword_80FE190
dword_80FE190: .word 0x10, 0xF8800A0, 0x30, 0xF880080, 0x80FE1A4, 0x8000
	.word 0x8500, 0x9000, 0x9500
.func
.thumb_func
sub_80FE1B4:
	push {lr}
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80FE1FC
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A066
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_80FE1FC:
	pop {pc}
.endfunc // sub_80FE1B4

.func
.thumb_func
sub_80FE1FE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE210
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FE21C
loc_80FE210:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FE21C
	bl loc_801171C
locret_80FE21C:
	pop {pc}
.endfunc // sub_80FE1FE

loc_80FE21E:
	push {r7,lr}
	ldr r1, off_80FE22C // =off_80FE230 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FE22C: .word off_80FE230
off_80FE230: .word sub_80FE240+1
	.word sub_80FE284+1
	.word sub_80FE2A8+1
	.word sub_80FE30C+1
.func
.thumb_func
sub_80FE240:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE272
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r7,#0x16]
	strb r0, [r7,#0x17]
	bl sub_801032C
	ldr r1, dword_80FE280 // =0x20 
	tst r0, r1
	beq loc_80FE27A
	ldr r0, dword_80FE280 // =0x20 
	bl sub_801031C
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0xe1
	bl sound_play // () -> void
	mov r0, #0x13
	strh r0, [r7,#0x10]
	b locret_80FE27E
loc_80FE272:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FE27E
loc_80FE27A:
	mov r0, #4
	strh r0, [r7]
locret_80FE27E:
	pop {pc}
dword_80FE280: .word 0x20
.endfunc // sub_80FE240

.func
.thumb_func
sub_80FE284:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE29A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FE2A6
loc_80FE29A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FE2A6
	mov r0, #8
	strh r0, [r7]
locret_80FE2A6:
	pop {pc}
.endfunc // sub_80FE284

.func
.thumb_func
sub_80FE2A8:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE2C8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #6
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0x1a
	strh r0, [r7,#0x10]
	b locret_80FE30A
loc_80FE2C8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x10
	beq loc_80FE2EC
	cmp r0, #0
	bgt locret_80FE30A
	ldrb r0, [r7,#0xc]
	sub r0, #1
	strb r0, [r7,#0xc]
	tst r0, r0
	beq loc_80FE2E6
	mov r0, #0
	strb r0, [r7,#1]
	b locret_80FE30A
loc_80FE2E6:
	mov r0, #0xc
	strh r0, [r7]
	b locret_80FE30A
loc_80FE2EC:
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldr r2, [r7,#0x2c]
	bl sub_80FE5EE
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	bl sub_80CB080
	mov r0, #0xae
	bl sound_play // () -> void
locret_80FE30A:
	pop {r4,r6,pc}
.endfunc // sub_80FE2A8

.func
.thumb_func
sub_80FE30C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE31E
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FE32E
loc_80FE31E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FE32E
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80FE32E:
	pop {pc}
.endfunc // sub_80FE30C

loc_80FE330:
	push {r7,lr}
	ldr r1, off_80FE340 // =off_80FE344 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_80FE340: .word off_80FE344
off_80FE344: .word sub_80FE354+1
	.word sub_80FE394+1
	.word sub_80FE3EC+1
	.word sub_80FE42E+1
.func
.thumb_func
sub_80FE354:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE380
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_801032C
	ldr r1, dword_80FE390 // =0x20 
	tst r0, r1
	beq loc_80FE388
	ldr r0, dword_80FE390 // =0x20 
	bl sub_801031C
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0xe1
	bl sound_play // () -> void
	mov r0, #0x22 
	strh r0, [r7,#0x10]
	b locret_80FE38C
loc_80FE380:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FE38C
loc_80FE388:
	mov r0, #4
	strh r0, [r7]
locret_80FE38C:
	pop {pc}
	.byte 0, 0
dword_80FE390: .word 0x20
.endfunc // sub_80FE354

.func
.thumb_func
sub_80FE394:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE3BA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #4
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strb r0, [r7,#0xd]
	mov r0, #0
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strh r0, [r7,#0x12]
	b locret_80FE3EA
loc_80FE3BA:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	cmp r0, #0
	bgt loc_80FE3D0
	mov r0, #0
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strh r0, [r7,#0x12]
loc_80FE3D0:
	ldrb r0, [r7,#0xd]
	add r0, #1
	strb r0, [r7,#0xd]
	lsr r0, r0, #3
	bcs loc_80FE3DE
	bl sub_80FE72C
loc_80FE3DE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FE3EA
	mov r0, #8
	strh r0, [r7]
locret_80FE3EA:
	pop {pc}
.endfunc // sub_80FE394

.func
.thumb_func
sub_80FE3EC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE410
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_80FE6C8
	tst r0, r0
	beq loc_80FE41E
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0x1d
	strh r0, [r7,#0x10]
	b locret_80FE42C
loc_80FE410:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xa
	beq loc_80FE424
	cmp r0, #0
	bgt locret_80FE42C
loc_80FE41E:
	mov r0, #0xc
	strh r0, [r7]
	b locret_80FE42C
loc_80FE424:
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
locret_80FE42C:
	pop {pc}
.endfunc // sub_80FE3EC

.func
.thumb_func
sub_80FE42E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE440
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FE450
loc_80FE440:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FE450
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80FE450:
	pop {pc}
.endfunc // sub_80FE42E

loc_80FE452:
	push {r7,lr}
	ldr r1, off_80FE460 // =off_80FE464 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FE460: .word off_80FE464
off_80FE464: .word sub_80FE46C+1
	.word sub_80FE4AC+1
.func
.thumb_func
sub_80FE46C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE498
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_801032C
	ldr r1, dword_80FE4A8 // =0x20 
	tst r0, r1
	beq loc_80FE4A0
	ldr r0, dword_80FE4A8 // =0x20 
	bl sub_801031C
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0xe1
	bl sound_play // () -> void
	mov r0, #0x13
	strh r0, [r7,#0x10]
	b locret_80FE4A4
loc_80FE498:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FE4A4
loc_80FE4A0:
	mov r0, #4
	strh r0, [r7]
locret_80FE4A4:
	pop {pc}
	.balign 4, 0x00
dword_80FE4A8: .word 0x20
.endfunc // sub_80FE46C

.func
.thumb_func
sub_80FE4AC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FE4C2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FE4CE
loc_80FE4C2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FE4CE
	bl sub_8011714
locret_80FE4CE:
	pop {pc}
.endfunc // sub_80FE4AC

.func
.thumb_func
sub_80FE4D0:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x1c
	str r0, [sp]
	str r2, [sp,#0xc]
	str r3, [sp,#0x10]
	add r0, r6, #0
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	str r0, [sp,#4]
	str r1, [sp,#8]
	mov r4, #0
	mov r6, #0
	mov r7, #0
loc_80FE4EC:
	ldr r2, off_80FE590 // =byte_80FE594 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80FE595 - 0x80fe594)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	ldr r2, [sp,#0xc]
	ldr r3, [sp,#0x10]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_80FE4D0

	tst r0, r0
	pop {r0,r1}
	beq loc_80FE53E
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	cmp r0, r2
	bne loc_80FE520
	cmp r1, r3
	beq loc_80FE53E
loc_80FE520:
	ldr r2, [sp]
	ldrb r2, [r2,#0x13]
	cmp r1, r2
	beq loc_80FE534
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x14
	strb r0, [r1,r6]
	add r6, #1
	b loc_80FE53E
loc_80FE534:
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x18
	strb r0, [r1,r7]
	add r7, #1
loc_80FE53E:
	add r4, #1
	cmp r4, #4
	blt loc_80FE4EC
	tst r6, r6
	bne loc_80FE564
	tst r7, r7
	bne loc_80FE578
	ldr r0, [sp,#4]
	ldr r1, [sp,#8]
	ldr r2, [sp,#0xc]
	ldr r3, [sp,#0x10]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80FE58C
	mov r0, #0
	b loc_80FE58C
loc_80FE564:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x14
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FE58C
loc_80FE578:
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #0x18
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FE58C
loc_80FE58C:
	add sp, sp, #0x1c
	pop {r4,r6,r7,pc}
off_80FE590: .word byte_80FE594
byte_80FE594: .byte 0xFF
byte_80FE595: .byte 0x0
	.hword 0xFF00
	// <mkdata>
	.hword 0x1 // mov r1, r0
	lsl r0, r0, #4
	push {r4,lr}
	mov r4, #1
	ldrb r1, [r5,#0x12]
	cmp r1, r0
	blt loc_80FE5A8
	neg r4, r4
loc_80FE5A8:
	ldrb r0, [r5,#0x12]
	add r0, r0, r4
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne locret_80FE5BE
	mov r0, #0
	b locret_80FE5BE
locret_80FE5BE:
	pop {r4,pc}
.func
.thumb_func
sub_80FE5C0:
	push {lr}
	ldrb r3, [r5,#0x12]
	cmp r0, r3
	beq loc_80FE5D4
	sub r0, r0, r3
	mul r0, r2
	mov r1, #0
	mov r3, #0x28 
	lsl r3, r3, #0x10
	b loc_80FE5E0
loc_80FE5D4:
	ldrb r3, [r5,#0x13]
	sub r1, r1, r3
	mul r1, r2
	mov r0, #0
	mov r3, #0x18
	lsl r3, r3, #0x10
loc_80FE5E0:
	push {r0,r1}
	add r0, r3, #0
	add r1, r2, #0
	svc 6
	add r2, r0, #0
	pop {r0,r1}
	pop {pc}
.endfunc // sub_80FE5C0

.func
.thumb_func
sub_80FE5EE:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x30
	str r0, [sp]
	str r1, [sp,#4]
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	str r0, [sp,#8]
	str r1, [sp,#0xc]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FE6B4 // =dword_80FE6B8 
	add r1, r1, r0
	ldr r0, [r1]
	ldr r1, [r1,#4]
	str r0, [sp,#0x10]
	str r1, [sp,#0x14]
	ldr r0, [sp]
	ldr r1, [sp,#4]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	cmp r0, r2
	bne loc_80FE61E
	cmp r1, r3
	beq loc_80FE632
loc_80FE61E:
	add r0, r2, #0
	add r1, r3, #0
	ldr r2, [sp,#0x10]
	ldr r3, [sp,#0x14]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_80FE6A4
loc_80FE632:
	mov r4, #0
	mov r6, #0
loc_80FE636:
	add r0, r4, #0
	lsl r0, r0, #1
	ldr r1, off_80FE6A8 // =dword_80FE6AC 
	add r1, r1, r0
	mov r2, #0
	ldrsb r0, [r1,r2]
	mov r2, #1
	ldrsb r1, [r1,r2]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	add r0, r0, r2
	add r1, r1, r3
	ldr r2, [sp]
	ldr r3, [sp,#4]
	cmp r0, r2
	bne loc_80FE65A
	cmp r1, r3
	beq loc_80FE674
loc_80FE65A:
	ldr r2, [sp,#0x10]
	ldr r3, [sp,#0x14]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80FE674
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x18
	strb r0, [r1,r6]
	add r6, #1
loc_80FE674:
	add r4, #1
	cmp r4, #4
	blt loc_80FE636
	tst r6, r6
	bne loc_80FE690
	ldr r0, [sp]
	ldr r2, [sp,#0x10]
	ldr r3, [sp,#0x14]
	add r7, sp, #0x18
	bl sub_800CF70
	add r6, r0, #0
	tst r6, r6
	beq loc_80FE6A4
loc_80FE690:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x18
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FE6A4
loc_80FE6A4:
	add sp, sp, #0x30
	pop {r4,r6,r7,pc}
off_80FE6A8: .word dword_80FE6AC
dword_80FE6AC: .word 0xFF0000FF, 0x1000001
off_80FE6B4: .word dword_80FE6B8
dword_80FE6B8: .word 0x10020, 0x0
	.word 0x10000, 0x20
.endfunc // sub_80FE5EE

.func
.thumb_func
sub_80FE6C8:
	push {r4,r6,r7,lr}
	sub sp, sp, #4
	mov r0, #0
	str r0, [sp]
	mov r4, #1
loc_80FE6D2:
	ldrb r0, [r5,#0x16]
	add r1, r4, #0
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80FE77C // =dword_80FE780 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D086
.endfunc // sub_80FE6C8

	tst r0, r0
	beq loc_80FE720
	mov r2, #1
	ldrb r3, [r5,#0x16]
	tst r3, r3
	beq loc_80FE6F4
	mov r2, #6
loc_80FE6F4:
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80FE790 // =dword_80FE794 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80FE720
	push {r4,r6}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	bl sub_80CB1E2
	pop {r4,r6}
	ldr r0, [sp]
	add r0, #1
	str r0, [sp]
loc_80FE720:
	add r4, #1
	cmp r4, #3
	ble loc_80FE6D2
	ldr r0, [sp]
	add sp, sp, #4
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_80FE72C:
	push {r4,r6,r7,lr}
	mov r4, #1
loc_80FE730:
	ldrb r0, [r5,#0x16]
	add r1, r4, #0
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80FE77C // =dword_80FE780 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D086
.endfunc // sub_80FE72C

	tst r0, r0
	beq loc_80FE772
	mov r2, #1
	ldrb r3, [r5,#0x16]
	tst r3, r3
	beq loc_80FE752
	mov r2, #6
loc_80FE752:
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80FE790 // =dword_80FE794 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_80FE772
	mov r2, #6
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80FE772:
	add r4, #1
	cmp r4, #3
	ble loc_80FE730
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_80FE77C: .word dword_80FE780
dword_80FE780: .word 0x0
	.word 0x20, 0x20, 0x0
off_80FE790: .word dword_80FE794
dword_80FE794: .word 0x10, 0xB800000, 0x10, 0x7800000, 0x1010E08, 0x100000E
	.word 0x2BC, 0x4B0000A, 0xA0001, 0x20640, 0x834000A, 0xA0003
	.word 0x40834, 0x834000A, 0xA0005
dword_80FE7D0: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
off_80FE890: .word sub_8016380+1
	.word sub_8017888+1
	.word sub_80170C4+1
	.word sub_80174FE+1
	.word sub_80175B8+1
	.word sub_80178B6+1
	.word sub_8017688+1
	.word sub_8017768+1
	.word loc_80FE8C4+1
	.word sub_80FEC90+1
	.word loc_80FEE14+1
	.word loc_80FF042+1
	.word loc_80FF248+1
loc_80FE8C4:
	push {r6,r7,lr}
	ldr r7, [r5,#0x58]
	mov r6, #0x80
	add r6, r6, r7
	add r7, #0xa0
	ldr r1, off_80FE8DC // =off_80FE8E0 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r6,r7,pc}
	.balign 4, 0x00
off_80FE8DC: .word off_80FE8E0
off_80FE8E0: .word sub_80FE8E4+1
.func
.thumb_func
sub_80FE8E4:
	push {r4,r6,lr}
	ldrb r0, [r6,#5]
	cmp r0, #5
	bge loc_80FE936
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #0xe
	bge loc_80FE8FE
	ldrb r0, [r6,#5]
	add r0, #1
	strb r0, [r6,#5]
loc_80FE8FE:
	ldrb r0, [r6,#6]
	cmp r0, #1
	blt loc_80FE916
	mov r0, #0
	strb r0, [r6,#6]
	ldr r0, [r5,#0x6c]
	mov r1, #1
	eor r0, r1
	str r0, [r5,#0x6c]
	bl sub_80FEB64
	b locret_80FE946
loc_80FE916:
	bl sub_8001532
	mov r1, #0xf
	and r0, r1
	cmp r0, #8
	bge loc_80FE928
	ldrb r0, [r6,#6]
	add r0, #1
	strb r0, [r6,#6]
loc_80FE928:
	ldr r0, [r5,#0x68]
	mov r1, #1
	eor r0, r1
	str r0, [r5,#0x68]
	bl sub_80FEB20
	b locret_80FE946
loc_80FE936:
	mov r0, #0
	strb r0, [r6,#5]
	ldr r0, [r5,#0x70]
	mov r1, #1
	eor r0, r1
	str r0, [r5,#0x70]
	bl sub_80FEB9E
locret_80FE946:
	pop {r4,r6,pc}
.endfunc // sub_80FE8E4

	push {lr}
	pop {pc}
	push {lr}
	pop {pc}
.func
.thumb_func
sub_80FE950:
	push {lr}
	bl sub_80FF668
	b loc_80FE95A
.endfunc // sub_80FE950

.func
.thumb_func
sub_80FE958:
	push {lr}
loc_80FE95A:
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.endfunc // sub_80FE958

.func
.thumb_func
sub_80FE98A:
	push {r4,lr}
	ldr r0, off_80FE9A4 // =byte_80FE9A8 
	bl sub_800FE28
	add r4, r0, #0
	ldr r0, off_80FE9A4 // =byte_80FE9A8 
	add r0, #4
	bl sub_800FE28
	ldr r1, [r5,#0x64]
	mul r0, r1
	add r0, r0, r4
	pop {r4,pc}
off_80FE9A4: .word byte_80FE9A8
byte_80FE9A8: .byte 0xE, 0x8, 0x4, 0x2, 0x20, 0x20, 0x20, 0x20
.endfunc // sub_80FE98A

.func
.thumb_func
sub_80FE9B0:
	push {r4,lr}
	ldr r0, off_80FE9D8 // =dword_80FE9DC 
	bl sub_800FE28
	add r4, r0, #0
	ldr r0, off_80FE9D8 // =dword_80FE9DC 
	add r0, #4
	bl sub_800FE28
	ldr r1, [r5,#0x68]
	mul r0, r1
	add r4, r4, r0
	bl object_getFlag // () -> int
	ldr r1, dword_80FEC80 // =0xa000 
	tst r0, r1
	beq loc_80FE9D4
	add r4, #0x3c 
loc_80FE9D4:
	add r0, r4, #0
	pop {r4,pc}
off_80FE9D8: .word dword_80FE9DC
dword_80FE9DC: .word 0xE0E0E0E, 0x0
.endfunc // sub_80FE9B0

.func
.thumb_func
sub_80FE9E4:
	push {lr}
	ldr r0, off_80FE9FC // =byte_80FEA00 
	bl sub_800FE28
	push {r0}
	ldr r0, off_80FE9FC // =byte_80FEA00 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_80FE9FC: .word byte_80FEA00
byte_80FEA00: .byte 0x14, 0x10, 0xC, 0x6, 0x1, 0x3, 0x3, 0x5
.endfunc // sub_80FE9E4

.func
.thumb_func
sub_80FEA08:
	push {r4,lr}
	ldr r0, off_80FEA30 // =dword_80FEA34 
	bl sub_800FE28
	add r4, r0, #0
	ldr r0, off_80FEA30 // =dword_80FEA34 
	add r0, #4
	bl sub_800FE28
	ldr r1, [r5,#0x6c]
	mul r0, r1
	add r4, r4, r0
	bl object_getFlag // () -> int
	ldr r1, dword_80FEC80 // =0xa000 
	tst r0, r1
	beq loc_80FEA2C
	add r4, #0x3c 
loc_80FEA2C:
	add r0, r4, #0
	pop {r4,pc}
off_80FEA30: .word dword_80FEA34
dword_80FEA34: .word 0xE0E0E0E, 0x0
.endfunc // sub_80FEA08

.func
.thumb_func
sub_80FEA3C:
	push {lr}
	ldr r0, off_80FEA64 // =byte_80FEA68 
	bl sub_800FE28
	push {r0}
	ldr r0, off_80FEA64 // =byte_80FEA68 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	ldr r0, off_80FEA64 // =byte_80FEA68 
	add r0, #8
	bl sub_800FE28
	add r2, r0, #0
	pop {r0,r1}
	pop {pc}
	.balign 4, 0x00
off_80FEA64: .word byte_80FEA68
byte_80FEA68: .byte 0xA, 0xA, 0xA, 0xA, 0x1E, 0x1E, 0x14, 0x14, 0x3, 0x3, 0x3
	.byte 0x5
.endfunc // sub_80FEA3C

.func
.thumb_func
sub_80FEA74:
	push {r4,lr}
	ldr r0, off_80FEA9C // =byte_80FEAA0 
	bl sub_800FE28
	add r4, r0, #0
	ldr r0, off_80FEA9C // =byte_80FEAA0 
	add r0, #4
	bl sub_800FE28
	ldr r1, [r5,#0x68]
	mul r0, r1
	add r4, r4, r0
	bl object_getFlag // () -> int
	ldr r1, dword_80FEC80 // =0xa000 
	tst r0, r1
	beq loc_80FEA98
	add r4, #0x3c 
loc_80FEA98:
	add r0, r4, #0
	pop {r4,pc}
off_80FEA9C: .word byte_80FEAA0
byte_80FEAA0: .byte 0x16, 0x10, 0xA, 0x8, 0x10, 0x10, 0x10, 0x10
.endfunc // sub_80FEA74

.func
.thumb_func
sub_80FEAA8:
	push {lr}
	ldr r0, off_80FEAB4 // =byte_80FEAB8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FEAB4: .word byte_80FEAB8
byte_80FEAB8: .byte 0x6, 0x6, 0x6, 0x6
.endfunc // sub_80FEAA8

.func
.thumb_func
sub_80FEABC:
	push {lr}
	bl sub_800FE36
	lsl r0, r0, #1
	ldr r1, off_80FEACC // =byte_80FEAD0 
	ldrh r0, [r1,r0]
	pop {pc}
	.balign 4, 0x00
off_80FEACC: .word byte_80FEAD0
byte_80FEAD0: .byte 0xB4, 0x0, 0xF0, 0x0, 0x2C, 0x1, 0x68, 0x1
.endfunc // sub_80FEABC

.func
.thumb_func
sub_80FEAD8:
	push {lr}
	ldr r0, off_80FEAF0 // =loc_80FEAF4 
	bl sub_800FE28
	push {r0}
	ldr r0, off_80FEAF0 // =loc_80FEAF4 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_80FEAF0: .word loc_80FEAF4
.endfunc // sub_80FEAD8

loc_80FEAF4:
	lsl r1, r0, #0xc
	lsl r3, r0, #0xc
	lsr r0, r2, #0x10
	lsr r0, r1, #0x20
	push {lr}
	ldr r0, off_80FEC84 // =sub_80FF528+1 
	str r0, [r7,#0x28]
	bl sub_80FE98A
	strh r0, [r7,#0x18]
	ldr r0, [r5,#0x64]
	strb r0, [r7,#0xc]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
	pop {pc}
.func
.thumb_func
sub_80FEB20:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	ldr r0, dword_80FEC88 // = 
	str r0, [r7,#0x28]
	mov r0, #0
	bl sub_80FEBE4
	bl sub_80FE9B0
	strh r0, [r7,#0x18]
	bl sub_80FE9E4
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	mov r0, #0x74 
	add r0, r0, r5
	str r0, [r7,#0x30]
	mov r0, #0x78 
	add r0, r0, r5
	str r0, [r7,#0x34]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {pc}
.endfunc // sub_80FEB20

.func
.thumb_func
sub_80FEB64:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	ldr r0, dword_80FEC8C // = 
	str r0, [r7,#0x28]
	mov r0, #1
	bl sub_80FEBE4
	bl sub_80FEA08
	strh r0, [r7,#0x18]
	bl sub_80FEA3C
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	strb r2, [r7,#0xe]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {pc}
.endfunc // sub_80FEB64

.func
.thumb_func
sub_80FEB9E:
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_80FEBE4
	bl sub_80FEA74
	strh r0, [r7,#0x18]
	bl sub_80FEAA8
	strb r0, [r7,#0xc]
	bl sub_80FEABC
	str r0, [r7,#0x30]
	bl sub_80FEAD8
	strb r0, [r7,#0xd]
	strb r1, [r7,#0xe]
	mov r0, #0x7c 
	add r0, r0, r5
	str r0, [r7,#0x34]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {pc}
.endfunc // sub_80FEB9E

.func
.thumb_func
sub_80FEBE4:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FEC38 // =dword_80FEC44 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FEC5C // =dword_80FEC68 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_80FEBE4

	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FEC38 // =dword_80FEC44 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FEC5C // =dword_80FEC68 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
off_80FEC38: .word dword_80FEC44
	.word dword_80FEC4C
	.word dword_80FEC54
dword_80FEC44: .word 0x320014, 0x820064
dword_80FEC4C: .word 0x320014, 0x820064
dword_80FEC54: .word 0x50003, 0x50005
off_80FEC5C: .word dword_80FEC68
	.word dword_80FEC70
	.word dword_80FEC78
dword_80FEC68: .word 0xA000A
	.word 0xA000A
dword_80FEC70: .word 0xA000A
	.word 0xA000A
dword_80FEC78: .word 0xA000A
	.word 0xA000A
dword_80FEC80: .word 0xA000
off_80FEC84: .word sub_80FF528+1
dword_80FEC88: .word 0x80FF615
dword_80FEC8C: .word 0x80FF615
.func
.thumb_func
sub_80FEC90:
	push {r7,lr}
	ldr r1, off_80FECA0 // =off_80FECA4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_80FECA0: .word off_80FECA4
off_80FECA4: .word loc_80FECB4+1
	.word sub_80FED28+1
	.word sub_80FEDCC+1
	.word sub_80FEDF0+1
.endfunc // sub_80FEC90

loc_80FECB4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FECFA
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FED08
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FED14 // =dword_80FED18 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FED08
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	bl sub_801A074 // () -> void
	mov r0, #5
	strh r0, [r7,#0x10]
	b locret_80FED10
loc_80FECFA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FED10
	mov r0, #4
	strh r0, [r7]
	b locret_80FED10
loc_80FED08:
	mov r0, #0x3c 
	strh r0, [r7,#0x18]
	mov r0, #0xc
	strh r0, [r7]
locret_80FED10:
	pop {pc}
	.balign 4, 0x00
off_80FED14: .word dword_80FED18
dword_80FED18: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80FED28:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FED5E
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	ldr r1, off_80FEDC0 // =dword_80FEDC4 
	ldrb r0, [r1,r0]
	strh r0, [r7,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r0, #0x34 
	add r0, r0, r5
	ldrh r4, [r7,#0x10]
	ldr r6, dword_80FEDC8 // =0xffff6000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	b locret_80FEDBC
loc_80FED5E:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80FEDC8 // =0xffff6000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80FEDBC
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	bl sub_801A07C
	mov r0, #8
	strh r0, [r7]
locret_80FEDBC:
	pop {r4,r6,pc}
	.byte 0, 0
off_80FEDC0: .word dword_80FEDC4
dword_80FEDC4: .word 0x191E
dword_80FEDC8: .word 0xFFFF6000
.endfunc // sub_80FED28

.func
.thumb_func
sub_80FEDCC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FEDE2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x11
	strh r0, [r7,#0x10]
	b locret_80FEDEE
loc_80FEDE2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FEDEE
	mov r0, #0xc
	strh r0, [r7]
locret_80FEDEE:
	pop {pc}
.endfunc // sub_80FEDCC

.func
.thumb_func
sub_80FEDF0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FEE06
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FEE12
loc_80FEE06:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FEE12
	bl sub_8011714
locret_80FEE12:
	pop {pc}
.endfunc // sub_80FEDF0

loc_80FEE14:
	push {r7,lr}
	ldr r1, off_80FEE24 // =off_80FEE28 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FEE24: .word off_80FEE28
off_80FEE28: .word loc_80FEE44+1
	.word sub_80FEEB8+1
	.word sub_80FEF50+1
	.word sub_80FEF60+1
	.word sub_80FEFA4+1
	.word sub_80FEFFA+1
	.word sub_80FF01E+1
loc_80FEE44:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FEE8A
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FEE98
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FEEA4 // =dword_80FEEA8 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FEE98
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	bl sub_801A074 // () -> void
	mov r0, #5
	strh r0, [r7,#0x10]
	b locret_80FEEA0
loc_80FEE8A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FEEA0
	mov r0, #4
	strh r0, [r7]
	b locret_80FEEA0
loc_80FEE98:
	mov r0, #0x3c 
	strh r0, [r7,#0x18]
	mov r0, #0x18
	strh r0, [r7]
locret_80FEEA0:
	pop {pc}
	.balign 4, 0x00
off_80FEEA4: .word dword_80FEEA8
dword_80FEEA8: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80FEEB8:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FEEEA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r0, #0x34 
	add r0, r0, r5
	ldrh r4, [r7,#0x10]
	ldr r6, dword_80FEF4C // =0xffff6000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	b locret_80FEF48
loc_80FEEEA:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80FEF4C // =0xffff6000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80FEF48
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	bl sub_801A07C
	mov r0, #8
	strh r0, [r7]
locret_80FEF48:
	pop {r4,r6,pc}
	.balign 4, 0x00
dword_80FEF4C: .word 0xFFFF6000
.endfunc // sub_80FEEB8

.func
.thumb_func
sub_80FEF50:
	push {lr}
	mov r0, #0
	strb r0, [r7,#0xe]
	mov r0, #0
	str r0, [r7,#0x38]
	mov r0, #0xc
	strh r0, [r7]
	pop {pc}
.endfunc // sub_80FEF50

.func
.thumb_func
sub_80FEF60:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FEF80
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	ldr r0, [r7,#0x2c]
	ldrb r0, [r0,#0x12]
	strb r0, [r7,#0xf]
	b locret_80FEFA2
loc_80FEF80:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80FEF96
	ldrb r0, [r7,#0xf]
	mov r1, #2
	mov r2, #4
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_80FEF96:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FEFA2
	mov r0, #0x10
	strh r0, [r7]
locret_80FEFA2:
	pop {pc}
.endfunc // sub_80FEF60

.func
.thumb_func
sub_80FEFA4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FEFBA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #8
	strb r0, [r5,#0x10]
	bl sub_80FF680
	b locret_80FEFF8
loc_80FEFBA:
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80FEFC8
	ldrb r0, [r0,#6]
	tst r0, r0
	bne loc_80FEFD6
loc_80FEFC8:
	ldr r0, [r7,#0x34]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80FEFDC
	ldrb r0, [r0,#6]
	tst r0, r0
	beq locret_80FEFF8
loc_80FEFD6:
	mov r0, #1
	str r0, [r7,#0x38]
	b locret_80FEFF8
loc_80FEFDC:
	ldrb r0, [r7,#0xe]
	add r0, #1
	strb r0, [r7,#0xe]
	ldrb r1, [r7,#0xd]
	cmp r0, r1
	bge loc_80FEFF4
	ldr r0, [r7,#0x38]
	tst r0, r0
	bne loc_80FEFF4
	mov r0, #0xc
	strh r0, [r7]
	b locret_80FEFF8
loc_80FEFF4:
	mov r0, #0x14
	strh r0, [r7]
locret_80FEFF8:
	pop {pc}
.endfunc // sub_80FEFA4

.func
.thumb_func
sub_80FEFFA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF010
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #9
	strb r0, [r5,#0x10]
	mov r0, #0x17
	strh r0, [r7,#0x10]
	b locret_80FF01C
loc_80FF010:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF01C
	mov r0, #0x18
	strh r0, [r7]
locret_80FF01C:
	pop {pc}
.endfunc // sub_80FEFFA

.func
.thumb_func
sub_80FF01E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF034
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FF040
loc_80FF034:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF040
	bl sub_8011714
locret_80FF040:
	pop {pc}
.endfunc // sub_80FF01E

loc_80FF042:
	push {r7,lr}
	ldr r1, off_80FF050 // =off_80FF054 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FF050: .word off_80FF054
off_80FF054: .word loc_80FF068+1
	.word sub_80FF0DC+1
	.word sub_80FF174+1
	.word sub_80FF1A2+1
	.word sub_80FF220+1
loc_80FF068:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF0AE
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FF0BC
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FF0C8 // =dword_80FF0CC 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FF0BC
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	bl sub_801A074 // () -> void
	mov r0, #5
	strh r0, [r7,#0x10]
	b locret_80FF0C4
loc_80FF0AE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF0C4
	mov r0, #4
	strh r0, [r7]
	b locret_80FF0C4
loc_80FF0BC:
	mov r0, #0x3c 
	strh r0, [r7,#0x18]
	mov r0, #0x10
	strh r0, [r7]
locret_80FF0C4:
	pop {pc}
	.balign 4, 0x00
off_80FF0C8: .word dword_80FF0CC
dword_80FF0CC: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80FF0DC:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF10E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	mov r0, #0x34 
	add r0, r0, r5
	ldrh r4, [r7,#0x10]
	ldr r6, dword_80FF170 // =0xffff6000 
	bl sub_8001330
	str r0, [r5,#0x40]
	str r1, [r5,#0x44]
	str r2, [r5,#0x48]
	b locret_80FF16C
loc_80FF10E:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldr r0, dword_80FF170 // =0xffff6000 
	add r1, r1, r0
	str r1, [r5,#0x48]
	bl sub_800E2AC
	bl sub_801A04C
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_80FF16C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	bl sub_801A07C
	mov r0, #8
	strh r0, [r7]
locret_80FF16C:
	pop {r4,r6,pc}
	.byte 0, 0
dword_80FF170: .word 0xFFFF6000
.endfunc // sub_80FF0DC

.func
.thumb_func
sub_80FF174:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF18A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xa
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_80FF1A0
loc_80FF18A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF1A0
	mov r0, #0
	strb r0, [r7,#0xf]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0xc
	strh r0, [r7]
locret_80FF1A0:
	pop {pc}
.endfunc // sub_80FF174

.func
.thumb_func
sub_80FF1A2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF1D6
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_80FF6E0
	tst r0, r0
	beq loc_80FF21A
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #0xb
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sub_80FF668
	mov r0, #0xbf
	bl sound_play // () -> void
	ldrb r0, [r7,#0xd]
	add r0, #0xc
	strh r0, [r7,#0x10]
	strh r0, [r7,#0x12]
	b locret_80FF21E
loc_80FF1D6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	ldrh r1, [r7,#0x12]
	ldrb r2, [r7,#0xc]
	sub r1, r1, r2
	cmp r0, r1
	beq loc_80FF206
	ldrh r1, [r7,#0x12]
	ldrb r2, [r7,#0xd]
	sub r1, r1, r2
	cmp r0, r1
	beq loc_80FF210
	cmp r0, #0
	bgt locret_80FF21E
	ldrb r0, [r7,#0xf]
	add r0, #1
	strb r0, [r7,#0xf]
	ldrb r1, [r7,#0xe]
	cmp r0, r1
	bge loc_80FF21A
	mov r0, #0
	strb r0, [r7,#1]
	b locret_80FF21E
loc_80FF206:
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_80FF7A4
	b locret_80FF21E
loc_80FF210:
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_80FF7B0
	b locret_80FF21E
loc_80FF21A:
	mov r0, #0x10
	strh r0, [r7]
locret_80FF21E:
	pop {pc}
.endfunc // sub_80FF1A2

.func
.thumb_func
sub_80FF220:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF236
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xa
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FF246
loc_80FF236:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF246
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80FF246:
	pop {pc}
.endfunc // sub_80FF220

loc_80FF248:
	push {r7,lr}
	ldr r1, off_80FF258 // =off_80FF25C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FF258: .word off_80FF25C
off_80FF25C: .word sub_80FF284+1
	.word sub_80FF2E4+1
	.word sub_80FF322+1
	.word sub_80FF378+1
	.word sub_80FF3C4+1
	.word sub_80FF40A+1
	.word sub_80FF42E+1
	.word sub_80FF46A+1
	.word sub_80FF4A0+1
	.word sub_80FF504+1
.func
.thumb_func
sub_80FF284:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF2BE
	mov r0, #4
	strb r0, [r7,#1]
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80FF2DE
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #6
	bl object_setCounterTime
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strb r0, [r7,#0xf]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80FF2E2
loc_80FF2BE:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80FF2D0
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl object_highlightPanel
loc_80FF2D0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF2E2
	mov r0, #4
	strh r0, [r7]
	b locret_80FF2E2
loc_80FF2DE:
	mov r0, #0x24 
	strh r0, [r7]
locret_80FF2E2:
	pop {pc}
.endfunc // sub_80FF284

.func
.thumb_func
sub_80FF2E4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF314
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0xd
	strb r0, [r5,#0x10]
	bl sub_801A074 // () -> void
	bl sub_801DD34
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x13
	strh r0, [r7,#0x10]
	b locret_80FF320
loc_80FF314:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF320
	mov r0, #8
	strh r0, [r7]
locret_80FF320:
	pop {pc}
.endfunc // sub_80FF2E4

.func
.thumb_func
sub_80FF322:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF354
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xe
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	ldr r0, dword_80FF370 // =0x780000 
	str r0, [r5,#0x3c]
	bl sub_8002F90 // () -> void
	ldr r0, dword_80FF374 // =0xc0000 
	str r0, [r5,#0x48]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80FF36C
loc_80FF354:
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF36C
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #0xc
	strh r0, [r7]
locret_80FF36C:
	pop {pc}
	.byte 0, 0
dword_80FF370: .word 0x780000
dword_80FF374: .word 0xC0000
.endfunc // sub_80FF322

.func
.thumb_func
sub_80FF378:
	push {lr}
	push {r4,r6,r7}
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x30]
	ldrb r2, [r7,#2]
	ldrh r4, [r5,#0x12]
	ldrb r3, [r7,#3]
	lsl r3, r3, #0x10
	orr r4, r3
	ldr r6, [r7,#8]
	ldr r7, dword_80FF3C0 // =0x183 
	bl sub_80E9EFA
	add r2, r0, #0
	mov r1, #1
	ldrb r0, [r5,#0x16]
	bl sub_800BF16
	pop {r4,r6,r7}
	ldr r2, [r7,#0x2c]
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r0, r2
	bne loc_80FF3BA
	cmp r1, r3
	bne loc_80FF3BA
	mov r0, #1
	strb r0, [r7,#0xf]
	mov r0, #0x14
	strh r0, [r7]
	b locret_80FF3BE
loc_80FF3BA:
	mov r0, #0x10
	strh r0, [r7]
locret_80FF3BE:
	pop {pc}
dword_80FF3C0: .word 0x183
.endfunc // sub_80FF378

.func
.thumb_func
sub_80FF3C4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF3D6
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xe]
	strh r0, [r7,#0x10]
	b locret_80FF408
loc_80FF3D6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF408
	ldrb r0, [r7,#0xd]
	sub r0, #1
	strb r0, [r7,#0xd]
	tst r0, r0
	beq loc_80FF400
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_80FF400
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	b loc_80FF404
loc_80FF400:
	mov r0, #1
	strb r0, [r7,#0xf]
loc_80FF404:
	mov r0, #0x18
	strh r0, [r7]
locret_80FF408:
	pop {pc}
.endfunc // sub_80FF3C4

.func
.thumb_func
sub_80FF40A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF420
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x11
	strb r0, [r5,#0x10]
	mov r0, #7
	strh r0, [r7,#0x10]
	b locret_80FF42C
loc_80FF420:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF42C
	mov r0, #0x18
	strh r0, [r7]
locret_80FF42C:
	pop {pc}
.endfunc // sub_80FF40A

.func
.thumb_func
sub_80FF42E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF448
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	ldr r0, dword_80FF7C0 // =0xc0000 
	str r0, [r5,#0x48]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_80FF468
loc_80FF448:
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF468
	ldrb r0, [r7,#0xf]
	tst r0, r0
	beq loc_80FF464
	mov r0, #0x20 
	strh r0, [r7]
	b locret_80FF468
loc_80FF464:
	mov r0, #0x1c
	strh r0, [r7]
locret_80FF468:
	pop {pc}
.endfunc // sub_80FF42E

.func
.thumb_func
sub_80FF46A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF480
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80FF49E
loc_80FF480:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_80FF492
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl object_highlightPanel
loc_80FF492:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF49E
	mov r0, #8
	strh r0, [r7]
locret_80FF49E:
	pop {pc}
.endfunc // sub_80FF46A

.func
.thumb_func
sub_80FF4A0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF4F6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x13
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_8002E3C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r0, #0x10
	strh r0, [r7,#0x10]
	b locret_80FF502
loc_80FF4F6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF502
	mov r0, #0x24 
	strh r0, [r7]
locret_80FF502:
	pop {pc}
.endfunc // sub_80FF4A0

.func
.thumb_func
sub_80FF504:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FF51A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FF526
loc_80FF51A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FF526
	bl sub_8011714
locret_80FF526:
	pop {pc}
.endfunc // sub_80FF504

.func
.thumb_func
sub_80FF528:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	mov r4, #0
loc_80FF534:
	ldr r2, off_80FF600 // =byte_80FF604 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80FF605 - 0x80ff604)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB1C
.endfunc // sub_80FF528

	add r4, #1
	cmp r4, #8
	blt loc_80FF534
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	mov r4, #0
loc_80FF564:
	ldr r2, off_80FF600 // =byte_80FF604 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80FF605 - 0x80ff604)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB46
	add r4, #1
	cmp r4, #4
	blt loc_80FF564
	tst r6, r6
	bne loc_80FF596
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
loc_80FF596:
	mov r4, #4
loc_80FF598:
	ldr r2, off_80FF600 // =byte_80FF604 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_80FF60D - 0x80ff60c)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB46
	add r4, #1
	cmp r4, #8
	blt loc_80FF598
	tst r6, r6
	bne loc_80FF5E2
	ldr r0, [sp]
	ldrb r0, [r0,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl sub_800CFA6
	add r6, r0, #0
	tst r6, r6
	bne loc_80FF5E2
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_80FF5F6
loc_80FF5E2:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_80FF5FA
loc_80FF5F6:
	mov r0, #0
	b loc_80FF5FA
loc_80FF5FA:
	add sp, sp, #0x24
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_80FF600: .word byte_80FF604
byte_80FF604: .byte 0xFF
byte_80FF605: .byte 0xFF
	.hword 0x1FF
	.word 0x101FF01
byte_80FF60C: .byte 0xFF
byte_80FF60D: .byte 0x0
	.hword 0xFF00
	// <mkdata>
	.hword 0x1 // mov r1, r0
	lsl r0, r0, #4
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r0, [r5,#0x16]
	ldr r1, off_80FF660 // =dword_80FF664 
	ldrb r0, [r1,r0]
	ldrb r1, [r5,#0x13]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl sub_800CF14
	add r6, r0, #0
	tst r6, r6
	bne loc_80FF64A
	ldrb r0, [r5,#0x16]
	ldr r1, off_80FF660 // =dword_80FF664 
	ldrb r0, [r1,r0]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl sub_800CFDC
	add r6, r0, #0
	tst r6, r6
	beq loc_80FF65C
loc_80FF64A:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_80FF65C:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
off_80FF660: .word dword_80FF664
dword_80FF664: .word 0x601
.func
.thumb_func
sub_80FF668:
	push {lr}
	ldr r0, [r5,#0x50]
	tst r0, r0
	beq loc_80FF674
	bl sub_80C44D2
loc_80FF674:
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq locret_80FF67E
	bl sub_80C44D2
locret_80FF67E:
	pop {pc}
.endfunc // sub_80FF668

.func
.thumb_func
sub_80FF680:
	push {r4,r6,lr}
	ldrb r0, [r7,#0xf]
	mov r1, #2
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	mov r3, #0
	lsl r3, r3, #8
	orr r4, r3
	ldr r3, [r7,#0x2c]
	ldr r6, [r7,#8]
	push {r7}
	ldr r7, [r7,#0x30]
	bl sub_80D01C8
	pop {r7}
	ldrb r0, [r7,#0xf]
	mov r1, #2
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	mov r3, #1
	lsl r3, r3, #8
	orr r4, r3
	ldr r3, [r7,#0x2c]
	ldr r6, [r7,#8]
	push {r7}
	ldr r7, [r7,#0x34]
	bl sub_80D01C8
	pop {r7}
	pop {r4,r6,pc}
.endfunc // sub_80FF680

	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_80FF6D8 // =0x4000601 
	ldr r6, [r7,#8]
	ldr r7, dword_80FF6DC // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_80FF6D8: .word 0x4000601
dword_80FF6DC: .word 0x3
.func
.thumb_func
sub_80FF6E0:
	push {r4,r6,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	ldrb r6, [r0,#0x13]
	ldrb r0, [r5,#0x16]
	add r1, r6, #0
	add r2, r0, #0
	lsl r2, r2, #3
	ldr r3, off_80FF77C // =dword_80FF780 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D086
.endfunc // sub_80FF6E0

	tst r0, r0
	beq loc_80FF71E
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r1, r3
	bne locret_80FF778
	sub r4, r0, r2
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	mul r4, r0
	pop {r0,r1}
	cmp r4, #0
	bgt locret_80FF778
loc_80FF71E:
	ldrb r0, [r5,#0x16]
	add r1, r6, #0
	add r2, r0, #0
	lsl r2, r2, #3
	ldr r3, off_80FF790 // =dword_80FF794 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D086
	add r4, r0, #0
	add r6, r1, #0
	tst r0, r0
	beq locret_80FF778
	add r0, r4, #0
	add r1, r6, #0
	add r1, #1
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80FF77C // =dword_80FF780 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne locret_80FF778
	add r0, r4, #0
	add r1, r6, #0
	sub r1, #1
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_80FF77C // =dword_80FF780 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne locret_80FF778
	mov r0, #0
locret_80FF778:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_80FF77C: .word dword_80FF780
dword_80FF780: .word 0x10, 0xF8800A0, 0x30, 0xF880080
off_80FF790: .word dword_80FF794
dword_80FF794: .word 0x10000, 0x20, 0x10020, 0x0
.func
.thumb_func
sub_80FF7A4:
	push {r4,lr}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#0xd]
	bl sub_80D036C
	pop {r4,pc}
.endfunc // sub_80FF7A4

.func
.thumb_func
sub_80FF7B0:
	push {r4,r6,lr}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	bl sub_80D04DA
	pop {r4,r6,pc}
	.byte 0, 0
dword_80FF7C0: .word 0xC0000
dword_80FF7C4: .word 0x1010F08, 0x100000F, 0x320, 0x44C000A, 0xA0001, 0x20640
	.word 0x76C000A, 0xA0003, 0x4076C, 0x76C000A, 0xA0005, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x8016381
	.word 0x8017889, 0x80170C5, 0x80174FF, 0x80175B9, 0x80178B7, 0x8017689
	.word 0x8017769, 0x80FF8E5, 0x80FFB89, 0x80FFC83, 0x80FFE27, 0x80FFF09
	.word 0x6DAFB5C0, 0x19F62680, 0x490337A0, 0x58097830, 0x470846FE, 0xBDC0
	.word 0x80FF900, 0x80FF905, 0x7930B550, 0xDB742802, 0x71302000, 0x28057970
	.word 0x7970DA1A, 0x71703001, 0xF8E6F000, 0xD0064200, 0xFE05F701, 0x4008210F
	.word 0xDB33280E, 0x79B0E061, 0xDA122802, 0xFDFBF701, 0x4008210F, 0xDA29280E
	.word 0x310179B1, 0xE02571B1, 0x71702000, 0x210179F0, 0x71F14041, 0xD0004200
	.word 0x2000E036, 0xF71071B0, 0x70F8FA68, 0x70B82000, 0xF0002001, 0xF000F8C3
	.word 0x8338F895, 0xF8A4F000, 0x20607338, 0x63381940, 0x21017DA8, 0xF7104048
	.word 0x62F8FD17, 0xF711200B, 0xE03FFE75, 0xFA4DF710, 0x200370F8, 0x200070B8
	.word 0xF8A8F000, 0xF866F000, 0xF0007338, 0x7378F86D, 0x62B84871, 0x21017DA8
	.word 0xF7104048, 0x62F8FCFD, 0xF711200A, 0xE025FE5B, 0xFA33F710, 0x200070F8
	.word 0xF00070B8, 0x7338F87F, 0x19402060, 0x7DA86338, 0x40482101, 0xFCE8F710
	.word 0x200C62F8, 0xFE46F711, 0x7930E010, 0x71303001, 0x62B84860, 0xF828F000
	.word 0x7DA88338, 0x40482101, 0xFCD6F710, 0x200962F8, 0xFE3CF711
.endfunc // sub_80FF7B0

	pop {r4,r6,pc}
.func
.thumb_func
sub_80FFA1A:
	push {lr}
	pop {pc}
.endfunc // sub_80FFA1A

	push {lr}
	pop {pc}
.func
.thumb_func
sub_80FFA22:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.endfunc // sub_80FFA22

.func
.thumb_func
sub_80FFA54:
	push {r4,lr}
	ldr r0, off_80FFA70 // =dword_80FFA74 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FFB84 // =0xa000 
	tst r0, r1
	beq loc_80FFA6A
	add r4, #0x3c 
loc_80FFA6A:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
off_80FFA70: .word dword_80FFA74
dword_80FFA74: .word 0x12181E24
.endfunc // sub_80FFA54

.func
.thumb_func
sub_80FFA78:
	push {lr}
	ldr r0, off_80FFA84 // =dword_80FFA88 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FFA84: .word dword_80FFA88
dword_80FFA88: .word 0xC101216
.endfunc // sub_80FFA78

.func
.thumb_func
sub_80FFA8C:
	push {lr}
	ldr r0, off_80FFA98 // =loc_80FFA9C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FFA98: .word loc_80FFA9C
.endfunc // sub_80FFA8C

loc_80FFA9C:
	add r6, r3, #0
	asr r2, r3, #0x10
	push {r4,lr}
	ldr r0, off_80FFABC // =dword_80FFAC0 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_80FFB84 // =0xa000 
	tst r0, r1
	beq loc_80FFAB6
	add r4, #0x3c 
loc_80FFAB6:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_80FFABC: .word dword_80FFAC0
dword_80FFAC0: .word 0x12181E24
.func
.thumb_func
sub_80FFAC4:
	push {lr}
	ldr r0, off_80FFAD0 // =dword_80FFAD4 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_80FFAD0: .word dword_80FFAD4
dword_80FFAD4: .word 0x12181E24
.endfunc // sub_80FFAC4

.func
.thumb_func
sub_80FFAD8:
	push {lr}
	ldr r0, off_80FFAE4 // =dword_80FFAE8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_80FFAE4: .word dword_80FFAE8
dword_80FFAE8: .word 0x10121418
.endfunc // sub_80FFAD8

.func
.thumb_func
sub_80FFAEC:
	push {lr}
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq locret_80FFAF6
	mov r0, #1
locret_80FFAF6:
	pop {pc}
.endfunc // sub_80FFAEC

.func
.thumb_func
sub_80FFAF8:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FFB4C // =dword_80FFB54 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FFB64 // =dword_80FFB6C 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_80FFAF8

.func
.thumb_func
sub_80FFB26:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_80FFB4C // =dword_80FFB54 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_80FFB64 // =dword_80FFB6C 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
off_80FFB4C: .word dword_80FFB54
	.word dword_80FFB5C
dword_80FFB54: .word 0x32001E, 0x640050
dword_80FFB5C: .word 0x32001E, 0x640050
off_80FFB64: .word dword_80FFB6C
	.word dword_80FFB74
dword_80FFB6C: .word 0xA000A
	.word 0xA000A
dword_80FFB74: .word 0xA000A
	.word 0xA000A
	.word 0x8100071
	.word sub_80FFFBC+1
dword_80FFB84: .word 0xA000
.endfunc // sub_80FFB26

.func
.thumb_func
sub_80FFB88:
	push {r7,lr}
	ldr r1, off_80FFB98 // =off_80FFB9C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FFB98: .word off_80FFB9C
off_80FFB9C: .word loc_80FFBA8+1
	.word sub_80FFC18+1
	.word sub_80FFC5E+1
.endfunc // sub_80FFB88

loc_80FFBA8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFBEA
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FFBF8
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FFC04 // =dword_80FFC08 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FFBF8
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #2
	strh r0, [r7,#0x10]
	b locret_80FFC00
loc_80FFBEA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FFC00
	mov r0, #4
	strh r0, [r7]
	b locret_80FFC00
loc_80FFBF8:
	mov r0, #0x3c 
	strh r0, [r7,#0x18]
	mov r0, #8
	strh r0, [r7]
locret_80FFC00:
	pop {pc}
	.balign 4, 0x00
off_80FFC04: .word dword_80FFC08
dword_80FFC08: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80FFC18:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFC50
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #2
	strh r0, [r7,#0x10]
	b locret_80FFC5C
loc_80FFC50:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FFC5C
	mov r0, #8
	strh r0, [r7]
locret_80FFC5C:
	pop {pc}
.endfunc // sub_80FFC18

.func
.thumb_func
sub_80FFC5E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFC74
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FFC80
loc_80FFC74:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FFC80
	bl sub_8011714
locret_80FFC80:
	pop {pc}
.endfunc // sub_80FFC5E

	push {r7,lr}
	ldr r1, off_80FFC90 // =off_80FFC94 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FFC90: .word off_80FFC94
off_80FFC94: .word loc_80FFCA8+1
	.word sub_80FFD20+1
	.word sub_80FFD6A+1
	.word sub_80FFDAC+1
	.word sub_80FFDF8+1
loc_80FFCA8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFCF2
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_80FFD00
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_80FFD0C // =dword_80FFD10 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_80FFD00
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r7,#0x30]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #2
	strh r0, [r7,#0x10]
	b locret_80FFD08
loc_80FFCF2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FFD08
	mov r0, #4
	strh r0, [r7]
	b locret_80FFD08
loc_80FFD00:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_80FFD08:
	pop {pc}
	.balign 4, 0x00
off_80FFD0C: .word dword_80FFD10
dword_80FFD10: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_80FFD20:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFD58
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #2
	strh r0, [r7,#0x10]
	b locret_80FFD68
loc_80FFD58:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FFD68
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_80FFD68:
	pop {pc}
.endfunc // sub_80FFD20

.func
.thumb_func
sub_80FFD6A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFD80
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80FFDAA
loc_80FFD80:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_80FFD8E
	mov r0, #0xc
	strh r0, [r7]
	b locret_80FFDAA
loc_80FFD8E:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs locret_80FFDAA
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #6
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
locret_80FFDAA:
	pop {pc}
.endfunc // sub_80FFD6A

.func
.thumb_func
sub_80FFDAC:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFDD2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #6
	strb r0, [r5,#0x10]
	mov r4, #0
	bl sub_80E71A0
	str r0, [r7,#0x30]
	mov r0, #0xc
	bl object_setCounterTime
	ldrb r0, [r7,#0xd]
	add r0, #0xf
	strh r0, [r7,#0x10]
	b locret_80FFDF6
loc_80FFDD2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	ldrb r1, [r7,#0xd]
	cmp r0, r1
	beq loc_80FFDE8
	cmp r0, #0
	bgt locret_80FFDF6
	mov r0, #0x10
	strh r0, [r7]
	b locret_80FFDF6
loc_80FFDE8:
	bl sub_810007C
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0xba
	bl sound_play // () -> void
locret_80FFDF6:
	pop {r4,pc}
.endfunc // sub_80FFDAC

.func
.thumb_func
sub_80FFDF8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFE18
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x28 
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_80FFE24
	bl sub_80E71B8
	b locret_80FFE24
loc_80FFE18:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FFE24
	bl sub_8011714
locret_80FFE24:
	pop {pc}
.endfunc // sub_80FFDF8

	push {r7,lr}
	ldr r1, off_80FFE34 // =off_80FFE38 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_80FFE34: .word off_80FFE38
off_80FFE38: .word sub_80FFE48+1
	.word sub_80FFE72+1
	.word sub_80FFEC0+1
	.word sub_80FFEE4+1
.func
.thumb_func
sub_80FFE48:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFE64
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq loc_80FFE64
	bl sub_80D29B2
loc_80FFE64:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FFE70
	mov r0, #4
	strh r0, [r7]
locret_80FFE70:
	pop {pc}
.endfunc // sub_80FFE48

.func
.thumb_func
sub_80FFE72:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFE9C
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_81000E0
	strb r0, [r7,#0x16]
	tst r0, r0
	beq loc_80FFEBA
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_80FFEBE
loc_80FFE9C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_80FFEAA
	mov r0, #8
	strh r0, [r7]
	b locret_80FFEBE
loc_80FFEAA:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs locret_80FFEBE
	bl sub_81000F6
	b locret_80FFEBE
loc_80FFEBA:
	bl sub_8011714
locret_80FFEBE:
	pop {pc}
.endfunc // sub_80FFE72

.func
.thumb_func
sub_80FFEC0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFED6
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_8100106
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FFEE2
loc_80FFED6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FFEE2
	mov r0, #0xc
	strh r0, [r7]
locret_80FFEE2:
	pop {pc}
.endfunc // sub_80FFEC0

.func
.thumb_func
sub_80FFEE4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFEFA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_80FFF06
loc_80FFEFA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FFF06
	bl sub_8011714
locret_80FFF06:
	pop {pc}
.endfunc // sub_80FFEE4

	push {r7,lr}
	ldr r1, off_80FFF18 // =off_80FFF1C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_80FFF18: .word off_80FFF1C
off_80FFF1C: .word sub_80FFF24+1
	.word sub_80FFF84+1
.func
.thumb_func
sub_80FFF24:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFF5C
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_8100144
	tst r0, r0
	beq loc_80FFF7E
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq locret_80FFF82
	bl sub_80D29B2
	b locret_80FFF82
loc_80FFF5C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_80FFF6A
	mov r0, #4
	strh r0, [r7]
	b locret_80FFF82
loc_80FFF6A:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs locret_80FFF82
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl object_highlightPanel
	b locret_80FFF82
loc_80FFF7E:
	bl sub_8011714
locret_80FFF82:
	pop {pc}
.endfunc // sub_80FFF24

.func
.thumb_func
sub_80FFF84:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_80FFFAA
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#0x30]
	push {r7}
	ldr r7, [r7,#0x2c]
	bl sub_80D2986
	pop {r7}
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_80FFFBA
loc_80FFFAA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_80FFFBA
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_80FFFBA:
	pop {r4,r6,pc}
.endfunc // sub_80FFF84

.func
.thumb_func
sub_80FFFBC:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x2c
	ldrb r0, [r0,#0x13]
	str r0, [sp]
	str r2, [sp,#0xc]
	str r3, [sp,#0x10]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp,#4]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
.endfunc // sub_80FFFBC

	bl sub_800D58C
	add r4, r0, #0
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	add r0, r0, r4
	str r0, [sp,#8]
	mov r4, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_80FFFF0
	mov r4, #6
loc_80FFFF0:
	ldr r0, [sp,#8]
	cmp r0, r4
	beq loc_8100016
	add r0, r4, #0
	ldr r1, [sp]
	ldr r2, [sp,#0xc]
	ldr r3, [sp,#0x10]
	add r7, sp, #0x14
	bl sub_800CF14
	add r6, r0, #0
	tst r6, r6
	bne loc_8100048
	ldr r0, [sp,#4]
	add r4, r4, r0
	cmp r4, #1
	blt loc_8100016
	cmp r4, #6
	blt loc_80FFFF0
loc_8100016:
	mov r4, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_8100020
	mov r4, #6
loc_8100020:
	add r0, r4, #0
	ldr r1, [sp]
	ldr r2, [sp,#0xc]
	ldr r3, [sp,#0x10]
	ldr r4, [sp,#4]
	bl sub_800D0BC
	tst r0, r0
	beq loc_8100060
	ldr r2, [sp,#8]
	cmp r0, r2
	bne loc_8100060
	ldr r2, [sp,#0xc]
	ldr r3, [sp,#0x10]
	add r7, sp, #0x14
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_810005C
loc_8100048:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x14
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_8100060
loc_810005C:
	mov r0, #0
	b loc_8100060
loc_8100060:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	pop {r0,r1}
	add sp, sp, #0x2c
	pop {r4,r6,r7,pc}
	push {lr}
	ldrb r1, [r0,#0x13]
	ldrb r0, [r5,#0x16]
	bl sub_800D086
	pop {pc}
.func
.thumb_func
sub_810007C:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_81000D8 // =0x4050301 
	ldr r6, [r7,#8]
	push {r7}
	ldr r7, dword_81000DC // =0x3 
	bl sub_80C536A
	pop {r7}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_81000D8 // =0x4050301 
	ldr r6, [r7,#8]
	push {r7}
	ldr r7, dword_81000DC // =0x3 
	bl sub_80C536A
	pop {r7}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #3
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_81000D8 // =0x4050301 
	ldr r6, [r7,#8]
	ldr r7, dword_81000DC // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_81000D8: .word 0x4050301
dword_81000DC: .word 0x3
.endfunc // sub_810007C

.func
.thumb_func
sub_81000E0:
	push {r4,lr}
	bl sub_800D58C
.endfunc // sub_81000E0

	add r4, r0, #0
	tst r4, r4
	beq locret_81000F4
	bl sub_800E2C0
	neg r0, r0
	add r0, r0, r4
locret_81000F4:
	pop {r4,pc}
.func
.thumb_func
sub_81000F6:
	push {lr}
	ldrb r0, [r7,#0x16]
	mov r1, #2
	mov r2, #5
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	pop {pc}
.endfunc // sub_81000F6

.func
.thumb_func
sub_8100106:
	push {r4,r6,r7,lr}
	mov r6, #1
loc_810010A:
	ldrb r0, [r7,#0x16]
	add r1, r6, #0
	ldr r3, off_8100138 // =dword_810013C 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_8100140 - 0x810013c)
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_8100106

	tst r0, r0
	pop {r0,r1}
	beq loc_8100130
	push {r6,r7}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x2c]
	bl sub_80D21F8
	pop {r6,r7}
loc_8100130:
	add r6, #2
	cmp r6, #3
	ble loc_810010A
	pop {r4,r6,r7,pc}
off_8100138: .word dword_810013C
dword_810013C: .word 0x10
dword_8100140: .word 0xF880080
.func
.thumb_func
sub_8100144:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_81001A8 // =byte_81001AC 
	add r1, r1, r0
	ldr r0, [r1]
	ldr r1, [r1,#4]
	str r0, [sp]
	str r1, [sp,#4]
	bl sub_800D58C
.endfunc // sub_8100144

	add r4, r0, #0
	tst r4, r4
	beq loc_81001A4
	bl sub_800E2C0
	neg r0, r0
	add r4, r4, r0
	add r0, r4, #0
	ldr r1, [r7,#0x2c]
	ldrb r1, [r1,#0x13]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_81001A4
	add r0, r4, #0
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl sub_800CFDC
	add r6, r0, #0
	tst r6, r6
	beq loc_81001A4
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_81001A4:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
off_81001A8: .word byte_81001AC
byte_81001AC: .byte 0x0, 0x0, 0x1, 0x0, 0xA0, 0x0, 0x88, 0xF, 0x20, 0x0, 0x1, 0x0, 0x80
	.byte 0x0, 0x88, 0xF, 0x8, 0x10, 0x1, 0x1, 0x10, 0x0, 0x0, 0x1, 0x84, 0x3
	.byte 0x0, 0x0, 0xA, 0x0, 0x14, 0x5, 0x1, 0x0, 0xA, 0x0, 0xA4, 0x6, 0x2
	.byte 0x0, 0xA, 0x0, 0xD0, 0x7, 0x3, 0x0, 0xA, 0x0, 0xD0, 0x7, 0x4, 0x0
	.byte 0xA, 0x0, 0xD0, 0x7, 0x5, 0x0, 0xA, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x63, 0x1, 0x8, 0x89, 0x78, 0x1, 0x8
	.byte 0xC5, 0x70, 0x1, 0x8, 0xFF, 0x74, 0x1, 0x8, 0xB9, 0x75, 0x1, 0x8, 0xB7
	.byte 0x78, 0x1, 0x8, 0x89, 0x76, 0x1, 0x8, 0x69, 0x77, 0x1, 0x8, 0xE9, 0x2
	.byte 0x10, 0x8, 0x5D, 0x7, 0x10, 0x8, 0x4F, 0x8, 0x10, 0x8, 0x45, 0x9, 0x10
	.byte 0x8, 0x2D, 0xA, 0x10, 0x8, 0x1D, 0xC, 0x10, 0x8, 0xD7, 0xD, 0x10, 0x8
	.byte 0x9D, 0xE, 0x10, 0x8, 0xC0, 0xB5, 0xAF, 0x6D, 0x80, 0x26, 0xF6, 0x19, 0xA0
	.byte 0x37, 0x3, 0x49, 0x30, 0x78, 0x9, 0x58, 0xFE, 0x46, 0x8, 0x47, 0xC0, 0xBD
	.byte 0x0, 0x0, 0x4, 0x3, 0x10, 0x8, 0x9, 0x3, 0x10, 0x8, 0x50, 0xB5, 0xF
	.byte 0xF7, 0x94, 0xFD, 0x22, 0x49, 0x8, 0x5C, 0x31, 0x79, 0x81
byte_8100315: .byte 0x42, 0x39, 0xDB, 0x0, 0x20, 0x30, 0x71, 0x70, 0x79
	.byte 0x3, 0x28, 0x2A, 0xDA, 0x70, 0x79, 0x1, 0x30, 0x70
	.byte 0x71, 0xB0, 0x79, 0x1, 0x21, 0x41, 0x40, 0xB1, 0x71
	.byte 0x0, 0x42, 0x9, 0xD0, 0x28, 0x6E, 0x2, 0x28, 0x12
	.byte 0xD0, 0x4, 0x28, 0x13, 0xD0, 0x1, 0x28, 0x14, 0xD0
	.byte 0x3, 0x28, 0x15, 0xD0, 0x8, 0xE0, 0xF0, 0x79, 0x1
	.byte 0x21, 0x41, 0x40, 0xF1, 0x71, 0x0, 0x42, 0x2, 0xD1
	.byte 0x30, 0x79, 0x3, 0x30, 0x30, 0x71, 0x0, 0xF0, 0x11
	.byte 0xF9, 0x1A, 0xE0, 0x0, 0xF0, 0x21, 0xF9, 0x17, 0xE0
	.byte 0x0, 0xF0, 0x3A, 0xF9, 0x14, 0xE0, 0x0, 0xF0, 0x52
	.byte 0xF9, 0x11, 0xE0, 0x0, 0xF0, 0x6B, 0xF9, 0xE, 0xE0
	.byte 0x30, 0x79, 0x3, 0x30, 0x30, 0x71, 0x0, 0x20, 0x70
	.byte 0x71, 0xB0, 0x71, 0xF0, 0x71, 0x0, 0xF0, 0xF3, 0xF8
	.byte 0x4, 0xE0, 0x30, 0x79, 0x1, 0x30, 0x30, 0x71, 0x0
	.byte 0xF0, 0xE3, 0xF8, 0x50, 0xBD, 0x9C, 0x3, 0x10, 0x8
	.byte 0x3, 0x2, 0x2, 0x2, 0x0, 0xB5, 0x0, 0xBD, 0x0
	.byte 0xB5, 0x0, 0xBD
.func
.thumb_func
sub_81003A8:
	push {lr}
	pop {pc}
.endfunc // sub_81003A8

.func
.thumb_func
sub_81003AC:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	ldr r2, [r5,#0x58]
	add r2, #0xa0
	ldrb r0, [r2,#0x16]
	ldrb r1, [r2,#0x17]
	bl sub_801BB46
.endfunc // sub_81003AC

	pop {pc}
.func
.thumb_func
sub_81003EA:
	push {r4,lr}
	ldr r0, off_8100404 // =byte_8100408 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_810074C // =0xa000 
	tst r0, r1
	beq loc_8100400
	add r4, #0x3c 
loc_8100400:
	add r0, r4, #0
	pop {r4,pc}
off_8100404: .word byte_8100408
byte_8100408: .byte 0x1E, 0x18, 0x12, 0xC
.endfunc // sub_81003EA

.func
.thumb_func
sub_810040C:
	push {lr}
	ldr r0, off_8100418 // =byte_810041C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8100418: .word byte_810041C
byte_810041C: .byte 0xA, 0xA, 0xA, 0xA
.endfunc // sub_810040C

.func
.thumb_func
sub_8100420:
	push {r4,lr}
	ldr r0, off_810043C // =byte_8100440 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_810074C // =0xa000 
	tst r0, r1
	beq loc_8100436
	add r4, #0x3c 
loc_8100436:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_810043C: .word byte_8100440
byte_8100440: .byte 0x14, 0x10, 0xE, 0xC
.endfunc // sub_8100420

.func
.thumb_func
sub_8100444:
	push {lr}
	mov r0, #0
	ldrh r1, [r5,#0x26]
	lsr r1, r1, #1
	ldrh r2, [r5,#0x24]
	cmp r1, r2
	ble loc_8100454
	mov r0, #4
loc_8100454:
	ldr r1, off_8100460 // =byte_8100464 
	add r0, r0, r1
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_8100460: .word byte_8100464
byte_8100464: .byte 0x4, 0x4, 0x5, 0x6, 0x6, 0x6, 0x8, 0xA
.endfunc // sub_8100444

.func
.thumb_func
sub_810046C:
	push {lr}
	ldr r0, off_8100478 // =byte_810047C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8100478: .word byte_810047C
byte_810047C: .byte 0x10, 0xE, 0xC, 0xA
.endfunc // sub_810046C

.func
.thumb_func
sub_8100480:
	push {r4,lr}
	ldr r0, off_810049C // =byte_81004A0 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_810074C // =0xa000 
	tst r0, r1
	beq loc_8100496
	add r4, #0x3c 
loc_8100496:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_810049C: .word byte_81004A0
byte_81004A0: .byte 0x28, 0x24, 0x20, 0x1C
.endfunc // sub_8100480

.func
.thumb_func
sub_81004A4:
	push {lr}
	ldr r0, off_81004BC // =byte_81004C0 
	bl sub_800FE28
	push {r0}
	ldr r0, off_81004BC // =byte_81004C0 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_81004BC: .word byte_81004C0
byte_81004C0: .byte 0xA, 0xA, 0xA, 0xA, 0x14, 0x10, 0xC, 0xA
.endfunc // sub_81004A4

.func
.thumb_func
sub_81004C8:
	push {r4,lr}
	ldr r0, off_81004E4 // =byte_81004E8 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_810074C // =0xa000 
	tst r0, r1
	beq loc_81004DE
	add r4, #0x3c 
loc_81004DE:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_81004E4: .word byte_81004E8
byte_81004E8: .byte 0x28, 0x24, 0x20, 0x1C
.endfunc // sub_81004C8

.func
.thumb_func
sub_81004EC:
	push {lr}
	ldr r0, off_81004F8 // =byte_81004FC 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_81004F8: .word byte_81004FC
byte_81004FC: .byte 0xA, 0xA, 0xA, 0xA
.endfunc // sub_81004EC

.func
.thumb_func
sub_8100500:
	push {r4,lr}
	ldr r0, off_810051C // =byte_8100520 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_810074C // =0xa000 
	tst r0, r1
	beq loc_8100516
	add r4, #0x3c 
loc_8100516:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_810051C: .word byte_8100520
byte_8100520: .byte 0x28, 0x24, 0x20, 0x1C
.endfunc // sub_8100500

.func
.thumb_func
sub_8100524:
	push {lr}
	ldr r0, off_8100530 // =byte_8100534 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_8100530: .word byte_8100534
byte_8100534: .byte 0xA, 0xA, 0xA, 0xA
.endfunc // sub_8100524

.func
.thumb_func
sub_8100538:
	push {r4,lr}
	ldr r0, off_8100554 // =loc_8100558 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_810074C // =0xa000 
	tst r0, r1
	beq loc_810054E
	add r4, #0x3c 
loc_810054E:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_8100554: .word loc_8100558
.endfunc // sub_8100538

loc_8100558:
	lsl r1, r0, #4
	lsl r1, r0, #4
	push {lr}
	ldr r0, off_8100750 // =sub_8100F5C+1 
	str r0, [r7,#0x28]
	bl sub_81003EA
	strh r0, [r7,#0x18]
	mov r0, #9
	bl loc_8011690
	pop {pc}
	push {lr}
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x28]
	mov r0, #0xa
	bl sub_8011680
	pop {pc}
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0x20 
	strb r0, [r7,#2]
	mov r0, #4
	bl sub_810067E
	bl sub_8100538
	strh r0, [r7,#0x18]
	bl sub_8100524
	strb r0, [r7,#0xc]
	mov r0, #0xf
	bl sub_8011680
	pop {pc}
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_810067E
	bl sub_8100420
	strh r0, [r7,#0x18]
	bl sub_8100444
	strb r0, [r7,#0xc]
	bl sub_810040C
	strb r0, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {pc}
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #2
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_810067E
	bl sub_8100480
	strh r0, [r7,#0x18]
	bl sub_810046C
	strb r0, [r7,#0xc]
	ldr r0, off_8100754 // =sub_8100F8A+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {pc}
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #4
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_810067E
	ldr r0, off_8100758 // =sub_810102A+1 
	str r0, [r7,#0x28]
	bl sub_81004C8
	strh r0, [r7,#0x18]
	bl sub_81004A4
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xd
	bl sub_8011680
	pop {pc}
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #3
	strb r0, [r7,#2]
	mov r0, #3
	bl sub_810067E
	bl sub_8100500
	strh r0, [r7,#0x18]
	bl sub_81004EC
	strb r0, [r7,#0xc]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xe
	bl sub_8011680
	pop {pc}
.func
.thumb_func
sub_810067E:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_81006D4 // =dword_81006E8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_8100710 // =dword_8100724 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_810067E

	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_81006D4 // =dword_81006E8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_8100710 // =dword_8100724 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_81006D4: .word dword_81006E8
	.word dword_81006F0
	.word dword_81006F8
	.word dword_8100700
	.word dword_8100708
dword_81006E8: .word 0x5A003C
	.word 0xC80078
dword_81006F0: .word 0x32001E, 0x780046
dword_81006F8: .word 0x32001E, 0x780046
dword_8100700: .word 0x64003C, 0xF0008C
dword_8100708: .word 0x64003C, 0xF0008C
off_8100710: .word dword_8100724
off_8100714: .word dword_810072C
	.word dword_8100734
	.word dword_810073C
	.word dword_8100744
dword_8100724: .word 0xA000A
	.word 0xA000A
dword_810072C: .word 0xA000A
	.word 0xA000A
dword_8100734: .word 0xA000A
	.word 0xA000A
dword_810073C: .word 0xA000A
	.word 0xA000A
dword_8100744: .word 0xA000A
	.word 0xA000A
dword_810074C: .word 0xA000
off_8100750: .word sub_8100F5C+1
off_8100754: .word sub_8100F8A+1
off_8100758: .word sub_810102A+1
	push {r7,lr}
	ldr r1, off_810076C // =off_8100770 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_810076C: .word off_8100770
off_8100770: .word sub_810077C+1
	.word sub_81007E4+1
	.word sub_810082A+1
.func
.thumb_func
sub_810077C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81007B6
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_81007C4
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_81007D0 // =dword_81007D4 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #2
	strh r0, [r7,#0x10]
loc_81007B6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81007CC
	mov r0, #4
	strh r0, [r7]
	b locret_81007CC
loc_81007C4:
	mov r0, #0x3c 
	strh r0, [r7,#0x18]
	mov r0, #8
	strh r0, [r7]
locret_81007CC:
	pop {pc}
	.byte 0, 0
off_81007D0: .word dword_81007D4
dword_81007D4: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_810077C

.func
.thumb_func
sub_81007E4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810081C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
loc_810080E:
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #2
	strh r0, [r7,#0x10]
	b locret_8100828
loc_810081C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100828
	mov r0, #8
	strh r0, [r7]
locret_8100828:
	pop {pc}
.endfunc // sub_81007E4

.func
.thumb_func
sub_810082A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100840
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_810084C
loc_8100840:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810084C
	bl sub_8011714
locret_810084C:
	pop {pc}
.endfunc // sub_810082A

	push {r7,lr}
	ldr r1, off_810085C // =off_8100860 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_810085C: .word off_8100860
off_8100860: .word sub_8100870+1
	.word sub_8100894+1
	.word sub_81008C2+1
	.word sub_8100920+1
.func
.thumb_func
sub_8100870:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100886
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x13
	strh r0, [r7,#0x10]
	b locret_8100892
loc_8100886:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100892
	mov r0, #4
	strh r0, [r7]
locret_8100892:
	pop {pc}
.endfunc // sub_8100870

.func
.thumb_func
sub_8100894:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81008B4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #6
	strb r0, [r5,#0x10]
	bl sub_8101218
	mov r0, #0x77 
	bl sound_play // () -> void
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_81008C0
loc_81008B4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81008C0
	mov r0, #8
	strh r0, [r7]
locret_81008C0:
	pop {pc}
.endfunc // sub_8100894

.func
.thumb_func
sub_81008C2:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81008D4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_8100904
loc_81008D4:
	bl sprite_forceWhitePallete
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100904
	ldr r4, [r7,#0x28]
	ldr r0, [r4]
	add r0, #1
	mov r1, #5
	svc 6
	str r1, [r4]
	ldr r0, [r4]
	ldr r1, off_8100908 // =dword_810090C 
	ldrb r0, [r1,r0]
	bl sub_8019F8C
	ldr r0, [r4]
	ldr r1, off_8100914 // =off_8100918 
	ldrb r0, [r1,r0]
	bl sprite_setPallete // (int pallete) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_8100904:
	pop {r4,pc}
	.balign 4, 0x00
off_8100908: .word dword_810090C
dword_810090C: .word 0x3010400, 0x2
off_8100914: .word off_8100918
off_8100918: .word byte_8020600
	.word 0x4
.endfunc // sub_81008C2

.func
.thumb_func
sub_8100920:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100936
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_8100942
loc_8100936:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100942
	bl sub_8011714
locret_8100942:
	pop {pc}
.endfunc // sub_8100920

	push {r7,lr}
	ldr r1, off_8100954 // =off_8100958 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_8100954: .word off_8100958
off_8100958: .word sub_8100968+1
	.word sub_8100996+1
	.word sub_81009E8+1
	.word sub_8100A08+1
.func
.thumb_func
sub_8100968:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100984
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0x13
	strh r0, [r7,#0x10]
	b locret_8100994
loc_8100984:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100994
	mov r0, #6
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_8100994:
	pop {pc}
.endfunc // sub_8100968

.func
.thumb_func
sub_8100996:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81009C2
	mov r0, #4
	strb r0, [r7,#1]
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isCurrentPanelValid
	tst r0, r0
	pop {r0,r1}
	beq loc_81009E2
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_81009E6
loc_81009C2:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_81009D4
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl object_highlightPanel
loc_81009D4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81009E6
	mov r0, #8
	strh r0, [r7]
	b locret_81009E6
loc_81009E2:
	mov r0, #0xc
	strh r0, [r7]
locret_81009E6:
	pop {pc}
.endfunc // sub_8100996

.func
.thumb_func
sub_81009E8:
	push {lr}
	mov r0, #7
	strb r0, [r5,#0x10]
	bl sub_810108E
	ldrb r0, [r7,#0xc]
	sub r0, #1
	strb r0, [r7,#0xc]
	cmp r0, #0
	ble loc_8100A02
	mov r0, #4
	strh r0, [r7]
	b locret_8100A06
loc_8100A02:
	mov r0, #0xc
	strh r0, [r7]
locret_8100A06:
	pop {pc}
.endfunc // sub_81009E8

.func
.thumb_func
sub_8100A08:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100A1A
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8100A2A
loc_8100A1A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100A2A
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_8100A2A:
	pop {pc}
.endfunc // sub_8100A08

	push {r7,lr}
	ldr r1, off_8100A3C // =off_8100A40 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_8100A3C: .word off_8100A40
off_8100A40: .word sub_8100A5C+1
	.word sub_8100ACC+1
	.word sub_8100B04+1
	.word sub_8100B2C+1
	.word sub_8100B72+1
	.word sub_8100BA6+1
	.word sub_8100BC6+1
.func
.thumb_func
sub_8100A5C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100AA8
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_8100AB6
	ldr r1, off_8100AC0 // =dword_8100AC4 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_8100AC8 - 0x8100ac4)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_8100AB6
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #2
	strh r0, [r7,#0x10]
	b locret_8100ABE
loc_8100AA8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100ABE
	mov r0, #4
	strh r0, [r7]
	b locret_8100ABE
loc_8100AB6:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_8100ABE:
	pop {pc}
off_8100AC0: .word dword_8100AC4
dword_8100AC4: .word 0x10
dword_8100AC8: .word 0xF880080
.endfunc // sub_8100A5C

.func
.thumb_func
sub_8100ACC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100AF2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #2
	strh r0, [r7,#0x10]
	b locret_8100B02
loc_8100AF2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100B02
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_8100B02:
	pop {pc}
.endfunc // sub_8100ACC

.func
.thumb_func
sub_8100B04:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100B1A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x13
	strh r0, [r7,#0x10]
	b locret_8100B2A
loc_8100B1A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100B2A
	mov r0, #6
	strb r0, [r5,#0x10]
	mov r0, #0xc
	strh r0, [r7]
locret_8100B2A:
	pop {pc}
.endfunc // sub_8100B04

.func
.thumb_func
sub_8100B2C:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100B42
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8100B70
loc_8100B42:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8100B64
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #4
	ldrb r3, [r5,#0x17]
	lsl r3, r3, #8
	ldrb r4, [r5,#0x16]
	orr r3, r4
	bl object_highlightPanelRegion
loc_8100B64:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100B70
	mov r0, #0x10
	strh r0, [r7]
locret_8100B70:
	pop {r4,pc}
.endfunc // sub_8100B2C

.func
.thumb_func
sub_8100B72:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100B98
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	bl sub_81010A0
	mov r0, #0x99
	bl sound_play // () -> void
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_8100BA4
loc_8100B98:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100BA4
	mov r0, #0x14
	strh r0, [r7]
locret_8100BA4:
	pop {pc}
.endfunc // sub_8100B72

.func
.thumb_func
sub_8100BA6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100BB8
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8100BC4
loc_8100BB8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100BC4
	mov r0, #0x18
	strh r0, [r7]
locret_8100BC4:
	pop {pc}
.endfunc // sub_8100BA6

.func
.thumb_func
sub_8100BC6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100C0E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0xc
	strh r0, [r7,#0x10]
	b locret_8100C1A
loc_8100C0E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100C1A
	bl sub_8011714
locret_8100C1A:
	pop {pc}
.endfunc // sub_8100BC6

	push {r7,lr}
	ldr r1, off_8100C2C // =off_8100C30 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_8100C2C: .word off_8100C30
off_8100C30: .word sub_8100C48+1
	.word sub_8100CB8+1
	.word sub_8100CFE+1
	.word sub_8100D2C+1
	.word sub_8100D6A+1
	.word sub_8100DB2+1
.func
.thumb_func
sub_8100C48:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100C8C
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_8100C9A
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8100CA4 // =dword_8100CA8 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_8100C9A
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #2
	strh r0, [r7,#0x10]
	b locret_8100CA2
loc_8100C8C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100CA2
	mov r0, #4
	strh r0, [r7]
	b locret_8100CA2
loc_8100C9A:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_8100CA2:
	pop {pc}
off_8100CA4: .word dword_8100CA8
dword_8100CA8: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_8100C48

.func
.thumb_func
sub_8100CB8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100CF0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #2
	strh r0, [r7,#0x10]
	b locret_8100CFC
loc_8100CF0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100CFC
	mov r0, #8
	strh r0, [r7]
locret_8100CFC:
	pop {pc}
.endfunc // sub_8100CB8

.func
.thumb_func
sub_8100CFE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100D1A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0x13
	strh r0, [r7,#0x10]
	b locret_8100D2A
loc_8100D1A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100D2A
	mov r0, #6
	strb r0, [r5,#0x10]
	mov r0, #0xc
	strh r0, [r7]
locret_8100D2A:
	pop {pc}
.endfunc // sub_8100CFE

.func
.thumb_func
sub_8100D2C:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100D4A
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_8101190
	tst r0, r0
	beq loc_8100D64
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_8100D68
loc_8100D4A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100D68
	mov r0, #0
	strb r0, [r7,#0xe]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_8101204
	mov r0, #0x10
	strh r0, [r7]
	b locret_8100D68
loc_8100D64:
	mov r0, #0x14
	strh r0, [r7]
locret_8100D68:
	pop {r4,pc}
.endfunc // sub_8100D2C

.func
.thumb_func
sub_8100D6A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100D8C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	bl sub_81011B2
	tst r0, r0
	beq loc_8100DAC
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	b locret_8100DB0
loc_8100D8C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100DB0
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_8101204
	ldrb r0, [r7,#0xe]
	add r0, #1
	strb r0, [r7,#0xe]
	cmp r0, #5
	bge loc_8100DAC
	mov r0, #0
	strb r0, [r7,#1]
	b locret_8100DB0
loc_8100DAC:
	mov r0, #0x14
	strh r0, [r7]
locret_8100DB0:
	pop {pc}
.endfunc // sub_8100D6A

.func
.thumb_func
sub_8100DB2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100DC4
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8100DD4
loc_8100DC4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100DD4
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_8100DD4:
	pop {pc}
.endfunc // sub_8100DB2

	push {r7,lr}
	ldr r1, off_8100DE4 // =off_8100DE8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8100DE4: .word off_8100DE8
off_8100DE8: .word sub_8100DF8+1
	.word sub_8100E26+1
	.word sub_8100E54+1
	.word sub_8100E78+1
.func
.thumb_func
sub_8100DF8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100E14
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0x13
	strh r0, [r7,#0x10]
	b locret_8100E24
loc_8100E14:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100E24
	mov r0, #6
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_8100E24:
	pop {pc}
.endfunc // sub_8100DF8

.func
.thumb_func
sub_8100E26:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100E40
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_81010DA
	tst r0, r0
	beq loc_8100E4E
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_8100E52
loc_8100E40:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100E52
	mov r0, #8
	strh r0, [r7]
	b locret_8100E52
loc_8100E4E:
	mov r0, #0xc
	strh r0, [r7]
locret_8100E52:
	pop {pc}
.endfunc // sub_8100E26

.func
.thumb_func
sub_8100E54:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100E6A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0x10
	strh r0, [r7,#0x10]
	b locret_8100E76
loc_8100E6A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100E76
	mov r0, #0xc
	strh r0, [r7]
locret_8100E76:
	pop {pc}
.endfunc // sub_8100E54

.func
.thumb_func
sub_8100E78:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100E8A
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8100E9A
loc_8100E8A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100E9A
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_8100E9A:
	pop {pc}
.endfunc // sub_8100E78

	push {r7,lr}
	ldr r1, off_8100EAC // =off_8100EB0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_8100EAC: .word off_8100EB0
off_8100EB0: .word sub_8100EC0+1
	.word sub_8100EEE+1
	.word sub_8100F0E+1
	.word sub_8100F38+1
.func
.thumb_func
sub_8100EC0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100EDC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0x12
	bl object_setCounterTime
	mov r0, #0x13
	strh r0, [r7,#0x10]
	b locret_8100EEC
loc_8100EDC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100EEC
	mov r0, #6
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7]
locret_8100EEC:
	pop {pc}
.endfunc // sub_8100EC0

.func
.thumb_func
sub_8100EEE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100F00
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_8100F0C
loc_8100F00:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100F0C
	mov r0, #8
	strh r0, [r7]
locret_8100F0C:
	pop {pc}
.endfunc // sub_8100EEE

.func
.thumb_func
sub_8100F0E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100F2A
	mov r0, #4
	strb r0, [r7,#1]
	ldr r0, [r7,#8]
	bl sub_810112C
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0x10
	strh r0, [r7,#0x10]
	b locret_8100F36
loc_8100F2A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100F36
	mov r0, #0xc
	strh r0, [r7]
locret_8100F36:
	pop {pc}
.endfunc // sub_8100F0E

.func
.thumb_func
sub_8100F38:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8100F4A
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8100F5A
loc_8100F4A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8100F5A
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_8100F5A:
	pop {pc}
.endfunc // sub_8100F38

.func
.thumb_func
sub_8100F5C:
	push {r6,r7,lr}
	sub sp, sp, #0x18
	ldrb r0, [r5,#0x13]
	add r7, sp, #0
	bl sub_800CFA6
	add r6, r0, #0
	tst r6, r6
	beq loc_8100F82
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_8100F86
loc_8100F82:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
loc_8100F86:
	add sp, sp, #0x18
	pop {r6,r7,pc}
.endfunc // sub_8100F5C

.func
.thumb_func
sub_8100F8A:
	push {r6,lr}
	sub sp, sp, #0x14
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	ldrb r1, [r0,#0x12]
	ldrb r2, [r0,#0x13]
	push {r1,r2}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	pop {r1,r2}
	add r0, r0, r1
	add r1, r2, #0
	str r0, [sp]
	str r1, [sp,#4]
	mov r6, #0
	ldr r0, [sp]
	ldr r1, [sp,#4]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_8100F8A

	tst r0, r0
	pop {r0,r1}
	bne loc_810101A
	ldr r0, [sp]
	ldr r1, [sp,#4]
	sub r1, #1
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_8100FDE
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x10
	strb r0, [r1,r6]
	add r6, #1
loc_8100FDE:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	add r1, #1
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_8100FFE
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x10
	strb r0, [r1,r6]
	add r6, #1
loc_8100FFE:
	tst r6, r6
	beq loc_8101016
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_810101A
loc_8101016:
	mov r0, #0
	b loc_810101A
loc_810101A:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	pop {r0,r1}
	add sp, sp, #0x14
	pop {r6,pc}
.func
.thumb_func
sub_810102A:
	push {r6,r7,lr}
	sub sp, sp, #0x10
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
.endfunc // sub_810102A

	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_8101044
	mov r0, #6
loc_8101044:
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl sub_800CFDC
	add r6, r0, #0
	tst r6, r6
	beq loc_8101068
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_810107E
loc_8101068:
	mov r2, #1
	ldrb r3, [r5,#0x16]
	tst r3, r3
	beq loc_8101072
	mov r2, #6
loc_8101072:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	cmp r0, r2
	beq loc_810107E
	mov r0, #0
	b loc_810107E
loc_810107E:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	pop {r0,r1}
	add sp, sp, #0x10
	pop {r6,r7,pc}
.func
.thumb_func
sub_810108E:
	push {r4,r6,lr}
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldrb r2, [r7,#2]
	mov r4, #0
	ldr r6, [r7,#8]
	bl sub_80D6D18
	pop {r4,r6,pc}
.endfunc // sub_810108E

.func
.thumb_func
sub_81010A0:
	push {r4,r6,lr}
	mov r6, #0
loc_81010A4:
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r7,#0x16]
	add r0, r0, r1
	ldrb r1, [r7,#0x17]
	sub r1, #1
	add r1, r1, r6
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_81010D2
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	mov r3, #0x1e
	lsl r3, r3, #8
	orr r4, r3
	push {r6}
	ldr r6, [r7,#8]
	bl sub_80D6EB0
	pop {r6}
loc_81010D2:
	add r6, #1
	cmp r6, #2
	ble loc_81010A4
	pop {r4,r6,pc}
.endfunc // sub_81010A0

.func
.thumb_func
sub_81010DA:
	push {r4,r6,lr}
	mov r6, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_81010E6
	mov r6, #6
loc_81010E6:
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	add r0, r6, #0
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_8101118 // =dword_810111C 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D0BC
.endfunc // sub_81010DA

	tst r0, r0
	beq locret_8101114
	push {r0,r7}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#0xc]
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x2c]
	bl sub_80E6F10
	pop {r0,r7}
locret_8101114:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_8101118: .word dword_810111C
dword_810111C: .word 0x20, 0x0, 0x0
	.word 0x20
.func
.thumb_func
sub_810112C:
	push {r4,r6,r7,lr}
	sub sp, sp, #8
	str r0, [sp]
	add r4, r7, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
.endfunc // sub_810112C

	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_8101146
	mov r0, #6
loc_8101146:
	mov r1, #2
	ldr r3, off_8101184 // =dword_8101188 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_810118C - 0x8101188)
	add r7, sp, #4
	bl sub_800CF14
	add r7, r4, #0
	add r6, r0, #0
	tst r6, r6
	beq loc_8101178
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #4
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	mov r2, #0x20 
	ldrb r4, [r7,#3]
	ldr r6, [sp]
	bl sub_80D71D6
loc_8101178:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	add sp, sp, #8
	pop {r4,r6,r7,pc}
off_8101184: .word dword_8101188
dword_8101188: .word 0x10000
dword_810118C: .word 0xF880080
.func
.thumb_func
sub_8101190:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, off_81011F8 // =dword_81011FC 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_8101200 - 0x81011fc)
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_8101190

	tst r0, r0
	pop {r0,r1}
	bne locret_81011B0
	mov r0, #0
locret_81011B0:
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_81011B2:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r7,#0x16]
	add r0, r0, r1
	ldrb r1, [r7,#0x17]
	ldr r2, [r7,#0x2c]
	ldrb r2, [r2,#0x13]
	cmp r2, #1
	blt loc_81011E0
	cmp r2, #3
	bgt loc_81011E0
	ldrb r1, [r7,#0x17]
	ldr r2, [r7,#0x2c]
	ldrb r2, [r2,#0x13]
	cmp r2, r1
	beq loc_81011E0
	cmp r2, r1
	bgt loc_81011DC
	sub r1, #1
	b loc_81011E0
loc_81011DC:
	add r1, #1
	b loc_81011E0
loc_81011E0:
	ldr r3, off_81011F8 // =dword_81011FC 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_8101200 - 0x81011fc)
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_81011B2

	tst r0, r0
	pop {r0,r1}
	bne locret_81011F4
	mov r0, #0
locret_81011F4:
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_81011F8: .word dword_81011FC
dword_81011FC: .word 0x10
dword_8101200: .word 0x3800000
.func
.thumb_func
sub_8101204:
	push {r4,r6,lr}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldrb r3, [r7,#0xd]
	lsl r3, r3, #8
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80D703A
	pop {r4,r6,pc}
.endfunc // sub_8101204

.func
.thumb_func
sub_8101218:
	push {r4,lr}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #3
	add r4, r4, r0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x20 
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,pc}
	.balign 4, 0x00
dword_810123C: .word 0x1011208, 0x1000012, 0x4B0, 0x640000A, 0xA0001, 0x207D0
	.word 0xA28000A, 0xA0003, 0x40A28, 0xA28000A, 0xA0005, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x8016381
	.word 0x8017889, 0x80170C5, 0x80174FF, 0x80175B9, 0x80178B7, 0x8017689
	.word 0x8017769, 0x8101361, 0x81030A1, 0x8103177, 0x81032F5, 0x8103477
	.word 0x810359F, 0x6DAFB5C0, 0x19F62680, 0x490337A0, 0x58097830, 0x470846FE
	.word 0xBDC0, 0x810137C, 0x810138D, 0x81013AB, 0x810144B, 0x8101457
	.word 0x7930B550, 0xDA052802, 0x30017930, 0xF0007130, 0xE003F934, 0x71302000
	.word 0x70312104, 0xB550BD50, 0xF91AF000, 0xD00A4200, 0x28027970, 0x2000DB04
	.word 0xF0007170, 0xE041F99E, 0x30017970, 0xF0007170, 0x1C04F8DB, 0xD1104224
	.word 0x28037930, 0x2000DB31, 0x8CE97130, 0x8CAA0849, 0xDC1B4291, 0x420079F0
	.word 0x40482101, 0xD10F71F0, 0x79B0E011, 0xDB022801, 0x71B02000, 0xF700E00B
	.word 0x2101F896, 0x30014008, 0x180979B1, 0xE00A71B1, 0xF93AF000, 0xF000E016
	.word 0xE013F955, 0xF952F000, 0x7031210C, 0x1C20E00E, 0xF8F5F000, 0xFD01F70E
	.word 0xDB072801, 0x70312108, 0x7930E004, 0x71303001, 0xF8DFF000, 0xB550BD50
	.word 0xF901F000, 0x70312104, 0xB550BD50, 0xF918F000, 0x70312104, 0xB500BD50
	.word 0xB500BD00
.endfunc // sub_8101218

	pop {pc}
.func
.thumb_func
sub_810146A:
	push {lr}
	bl sub_810173C
	pop {pc}
.endfunc // sub_810146A

.func
.thumb_func
sub_8101472:
	push {lr}
	bl sub_810173C
	ldr r0, [r5,#0x50]
	tst r0, r0
	beq locret_8101482
	bl sub_80C44D2
locret_8101482:
	pop {pc}
.endfunc // sub_8101472

.func
.thumb_func
sub_8101484:
	push {lr}
	ldr r0, off_8101490 // =byte_8101494 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_8101490: .word byte_8101494
byte_8101494: .byte 0x1E, 0x18, 0x14, 0x10
.endfunc // sub_8101484

.func
.thumb_func
sub_8101498:
	push {lr}
	ldr r0, off_81014A4 // =byte_81014A8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_81014A4: .word byte_81014A8
byte_81014A8: .byte 0x18, 0x18, 0x18, 0x18
.endfunc // sub_8101498

.func
.thumb_func
sub_81014AC:
	push {lr}
	ldr r0, off_81014B8 // =byte_81014BC 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_81014B8: .word byte_81014BC
byte_81014BC: .byte 0x1E, 0x1E, 0x1E, 0x1E
.endfunc // sub_81014AC

.func
.thumb_func
sub_81014C0:
	push {lr}
	ldr r0, off_81014CC // =byte_81014D0 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_81014CC: .word byte_81014D0
byte_81014D0: .byte 0x28
	.hword 0x2828
	.byte 0x28 
.endfunc // sub_81014C0

.func
.thumb_func
sub_81014D4:
	push {lr}
	ldr r0, off_81014E0 // =dword_81014E4 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_81014E0: .word dword_81014E4
dword_81014E4: .word 0x18181818
.endfunc // sub_81014D4

.func
.thumb_func
sub_81014E8:
	push {lr}
	ldr r0, off_81014F4 // =byte_81014F8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_81014F4: .word byte_81014F8
byte_81014F8: .byte 0x2, 0x3, 0x3, 0x4
.endfunc // sub_81014E8

.func
.thumb_func
sub_81014FC:
	push {lr}
	ldr r0, off_8101508 // =byte_810150C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8101508: .word byte_810150C
byte_810150C: .byte 0x14, 0x10, 0xC, 0xA
.endfunc // sub_81014FC

.func
.thumb_func
sub_8101510:
	push {lr}
	ldr r0, off_810151C // =byte_8101520 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_810151C: .word byte_8101520
byte_8101520: .byte 0x1E, 0x1A, 0x16, 0x12
.endfunc // sub_8101510

.func
.thumb_func
sub_8101524:
	push {lr}
	ldr r0, off_8101530 // =dword_8101534 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_8101530: .word dword_8101534
dword_8101534: .word 0x3C424650
.endfunc // sub_8101524

.func
.thumb_func
sub_8101538:
	push {lr}
	ldr r0, off_8101544 // =byte_8101548 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8101544: .word byte_8101548
byte_8101548: .byte 0x1, 0x1, 0x1, 0x2
.endfunc // sub_8101538

.func
.thumb_func
sub_810154C:
	push {lr}
	ldr r0, off_8101564 // =byte_8101568 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8101564 // =byte_8101568 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_8101564: .word byte_8101568
byte_8101568: .byte 0x10, 0xC, 0xC, 0xA, 0x28, 0x1E, 0x1A, 0x14
.endfunc // sub_810154C

.func
.thumb_func
sub_8101570:
	push {lr}
	ldr r0, off_810157C // =loc_8101580 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_810157C: .word loc_8101580
.endfunc // sub_8101570

loc_8101580:
	add r6, r3, r0
	lsr r0, r2, #0x10
	push {r4,r6,lr}
	sub sp, sp, #8
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	ldrb r1, [r0,#0x12]
	ldrb r2, [r0,#0x13]
	str r1, [sp]
	str r2, [sp,#4]
	mov r4, #0
loc_810159C:
	add r1, r4, #0
	mov r2, #3
	mul r1, r2
	ldr r2, off_81015D0 // =loc_81015D4 
	add r2, r2, r1
	ldrb r0, [r2]
	ldrb r1, [r2,#1]
	ldrb r6, [r2,#2]
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_81015B6
	mov r2, #7
	sub r0, r2, r0
loc_81015B6:
	ldr r2, [sp]
	ldr r3, [sp,#4]
	cmp r0, r2
	bne loc_81015C2
	cmp r1, r3
	beq loc_81015CA
loc_81015C2:
	add r4, #1
	cmp r4, #4
	ble loc_810159C
	mov r6, #0
loc_81015CA:
	add r0, r6, #0
	add sp, sp, #8
	pop {r4,r6,pc}
off_81015D0: .word loc_81015D4
loc_81015D4:
	lsl r6, r0, #4
	lsl r1, r0, #0x18
	lsl r3, r0, #8
	lsl r5, r0, #8
	lsl r3, r0, #0x10
	lsl r1, r0, #0xc
	lsl r4, r0, #0xc
	// <mkdata>
	.hword 0x3 // mov r3, r0
	push {r4,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	ldrh r4, [r0,#0x24]
	mov r0, #4
	bl sub_810179C
	lsl r1, r0, #0x10
	lsr r1, r1, #0x10
	mov r0, #0
	cmp r4, r1
	bgt locret_8101604
	mov r0, #1
locret_8101604:
	pop {r4,pc}
	push {r4,lr}
	ldr r0, off_810183C // =sub_8103808+1 
	str r0, [r7,#0x28]
	bl sub_8101484
	strh r0, [r7,#0x18]
	mov r0, #9
	bl loc_8011690
	pop {r4,pc}
	push {r4,lr}
	strb r0, [r7,#0xc]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_810176E
	bl sub_8101498
	strh r0, [r7,#0x18]
	bl sub_81014AC
	strb r0, [r7,#0xd]
	ldr r0, dword_8101840 // = 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	mov r0, #4
	strb r0, [r7,#0xc]
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_810176E
	bl sub_81014C0
	strh r0, [r7,#0x18]
	bl sub_81014D4
	strb r0, [r7,#0xd]
	ldr r0, dword_8101844 // = 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_810176E
	bl sub_81014FC
	strh r0, [r7,#0x18]
	bl sub_81014E8
	strb r0, [r7,#0xc]
	bl sub_8101510
	strb r0, [r7,#0xd]
	ldr r0, off_8101848 // =sub_81038FE+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #3
	bl sub_810176E
	bl sub_8101524
	strh r0, [r7,#0x18]
	bl sub_8101538
	strb r0, [r7,#0xc]
	ldr r0, off_810184C // =sub_81038FE+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #4
	bl sub_810176E
	bl sub_810154C
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	bl sub_8101570
	strh r0, [r7,#0x18]
	mov r0, #0x60 
	add r0, r0, r5
	str r0, [r7,#0x30]
	ldr r0, off_8101850 // =sub_8103936+1 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xd
	bl sub_8011680
	pop {r4,pc}
.func
.thumb_func
sub_810173C:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
.endfunc // sub_810173C

.func
.thumb_func
sub_810176E:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_81017C4 // =dword_81017D8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_8101800 // =dword_8101814 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_810176E

.func
.thumb_func
sub_810179C:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_81017C4 // =dword_81017D8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_8101800 // =dword_8101814 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_81017C4: .word dword_81017D8
	.word dword_81017E0
	.word dword_81017E8
	.word dword_81017F0
	.word dword_81017F8
dword_81017D8: .word 0x780050, 0x12C00BE
dword_81017E0: .word 0x960064, 0x17C00F0
dword_81017E8: .word 0x500032, 0xD20082
dword_81017F0: .word 0x32001E, 0x460046
dword_81017F8: .word 0xDC0096, 0x226015E
off_8101800: .word dword_8101814
	.word dword_810181C
	.word dword_8101824
	.word dword_810182C
	.word dword_8101834
dword_8101814: .word 0xA000A
	.word 0xA000A
dword_810181C: .word 0xA000A
	.word 0xA000A
dword_8101824: .word 0xA000A
	.word 0xA000A
dword_810182C: .word 0xA000A
	.word 0xA000A
dword_8101834: .word 0xA000A
	.word 0xA000A
off_810183C: .word sub_8103808+1
dword_8101840: .word 0x81038A5
dword_8101844: .word 0x81038A5
off_8101848: .word sub_81038FE+1
off_810184C: .word sub_81038FE+1
off_8101850: .word sub_8103936+1
byte_8101854: .byte 0x8, 0x13, 0x1, 0x1, 0x13, 0x0, 0x0, 0x1
byte_810185C: .byte 0x8, 0x7, 0x0, 0x4, 0xA, 0x0, 0x48, 0xD, 0x1, 0x4, 0xA, 0x0, 0x8C
	.byte 0xA, 0x2, 0x4, 0xA, 0x0, 0x8C, 0xA, 0x3, 0x4, 0xA, 0x0, 0x8C, 0xA
	.byte 0x4, 0x4, 0xA, 0x0, 0x8C, 0xA, 0x5, 0x4, 0xA, 0x0, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
byte_8101940: .byte 0x81, 0x63, 0x1, 0x8, 0x89, 0x78, 0x1, 0x8, 0xC5, 0x70, 0x1
	.byte 0x8, 0xFF, 0x74, 0x1, 0x8, 0xB9, 0x75, 0x1, 0x8, 0xB7, 0x78
	.byte 0x1, 0x8, 0x89, 0x76, 0x1, 0x8, 0x69, 0x77, 0x1, 0x8, 0x69
	.byte 0x1A, 0x10, 0x8, 0x91, 0x22, 0x10, 0x8, 0xA1, 0x23, 0x10, 0x8
	.byte 0xAB, 0x24, 0x10, 0x8, 0x63, 0x25, 0x10, 0x8, 0x63, 0x29, 0x10
	.byte 0x8
byte_8101978: .byte 0x1E, 0xC, 0x12, 0x12
byte_810197C: .byte 0x12, 0xC, 0xC, 0xC
byte_8101980: .byte 0x12, 0xC, 0xC, 0xC
byte_8101984: .byte 0xC, 0x6, 0xC, 0xC
byte_8101988: .byte 0x2, 0x2, 0x2, 0x2
byte_810198C: .byte 0x7, 0x7, 0x7, 0x7
byte_8101990: .byte 0x12, 0xC, 0xC, 0xC
byte_8101994: .byte 0x3C, 0x0, 0x82, 0x0, 0x5A, 0x0, 0x5A, 0x0
byte_810199C: .byte 0xA, 0x0, 0xA, 0x0, 0xA, 0x0, 0xA, 0x0
byte_81019A4: .byte 0x6, 0x6, 0x6, 0x6
byte_81019A8: .byte 0x12, 0xC, 0xC, 0xC
byte_81019AC: .byte 0x8, 0x6, 0x7, 0x8
byte_81019B0: .byte 0x12, 0xC, 0xC, 0xC
byte_81019B4: .byte 0x64, 0x0, 0xDC, 0x0, 0x96, 0x0, 0x96, 0x0
byte_81019BC: .byte 0xA, 0x0, 0xA, 0x0, 0xA, 0x0, 0xA, 0x0
byte_81019C4: .byte 0x12, 0xC, 0xC, 0xC
byte_81019C8: .byte 0x12, 0xC, 0xC, 0xC
byte_81019CC: .byte 0x96, 0x0, 0x4A, 0x1, 0xDC, 0x0, 0xDC, 0x0
byte_81019D4: .byte 0xA, 0x0, 0xA, 0x0, 0xA, 0x0, 0xA, 0x0
byte_81019DC: .byte 0x12, 0xC, 0xC, 0xC
byte_81019E0: .byte 0x12, 0xC, 0xC, 0xC
byte_81019E4: .byte 0xC8, 0x0, 0xC2, 0x1, 0x2C, 0x1, 0x2C, 0x1
byte_81019EC: .byte 0xA, 0x0, 0xA, 0x0, 0xA, 0x0, 0xA, 0x0
byte_81019F4: .byte 0x12, 0xC, 0xC, 0xC
byte_81019F8: .byte 0x12, 0xC, 0xC, 0xC
byte_81019FC: .byte 0x50, 0x50, 0x50, 0x50
byte_8101A00: .byte 0x96, 0x0, 0x4A, 0x1, 0xDC, 0x0, 0xDC, 0x0
byte_8101A08: .byte 0xA, 0x0, 0xA, 0x0, 0xA, 0x0, 0xA, 0x0
byte_8101A10: .byte 0x12, 0xC, 0xC, 0xC
byte_8101A14: .byte 0x12, 0xC, 0xC, 0xC
byte_8101A18: .byte 0xB4, 0x0, 0x90, 0x1, 0xE, 0x1, 0xE, 0x1
byte_8101A20: .byte 0xA, 0x0, 0xA, 0x0, 0xA, 0x0, 0xA, 0x0
byte_8101A28: .byte 0x1, 0x1, 0x1, 0x1
byte_8101A2C: .byte 0xC, 0xC, 0x14, 0x14
byte_8101A30: .byte 0x50, 0x50, 0x50, 0x50
byte_8101A34: .byte 0x12, 0xC, 0xC, 0xC
byte_8101A38: .byte 0x2C, 0x1, 0x9E, 0x2, 0xC2, 0x1, 0xC2, 0x1
byte_8101A40: .byte 0xA, 0x0, 0xA, 0x0, 0xA, 0x0, 0xA, 0x0
byte_8101A48: .byte 0x1, 0x1, 0x1, 0x1
byte_8101A4C: .byte 0xC, 0xC, 0x14, 0x14
byte_8101A50: .byte 0x50, 0x50, 0x50, 0x50
byte_8101A54: .byte 0x12, 0xC, 0xC, 0xC
byte_8101A58: .byte 0xFA, 0x0, 0x26, 0x2, 0x72, 0x1, 0x72, 0x1
unk_8101A60: .byte 0xA
	.byte  0
	.byte 0xA
	.byte  0
	.byte 0xA
	.byte  0
	.byte 0xA
	.byte  0
	.byte 0xC0
	.byte 0xB5
	.byte 0xAF
	.byte 0x6D 
	.byte 0x80
	.byte 0x26 
	.byte 0xF6
	.byte 0x19
	.byte 0xA0
	.byte 0x37 
	.byte  3
	.byte 0x49 
	.byte 0x30 
	.byte 0x78 
	.byte  9
	.byte 0x58 
	.byte 0xFE
	.byte 0x46 
	.byte  8
	.byte 0x47 
	.byte 0xC0
	.byte 0xBD
	.byte  0
	.byte  0
	.byte 0x84
	.byte 0x1A
	.byte 0x10
	.byte  8
	.byte 0xA1
	.byte 0x1A
	.byte 0x10
	.byte  8
	.byte 0x25 
	.byte 0x1E
	.byte 0x10
	.byte  8
	.byte 0x4B 
	.byte 0x1E
	.byte 0x10
	.byte  8
	.byte 0x71 
	.byte 0x1E
	.byte 0x10
	.byte  8
	.byte 0x97
	.byte 0x1E
	.byte 0x10
	.byte  8
	.byte 0xBD
	.byte 0x1E
	.byte 0x10
	.byte  8
	.byte 0xE3
	.byte 0x1E
	.byte 0x10
	.byte  8
	.byte  0
	.byte 0xB5
	.byte  0
	.byte 0x23 
	.byte 0x28 
	.byte 0x79 
	.byte  1
	.byte 0x28 
	.byte  0
	.byte 0xD1
	.byte  8
	.byte 0x33 
	.byte 0xA8
	.byte 0x8C
	.byte 0xE9
	.byte 0x8C
	.byte 0x49 
	.byte  8
	.byte 0x88
	.byte 0x42 
	.byte  0
	.byte 0xDA
	.byte  4
	.byte 0x33 
	.byte 0xCE
	.byte 0x48 
	.byte 0xC0
	.byte 0x58 
	.byte 0xFE
	.byte 0x46 
	.byte  0
	.byte 0x47 
	.byte  0
	.byte 0xBD
	.byte  0
	.byte  0
	.byte 0xD5
	.byte 0x1A
	.byte 0x10
	.byte  8
	.byte 0x91
	.byte 0x1B
	.byte 0x10
	.byte  8
	.byte 0x3B 
	.byte 0x1C
	.byte 0x10
	.byte  8
	.byte 0xC1
	.byte 0x1C
	.byte 0x10
	.byte  8
	.byte 0x50 
	.byte 0xB5
	.byte 0x30 
	.byte 0x79 
	.byte  3
	.byte 0x28 
	.byte 0xA
	.byte 0xDA
	.byte 0x30 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x30 
	.byte 0x71 
	.byte 0xFF
	.byte 0xF6
	.byte 0x26 
	.byte 0xFD
	.byte 0x80
	.byte  9
	.byte  2
	.byte 0xD3
	.byte 0x30 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x30 
	.byte 0x71 
	.byte 0x38 
	.byte 0xE1
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x71 
	.byte 0x30 
	.byte 0x7B 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0x30 
	.byte 0x73 
	.byte 0x32 
	.byte 0xD1
	.byte  0
	.byte 0x20
	.byte  0
	.byte 0x21 
	.byte 0xAA
	.byte 0x6D 
	.byte 0x92
	.byte 0x6F 
	.byte 0xBB
	.byte 0x4B 
	.byte  0
	.byte 0xF0
	.byte 0x8F
	.byte 0xFB
	.byte  0
	.byte 0x42 
	.byte 0xF
	.byte 0xD0
	.byte 0x70 
	.byte 0x79 
	.byte  1
	.byte 0x28 
	.byte  2
	.byte 0xDB
	.byte  0
	.byte 0x20
	.byte 0x70 
	.byte 0x71 
	.byte 0x31 
	.byte 0xE0
	.byte 0x70 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x70 
	.byte 0x71 
	.byte 0xFF
	.byte 0xF6
	.byte  5
	.byte 0xFD
	.byte  0
	.byte  9
	.byte  2
	.byte 0xD3
	.byte 0x70 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x70 
	.byte 0x71 
	.byte  0
	.byte 0x20
	.byte  0
	.byte 0x21 
	.byte 0xAA
	.byte 0x6D 
	.byte 0x92
	.byte 0x6F 
	.byte 0xB0
	.byte 0x4B 
	.byte  0
	.byte 0xF0
	.byte 0x76 
	.byte 0xFB
	.byte  0
	.byte 0x42 
	.byte 0x10
	.byte 0xD0
	.byte 0xB0
	.byte 0x79 
	.byte  1
	.byte 0x28 
	.byte  2
	.byte 0xDB
	.byte  0
	.byte 0x20
	.byte 0xB0
	.byte 0x71 
	.byte 0x11
	.byte 0xE0
	.byte 0xB0
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0xB0
	.byte 0x71 
	.byte 0xFF
	.byte 0xF6
	.byte 0xEC
	.byte 0xFC
	.byte  0
	.byte  9
	.byte  2
	.byte 0xD3
	.byte 0xB0
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0xB0
	.byte 0x71 
	.byte 0xFF
	.byte 0xE7
	.byte 0x70 
	.byte 0x7B 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0x70 
	.byte 0x73 
	.byte  0
	.byte 0xD0
	.byte 0xFC
	.byte 0xE0
	.byte 0xFE
	.byte 0xE0
	.byte 0xB0
	.byte 0x7B 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0xB0
	.byte 0x73 
	.byte  0
	.byte 0xD0
	.byte  2
	.byte 0xE1
	.byte 0xB
	.byte 0xE1
	.byte 0xF0
	.byte 0x7B 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0xF0
	.byte 0x73 
	.byte  0
	.byte 0xD0
	.byte 0xF6
	.byte 0xE0
	.byte 0xFF
	.byte 0xE0
	.byte 0x50 
	.byte 0xB5
	.byte 0x30 
	.byte 0x79 
	.byte  1
	.byte 0x28 
	.byte  2
	.byte 0xDB
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x71 
	.byte 0xE2
	.byte 0xE0
	.byte 0xFF
	.byte 0xF6
	.byte 0xC8
	.byte 0xFC
	.byte 0xF
	.byte 0x21 
	.byte  8
	.byte 0x40 
	.byte  4
	.byte 0x28 
	.byte 0x1F
	.byte 0xDB
	.byte 0x30 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x30 
	.byte 0x71 
	.byte 0x30 
	.byte 0x7B 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0x30 
	.byte 0x73 
	.byte 0x2A 
	.byte 0xD1
	.byte  0
	.byte 0x20
	.byte  0
	.byte 0x21 
	.byte 0xAA
	.byte 0x6D 
	.byte 0x92
	.byte 0x6F 
	.byte 0x8F
	.byte 0x4B 
	.byte  0
	.byte 0xF0
	.byte 0x32 
	.byte 0xFB
	.byte  0
	.byte 0x42 
	.byte 0xE
	.byte 0xD0
	.byte 0x70 
	.byte 0x79 
	.byte  1
	.byte 0x28 
	.byte  2
	.byte 0xDB
	.byte  0
	.byte 0x20
	.byte 0x70 
	.byte 0x71 
	.byte 0x29 
	.byte 0xE0
	.byte 0xFF
	.byte 0xF6
	.byte 0xAB
	.byte 0xFC
	.byte 0xF
	.byte 0x21 
	.byte  8
	.byte 0x40 
	.byte  4
	.byte 0x28 
	.byte  2
	.byte 0xDB
	.byte 0x70 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x70 
	.byte 0x71 
	.byte  0
	.byte 0x20
	.byte  0
	.byte 0x21 
	.byte 0xAA
	.byte 0x6D 
	.byte 0x92
	.byte 0x6F 
	.byte 0x84
	.byte 0x4B 
	.byte  0
	.byte 0xF0
	.byte 0x1A
	.byte 0xFB
	.byte  0
	.byte 0x42 
	.byte  9
	.byte 0xD0
	.byte 0xB0
	.byte 0x79 
	.byte  1
	.byte 0x28 
	.byte  2
	.byte 0xDB
	.byte  0
	.byte 0x20
	.byte 0xB0
	.byte 0x71 
	.byte 0xA
	.byte 0xE0
	.byte 0xB0
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0xB0
	.byte 0x71 
	.byte 0xFF
	.byte 0xE7
	.byte 0x70 
	.byte 0x7B 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0x70 
	.byte 0x73 
	.byte  0
	.byte 0xD0
	.byte 0xA7
	.byte 0xE0
	.byte 0xA9
	.byte 0xE0
	.byte 0xB0
	.byte 0x7B 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0xB0
	.byte 0x73 
	.byte  0
	.byte 0xD0
	.byte 0xAD
	.byte 0xE0
	.byte 0xB6
	.byte 0xE0
	.byte 0xF0
	.byte 0x7B 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0xF0
	.byte 0x73 
	.byte  0
	.byte 0xD0
	.byte 0xA1
	.byte 0xE0
	.byte 0xAA
	.byte 0xE0
	.byte 0x50 
	.byte 0xB5
	.byte 0x30 
	.byte 0x79 
	.byte  3
	.byte 0x28 
	.byte 0xA
	.byte 0xDA
	.byte 0x30 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x30 
	.byte 0x71 
	.byte 0xFF
	.byte 0xF6
	.byte 0x73 
	.byte 0xFC
	.byte 0x80
	.byte  9
	.byte  2
	.byte 0xD3
	.byte 0x30 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x30 
	.byte 0x71 
	.byte 0x85
	.byte 0xE0
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x71 
	.byte 0x70 
	.byte 0x79 
	.byte  3
	.byte 0x28 
	.byte  2
	.byte 0xDB
	.byte  0
	.byte 0x20
	.byte 0x70 
	.byte 0x71 
	.byte 0x9B
	.byte 0xE0
	.byte 0x70 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x70 
	.byte 0x71 
	.byte 0xFF
	.byte 0xF6
	.byte 0x60 
	.byte 0xFC
	.byte  0
	.byte  9
	.byte  2
	.byte 0xD3
	.byte 0x70 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x70 
	.byte 0x71 
	.byte 0xB0
	.byte 0x79 
	.byte  2
	.byte 0x28 
	.byte 0x14
	.byte 0xDB
	.byte  0
	.byte 0x20
	.byte 0xB0
	.byte 0x71 
	.byte  0
	.byte 0x20
	.byte  0
	.byte 0x21 
	.byte 0xAA
	.byte 0x6D 
	.byte 0x92
	.byte 0x6F 
	.byte 0x5E 
	.byte 0x4B 
	.byte  0
	.byte 0xF0
	.byte 0xCC
	.byte 0xFA
	.byte  0
	.byte 0x42 
	.byte 0x71 
	.byte 0xD1
	.byte  0
	.byte 0x20
	.byte  0
	.byte 0x21 
	.byte 0xAA
	.byte 0x6D 
	.byte 0x92
	.byte 0x6F 
	.byte 0x5A 
	.byte 0x4B 
	.byte  0
	.byte 0xF0
	.byte 0xC3
	.byte 0xFA
	.byte  0
	.byte 0x42 
	.byte 0x6D 
	.byte 0xD1
	.byte  3
	.byte 0xE0
	.byte 0xB0
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0xB0
	.byte 0x71 
	.byte 0xFF
	.byte 0xE7
	.byte 0x70 
	.byte 0x7B 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0x70 
	.byte 0x73 
	.byte 0x56 
	.byte 0xD1
	.byte 0x58 
	.byte 0xE0
	.byte 0x50 
	.byte 0xB5
	.byte  1
	.byte 0xF0
	.byte 0xB9
	.byte 0xF9
	.byte  0
	.byte 0x42 
	.byte 0x1A
	.byte 0xD0
	.byte  3
	.byte 0xB4
	.byte 0xA8
	.byte 0x7D 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0xE
	.byte 0xF7
	.byte 0x91
	.byte 0xFB
	.byte  2
	.byte 0x1C
	.byte  3
	.byte 0xBC
	.byte 0x11
	.byte 0xD0
	.byte  7
	.byte 0xB4
	.byte 0x4C 
	.byte 0x4B 
	.byte  0
	.byte 0xF0
	.byte 0xCE
	.byte 0xFA
	.byte  0
	.byte 0x28 
	.byte  0
	.byte 0xD0
	.byte 0x4A 
	.byte 0x4B 
	.byte  7
	.byte 0xBC
	.byte  0
	.byte 0xF0
	.byte 0x9E
	.byte 0xFA
	.byte  0
	.byte 0x42 
	.byte  5
	.byte 0xD0
	.byte 0x30 
	.byte 0x7B 
	.byte  4
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0x30 
	.byte 0x73 
	.byte  0
	.byte 0xD1
	.byte 0x4F 
	.byte 0xE0
	.byte 0x70 
	.byte 0x79 
	.byte  4
	.byte 0x28 
	.byte 0xA
	.byte 0xDA
	.byte 0x70 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x70 
	.byte 0x71 
	.byte 0xFF
	.byte 0xF6
	.byte 0x11
	.byte 0xFC
	.byte 0x40 
	.byte  9
	.byte  2
	.byte 0xD3
	.byte 0x70 
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0x70 
	.byte 0x71 
	.byte 0x23 
	.byte 0xE0
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x71 
	.byte 0xB0
	.byte 0x79 
	.byte  2
	.byte 0x28 
	.byte 0x14
	.byte 0xDB
	.byte  0
	.byte 0x20
	.byte 0xB0
	.byte 0x71 
	.byte  0
	.byte 0x20
	.byte  0
	.byte 0x21 
	.byte 0xAA
	.byte 0x6D 
	.byte 0x92
	.byte 0x6F 
	.byte 0x39 
	.byte 0x4B 
	.byte  0
	.byte 0xF0
	.byte 0x7A 
	.byte 0xFA
	.byte  0
	.byte 0x42 
	.byte 0x1F
	.byte 0xD1
	.byte  0
	.byte 0x20
	.byte  0
	.byte 0x21 
	.byte 0xAA
	.byte 0x6D 
	.byte 0x92
	.byte 0x6F 
	.byte 0x35 
	.byte 0x4B 
	.byte  0
	.byte 0xF0
	.byte 0x71 
	.byte 0xFA
	.byte  0
	.byte 0x42 
	.byte 0x1B
	.byte 0xD1
	.byte  3
	.byte 0xE0
	.byte 0xB0
	.byte 0x79 
	.byte  1
	.byte 0x30 
	.byte 0xB0
	.byte 0x71 
	.byte 0xFF
	.byte 0xE7
	.byte 0x70 
	.byte 0x7B 
	.byte  1
	.byte 0x21 
	.byte 0x48 
	.byte 0x40 
	.byte 0x70 
	.byte 0x73 
	.byte  4
	.byte 0xD1
	.byte  6
	.byte 0xE0
	.byte 0x2E 
	.byte 0x48 
	.byte  0
	.byte 0xF0
	.byte 0xCF
	.byte 0xF8
	.byte 0x50 
	.byte 0xBD
	.byte  0
	.byte 0xF0
	.byte 0xDD
	.byte 0xF8
	.byte 0x50 
	.byte 0xBD
	.byte  4
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte  0
	.byte 0x20
	.byte 0x70 
	.byte 0x80
	.byte 0x50 
	.byte 0xBD
	.byte  8
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte  0
	.byte 0x20
	.byte 0x70 
	.byte 0x80
	.byte 0x50 
	.byte 0xBD
	.byte 0xC
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte  0
	.byte 0x20
	.byte 0x70 
	.byte 0x80
	.byte 0x50 
	.byte 0xBD
	.byte 0x10
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte  0
	.byte 0x20
	.byte 0x70 
	.byte 0x80
	.byte 0x50 
	.byte 0xBD
	.byte  0
	.byte 0xF0
	.byte 0x5F 
	.byte 0xF9
	.byte 0x50 
	.byte 0xBD
	.byte  0
	.byte 0xF0
	.byte 0x6E 
	.byte 0xFA
	.byte  0
	.byte 0x28 
	.byte  4
	.byte 0xD0
	.byte 0x14
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte  0
	.byte 0x20
	.byte 0x70 
	.byte 0x80
	.byte 0x50 
	.byte 0xBD
	.byte 0x18
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte  0
	.byte 0x20
	.byte 0x70 
	.byte 0x80
	.byte 0x50 
	.byte 0xBD
	.byte  1
	.byte  1
	.byte  1
	.byte  2
	.byte  1
	.byte  3
	.byte 0x7F 
	.byte  2
	.byte  1
	.byte  2
	.byte  2
	.byte  2
	.byte  3
	.byte  3
	.byte  1
	.byte  3
	.byte  2
	.byte  3
	.byte  3
	.byte 0x7F 
	.byte  3
	.byte  1
	.byte  3
	.byte  2
	.byte  3
	.byte  3
	.byte 0x7F 
	.byte  1
	.byte  0
	.byte  2
	.byte 0xFF
	.byte  2
	.byte  0
	.byte  2
	.byte  1
	.byte  3
	.byte 0xFF
	.byte  3
	.byte  0
	.byte  3
	.byte  1
	.byte 0x7F 
	.byte  1
	.byte  0
	.byte  2
	.byte  0
	.byte  3
	.byte 0xFF
	.byte  3
	.byte  0
	.byte  3
	.byte  1
	.byte 0x7F 
	.byte  0
	.byte  0
	.byte  0
	.byte 0xC4
	.byte 0x1A
	.byte 0x10
	.byte  8
	.byte 0xBC
	.byte 0x1D
	.byte 0x10
	.byte  8
	.byte 0xC3
	.byte 0x1D
	.byte 0x10
	.byte  8
	.byte 0xBC
	.byte 0x1D
	.byte 0x10
	.byte  8
	.byte 0xC3
	.byte 0x1D
	.byte 0x10
	.byte  8
	.byte 0xBC
	.byte 0x1D
	.byte 0x10
	.byte  8
	.byte 0xD0
	.byte 0x1D
	.byte 0x10
	.byte  8
	.byte 0xD7
	.byte 0x1D
	.byte 0x10
	.byte  8
	.byte 0xE6
	.byte 0x1D
	.byte 0x10
	.byte  8
	.byte 0xBC
	.byte 0x1D
	.byte 0x10
	.byte  8
	.byte 0xD0
	.byte 0x1D
	.byte 0x10
	.byte  8
	.word sub_8102C38+1
	.word 0x78F0B500
	.byte  0
	.byte 0x42 
	.byte  5
	.byte 0xD1
	.byte  4
	.byte 0x20
	.byte 0xF0
	.byte 0x70 
	.byte 0xCB
	.byte 0x48 
	.byte  0
	.byte 0xF0
	.byte 0x69 
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte 0x70 
	.byte 0x80
	.byte 0xB8
	.byte 0x7E 
	.byte  0
	.byte 0x42 
	.byte  1
	.byte 0xD0
	.byte  0
	.byte 0xF0
	.byte 0x94
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0xF0
	.byte 0x78 
	.byte  0
	.byte 0x42 
	.byte  5
	.byte 0xD1
	.byte  4
	.byte 0x20
	.byte 0xF0
	.byte 0x70 
	.byte 0xC3
	.byte 0x48 
	.byte  0
	.byte 0xF0
	.byte 0x56 
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte 0x70 
	.byte 0x80
	.byte 0xB8
	.byte 0x7E 
	.byte  0
	.byte 0x42 
	.byte  1
	.byte 0xD0
	.byte  0
	.byte 0xF0
	.byte 0xA0
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0xF0
	.byte 0x78 
	.byte  0
	.byte 0x42 
	.byte  5
	.byte 0xD1
	.byte  4
	.byte 0x20
	.byte 0xF0
	.byte 0x70 
	.byte 0xBA
	.byte 0x48 
	.byte  0
	.byte 0xF0
	.byte 0x43 
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte 0x70 
	.byte 0x80
	.byte 0xB8
	.byte 0x7E 
	.byte  0
	.byte 0x42 
	.byte  1
	.byte 0xD0
	.byte  0
	.byte 0xF0
	.byte 0xA8
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0xF0
	.byte 0x78 
	.byte  0
	.byte 0x42 
	.byte  5
	.byte 0xD1
	.byte  4
	.byte 0x20
	.byte 0xF0
	.byte 0x70 
	.byte 0xB2
	.byte 0x48 
	.byte  0
	.byte 0xF0
	.byte 0x30 
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte 0x70 
	.byte 0x80
	.byte 0xB8
	.byte 0x7E 
	.byte  0
	.byte 0x42 
	.byte  1
	.byte 0xD0
	.byte  0
	.byte 0xF0
	.byte 0xAE
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0xF0
	.byte 0x78 
	.byte  0
	.byte 0x42 
	.byte  5
	.byte 0xD1
	.byte  4
	.byte 0x20
	.byte 0xF0
	.byte 0x70 
	.byte 0xA9
	.byte 0x48 
	.byte  0
	.byte 0xF0
	.byte 0x1D
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte 0x70 
	.byte 0x80
	.byte 0xB8
	.byte 0x7E 
	.byte  0
	.byte 0x42 
	.byte  1
	.byte 0xD0
	.byte  0
	.byte 0xF0
	.byte 0xDF
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0xF0
	.byte 0x78 
	.byte  0
	.byte 0x42 
	.byte  5
	.byte 0xD1
	.byte  4
	.byte 0x20
	.byte 0xF0
	.byte 0x70 
	.byte 0xA1
	.byte 0x48 
	.byte  0
	.byte 0xF0
	.byte 0xA
	.byte 0xF8
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte 0x70 
	.byte 0x80
	.byte 0xB8
	.byte 0x7E 
	.byte  0
	.byte 0x42 
	.byte  1
	.byte 0xD0
	.byte  0
	.byte 0xF0
	.byte 0xF5
	.byte 0xF8
	.byte  0
	.byte 0xBD
.endfunc // sub_810179C

.func
.thumb_func
sub_8101F08:
	push {lr}
	str r0, [r7,#0x28]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x78]
	str r0, [r7,#0x2c]
	ldr r0, off_8102178 // =byte_8101978 
	bl sub_800FE28
	strb r0, [r7,#0x18]
	ldr r0, off_810217C // =byte_810197C 
	bl sub_800FE28
	str r0, [r7,#0x30]
	mov r0, #9
	bl loc_8011690
	pop {pc}
	.byte  0
	.byte 0xB5
	.byte 0x94
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x7B 
	.byte 0xFF
	.byte 0x38 
	.byte 0x76 
	.byte 0x93
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x77 
	.byte 0xFF
	.byte 0x38 
	.byte 0x73 
	.byte 0x92
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x73 
	.byte 0xFF
	.byte 0x78 
	.byte 0x73 
	.byte 0x91
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x6F 
	.byte 0xFF
	.byte 0xB8
	.byte 0x73 
	.byte 0x90
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x6B 
	.byte 0xFF
	.byte 0xF8
	.byte 0x73 
	.byte 0x8F
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x5C 
	.byte 0xFF
	.byte 0x38 
	.byte 0x81
	.byte 0x8E
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x58 
	.byte 0xFF
	.byte 0x78 
	.byte 0x81
	.byte  0
	.byte 0x20
	.byte 0xB8
	.byte 0x70 
	.byte 0xA
	.byte 0x20
	.byte 0xF
	.byte 0xF7
	.byte 0x89
	.byte 0xFB
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0x8A
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x58 
	.byte 0xFF
	.byte 0x38 
	.byte 0x73 
	.byte 0x89
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x54 
	.byte 0xFF
	.byte 0x78 
	.byte 0x73 
	.byte 0x88
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x50 
	.byte 0xFF
	.byte 0xB8
	.byte 0x73 
	.byte 0x87
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x4C 
	.byte 0xFF
	.byte 0xF8
	.byte 0x73 
	.byte 0x86
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x3D 
	.byte 0xFF
	.byte 0x38 
	.byte 0x81
	.byte 0x85
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x39 
	.byte 0xFF
	.byte 0x78 
	.byte 0x81
	.byte  0
	.byte 0x20
	.byte 0xB8
	.byte 0x70 
	.byte 0xB
	.byte 0x20
	.byte 0xF
	.byte 0xF7
	.byte 0x6A 
	.byte 0xFB
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0x80
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x39 
	.byte 0xFF
	.byte 0x38 
	.byte 0x63 
	.byte 0x7F 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x35 
	.byte 0xFF
	.byte 0x78 
	.byte 0x63 
	.byte 0x7E 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x26 
	.byte 0xFF
	.byte 0x38 
	.byte 0x81
	.byte 0x7D 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x22 
	.byte 0xFF
	.byte 0x78 
	.byte 0x81
	.byte  0
	.byte 0x20
	.byte 0xB8
	.byte 0x70 
	.byte 0x7B 
	.byte 0x48 
	.byte 0xF8
	.byte 0x60 
	.byte  0
	.byte 0x20
	.byte 0xF8
	.byte 0x70 
	.byte 0xC
	.byte 0x20
	.byte 0xF
	.byte 0xF7
	.byte 0x4F 
	.byte 0xFB
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0x78 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x1E
	.byte 0xFF
	.byte 0x38 
	.byte 0x73 
	.byte 0x77 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0x1A
	.byte 0xFF
	.byte 0x78 
	.byte 0x73 
	.byte 0x76 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0xB
	.byte 0xFF
	.byte 0x38 
	.byte 0x81
	.byte 0x75 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte  7
	.byte 0xFF
	.byte 0x78 
	.byte 0x81
	.byte  0
	.byte 0x20
	.byte 0xB8
	.byte 0x70 
	.byte  1
	.byte 0x20
	.byte 0xF8
	.byte 0x70 
	.byte 0xC
	.byte 0x20
	.byte 0xF
	.byte 0xF7
	.byte 0x36 
	.byte 0xFB
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0x6F 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte  5
	.byte 0xFF
	.byte 0x38 
	.byte 0x63 
	.byte 0x6E 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte  1
	.byte 0xFF
	.byte 0x78 
	.byte 0x63 
	.byte 0x6D 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0xFD
	.byte 0xFE
	.byte 0x38 
	.byte 0x73 
	.byte 0x6C 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0xEE
	.byte 0xFE
	.byte 0x38 
	.byte 0x81
	.byte 0x6B 
	.byte 0x48 
	.byte 0xD
	.byte 0xF7
	.byte 0xEA
	.byte 0xFE
	.byte 0x78 
	.byte 0x81
	.byte  4
	.byte 0x20
	.byte 0x78 
	.byte 0x73 
	.byte  1
	.byte 0x20
	.byte 0xB8
	.byte 0x73 
	.byte  0
	.byte 0x20
	.byte 0xF8
	.byte 0x73 
	.byte  1
	.byte 0x20
	.byte 0xB8
	.byte 0x70 
	.byte  2
	.byte 0x20
	.byte 0xF8
	.byte 0x70 
	.word 0xF70F200C, 0xBD00FB13, 0x4863B500, 0xFEE2F70D, 0x48626338
	.word 0xFEDEF70D, 0x48616378, 0xFECFF70D, 0x48608138, 0xFECBF70D
	.word 0x20008178, 0x20017338, 0x20017378, 0x200173B8, 0x201073F8
	.word 0x200370B8, 0x200C70F8, 0xFAF2F70F, 0xB500BD00, 0xF70D4856
	.word 0x6338FEC1, 0xF70D4855, 0x6378FEBD, 0xF70D4854, 0x63B8FEB9
	.word 0xF70D4853, 0x63F8FEB5, 0xF70D4852, 0x8138FEA6, 0xF70D4851
	.word 0x8178FEA2, 0x73382004, 0x73786BB8, 0x73B82008, 0x73F82000
	.word 0x70B82001, 0x70F82000, 0xF70F200D, 0xBD00FAC9, 0x4848B500
	.word 0xFE98F70D, 0x48476338, 0xFE94F70D, 0x48466378, 0xFE90F70D
	.word 0x484563B8, 0xFE8CF70D, 0x484463F8, 0xFE7DF70D, 0x48438138
	.word 0xFE79F70D, 0x20028178, 0x200D7338, 0x6BB87378, 0x200073B8
	.word 0x202073F8, 0x200170B8, 0x200D70F8, 0xFAA0F70F, 0xB500BD00
	.word 0xB500BD00
.endfunc // sub_8101F08

	pop {pc}
.func
.thumb_func
sub_810214A:
	push {lr}
	ldr r0, [r5,#0x50]
	bl sub_80C44D2
	pop {pc}
.endfunc // sub_810214A

.func
.thumb_func
sub_8102154:
	push {lr}
	ldr r0, [r5,#0x50]
	bl sub_80C44D2
	pop {pc}
	.byte 0, 0
	.word sub_8102EE2+1
	.word sub_8102F5C+1
	.word sub_8102F98+1
	.word sub_8102FF4+1
	.word sub_8103038+1
	.word sub_8103038+1
off_8102178: .word byte_8101978
off_810217C: .word byte_810197C
	.word byte_8101980
	.word byte_8101984
	.word byte_8101988
	.word byte_810198C
	.word byte_8101990
	.word byte_8101994
	.word byte_810199C
	.word byte_81019A4
	.word byte_81019A8
	.word byte_81019AC
	.word byte_81019B0
	.word byte_81019B4
	.word byte_81019BC
	.word byte_81019C4
	.word byte_81019C8
	.word byte_81019CC
	.word byte_81019D4
	.word 0x100
	.word byte_81019DC
	.word byte_81019E0
	.word byte_81019E4
	.word byte_81019EC
	.word byte_81019F4
	.word byte_81019F8
	.word byte_81019FC
	.word byte_8101A00
	.word byte_8101A08
	.word byte_8101A10
	.word byte_8101A14
	.word byte_8101A18
	.word byte_8101A20
	.word byte_8101A28
	.word byte_8101A2C
	.word byte_8101A30
	.word byte_8101A34
	.word byte_8101A38
	.word byte_8101A40
	.word byte_8101A48
	.word byte_8101A4C
	.word byte_8101A50
	.word byte_8101A54
	.word byte_8101A58
	.word unk_8101A60
.endfunc // sub_8102154

	push {r4,r6,r7,lr}
	sub sp, sp, #0x10
	str r0, [sp]
	str r1, [sp,#4]
	ldrb r0, [r2,#0x12]
	str r0, [sp,#8]
	ldrb r0, [r2,#0x13]
	str r0, [sp,#0xc]
	add r6, r3, #0
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
loc_8102244:
	mov r0, #0
	ldrsb r0, [r6,r0]
	cmp r0, #0x7f
	beq loc_810227A
	ldr r1, [sp]
	tst r1, r1
	bne loc_8102258
	mov r1, #1
	ldrsb r1, [r6,r1]
	b loc_8102266
loc_8102258:
	mul r0, r4
	ldr r2, [sp]
	add r0, r0, r2
	mov r1, #1
	ldrsb r1, [r6,r1]
	ldr r2, [sp,#4]
	add r1, r1, r2
loc_8102266:
	ldr r2, [sp,#8]
	cmp r2, r0
	bne loc_8102276
	ldr r2, [sp,#0xc]
	cmp r2, r1
	bne loc_8102276
	mov r0, #1
	b loc_810227C
loc_8102276:
	add r6, #2
	b loc_8102244
loc_810227A:
	mov r0, #0
loc_810227C:
	add sp, sp, #0x10
	pop {r4,r6,r7,pc}
	push {r4,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	mov r1, #0x20 
	bl sub_80136CC
	pop {r4,pc}
	push {lr}
	ldr r1, off_81022A0 // =off_81022A4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_81022A0: .word off_81022A4
off_81022A4: .word sub_81022B0+1
	.word sub_81022E4+1
	.word sub_81097BA+1
.func
.thumb_func
sub_81022B0:
	push {r4,r6,r7,lr}
	bl object_canMove
	beq loc_81022DA
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_81022DA
	strb r0, [r5,#0x14]
	strb r0, [r7,#0x16]
	strb r1, [r5,#0x15]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	bl sub_8102366
	bl sub_81022E4
	b locret_81022E2
loc_81022DA:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_81022E2:
	pop {r4,r6,r7,pc}
.endfunc // sub_81022B0

.func
.thumb_func
sub_81022E4:
	push {r4,lr}
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldrh r0, [r7,#0x10]
	ldrh r1, [r7,#0x12]
	cmp r0, r1
	bne loc_8102306
	bl sub_800E2AC
	bl sub_801A04C
loc_8102306:
	ldrh r4, [r7,#0x10]
	ldr r0, [r7,#0x30]
	add r0, r0, r0
	mov r1, #3
	svc 6
	cmp r0, r4
	beq loc_8102320
	ldr r0, [r7,#0x30]
	mov r1, #3
	svc 6
	cmp r0, r4
	beq loc_8102320
	b loc_8102326
loc_8102320:
	mov r0, #0
	bl sub_80BFD90
loc_8102326:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_8102364
	ldrb r0, [r5,#0x14]
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x15]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A066
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #1
	bl sub_801A07C
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	ldrb r0, [r7]
	add r0, #4
	strh r0, [r7]
locret_8102364:
	pop {r4,pc}
.endfunc // sub_81022E4

.func
.thumb_func
sub_8102366:
	push {lr}
	ldrb r0, [r7,#0x16]
	ldrb r1, [r5,#0x12]
	sub r0, r0, r1
	add r0, #1
	bmi loc_810238A
	cmp r0, #3
	bge loc_810238A
	ldrb r0, [r7,#0x17]
	ldrb r1, [r5,#0x13]
	sub r0, r0, r1
	add r0, #1
	bmi loc_810238A
	cmp r0, #3
	bge loc_810238A
	ldr r0, [r7,#0x30]
	lsr r0, r0, #1
	str r0, [r7,#0x30]
loc_810238A:
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r7]
	add r0, #4
	strh r0, [r7]
	bl sub_801A074 // () -> void
	bl sub_810990E
	pop {pc}
.endfunc // sub_8102366

	push {lr}
	ldr r1, off_81023B0 // =off_81023B4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_81023B0: .word off_81023B4
off_81023B4: .word sub_81023C0+1
	.word sub_8102428+1
	.word sub_8102488+1
.func
.thumb_func
sub_81023C0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81023D4
	mov r0, #0xa
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_81023D4:
	ldrh r0, [r5,#0x20]
	ldrh r1, [r7,#0x18]
	sub r1, #9
	bne loc_81023E0
	mov r0, #0xb
	strb r0, [r5,#0x10]
loc_81023E0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8102426
	mov r0, #0xc
	strh r0, [r5,#0x10]
	ldrb r0, [r7,#0xe]
	strh r0, [r7,#0x12]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	str r0, [r7,#0x30]
	str r0, [r7,#0x34]
	str r0, [r7,#0x38]
	str r0, [r7,#0x3c]
	str r0, [r7,#0x40]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x30]
	mov r3, #1
	eor r1, r3
	lsl r1, r1, #3
	add r1, #0x34 
	add r1, r1, r7
	ldr r2, [r7,#0x30]
	lsl r2, r2, #3
	add r2, #0x34 
	add r2, r2, r7
	ldrb r3, [r7,#0xd]
	bl sub_8102CF8
	mov r0, #8
	bl object_setCounterTime
	mov r0, #4
	strh r0, [r7]
locret_8102426:
	pop {pc}
.endfunc // sub_81023C0

.func
.thumb_func
sub_8102428:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge loc_810247A
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	lsl r0, r0, #3
	add r0, #0x34 
	add r0, r0, r7
	bl sub_8102E74
	ldr r0, [r7,#0x30]
	mov r1, #1
	eor r0, r1
	str r0, [r7,#0x30]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x30]
	mov r3, #1
	eor r1, r3
	lsl r1, r1, #3
	add r1, #0x34 
	add r1, r1, r7
	ldr r2, [r7,#0x30]
	lsl r2, r2, #3
	add r2, #0x34 
	add r2, r2, r7
	mov r3, #0
	str r3, [r2]
	str r3, [r2,#4]
	ldrb r3, [r7,#0xd]
	bl sub_8102CF8
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt locret_8102486
	mov r0, #8
	strh r0, [r7]
	pop {pc}
loc_810247A:
	ldr r0, [r7,#0x30]
	lsl r0, r0, #3
	add r0, #0x34 
	add r0, r0, r7
	bl sub_8102EC0
locret_8102486:
	pop {pc}
.endfunc // sub_8102428

.func
.thumb_func
sub_8102488:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810249C
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xf]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_810249C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81024A8
	bl sub_8011714
locret_81024A8:
	pop {pc}
.endfunc // sub_8102488

	push {lr}
	ldr r1, off_81024B8 // =off_81024BC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_81024B8: .word off_81024BC
off_81024BC: .word sub_81024CC+1
	.word sub_81024EE+1
	.word sub_8102510+1
	.word sub_8102544+1
.func
.thumb_func
sub_81024CC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81024E0
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #8
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_81024E0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81024EC
	mov r0, #4
	strh r0, [r7]
locret_81024EC:
	pop {pc}
.endfunc // sub_81024CC

.func
.thumb_func
sub_81024EE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102502
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0xd
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_8102502:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810250E
	mov r0, #8
	strh r0, [r7]
locret_810250E:
	pop {pc}
.endfunc // sub_81024EE

.func
.thumb_func
sub_8102510:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810252A
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #0x10
	bl object_setCounterTime
	mov r0, #9
	strb r0, [r5,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_810252A:
	ldrh r0, [r7,#0x10]
	cmp r0, #3
	bne loc_8102534
	bl sub_8102F38
loc_8102534:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xe
	ble locret_8102542
	mov r0, #0xc
	strh r0, [r7]
locret_8102542:
	pop {pc}
.endfunc // sub_8102510

.func
.thumb_func
sub_8102544:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102554
	ldrb r0, [r7,#0xf]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_8102554:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8102560
	bl sub_8011714
locret_8102560:
	pop {pc}
.endfunc // sub_8102544

	push {lr}
	ldr r1, off_8102574 // =off_8102578 
	ldrb r0, [r7,#3]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_8102574: .word off_8102578
off_8102578: .word sub_8102588+1
	.word sub_8102660+1
	.word sub_81027A4+1
	.word loc_8102896+1
.func
.thumb_func
sub_8102588:
	push {lr}
	ldr r1, off_8102598 // =off_810259C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_8102598: .word off_810259C
off_810259C: .word sub_81025A8+1
	.word sub_81025DA+1
	.word sub_8102636+1
.endfunc // sub_8102588

.func
.thumb_func
sub_81025A8:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81025CC
	mov r0, #0x12
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	strh r0, [r7,#0x10]
	push {r7}
	mov r4, #0x30 
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	bl sub_80B8E30
	pop {r7}
	mov r0, #4
	strb r0, [r7,#1]
	b locret_81025D8
loc_81025CC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81025D8
	mov r0, #4
	strh r0, [r7]
locret_81025D8:
	pop {r4,r6,r7,pc}
.endfunc // sub_81025A8

.func
.thumb_func
sub_81025DA:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102600
	mov r0, #6
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r7,#0x10]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	mov r1, #1
	bl sub_80B8E70
	mov r0, #0x10
	bl object_setCounterTime
	mov r0, #4
	strb r0, [r7,#1]
	b locret_8102634
loc_8102600:
	ldrh r0, [r7,#0x10]
	cmp r0, #5
	bne loc_8102626
	mov r0, #1
	mov r1, #0x14
	bl sub_80302A8
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	mov r2, #0
	mov r3, #0x18
	lsl r3, r3, #0x10
	bl sub_80CB8DE
loc_8102626:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x12
	bne locret_8102634
	mov r0, #8
	strh r0, [r7]
locret_8102634:
	pop {r4,r6,r7,pc}
.endfunc // sub_81025DA

.func
.thumb_func
sub_8102636:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102646
	ldr r0, [r7,#0x34]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_8102646:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_810265E
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_810265E:
	pop {pc}
.endfunc // sub_8102636

.func
.thumb_func
sub_8102660:
	push {lr}
	ldr r1, off_8102670 // =off_8102674 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.byte 0, 0
off_8102670: .word off_8102674
off_8102674: .word sub_8102680+1
	.word sub_81026EE+1
	.word sub_8102772+1
.endfunc // sub_8102660

.func
.thumb_func
sub_8102680:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102692
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_81026EC
loc_8102692:
	ldrh r0, [r7,#0x10]
	lsr r0, r0, #2
	bcc loc_81026E0
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	sub r1, #1
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	add r1, #2
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	add r0, r0, r4
	sub r1, #1
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	sub r1, #1
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	add r1, #2
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
loc_81026E0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81026EC
	mov r0, #4
	strh r0, [r7]
locret_81026EC:
	pop {r4,r6,r7,pc}
.endfunc // sub_8102680

.func
.thumb_func
sub_81026EE:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810271E
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r7,#0x10]
	push {r7}
	ldr r4, dword_810279C // =0xe03 
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r7}
	mov r0, #0x10
	bl object_setCounterTime
	mov r0, #0xce
	bl sound_play // () -> void
	mov r0, #4
	strb r0, [r7,#1]
	b locret_8102770
loc_810271E:
	ldrh r0, [r7,#0x10]
	cmp r0, #0xa
	bne loc_8102762
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_81027A0 // =0x705ff11 
	ldr r6, [r7,#8]
	push {r0,r1,r7}
	mov r7, #3
	bl sub_80C536A
	pop {r0,r1,r7}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	push {r1,r2}
	bl sub_800E456 // () -> int
	mov r4, #4
	lsl r4, r4, #8
	add r4, r4, r0
	lsl r4, r4, #8
	add r4, #0x1b
	pop {r1,r2}
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
loc_8102762:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x1e
	bne locret_8102770
	mov r0, #8
	strh r0, [r7]
locret_8102770:
	pop {r4,r6,r7,pc}
.endfunc // sub_81026EE

.func
.thumb_func
sub_8102772:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102782
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_8102782:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_810279A
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_810279A:
	pop {pc}
dword_810279C: .word 0xE03
dword_81027A0: .word 0x705FF11
.endfunc // sub_8102772

.func
.thumb_func
sub_81027A4:
	push {lr}
	ldr r1, off_81027B4 // =off_81027B8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_81027B4: .word off_81027B8
off_81027B8: .word sub_81027C4+1
	.word sub_81027F4+1
	.word sub_8102864+1
.endfunc // sub_81027A4

.func
.thumb_func
sub_81027C4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81027E6
	ldr r0, [r7,#0x30]
	strh r0, [r7,#0x10]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	push {r7}
	mov r7, #0x4c 
	add r7, r7, r5
	mov r4, #0x16
	bl sub_80B8E30
	pop {r7}
	mov r0, #4
	strb r0, [r7,#1]
loc_81027E6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_81027F2
	mov r0, #4
	strh r0, [r7]
locret_81027F2:
	pop {pc}
.endfunc // sub_81027C4

.func
.thumb_func
sub_81027F4:
	push {r4,r6,r7,lr}
	mov r0, r8
	push {r0}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102838
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	mov r3, #0
	ldr r4, [r7,#0xc]
	ldrb r0, [r5,#0x12]
	add r0, r0, r6
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	push {r7}
	mov r7, #0
	bl sub_80C5578
	pop {r7}
	mov r0, #7
	strb r0, [r5,#0x10]
	mov r0, #0x10
	bl object_setCounterTime
	ldr r0, [r5,#0x4c]
	mov r1, #1
	bl sub_80B8E70
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_8102838:
	ldrh r0, [r7,#0x12]
	add r0, #1
	mov r1, #0xf
	and r0, r1
	strh r0, [r7,#0x12]
	cmp r0, #1
	bne loc_810284E
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
loc_810284E:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	ldrb r1, [r7,#0xc]
	cmp r0, r1
	blt loc_810285E
	mov r0, #8
	strh r0, [r7]
loc_810285E:
	pop {r0}
	mov r8, r0
	pop {r4,r6,r7,pc}
.endfunc // sub_81027F4

.func
.thumb_func
sub_8102864:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102880
	mov r0, #0x12
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x4c]
	mov r1, #0
	bl sub_80B8E70
	ldr r0, [r7,#0x34]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_8102880:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_8102894
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_8102894:
	pop {pc}
.endfunc // sub_8102864

loc_8102896:
	push {lr}
	ldr r1, off_81028A4 // =off_81028A8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_81028A4: .word off_81028A8
off_81028A8: .word sub_81028B4+1
	.word sub_81028FE+1
	.word sub_810293C+1
.func
.thumb_func
sub_81028B4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81028CE
	ldr r0, [r7,#0x30]
	strh r0, [r7,#0x10]
	mov r0, #8
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x2c]
	ldrh r1, [r0,#0x12]
	strh r1, [r7,#0x16]
	mov r0, #4
	strb r0, [r7,#1]
loc_81028CE:
	ldrh r0, [r7,#0x10]
	lsr r0, r0, #2
	bcc loc_81028F0
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	sub r1, #1
	push {r0,r1}
	bl object_highlightPanel
	pop {r0,r1}
	add r1, #2
	bl object_highlightPanel
loc_81028F0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_81028FC
	mov r0, #4
	strh r0, [r7]
locret_81028FC:
	pop {pc}
.endfunc // sub_81028B4

.func
.thumb_func
sub_81028FE:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102918
	mov r0, #9
	strb r0, [r5,#0x10]
	mov r0, #8
	bl object_setCounterTime
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_8102918:
	ldrh r0, [r7,#0x10]
	cmp r0, #4
	bne loc_810292C
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	bl sub_80E4FCA
loc_810292C:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xe
	ble locret_810293A
	mov r0, #8
	strh r0, [r7]
locret_810293A:
	pop {r4,r6,r7,pc}
.endfunc // sub_81028FE

.func
.thumb_func
sub_810293C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810294C
	ldr r0, [r7,#0x34]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_810294C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_8102960
	mov r0, #0
	str r0, [r5,#0x4c]
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	bl sub_8011714
locret_8102960:
	pop {pc}
.endfunc // sub_810293C

	push {lr}
	ldr r1, off_8102970 // =off_8102974 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_8102970: .word off_8102974
off_8102974: .word sub_810298C+1
	.word sub_81029AA+1
	.word sub_81029CE+1
	.word sub_8102A1C+1
	.word sub_8102A6E+1
	.word sub_8102AF2+1
.func
.thumb_func
sub_810298C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810299C
	ldr r0, [r7,#0x30]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_810299C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_81029A8
	mov r0, #4
	strh r0, [r7]
locret_81029A8:
	pop {pc}
.endfunc // sub_810298C

.func
.thumb_func
sub_81029AA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81029BE
	mov r0, #0xe
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_81029BE:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #7
	blt locret_81029CC
	mov r0, #8
	strh r0, [r7]
locret_81029CC:
	pop {pc}
.endfunc // sub_81029AA

.func
.thumb_func
sub_81029CE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81029FE
	mov r0, #0xf
	strb r0, [r5,#0x10]
	push {r7}
	ldr r7, [r5,#0x58]
	add r7, #0x68 
	ldr r4, dword_8102C1C // =0x2831 
	bl sub_80B8E30
	pop {r7}
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #0xfd
	bl sound_play // () -> void
	mov r0, #0
	mov r1, #0x3c 
	bl sub_80302A8
	mov r0, #4
	strb r0, [r7,#1]
loc_81029FE:
	ldrh r0, [r7,#0x10]
	mov r1, #0xf
	and r0, r1
	bne loc_8102A0C
	mov r0, #0xe3
	bl sound_play // () -> void
loc_8102A0C:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xc
	blt locret_8102A1A
	mov r0, #0xc
	strh r0, [r7]
locret_8102A1A:
	pop {pc}
.endfunc // sub_81029CE

.func
.thumb_func
sub_8102A1C:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102A4C
	mov r0, #0x10
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	mov r1, #0x29 
	ldr r4, off_8102C20 // =0x191 
	ldrb r2, [r7,#3]
	cmp r2, #0
	beq loc_8102A3A
	mov r1, #0x2c 
	ldr r4, dword_8102C24 // =0x193 
loc_8102A3A:
	bl sub_80B8E70
	add r0, r4, #0
	bl sound_play // () -> void
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_8102A4C:
	ldrh r0, [r7,#0x10]
	cmp r0, #5
	blt loc_8102A5A
	lsr r0, r0, #2
	bcc loc_8102A5A
	bl sub_8102B34
loc_8102A5A:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	ldr r1, [r7,#0x34]
	add r1, #5
	cmp r0, r1
	blt locret_8102A6C
	mov r0, #0x10
	strh r0, [r7]
locret_8102A6C:
	pop {r4,pc}
.endfunc // sub_8102A1C

.func
.thumb_func
sub_8102A6E:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102A9E
	mov r0, #0x11
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	mov r1, #0x2a 
	ldrb r2, [r7,#3]
	cmp r2, #0
	beq loc_8102A88
	mov r1, #0x2d 
loc_8102A88:
	bl sub_80B8E70
	bl sub_8102BFC
	mov r0, #0
	strh r0, [r7,#0x10]
	mov r0, #8
	bl object_setCounterTime
	mov r0, #4
	strb r0, [r7,#1]
loc_8102A9E:
	ldrh r2, [r7,#0x10]
	mov r0, #0
	mov r1, #0
	cmp r2, r1
	beq loc_8102ABA
	mov r0, #1
	mov r1, #8
	cmp r2, r1
	beq loc_8102ABA
	mov r0, #2
	mov r1, #0x10
	cmp r2, r1
	beq loc_8102ABA
	b loc_8102AC0
loc_8102ABA:
	ldr r1, [r7,#0x38]
	bl sub_8102B84
loc_8102AC0:
	mov r0, #2
	mov r1, #3
	bl sub_80302A8
	ldrb r0, [r7,#3]
	cmp r0, #0
	bne loc_8102ADE
	ldrh r0, [r7,#0x10]
	mov r1, #0xf
	and r0, r1
	bne loc_8102ADE
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
loc_8102ADE:
	ldrh r0, [r7,#0x10]
	add r0, #1
	strh r0, [r7,#0x10]
	ldr r1, [r7,#0x38]
	add r1, #0x10
	cmp r0, r1
	ble locret_8102AF0
	mov r0, #0x14
	strh r0, [r7]
locret_8102AF0:
	pop {r4,r6,pc}
.endfunc // sub_8102A6E

.func
.thumb_func
sub_8102AF2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8102B18
	mov r0, #0x13
	strb r0, [r5,#0x10]
	ldr r0, [r5,#0x58]
	ldr r0, [r0,#0x68]
	mov r1, #0x2b 
	ldrb r2, [r7,#3]
	cmp r2, #0
	beq loc_8102B0C
	mov r1, #0x2e 
loc_8102B0C:
	bl sub_80B8E70
	ldr r0, [r7,#0x3c]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
loc_8102B18:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8102B32
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0
	ldr r1, [r5,#0x58]
	str r0, [r1,#0x68]
	str r0, [r5,#0x4c]
	bl sub_8011714
	strh r0, [r7]
locret_8102B32:
	pop {pc}
.endfunc // sub_8102AF2

.func
.thumb_func
sub_8102B34:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r6, off_8102C28 // =byte_8102B68 
	ldrb r0, [r7,#3]
	cmp r0, #0
	beq loc_8102B46
	ldr r6, off_8102C2C // =byte_8102B78 
loc_8102B46:
	mov r0, #0
	ldrsb r0, [r6,r0]
	cmp r0, #0x7f
	beq locret_8102B64
	mul r0, r4
	ldrb r2, [r5,#0x12]
	add r0, r0, r2
	mov r1, #1
	ldrsb r1, [r6,r1]
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	bl object_highlightPanel
	add r6, #2
	b loc_8102B46
locret_8102B64:
	pop {r4,r6,pc}
	.balign 4, 0x00
byte_8102B68: .byte 0x1
byte_8102B69: .byte 0x0
	.hword 0xFF02
	.word 0x1020002, 0x3FF03, 0x7F0103
byte_8102B78: .byte 0x1
byte_8102B79: .byte 0x0
	.hword 0x2
	.word 0x3FF03, 0x7F0103
.endfunc // sub_8102B34

.func
.thumb_func
sub_8102B84:
	push {r4,r6,lr}
	sub sp, sp, #8
	ldrb r2, [r7,#3]
	cmp r2, #0
	bne loc_8102BD8
	strb r0, [r7,#0xf]
	mov r2, #2
	sub r2, r2, r0
	mov r3, #8
	mul r2, r3
	add r2, r2, r1
	strb r2, [r7,#0xd]
	lsl r0, r0, #2
	ldr r1, off_8102C30 // =dword_8102BDC 
	ldr r1, [r1,r0]
	str r1, [sp]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp,#4]
loc_8102BAA:
	ldr r6, [sp]
	mov r0, #0
	ldrsb r0, [r6,r0]
	cmp r0, #0x7f
	beq loc_8102BD8
	ldr r1, [sp,#4]
	mul r0, r1
	ldrb r2, [r5,#0x12]
	add r0, r0, r2
	mov r1, #1
	ldrsb r1, [r6,r1]
	ldrb r2, [r5,#0x13]
	add r1, r1, r2
	ldrb r2, [r7,#2]
	ldr r3, dword_8102C34 // =0x60000 
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	bl sub_80D07A0
	ldr r0, [sp]
	add r0, #2
	str r0, [sp]
	b loc_8102BAA
loc_8102BD8:
	add sp, sp, #8
	pop {r4,r6,pc}
dword_8102BDC: .word 0x8102BE8, 0x8102BEB, 0x8102BF2, 0x27F0001, 0x20002FF
	.word 0xFF037F01, 0x1030003, 0x7F
.endfunc // sub_8102B84

.func
.thumb_func
sub_8102BFC:
	push {r4,r6,lr}
	ldrb r0, [r7,#3]
	cmp r0, #1
	bne locret_8102C18
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r4, [r7,#0xc]
	ldr r6, [r7,#8]
	bl sub_80DC6BC
locret_8102C18:
	pop {r4,r6,pc}
	.balign 4, 0x00
dword_8102C1C: .word 0x2831
off_8102C20: .word 0x191
dword_8102C24: .word 0x193
off_8102C28: .word byte_8102B68
off_8102C2C: .word byte_8102B78
off_8102C30: .word dword_8102BDC
dword_8102C34: .word 0x60000
.endfunc // sub_8102BFC

.func
.thumb_func
sub_8102C38:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	bl sub_8102CA0
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r2, off_8102F1C // =dword_8102C90 
	add r1, r1, r2
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
	add r7, r0, #0
	beq loc_8102C6E
	bl sub_8102CC4
loc_8102C5A:
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_8102C8C
loc_8102C6E:
	bl sub_8102CC4
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #3
	ldr r2, off_8102F20 // =dword_8102C90 
	add r1, r1, r2
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
	add r7, r0, #0
	bne loc_8102C5A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
loc_8102C8C:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
dword_8102C90: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_8102C38

.func
.thumb_func
sub_8102CA0:
	push {r4,r7,lr}
	ldr r7, off_8102F24 // =byte_8102CE8 
	mov r4, #0
loc_8102CA6:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	ldrsb r2, [r7,r2]
	add r0, r0, r2
	mov r2, #0x1 // (byte_8102CE9 - 0x8102ce8)
	ldrsb r2, [r7,r2]
	add r1, r1, r2
	bl sub_801BB1C
.endfunc // sub_8102CA0

	add r7, #2
	add r4, #1
	cmp r4, #8
	blt loc_8102CA6
	pop {r4,r7,pc}
.func
.thumb_func
sub_8102CC4:
	push {r4,r7,lr}
	ldr r7, off_8102F28 // =byte_8102CE8 
	mov r4, #0
loc_8102CCA:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0
	ldrsb r2, [r7,r2]
	add r0, r0, r2
	mov r2, #0x1 // (byte_8102CE9 - 0x8102ce8)
	ldrsb r2, [r7,r2]
	add r1, r1, r2
	bl sub_801BB46
.endfunc // sub_8102CC4

	add r7, #2
	add r4, #1
	cmp r4, #8
	blt loc_8102CCA
	pop {r4,r7,pc}
byte_8102CE8: .byte 0xFF
byte_8102CE9: .byte 0xFF
	.hword 0xFF00
	.word 0xFFFF01, 0x1FF0001, 0x1010100
.func
.thumb_func
sub_8102CF8:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x5c
	str r0, [sp]
	str r1, [sp,#4]
	str r2, [sp,#8]
	mov r4, #0x7f
	and r4, r3
	str r4, [sp,#0xc]
	mov r4, #0x80
	and r4, r3
	str r4, [sp,#0x58]
	mov r6, #0
	str r6, [sp,#0x24]
	add r7, sp, #0x28
	// memBlock
	add r0, sp, #0x28
	// size
	mov r1, #0x30 
	bl CpuSet_ZeroFillWord // (void *memBlock, int size) -> void
	bl object_getFlipDirection_800E2CA // () -> int
	ldr r2, [sp]
	ldrb r2, [r2,#0x12]
	ldrb r3, [r5,#0x12]
	tst r0, r0
	bgt loc_8102D30
	cmp r2, r3
	blt loc_8102D36
	b loc_8102D58
loc_8102D30:
	cmp r3, r2
	blt loc_8102D36
	b loc_8102D58
loc_8102D36:
	ldr r2, [sp]
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	ldr r2, [sp,#4]
	bl sub_8102E5C
	tst r0, r0
	beq loc_8102D58
	ldr r2, [sp]
	ldrb r0, [r2,#0x12]
	ldrb r1, [r2,#0x13]
	lsl r1, r1, #4
	orr r0, r1
	strb r0, [r7,r6]
	add r6, #1
	mov r0, #1
	str r0, [sp,#0x24]
loc_8102D58:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8102F2C // =dword_8102E4C 
	add r0, r0, r1
	ldr r1, [r0]
	str r1, [sp,#0x1c]
	ldr r1, [r0,#4]
	str r1, [sp,#0x20]
	bl object_getFlipDirection_800E2CA // () -> int
	str r0, [sp,#0x18]
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	str r0, [sp,#0x10]
	mov r0, #1
	str r0, [sp,#0x14]
loc_8102D78:
	ldr r0, [sp,#0x10]
	ldr r1, [sp,#0x14]
	bl object_isValidPanel
	tst r0, r0
	beq loc_8102DDC
loc_8102D84:
	ldr r0, [sp,#0x10]
	ldr r1, [sp,#0x14]
	ldr r2, [sp,#4]
	bl sub_8102E5C
	tst r0, r0
	beq loc_8102DC4
	ldr r0, [sp,#0x24]
	tst r0, r0
	beq loc_8102DA8
	ldr r0, [sp,#0x10]
	ldr r1, [sp,#0x14]
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x28
	ldrb r1, [r1]
	cmp r0, r1
	beq loc_8102DC4
loc_8102DA8:
	ldr r0, [sp,#0x10]
	ldr r1, [sp,#0x14]
	ldr r2, [sp,#0x1c]
	ldr r3, [sp,#0x20]
	bl object_checkPanelParameters
	tst r0, r0
	beq loc_8102DC4
	ldr r0, [sp,#0x10]
	ldr r1, [sp,#0x14]
	lsl r1, r1, #4
	orr r0, r1
	strb r0, [r7,r6]
	add r6, #1
loc_8102DC4:
	ldr r0, [sp,#0x14]
	add r0, #1
	str r0, [sp,#0x14]
	cmp r0, #3
	ble loc_8102D84
	mov r0, #1
	str r0, [sp,#0x14]
	ldr r0, [sp,#0x10]
	ldr r1, [sp,#0x18]
	add r0, r0, r1
	str r0, [sp,#0x10]
	b loc_8102D78
loc_8102DDC:
	ldr r0, [sp,#0xc]
	cmp r6, r0
	bge loc_8102E1C
	ldr r1, [sp,#0x58]
	tst r1, r1
	bne loc_8102E1C
	sub r3, r0, r6
	add r3, #0x80
	ldr r0, [sp]
	add r1, sp, #0x28
	add r2, sp, #0x40
	bl sub_8102CF8
	add r4, r0, #0
	beq loc_8102E1C
	add r1, r0, #0
	add r2, r0, #0
	add r0, sp, #0x40
	bl sub_8000C72
	add r0, sp, #0x40
	add r1, sp, #0x28
	add r1, r1, r6
	ldr r2, [sp,#0xc]
	sub r2, r2, r6
	cmp r2, r4
	ble loc_8102E14
	add r2, r4, #0
loc_8102E14:
	add r4, r2, #0
	bl copyBytes // (u8 *src, u8 *dest, int byteCount) -> void
	add r6, r6, r4
loc_8102E1C:
	add r0, r6, #0
	beq loc_8102E48
	add r0, sp, #0x28
	add r1, r6, #0
	ldr r2, [sp,#0x24]
	tst r2, r2
	beq loc_8102E2E
	add r0, #1
	sub r1, #1
loc_8102E2E:
	add r2, r1, #0
	bl sub_8000C72
	add r0, sp, #0x28
	ldr r1, [sp,#8]
	ldr r2, [sp,#0xc]
	cmp r2, r6
	ble loc_8102E40
	add r2, r6, #0
loc_8102E40:
	str r2, [sp,#0xc]
	bl copyBytes // (u8 *src, u8 *dest, int byteCount) -> void
	ldr r0, [sp,#0xc]
loc_8102E48:
	add sp, sp, #0x5c
	pop {r4,r6,r7,pc}
dword_8102E4C: .word 0x20, 0x0, 0x0
	.word 0x20
.endfunc // sub_8102CF8

.func
.thumb_func
sub_8102E5C:
	lsl r1, r1, #4
	orr r0, r1
	mov r3, #1
loc_8102E62:
	ldrb r1, [r2]
	add r2, #1
	cmp r1, #0
	beq loc_8102E70
	cmp r1, r0
	bne loc_8102E62
	mov r3, #0
loc_8102E70:
	add r0, r3, #0
	mov pc, lr
.endfunc // sub_8102E5C

.func
.thumb_func
sub_8102E74:
	push {r4,r6,lr}
	add r4, r0, #0
	mov r0, #0xb9
	bl sound_play // () -> void
loc_8102E7E:
	ldrb r0, [r4]
	tst r0, r0
	beq locret_8102EBE
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	push {r0,r1,r4,r7}
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_8102F30 // =0xa05ff01 
	ldr r6, [r7,#8]
	mov r7, #0
	bl sub_80C536A
	pop {r0,r1,r4,r7}
	push {r4}
	push {r0,r1}
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	add r4, #0x54 
	pop {r0,r1}
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	bl sub_80E05F6
	pop {r4}
	add r4, #1
	b loc_8102E7E
locret_8102EBE:
	pop {r4,r6,pc}
.endfunc // sub_8102E74

.func
.thumb_func
sub_8102EC0:
	push {r4,r6,lr}
	add r4, r0, #0
	bl sub_800A704
	lsr r0, r0, #3
	bcc locret_8102EE0
loc_8102ECC:
	ldrb r0, [r4]
	tst r0, r0
	beq locret_8102EE0
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl object_highlightPanel
	add r4, #1
	b loc_8102ECC
locret_8102EE0:
	pop {r4,r6,pc}
.endfunc // sub_8102EC0

.func
.thumb_func
sub_8102EE2:
	push {lr}
	ldrb r0, [r5,#0x16]
	ldr r2, off_8102F34 // =dword_8102F0C 
	lsl r0, r0, #3
	add r0, r0, r2
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldrb r0, [r5,#0x16]
	mov r1, #5
	mul r0, r1
	add r0, #1
	mov r1, #2
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_8102EE2

	tst r0, r0
	pop {r0,r1}
	beq loc_8102F08
	pop {pc}
loc_8102F08:
	mov r0, #0
	pop {pc}
dword_8102F0C: .word 0x10, 0xF8800A0, 0x30, 0xF880080
off_8102F1C: .word dword_8102C90
off_8102F20: .word dword_8102C90
off_8102F24: .word byte_8102CE8
off_8102F28: .word byte_8102CE8
off_8102F2C: .word dword_8102E4C
dword_8102F30: .word 0xA05FF01
off_8102F34: .word dword_8102F0C
.func
.thumb_func
sub_8102F38:
	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x16]
	mov r1, #5
	mul r0, r1
	add r0, #1
	mov r1, #1
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	ldrb r4, [r7,#0xe]
	lsl r4, r4, #0x18
	push {r0,r2}
	bl sub_80DC986
	pop {r0,r2}
	mov r1, #3
	bl sub_80DC986
	pop {r4,r6,r7,pc}
.endfunc // sub_8102F38

.func
.thumb_func
sub_8102F5C:
	push {lr}
	ldrb r1, [r0,#0x13]
	ldrb r0, [r5,#0x16]
	mov r2, #5
	mul r0, r2
	add r0, #1
	push {r0,r1}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8102F94 // =dword_8102F84 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	pop {r0,r1}
	bl sub_800D0BC
.endfunc // sub_8102F5C

	pop {pc}
dword_8102F84: .word 0x10, 0xF8800A0, 0x30, 0xF880080
off_8102F94: .word dword_8102F84
.func
.thumb_func
sub_8102F98:
	push {lr}
	ldrb r0, [r5,#0x16]
	mov r2, #5
	mul r0, r2
	neg r0, r0
	add r0, #6
	push {r0}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r4, r0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8102FEC // =unk_8102FDC 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	mov r1, #2
	pop {r0}
	bl sub_800D0BC
.endfunc // sub_8102F98

	tst r0, r0
	beq loc_8102FD6
	push {r0,r1}
	mov r2, #0x10
	ldr r3, dword_8102FF0 // =0xf880080 
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_8102FD6
	pop {pc}
loc_8102FD6:
	mov r0, #0
	pop {pc}
	.hword 0x0
unk_8102FDC: .byte  0
	.byte  0
	.byte  0
	.byte  0
	.word 0x20, 0x20, 0x0
off_8102FEC: .word unk_8102FDC
dword_8102FF0: .word 0xF880080
.func
.thumb_func
sub_8102FF4:
	push {r7,lr}
	add r7, r0, #0
	ldrb r0, [r5,#0x16]
	mov r2, #5
	mul r0, r2
	neg r0, r0
	add r0, #6
	push {r0}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r4, r0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8103034 // =dword_8103024 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	mov r1, #2
	pop {r0}
	ldrb r1, [r7,#0x13]
	bl sub_800D0BC
.endfunc // sub_8102FF4

	pop {r7,pc}
	.balign 4, 0x00
dword_8103024: .word 0x10, 0xF8800A0, 0x30, 0xF880080
off_8103034: .word dword_8103024
.func
.thumb_func
sub_8103038:
	push {r4,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r7, r0
	ldrb r0, [r5,#0x16]
	mov r1, #5
	mul r0, r1
	neg r4, r0
	add r4, #6
loc_810304A:
	add r0, r4, #0
	mov r1, #2
	bl object_isValidPanel
	tst r0, r0
	beq loc_810306A
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r1, r0
	add r0, r4, #0
	bl sub_800D5F0
	tst r0, r0
	bne loc_810306A
	add r4, r4, r7
	b loc_810304A
loc_810306A:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_810309C // =dword_810308C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	add r0, r4, #0
	mov r1, #2
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_8103038

	tst r0, r0
	pop {r0,r1}
	bne locret_8103088
	mov r0, #0
locret_8103088:
	pop {r4,r7,pc}
	.balign 4, 0x00
dword_810308C: .word 0x10, 0xF8800A0, 0x30, 0xF880080
off_810309C: .word dword_810308C
	push {r7,lr}
	ldr r1, off_81030B0 // =off_81030B4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_81030B0: .word off_81030B4
off_81030B4: .word loc_81030C0+1
	.word sub_8103110+1
	.word sub_810313C+1
loc_81030C0:
	push {lr}
	bl object_canMove
	beq loc_81030F6
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_81030FC // =dword_8103100 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_81030FA
loc_81030F6:
	bl sub_8011714
locret_81030FA:
	pop {pc}
off_81030FC: .word dword_8103100
dword_8103100: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_8103110:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810313A
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_810313A:
	pop {pc}
.endfunc // sub_8103110

.func
.thumb_func
sub_810313C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8103168
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8103174
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_8103174
loc_8103168:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8103174
	bl sub_8011714
locret_8103174:
	pop {pc}
.endfunc // sub_810313C

	push {r7,lr}
	ldr r1, off_8103184 // =off_8103188 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8103184: .word off_8103188
off_8103188: .word sub_81031A0+1
	.word sub_8103200+1
	.word sub_810322C+1
	.word sub_810324E+1
	.word sub_8103286+1
	.word sub_81032D0+1
.func
.thumb_func
sub_81031A0:
	push {lr}
	bl object_canMove
	beq loc_81031E0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_81031EC // =dword_81031F0 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_81031E0
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_81031E8
loc_81031E0:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_81031E8:
	pop {pc}
	.balign 4, 0x00
off_81031EC: .word dword_81031F0
dword_81031F0: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_81031A0

.func
.thumb_func
sub_8103200:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810322A
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_810322A:
	pop {pc}
.endfunc // sub_8103200

.func
.thumb_func
sub_810322C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810324C
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_810324C:
	pop {pc}
.endfunc // sub_810322C

.func
.thumb_func
sub_810324E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8103268
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #6
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8103284
loc_8103268:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8103278
	ldrb r0, [r7,#0xc]
	bl sub_81039D8
loc_8103278:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8103284
	mov r0, #0x10
	strh r0, [r7]
locret_8103284:
	pop {pc}
.endfunc // sub_810324E

.func
.thumb_func
sub_8103286:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81032C2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r4, #0x1c
	bl sub_80C47EC
	mov r0, #0xc7
	bl sound_play // () -> void
	mov r0, #0xc
	bl object_setCounterTime
	ldrb r0, [r7,#0xc]
	bl sub_8103966
	ldrb r0, [r7,#0xc]
	bl sub_81039A4
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_81032CE
loc_81032C2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81032CE
	mov r0, #0x14
	strh r0, [r7]
locret_81032CE:
	pop {r4,pc}
.endfunc // sub_8103286

.func
.thumb_func
sub_81032D0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81032E2
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_81032F2
loc_81032E2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81032F2
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_81032F2:
	pop {pc}
.endfunc // sub_81032D0

	push {r7,lr}
	ldr r1, off_8103304 // =off_8103308 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_8103304: .word off_8103308
off_8103308: .word sub_8103320+1
	.word sub_8103380+1
	.word sub_81033AC+1
	.word sub_81033CE+1
	.word sub_81033F6+1
	.word sub_8103452+1
.func
.thumb_func
sub_8103320:
	push {lr}
	bl object_canMove
	beq loc_8103360
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_810336C // =dword_8103370 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_8103360
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_8103368
loc_8103360:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_8103368:
	pop {pc}
	.balign 4, 0x00
off_810336C: .word dword_8103370
dword_8103370: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_8103320

.func
.thumb_func
sub_8103380:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81033AA
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_81033AA:
	pop {pc}
.endfunc // sub_8103380

.func
.thumb_func
sub_81033AC:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81033CC
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_81033CC:
	pop {pc}
.endfunc // sub_81033AC

.func
.thumb_func
sub_81033CE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81033E4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #7
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	b locret_81033F4
loc_81033E4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81033F4
	mov r0, #0
	strb r0, [r7,#0xe]
	mov r0, #0x10
	strh r0, [r7]
locret_81033F4:
	pop {pc}
.endfunc // sub_81033CE

.func
.thumb_func
sub_81033F6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810342E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #8
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	ldrb r0, [r7,#0xe]
	bl sub_8103A08
	mov r0, #0xae
	bl sound_play // () -> void
	mov r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xf
	strh r0, [r7,#0x10]
	ldrb r0, [r7,#0xe]
	tst r0, r0
	bne locret_8103450
	mov r0, #0x12
	bl object_setCounterTime
	b locret_8103450
loc_810342E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8103450
	ldrb r0, [r7,#0xc]
	sub r0, #1
	strb r0, [r7,#0xc]
	cmp r0, #0
	ble loc_810344C
	ldrb r0, [r7,#0xe]
	add r0, #1
	strb r0, [r7,#0xe]
	mov r0, #0
	strb r0, [r7,#1]
	b locret_8103450
loc_810344C:
	mov r0, #0x14
	strh r0, [r7]
locret_8103450:
	pop {pc}
.endfunc // sub_81033F6

.func
.thumb_func
sub_8103452:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8103464
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8103474
loc_8103464:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8103474
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_8103474:
	pop {pc}
.endfunc // sub_8103452

	push {r7,lr}
	ldr r1, off_8103484 // =off_8103488 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8103484: .word off_8103488
off_8103488: .word sub_810349C+1
	.word sub_81034FC+1
	.word sub_8103528+1
	.word sub_810354A+1
	.word sub_810357A+1
.func
.thumb_func
sub_810349C:
	push {lr}
	bl object_canMove
	beq loc_81034DC
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_81034E8 // =dword_81034EC 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_81034DC
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_81034E4
loc_81034DC:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_81034E4:
	pop {pc}
	.balign 4, 0x00
off_81034E8: .word dword_81034EC
dword_81034EC: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_810349C

.func
.thumb_func
sub_81034FC:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8103526
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_8103526:
	pop {pc}
.endfunc // sub_81034FC

.func
.thumb_func
sub_8103528:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8103548
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_8103548:
	pop {pc}
.endfunc // sub_8103528

.func
.thumb_func
sub_810354A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8103560
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0x28 
	strh r0, [r7,#0x10]
	b locret_8103578
loc_8103560:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x14
	beq loc_8103574
	cmp r0, #0
	bgt locret_8103578
	mov r0, #0x10
	strh r0, [r7]
	b locret_8103578
loc_8103574:
	bl sub_8103A20
locret_8103578:
	pop {pc}
.endfunc // sub_810354A

.func
.thumb_func
sub_810357A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810358C
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_810359C
loc_810358C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810359C
	mov r0, #0
	strb r0, [r5,#0x10]
	bl sub_8011714
locret_810359C:
	pop {pc}
.endfunc // sub_810357A

	push {r7,lr}
	ldr r1, off_81035AC // =off_81035B0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_81035AC: .word off_81035B0
off_81035B0: .word loc_81035D8+1
	.word sub_8103634+1
	.word sub_8103660+1
	.word sub_8103682+1
	.word sub_81036A6+1
	.word sub_81036F0+1
	.word sub_8103754+1
	.word sub_8103774+1
	.word sub_810379E+1
	.word sub_81037E4+1
loc_81035D8:
	push {lr}
	bl object_canMove
	beq loc_810361E
	ldr r1, off_8103628 // =dword_810362C 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_8103630 - 0x810362c)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_810361E
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_8103626
loc_810361E:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_8103626:
	pop {pc}
off_8103628: .word dword_810362C
dword_810362C: .word 0x10
dword_8103630: .word 0xF880080
.func
.thumb_func
sub_8103634:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810365E
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_810365E:
	pop {pc}
.endfunc // sub_8103634

.func
.thumb_func
sub_8103660:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8103680
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_8103680:
	pop {pc}
.endfunc // sub_8103660

.func
.thumb_func
sub_8103682:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8103698
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xa
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_81036A4
loc_8103698:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81036A4
	mov r0, #0x10
	strh r0, [r7]
locret_81036A4:
	pop {pc}
.endfunc // sub_8103682

.func
.thumb_func
sub_81036A6:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81036C8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #9
	strb r0, [r5,#0x10]
	mov r4, #0x1d
	bl sub_80C47EC
	mov r0, #0xcf
	bl sound_play // () -> void
	mov r0, #5
	strh r0, [r7,#0x10]
	b locret_81036EE
loc_81036C8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81036EE
	bl sub_800E2C0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	mov r6, #0
	push {r7}
	ldr r7, [r7,#0x30]
	bl sub_80CF778
	pop {r7}
	mov r0, #0x14
	strh r0, [r7]
locret_81036EE:
	pop {r4,r6,pc}
.endfunc // sub_81036A6

.func
.thumb_func
sub_81036F0:
	push {r4,r6,lr}
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq loc_8103706
	ldrb r1, [r0,#0xb]
	tst r1, r1
	beq locret_810374E
	cmp r1, #1
	beq loc_8103706
	b loc_810370C
loc_8103706:
	mov r0, #0x18
	strh r0, [r7]
	b locret_810374E
loc_810370C:
	mov r0, #1
	lsl r0, r0, #0xc
	bl object_setFlag // (int a1) -> void
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	ldr r0, [r0,#0x50]
	bl sub_8103B20
	strb r0, [r7,#0xe]
	strb r1, [r7,#0xf]
	add r4, r1, #0
	lsl r4, r4, #8
	orr r4, r0
	push {r7}
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	ldr r3, [r0,#0x50]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	ldr r7, off_8103750 // =0x181 
	bl sub_80E56D0
	add r2, r0, #0
	mov r1, #1
	ldrb r0, [r5,#0x16]
	bl sub_800BF16
	pop {r7}
	mov r0, #0x1c
	strh r0, [r7]
locret_810374E:
	pop {r4,r6,pc}
off_8103750: .word 0x181
.endfunc // sub_81036F0

.func
.thumb_func
sub_8103754:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8103766
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	b locret_8103772
loc_8103766:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8103772
	mov r0, #0x1c
	strh r0, [r7]
locret_8103772:
	pop {pc}
.endfunc // sub_8103754

.func
.thumb_func
sub_8103774:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8103790
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_810379C
loc_8103790:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810379C
	mov r0, #0x20 
	strh r0, [r7]
locret_810379C:
	pop {pc}
.endfunc // sub_8103774

.func
.thumb_func
sub_810379E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81037D6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_81037E2
loc_81037D6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81037E2
	mov r0, #0x24 
	strh r0, [r7]
locret_81037E2:
	pop {pc}
.endfunc // sub_810379E

.func
.thumb_func
sub_81037E4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81037FA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_8103806
loc_81037FA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8103806
	bl sub_8011714
locret_8103806:
	pop {pc}
.endfunc // sub_81037E4

.func
.thumb_func
sub_8103808:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	mov r4, #0
loc_8103812:
	ldr r2, off_8103898 // =byte_810389C 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_810389D - 0x810389c)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB1C
.endfunc // sub_8103808

	add r4, #1
	cmp r4, #4
	blt loc_8103812
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	mov r4, #0
loc_8103842:
	ldr r2, off_8103898 // =byte_810389C 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_810389D - 0x810389c)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB46
	add r4, #1
	cmp r4, #4
	blt loc_8103842
	tst r6, r6
	bne loc_8103878
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_810388C
loc_8103878:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_8103892
loc_810388C:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	b loc_8103892
loc_8103892:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_8103898: .word byte_810389C
byte_810389C: .byte 0xFF
byte_810389D: .byte 0x0
	.hword 0xFF00
	// <mkdata>
	.hword 0x1 // mov r1, r0
	lsl r0, r0, #4
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	ldrb r0, [r0,#0x13]
	str r0, [sp]
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	str r0, [sp,#4]
	mov r4, #6
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_81038C2
	mov r4, #1
loc_81038C2:
	add r0, r4, #0
	ldr r1, [sp]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	add r7, sp, #0x10
	bl sub_800CF14
	add r6, r0, #0
	tst r6, r6
	bne loc_81038E4
	ldr r0, [sp,#4]
	add r4, r4, r0
	cmp r4, #1
	blt loc_81038F8
	cmp r4, #6
	ble loc_81038C2
	b loc_81038F8
loc_81038E4:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_81038FA
loc_81038F8:
	mov r0, #0
loc_81038FA:
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_81038FE:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	add r4, r0, #0
	mov r0, #1
	ldrb r1, [r5,#0x16]
	tst r1, r1
	beq loc_810390E
	mov r0, #6
loc_810390E:
	ldrb r1, [r4,#0x13]
	add r7, sp, #0
	bl sub_800CF14
	add r6, r0, #0
	tst r6, r6
	beq loc_8103930
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_8103932
loc_8103930:
	mov r0, #0
loc_8103932:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
.endfunc // sub_81038FE

.func
.thumb_func
sub_8103936:
	push {r4,r6,lr}
	sub sp, sp, #8
	str r2, [sp]
	str r3, [sp,#4]
	ldrb r4, [r0,#0x12]
	ldrb r6, [r0,#0x13]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r1, #2
	mul r0, r1
	add r0, r0, r4
	add r1, r6, #0
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_8103936

	tst r0, r0
	pop {r0,r1}
	bne loc_8103962
	mov r0, #0
loc_8103962:
	add sp, sp, #8
	pop {r4,r6,pc}
.func
.thumb_func
sub_8103966:
	push {r4,r6,r7,lr}
	sub r0, #1
	add r6, r0, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_8103A00 // =byte_8103A04 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	ldrb r2, [r7,#2]
	mov r3, #0
	lsl r6, r6, #2
	ldr r4, off_810398C // =dword_8103990 
	ldr r4, [r4,r6]
	ldr r6, [r7,#8]
	ldr r7, dword_81039A0 // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
off_810398C: .word dword_8103990
dword_8103990: .word 0x705FF12, 0x705FF13, 0x705FF1F, 0x705FF22
dword_81039A0: .word 0x3
.endfunc // sub_8103966

.func
.thumb_func
sub_81039A4:
	push {r4,r6,lr}
	sub r0, #1
	add r6, r0, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_8103A00 // =byte_8103A04 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0
	ldrb r4, [r5,#0x16]
	lsl r4, r4, #8
	ldr r0, off_81039D0 // =byte_81039D4 
	ldrb r0, [r0,r6]
	orr r4, r0
	bl sub_80E05F6
	pop {r4,r6,pc}
off_81039D0: .word byte_81039D4
byte_81039D4: .byte 0x37, 0x36, 0x35, 0x38
.endfunc // sub_81039A4

.func
.thumb_func
sub_81039D8:
	push {lr}
	sub r0, #1
	add r6, r0, #0
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_8103A00 // =byte_8103A04 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	ldr r2, off_81039F8 // =dword_81039FC 
	ldrb r2, [r2,r6]
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	pop {pc}
	.balign 4, 0x00
off_81039F8: .word dword_81039FC
dword_81039FC: .word 0x221F1312
off_8103A00: .word byte_8103A04
byte_8103A04: .byte 0x5, 0x2, 0x2, 0x2
.endfunc // sub_81039D8

.func
.thumb_func
sub_8103A08:
	push {r4,r6,r7,lr}
	lsl r0, r0, #8
	ldrb r4, [r7,#3]
	orr r4, r0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x2c]
	bl sub_80CED58
	pop {r4,r6,r7,pc}
.endfunc // sub_8103A08

.func
.thumb_func
sub_8103A20:
	push {r4,r6,lr}
	sub sp, sp, #0x24
	str r7, [sp]
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x13]
	str r0, [sp,#8]
	mov r4, #0
	mov r6, #1
	mov r7, #0
loc_8103A32:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_8103AFC // =dword_8103B00 
	add r1, r1, r0
	ldrb r0, [r1,r4]
	add r1, r6, #0
	ldr r2, [sp,#8]
	cmp r1, r2
	bne loc_8103A60
	ldr r3, off_8103B04 // =dword_8103B08 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_8103B0C - 0x8103b08)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_8103A60
	lsl r1, r1, #4
	orr r0, r1
	add r2, sp, #0xc
	strb r0, [r2,r7]
	add r7, #1
loc_8103A60:
	add r6, #1
	cmp r6, #3
	ble loc_8103A32
	add r4, #1
	mov r6, #1
	cmp r4, #2
	blt loc_8103A32
	str r7, [sp,#4]
	tst r7, r7
	beq loc_8103A7E
	add r0, sp, #0xc
	add r1, r7, #0
	add r2, r7, #0
	bl sub_8000C72
loc_8103A7E:
	mov r4, #0
	mov r6, #1
loc_8103A82:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_8103AFC // =dword_8103B00 
	add r1, r1, r0
	ldrb r0, [r1,r4]
	add r1, r6, #0
	ldr r2, [sp,#8]
	cmp r1, r2
	beq loc_8103AB0
	ldr r3, off_8103B04 // =dword_8103B08 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_8103B0C - 0x8103b08)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_8103AB0
	lsl r1, r1, #4
	orr r0, r1
	add r2, sp, #0xc
	strb r0, [r2,r7]
	add r7, #1
loc_8103AB0:
	add r6, #1
	cmp r6, #3
	ble loc_8103A82
	add r4, #1
	mov r6, #1
	cmp r4, #2
	blt loc_8103A82
	ldr r2, [sp,#4]
	sub r1, r7, r2
	tst r1, r1
	beq loc_8103AD2
	add r0, sp, #0xc
	add r0, r0, r2
	// <mkdata>
	.hword 0x1C09 // add r1, r1, #0
	add r2, r1, #0
	bl sub_8000C72
loc_8103AD2:
	add r0, sp, #0xc
	mov r4, #0
	add r6, r7, #0
	ldr r7, [sp]
loc_8103ADA:
	cmp r4, r6
	bge loc_8103AF6
	push {r0}
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_8103B10
	pop {r0}
	add r4, #1
	ldrb r1, [r7,#0xc]
	cmp r4, r1
	blt loc_8103ADA
loc_8103AF6:
	add sp, sp, #0x24
	pop {r4,r6,pc}
	.balign 4, 0x00
off_8103AFC: .word dword_8103B00
dword_8103B00: .word 0x4010603
off_8103B04: .word dword_8103B08
dword_8103B08: .word 0x10
dword_8103B0C: .word 0xF880080
.endfunc // sub_8103A20

.func
.thumb_func
sub_8103B10:
	push {r4,r6,r7,lr}
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x2c]
	bl sub_80CF058
	pop {r4,r6,r7,pc}
.endfunc // sub_8103B10

.func
.thumb_func
sub_8103B20:
	push {r4,lr}
	add r4, r0, #0
	mov r0, #1
	ldrb r1, [r4,#0x13]
	ldrb r2, [r5,#0x16]
	tst r0, r0
	bne loc_8103B30
	mov r0, #6
loc_8103B30:
	ldr r3, off_8103B7C // =dword_8103B80 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_8103B84 - 0x8103b80)
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_8103B20

	tst r0, r0
	pop {r0,r1}
	bne locret_8103B7A
	mov r0, #1
	ldrb r1, [r4,#0x13]
	ldrb r2, [r5,#0x16]
	tst r0, r0
	bne loc_8103B4E
	mov r0, #6
loc_8103B4E:
	add r1, #1
	ldr r3, off_8103B7C // =dword_8103B80 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_8103B84 - 0x8103b80)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne locret_8103B7A
	sub r1, #2
	ldr r3, off_8103B7C // =dword_8103B80 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_8103B84 - 0x8103b80)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne locret_8103B7A
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
locret_8103B7A:
	pop {r4,pc}
off_8103B7C: .word dword_8103B80
dword_8103B80: .word 0x10
dword_8103B84: .word 0xF880080
dword_8103B88: .word 0x1011408, 0x14, 0x70009C4, 0xFA0000A, 0xA0701, 0x7020FA0
	.word 0xFA0000A, 0xA0703, 0x7040FA0, 0xFA0000A, 0xA0705, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x8016381
	.word 0x8017889, 0x80171A7, 0x8103DFB, 0x8103E07, 0x80178B7, 0x8103E13
	.word 0x8103E1F, 0x8103CB1, 0x8104189, 0x810430F, 0x810452B, 0x810478D
	.word 0x8104AA3, 0x8104BEB, 0x6DAFB5C0, 0x19F62680, 0x490337A0, 0x58097830
	.word 0x470846FE, 0xBDC0, 0x8103CCC, 0x8103CD1, 0x7930B550, 0xDB332802
	.word 0x71302000, 0x28057970, 0x7970DA0F, 0x71703001, 0x280379B0, 0x79B0DA1D
	.word 0x71B03001, 0xFC1DF6FD, 0x4008210F, 0xDB0E2808, 0x2000E010, 0x8CE97170
	.word 0x8CAA0849, 0xDD114291, 0x210179F0, 0x71F14041, 0xD00B4200, 0xF000E00D
	.word 0xE012F92F, 0xF946F000, 0x2000E00F, 0xF00071B0, 0xE00AF975, 0xF958F000
	.word 0xF000E007, 0xE004F989, 0x30017930, 0xF0007130, 0xBD50F905
.func
.thumb_func
sub_8103D4C:
	push {r4,r6,lr}
	bl sub_800FE36
	lsl r0, r0, #1
	ldr r1, off_8103DB0 // =loc_8103DB4 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #0x40 
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_8103D4C

	mov r0, #2
	bl sub_801A07C
	bl sub_80E7D84
	str r0, [r5,#0x60]
	mov r4, #0
loc_8103D76:
	ldrb r0, [r5,#0x16]
	mov r1, #3
	mul r0, r1
	ldr r1, off_8103DA4 // =dword_8103DA8 
	add r1, r1, r0
	ldrb r6, [r1,r4]
	add r0, r6, #0
	mov r1, #1
	bl sub_801BB1C
	add r0, r6, #0
	mov r1, #2
	bl sub_801BB1C
	add r0, r6, #0
	mov r1, #3
	bl sub_801BB1C
	add r4, #1
	cmp r4, #3
	blt loc_8103D76
	pop {r4,r6,pc}
	.balign 4, 0x00
off_8103DA4: .word dword_8103DA8
dword_8103DA8: .word 0x4010203, 0x605
off_8103DB0: .word loc_8103DB4
loc_8103DB4:
	lsr r4, r0, #7
	lsr r0, r7, #0xe
	lsr r0, r4, #0x1e
	asr r0, r1, #0xe
	push {lr}
	pop {pc}
	push {r4,lr}
	pop {r4,pc}
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #2
	bl sub_801A07C
	mov r0, #0
	str r0, [r5,#0x3c]
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	pop {pc}
	push {r4,lr}
	bl sub_80174FE
	mov r0, #0x41 
	strb r0, [r5,#0x10]
	pop {r4,pc}
	push {r4,lr}
	bl sub_80175B8
	mov r0, #0x41 
	strb r0, [r5,#0x10]
	pop {r4,pc}
	push {r4,lr}
	bl sub_8017688
	mov r0, #0x41 
	strb r0, [r5,#0x10]
	pop {r4,pc}
	push {r4,lr}
	bl sub_8017768
	mov r0, #0x41 
	strb r0, [r5,#0x10]
	pop {r4,pc}
.func
.thumb_func
sub_8103E2A:
	push {lr}
	ldr r0, off_8103E60 // =byte_8103E64 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8103E60 // =byte_8103E64 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	ldr r0, off_8103E60 // =byte_8103E64 
	add r0, #8
	bl sub_800FE28
	add r2, r0, #0
	pop {r0,r1}
	push {r0-r2}
	ldr r0, off_8103E60 // =byte_8103E64 
	add r0, #0xc
	bl sub_800FE28
	add r3, r0, #0
	pop {r0-r2}
	pop {pc}
	.byte 0, 0
off_8103E60: .word byte_8103E64
byte_8103E64: .byte 0x18, 0xC, 0xC, 0xC, 0x18, 0x10, 0x10, 0x10, 0xC, 0xC
	.byte 0xC, 0xC, 0xC, 0xC, 0xC, 0xC
.endfunc // sub_8103E2A

.func
.thumb_func
sub_8103E74:
	push {lr}
	ldr r0, off_8103E9C // =byte_8103EA0 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8103E9C // =byte_8103EA0 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	ldr r0, off_8103E9C // =byte_8103EA0 
	add r0, #8
	bl sub_800FE28
	add r2, r0, #0
	pop {r0,r1}
	pop {pc}
	.balign 4, 0x00
off_8103E9C: .word byte_8103EA0
byte_8103EA0: .byte 0xA, 0xA, 0xA, 0xA, 0x1E, 0x1A, 0x14, 0x10, 0x3C, 0x3C
	.byte 0x28, 0x28
.endfunc // sub_8103E74

.func
.thumb_func
sub_8103EAC:
	push {lr}
	ldr r0, off_8103ED4 // =byte_8103ED8 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8103ED4 // =byte_8103ED8 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	ldr r0, off_8103ED4 // =byte_8103ED8 
	add r0, #8
	bl sub_800FE28
	add r2, r0, #0
	pop {r0,r1}
	pop {pc}
	.balign 4, 0x00
off_8103ED4: .word byte_8103ED8
byte_8103ED8: .byte 0xA, 0xA, 0xA, 0xA, 0x1E, 0x1A, 0x14, 0x10, 0x3C, 0x3C
	.byte 0x28, 0x28
.endfunc // sub_8103EAC

.func
.thumb_func
sub_8103EE4:
	push {lr}
	ldr r0, off_8103EF0 // =off_8103EF4 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_8103EF0: .word off_8103EF4
off_8103EF4: .word byte_80A0C10
.endfunc // sub_8103EE4

.func
.thumb_func
sub_8103EF8:
	push {lr}
	ldr r0, off_8103F20 // =byte_8103F24 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8103F20 // =byte_8103F24 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	ldr r0, off_8103F20 // =byte_8103F24 
	add r0, #8
	bl sub_800FE28
	add r2, r0, #0
	pop {r0,r1}
	pop {pc}
	.byte 0, 0
off_8103F20: .word byte_8103F24
byte_8103F24: .byte 0x3C, 0x28, 0x28, 0x1E, 0xC, 0xC, 0xC, 0xC, 0x9, 0xC
	.byte 0xC, 0xC
.endfunc // sub_8103EF8

.func
.thumb_func
sub_8103F30:
	push {lr}
	ldr r0, off_8103F48 // =loc_8103F4C 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8103F48 // =loc_8103F4C 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_8103F48: .word loc_8103F4C
.endfunc // sub_8103F30

loc_8103F4C:
	asr r2, r2, #8
	lsr r4, r1, #0x10
	lsr r4, r1, #0x10
	lsl r6, r0, #0x18
	push {r4,lr}
	ldr r0, off_810417C // =sub_8104E98+1 
	str r0, [r7,#0x28]
	mov r0, #0
	bl sub_810407E
	bl sub_8103E2A
	strh r0, [r7,#0x18]
	strb r1, [r7,#0xc]
	strb r2, [r7,#0xd]
	strb r3, [r7,#0xe]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_810407E
	bl sub_8103E74
	strh r0, [r7,#0x18]
	strb r1, [r7,#0xc]
	strb r1, [r7,#0xd]
	ldr r0, dword_8104180 // = 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #3
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_810407E
	bl sub_8103EAC
	strh r0, [r7,#0x18]
	strb r1, [r7,#0xc]
	strb r1, [r7,#0xd]
	ldr r0, dword_8104184 // = 
	str r0, [r7,#0x28]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #3
	bl sub_810407E
	mov r0, #4
	bl sub_81040AC
	str r0, [r7,#0x30]
	bl sub_8103EE4
	strb r0, [r7,#0xc]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #5
	bl sub_810407E
	bl sub_8103EF8
	strh r0, [r7,#0x18]
	strb r1, [r7,#0xc]
	strb r2, [r7,#0xd]
	ldr r0, [r5,#0x60]
	str r0, [r7,#0x30]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xd
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #6
	bl sub_810407E
	bl sub_8103F30
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xe
	bl sub_8011680
	pop {r4,pc}
.func
.thumb_func
sub_810407E:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_81040D4 // =dword_81040F0 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_8104128 // =dword_8104144 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_810407E

.func
.thumb_func
sub_81040AC:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_81040D4 // =dword_81040F0 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_8104128 // =dword_8104144 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_81040D4: .word dword_81040F0
	.word dword_81040F8
	.word dword_8104100
	.word dword_8104108
	.word dword_8104110
	.word dword_8104118
	.word dword_8104120
dword_81040F0: .word 0x960032, 0x960096
dword_81040F8: .word 0x12C0064, 0x12C012C
dword_8104100: .word 0x12C0064, 0x12C012C
dword_8104108: .word 0xB4003C, 0xB400B4
dword_8104110: .word 0x12C0064, 0x12C012C
dword_8104118: .word 0xD20046, 0xD200D2
dword_8104120: .word 0x21C00B4, 0x21C021C
off_8104128: .word dword_8104144
	.word dword_810414C
	.word dword_8104154
	.word dword_810415C
	.word dword_8104164
	.word dword_810416C
	.word dword_8104174
dword_8104144: .word 0xA000A
	.word 0xA000A
dword_810414C: .word 0xA000A
	.word 0xA000A
dword_8104154: .word 0xA000A
	.word 0xA000A
dword_810415C: .word 0xA000A
	.word 0xA000A
dword_8104164: .word 0xA000A
	.word 0xA000A
dword_810416C: .word 0xA000A
	.word 0xA000A
dword_8104174: .word 0xA000A
	.word 0xA000A
off_810417C: .word sub_8104E98+1
dword_8104180: .word 0x8104F6D
dword_8104184: .word 0x8104EF9
.endfunc // sub_81040AC

.func
.thumb_func
sub_8104188:
	push {r7,lr}
	ldr r1, off_8104198 // =off_810419C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_8104198: .word off_810419C
off_810419C: .word sub_81041B0+1
	.word loc_81041D6+1
	.word sub_8104238+1
	.word sub_8104258+1
	.word sub_8104290+1
.endfunc // sub_8104188

.func
.thumb_func
sub_81041B0:
	push {lr}
	bl object_canMove
	beq loc_81041CC
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x43 
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_81041D4
loc_81041CC:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl loc_801171C
locret_81041D4:
	pop {pc}
.endfunc // sub_81041B0

loc_81041D6:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104220
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8104224 // =dword_8104228 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_8104218
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	bl sub_801A074 // () -> void
	bl sub_801DD34
	mov r0, #8
	strh r0, [r7]
	b locret_8104220
loc_8104218:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl loc_801171C
locret_8104220:
	pop {pc}
	.balign 4, 0x00
off_8104224: .word dword_8104228
dword_8104228: .word 0x10000, 0x20, 0x10020, 0x0
.func
.thumb_func
sub_8104238:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810424A
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_8104256
loc_810424A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104256
	mov r0, #0xc
	strh r0, [r7]
locret_8104256:
	pop {pc}
.endfunc // sub_8104238

.func
.thumb_func
sub_8104258:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810427A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x41 
	strb r0, [r5,#0x10]
	mov r0, #0x96
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r0, #0x14
	lsl r0, r0, #0x10
	str r0, [r5,#0x48]
	mov r0, #7
	strh r0, [r7,#0x10]
	b locret_810428E
loc_810427A:
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810428E
	mov r0, #0x10
	strh r0, [r7]
locret_810428E:
	pop {pc}
.endfunc // sub_8104258

.func
.thumb_func
sub_8104290:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81042FC
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x42 
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #2
	bl sub_801A07C
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
	mov r0, #0xc9
	add r0, #0xff
	bl sound_play // () -> void
	push {r4,r6,r7}
	mov r2, #0
	ldrb r4, [r7,#0xd]
	mov r3, #2
	mul r4, r3
	ldrb r3, [r7,#0xd]
	lsl r3, r3, #8
	orr r4, r3
	ldrb r3, [r7,#0xe]
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x18
	orr r4, r3
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x2c]
	bl sub_80E9D0C
	pop {r4,r6,r7}
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_810430C
loc_81042FC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810430C
	mov r0, #0x40 
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_810430C:
	pop {pc}
.endfunc // sub_8104290

	push {r7,lr}
	ldr r1, off_810431C // =off_8104320 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_810431C: .word off_8104320
off_8104320: .word sub_8104340+1
	.word sub_8104366+1
	.word sub_81043C8+1
	.word sub_81043E8+1
	.word sub_8104420+1
	.word sub_8104474+1
	.word sub_81044AA+1
	.word sub_8104500+1
.func
.thumb_func
sub_8104340:
	push {lr}
	bl object_canMove
	beq loc_810435C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x43 
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_8104364
loc_810435C:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl loc_801171C
locret_8104364:
	pop {pc}
.endfunc // sub_8104340

.func
.thumb_func
sub_8104366:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81043B2
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_81043B4 // =dword_81043B8 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_81043AA
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	bl sub_801A074 // () -> void
	bl sub_801DD34
	mov r0, #8
	strh r0, [r7]
	b locret_81043B2
loc_81043AA:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl loc_801171C
locret_81043B2:
	pop {pc}
off_81043B4: .word dword_81043B8
dword_81043B8: .word 0x10000, 0x20, 0x10020, 0x0
.endfunc // sub_8104366

.func
.thumb_func
sub_81043C8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81043DA
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_81043E6
loc_81043DA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81043E6
	mov r0, #0xc
	strh r0, [r7]
locret_81043E6:
	pop {pc}
.endfunc // sub_81043C8

.func
.thumb_func
sub_81043E8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810440A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x41 
	strb r0, [r5,#0x10]
	mov r0, #0x96
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r0, #0x14
	lsl r0, r0, #0x10
	str r0, [r5,#0x48]
	mov r0, #7
	strh r0, [r7,#0x10]
	b locret_810441E
loc_810440A:
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810441E
	mov r0, #0x10
	strh r0, [r7]
locret_810441E:
	pop {pc}
.endfunc // sub_81043E8

.func
.thumb_func
sub_8104420:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104466
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x42 
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #2
	bl sub_801A07C
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
	mov r0, #0xc9
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_8104472
loc_8104466:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104472
	mov r0, #0x14
	strh r0, [r7]
locret_8104472:
	pop {pc}
.endfunc // sub_8104420

.func
.thumb_func
sub_8104474:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810448E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x44 
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_81044A8
loc_810448E:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_810449C
	bl sub_8105050
loc_810449C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81044A8
	mov r0, #0x18
	strh r0, [r7]
locret_81044A8:
	pop {pc}
.endfunc // sub_8104474

.func
.thumb_func
sub_81044AA:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81044DE
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x45 
	strb r0, [r5,#0x10]
	bl sub_810506A
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x92
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x78 
	strh r0, [r7,#0x10]
	mov r0, #0x10
	strh r0, [r7,#0x12]
	b locret_81044FE
loc_81044DE:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_81044F2
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r7,#0x12]
loc_81044F2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81044FE
	mov r0, #0x1c
	strh r0, [r7]
locret_81044FE:
	pop {pc}
.endfunc // sub_81044AA

.func
.thumb_func
sub_8104500:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810451C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x40 
	strb r0, [r5,#0x10]
	mov r0, #2
	bl sub_801A07C
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8104528
loc_810451C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104528
	bl loc_801171C
locret_8104528:
	pop {pc}
.endfunc // sub_8104500

	push {r7,lr}
	ldr r1, off_8104538 // =off_810453C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8104538: .word off_810453C
off_810453C: .word sub_810455C+1
	.word sub_8104586+1
	.word sub_81045E8+1
	.word sub_8104608+1
	.word sub_8104640+1
	.word sub_8104694+1
	.word sub_81046F6+1
	.word sub_8104758+1
.func
.thumb_func
sub_810455C:
	push {lr}
	bl object_canMove
	beq loc_810457C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x43 
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r7,#0x30]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_8104584
loc_810457C:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl loc_801171C
locret_8104584:
	pop {pc}
.endfunc // sub_810455C

.func
.thumb_func
sub_8104586:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81045D2
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_81045D4 // =dword_81045D8 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_81045CA
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	bl sub_801A074 // () -> void
	bl sub_801DD34
	mov r0, #8
	strh r0, [r7]
	b locret_81045D2
loc_81045CA:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl loc_801171C
locret_81045D2:
	pop {pc}
off_81045D4: .word dword_81045D8
dword_81045D8: .word 0x10000, 0x20, 0x10020, 0x0
.endfunc // sub_8104586

.func
.thumb_func
sub_81045E8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81045FA
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_8104606
loc_81045FA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104606
	mov r0, #0xc
	strh r0, [r7]
locret_8104606:
	pop {pc}
.endfunc // sub_81045E8

.func
.thumb_func
sub_8104608:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810462A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x41 
	strb r0, [r5,#0x10]
	mov r0, #0x96
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r0, #0x14
	lsl r0, r0, #0x10
	str r0, [r5,#0x48]
	mov r0, #7
	strh r0, [r7,#0x10]
	b locret_810463E
loc_810462A:
	ldr r0, [r5,#0x3c]
	ldr r1, [r5,#0x48]
	sub r0, r0, r1
	str r0, [r5,#0x3c]
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810463E
	mov r0, #0x10
	strh r0, [r7]
locret_810463E:
	pop {pc}
.endfunc // sub_8104608

.func
.thumb_func
sub_8104640:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104686
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x42 
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #2
	bl sub_801A07C
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #2
	mov r1, #0x1e
	bl sub_80302A8
	mov r0, #0xc9
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_8104692
loc_8104686:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104692
	mov r0, #0x14
	strh r0, [r7]
locret_8104692:
	pop {pc}
.endfunc // sub_8104640

.func
.thumb_func
sub_8104694:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81046C8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x46 
	strb r0, [r5,#0x10]
	mov r0, #0xc6
	bl sound_play // () -> void
	mov r4, #0x53 
	mov r3, #0xb
	lsl r3, r3, #8
	orr r4, r3
	mov r6, #0x30 
	add r6, r6, r7
	bl sub_80E8A2A
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0x10
	strh r0, [r7,#0x12]
	mov r0, #0
	strb r0, [r7,#0xe]
	b locret_81046F4
loc_81046C8:
	ldrb r0, [r7,#0xe]
	add r0, #1
	strb r0, [r7,#0xe]
	lsr r0, r0, #3
	bcs loc_81046D6
	bl sub_81050C2
loc_81046D6:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_81046E8
	mov r0, #0xc6
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r7,#0x12]
loc_81046E8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81046F4
	mov r0, #0x18
	strh r0, [r7]
locret_81046F4:
	pop {r4,r6,pc}
.endfunc // sub_8104694

.func
.thumb_func
sub_81046F6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104736
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x45 
	strb r0, [r5,#0x10]
	mov r0, #0xc
	bl object_setCounterTime
	bl sub_81050F2
	mov r0, #0x92
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x9b
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x78 
	strh r0, [r7,#0x10]
	mov r0, #0x10
	strh r0, [r7,#0x12]
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_8104756
	mov r1, #0x54 
	bl sub_80E8A52
	b locret_8104756
loc_8104736:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_810474A
	mov r0, #0x9b
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r7,#0x12]
loc_810474A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104756
	mov r0, #0x1c
	strh r0, [r7]
locret_8104756:
	pop {pc}
.endfunc // sub_81046F6

.func
.thumb_func
sub_8104758:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810477E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x40 
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #2
	bl sub_801A07C
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_810478A
	bl sub_80E8A46
	b locret_810478A
loc_810477E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810478A
	bl loc_801171C
locret_810478A:
	pop {pc}
.endfunc // sub_8104758

	push {r7,lr}
	ldr r1, off_810479C // =off_81047A0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_810479C: .word off_81047A0
off_81047A0: .word sub_81047C0+1
	.word sub_810480A+1
	.word sub_8104832+1
	.word sub_810486A+1
	.word sub_81048AA+1
	.word sub_8104998+1
	.word sub_81049C0+1
	.word sub_8104A30+1
.func
.thumb_func
sub_81047C0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81047F2
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_8104800
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0x43 
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	b locret_8104808
loc_81047F2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104808
	mov r0, #4
	strh r0, [r7]
	b locret_8104808
loc_8104800:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl loc_801171C
locret_8104808:
	pop {pc}
.endfunc // sub_81047C0

.func
.thumb_func
sub_810480A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104824
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	bl sub_801A074 // () -> void
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	b locret_8104830
loc_8104824:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104830
	mov r0, #8
	strh r0, [r7]
locret_8104830:
	pop {pc}
.endfunc // sub_810480A

.func
.thumb_func
sub_8104832:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104848
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8104868
loc_8104848:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8104856
	bl sub_81051CC
loc_8104856:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104868
	mov r0, #0xc
	strh r0, [r7]
	b locret_8104868
	mov r0, #0x18
	strh r0, [r7]
locret_8104868:
	pop {pc}
.endfunc // sub_8104832

.func
.thumb_func
sub_810486A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104888
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	bl sub_81051EC
	mov r0, #0
	bl sub_8105254
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_81048A8
loc_8104888:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0xa
	beq loc_810489C
	cmp r0, #0
	bgt locret_81048A8
	mov r0, #0x10
	strh r0, [r7]
	b locret_81048A8
loc_810489C:
	mov r0, #1
	bl sub_81051EC
	mov r0, #1
	bl sub_8105254
locret_81048A8:
	pop {pc}
.endfunc // sub_810486A

.func
.thumb_func
sub_81048AA:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810493A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x4f 
	strb r0, [r5,#0x10]
	mov r1, #0x35 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r7,#0x30]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x16]
	ldr r1, off_8104990 // =off_8104994 
	ldrb r0, [r1,r0]
	ldr r1, [r7,#0x2c]
	ldrb r1, [r1,#0x13]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	strh r0, [r5,#0x3e]
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_8105174
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	mov r1, #0x10
	lsl r1, r1, #0x10
	bl sub_8105294
	str r0, [r5,#0x40]
	str r1, [r5,#0x48]
	strh r2, [r7,#0x10]
	mov r0, #0xc8
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	add r0, r0, r7
	mov r1, #0xff
	mov r4, #1
	bl sub_80D4C0A
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_810498E
loc_810493A:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_810494C
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl object_highlightPanel
loc_810494C:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_810496E
	bl sub_801A074 // () -> void
	bl sub_8105354
loc_810496E:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_8104982
	mov r0, #1
	bl sub_801A07C
loc_8104982:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810498E
	mov r0, #0x14
	strh r0, [r7]
locret_810498E:
	pop {r4,pc}
off_8104990: .word off_8104994
off_8104994: .word 0x700
.endfunc // sub_81048AA

.func
.thumb_func
sub_8104998:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81049B2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #2
	mov r1, #0x14
	bl sub_80302A8
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_81049BE
loc_81049B2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81049BE
	mov r0, #0x18
	strh r0, [r7]
locret_81049BE:
	pop {pc}
.endfunc // sub_8104998

.func
.thumb_func
sub_81049C0:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81049E8
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r5,#0x16]
	ldr r1, off_8104A28 // =dword_8104A2C 
	ldrb r0, [r1,r0]
	ldrb r1, [r7,#0x17]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	mov r1, #0x20 
	lsl r1, r1, #0x10
	bl sub_8105294
	str r0, [r5,#0x40]
	str r1, [r5,#0x48]
	strh r2, [r7,#0x10]
	b locret_8104A26
loc_81049E8:
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x48]
	ldr r0, [r5,#0x3c]
	add r0, r0, r1
	str r0, [r5,#0x3c]
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_8104A06
	bl sub_801A074 // () -> void
loc_8104A06:
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_8104A1A
	mov r0, #1
	bl sub_801A07C
loc_8104A1A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104A26
	mov r0, #0x1c
	strh r0, [r7]
locret_8104A26:
	pop {r4,pc}
off_8104A28: .word dword_8104A2C
dword_8104A2C: .word 0x501
.endfunc // sub_81049C0

.func
.thumb_func
sub_8104A30:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104A90
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x42 
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #2
	bl sub_801A07C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8104AA0
loc_8104A90:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104AA0
	mov r0, #0x40 
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_8104AA0:
	pop {pc}
.endfunc // sub_8104A30

	push {r7,lr}
	ldr r1, off_8104AB0 // =off_8104AB4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8104AB0: .word off_8104AB4
off_8104AB4: .word sub_8104AC4+1
	.word sub_8104B04+1
	.word sub_8104B68+1
	.word sub_8104BC2+1
.func
.thumb_func
sub_8104AC4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104AEE
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x47 
	strb r0, [r5,#0x10]
	mov r0, #0
	strb r0, [r7,#0xe]
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_8104AFC // =byte_8104B00 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_8104AFA
loc_8104AEE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104AFA
	mov r0, #4
	strh r0, [r7]
locret_8104AFA:
	pop {pc}
off_8104AFC: .word byte_8104B00
byte_8104B00: .byte 0x6, 0x1, 0x1, 0x1
.endfunc // sub_8104AC4

.func
.thumb_func
sub_8104B04:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104B32
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xe]
	mov r1, #3
	svc 6
	tst r1, r1
	bne loc_8104B20
	bl sub_8105124
	strb r0, [r7,#0x16]
loc_8104B20:
	ldrb r0, [r7,#0xe]
	ldr r1, off_8104B58 // =byte_8104B5C 
	ldrb r1, [r1,r0]
	strb r1, [r7,#0x17]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8104B56
loc_8104B32:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8104B44
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl object_highlightPanel
loc_8104B44:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104B56
	mov r0, #8
	strh r0, [r7]
	b locret_8104B56
	mov r0, #0xc
	strh r0, [r7]
locret_8104B56:
	pop {pc}
off_8104B58: .word byte_8104B5C
byte_8104B5C: .byte 0x1, 0x2, 0x3, 0x3, 0x2, 0x1, 0x1, 0x2, 0x3, 0x3, 0x2, 0x1
.endfunc // sub_8104B04

.func
.thumb_func
sub_8104B68:
	push {r4,lr}
	mov r0, #0x48 
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0xae
	bl sound_play // () -> void
	ldrb r0, [r7,#0xe]
	tst r0, r0
	bne loc_8104B84
	mov r0, #0xc
	bl object_setCounterTime
loc_8104B84:
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_810515A
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x4b 
	add r4, r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	bl sub_80E05F6
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq loc_8104BAA
	bl sub_80E7DA4
loc_8104BAA:
	ldrb r0, [r7,#0xe]
	add r0, #1
	strb r0, [r7,#0xe]
	ldrb r1, [r7,#0xd]
	cmp r0, r1
	bge loc_8104BBC
	mov r0, #4
	strh r0, [r7]
	b locret_8104BC0
loc_8104BBC:
	mov r0, #0xc
	strh r0, [r7]
locret_8104BC0:
	pop {r4,pc}
.endfunc // sub_8104B68

.func
.thumb_func
sub_8104BC2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104BD8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x49 
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8104BE8
loc_8104BD8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104BE8
	mov r0, #0x40 
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_8104BE8:
	pop {pc}
.endfunc // sub_8104BC2

	push {r7,lr}
	ldr r1, off_8104BF8 // =off_8104BFC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8104BF8: .word off_8104BFC
off_8104BFC: .word sub_8104C18+1
	.word sub_8104C70+1
	.word sub_8104C94+1
	.word sub_8104CC6+1
	.word sub_8104D5E+1
	.word sub_8104DC8+1
	.word sub_8104E36+1
.func
.thumb_func
sub_8104C18:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104C50
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	mov r0, #0x4b 
	strb r0, [r5,#0x10]
	mov r0, #0x92
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0xe3
	bl sound_play // () -> void
	mov r0, #2
	ldrh r1, [r7,#0x10]
	bl sub_80302A8
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	mov r0, #0x10
	strh r0, [r7,#0x12]
	b locret_8104C6E
loc_8104C50:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_8104C62
	mov r0, #0xe3
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r7,#0x12]
loc_8104C62:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104C6E
	mov r0, #4
	strh r0, [r7]
locret_8104C6E:
	pop {pc}
.endfunc // sub_8104C18

.func
.thumb_func
sub_8104C70:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104C86
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x4c 
	strb r0, [r5,#0x10]
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	b locret_8104C92
loc_8104C86:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104C92
	mov r0, #8
	strh r0, [r7]
locret_8104C92:
	pop {pc}
.endfunc // sub_8104C70

.func
.thumb_func
sub_8104C94:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104CAA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x10
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8104CC4
loc_8104CAA:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8104CB8
	bl sub_81052FC
loc_8104CB8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104CC4
	mov r0, #0xc
	strh r0, [r7]
locret_8104CC4:
	pop {pc}
.endfunc // sub_8104C94

.func
.thumb_func
sub_8104CC6:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104D1E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x4d 
	strb r0, [r5,#0x10]
	mov r0, #0xc8
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x1d
	bl sub_801A07C
	mov r1, #0x3a 
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r7,#8]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r1, [r2,#7]
	bl sub_810530C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_setFlag // (int a1) -> void
	mov r0, #0
	add r0, r0, r7
	mov r1, #0xff
	mov r4, #1
	bl sub_80D4C0A
	b locret_8104D5C
loc_8104D1E:
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldr r0, [r5,#0x54]
	ldr r0, [r0,#0x70]
	tst r0, r0
	beq loc_8104D3C
	bl sub_801A074 // () -> void
loc_8104D3C:
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_8104D48
	mov r0, #0x1d
	bl sub_801A07C
loc_8104D48:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_8104D5C
	bl sub_800E29C // () -> void
	mov r0, #0x4e 
	strb r0, [r5,#0x10]
	mov r0, #0x10
	strh r0, [r7]
locret_8104D5C:
	pop {r4,pc}
.endfunc // sub_8104CC6

.func
.thumb_func
sub_8104D5E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104DA4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #0xc0
	bl sound_play // () -> void
	push {r4,r6,r7}
	ldrb r2, [r7,#2]
	mov r4, #0xb4
	ldrb r3, [r7,#0xc]
	lsl r3, r3, #8
	orr r4, r3
	ldrb r3, [r7,#0xd]
	lsl r3, r3, #0x10
	orr r4, r3
	mov r3, #1
	lsl r3, r3, #0x18
	orr r4, r3
	ldr r6, [r7,#8]
	ldr r7, [r7,#0x2c]
	bl sub_80E9D0C
	pop {r4,r6,r7}
	mov r0, #2
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strh r0, [r7,#0x12]
	b locret_8104DC6
loc_8104DA4:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	cmp r0, #0
	bgt loc_8104DBA
	mov r0, #2
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strh r0, [r7,#0x12]
loc_8104DBA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104DC6
	mov r0, #0x14
	strh r0, [r7]
locret_8104DC6:
	pop {pc}
.endfunc // sub_8104D5E

.func
.thumb_func
sub_8104DC8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104E24
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x42 
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	lsl r0, r0, #0x16
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #2
	bl sub_801A07C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_8104E34
loc_8104E24:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104E34
	mov r0, #0x40 
	strb r0, [r5,#0x10]
	mov r0, #0x18
	strh r0, [r7]
locret_8104E34:
	pop {pc}
.endfunc // sub_8104DC8

.func
.thumb_func
sub_8104E36:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8104E62
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x40 
	strb r0, [r5,#0x10]
	mov r0, #0x96
	strh r0, [r7,#0x10]
	mov r0, #2
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strb r0, [r7,#0xe]
	mov r0, #0xe4
	bl sound_play // () -> void
	mov r0, #0x20 
	strh r0, [r7,#0x12]
	b locret_8104E96
loc_8104E62:
	ldrb r0, [r7,#0xe]
	sub r0, #1
	strb r0, [r7,#0xe]
	cmp r0, #0
	bgt loc_8104E78
	mov r0, #2
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strb r0, [r7,#0xe]
loc_8104E78:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_8104E8A
	mov r0, #0xe4
	bl sound_play // () -> void
	mov r0, #0x20 
	strh r0, [r7,#0x12]
loc_8104E8A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8104E96
	bl loc_801171C
locret_8104E96:
	pop {pc}
.endfunc // sub_8104E36

.func
.thumb_func
sub_8104E98:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	mov r4, #0
	mov r6, #0
loc_8104EA4:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_8104EF0 // =loc_8104EF4 
	add r1, r1, r0
	ldrb r0, [r1,r4]
	ldrb r1, [r5,#0x13]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	add r7, r7, r6
	bl sub_800CF14
	add r6, r6, r0
	add r4, #1
	cmp r4, #2
	blt loc_8104EA4
	tst r6, r6
	bne loc_8104ED8
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_8104EEA
loc_8104ED8:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_8104EEA:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
	.byte 0, 0
off_8104EF0: .word loc_8104EF4
.endfunc // sub_8104E98

loc_8104EF4:
	lsl r2, r0, #4
	lsl r5, r0, #0x18
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	ldrb r1, [r0,#0x12]
	ldrb r2, [r0,#0x13]
	str r1, [sp]
	str r2, [sp,#4]
	mov r4, #0
	mov r6, #0
loc_8104F0C:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_8104F64 // =loc_8104F68 
	add r1, r1, r0
	ldrb r0, [r1,r4]
	ldr r1, [sp,#4]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_8104F32
	lsl r1, r1, #4
	orr r0, r1
	add r1, sp, #0x10
	strb r0, [r1,r6]
	add r6, #1
loc_8104F32:
	add r4, #1
	cmp r4, #2
	blt loc_8104F0C
	tst r6, r6
	bne loc_8104F4C
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	add r7, sp, #0x10
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_8104F5E
loc_8104F4C:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_8104F5E:
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_8104F64: .word loc_8104F68
loc_8104F68:
	lsl r2, r0, #8
	lsl r5, r0, #0x14
	push {lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_8104F8C // =loc_8104F90 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne locret_8104F88
	mov r0, #0
locret_8104F88:
	pop {pc}
	.balign 4, 0x00
off_8104F8C: .word loc_8104F90
loc_8104F90:
	lsl r2, r0, #8
	lsl r5, r0, #8
	push {r4,r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r1, [sp,#4]
	mov r0, #0
	str r0, [sp,#8]
	ldr r1, [sp]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_810503C // =off_8105040 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	mov r4, #0xf
	ldrb r6, [r5,#0x16]
	add r7, sp, #0xc
	bl sub_800D3FE
	add r6, r0, #0
	tst r6, r6
	beq loc_8104FDE
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_8109794
	ldr r0, [sp,#8]
	add r0, #1
	str r0, [sp,#8]
loc_8104FDE:
	ldr r1, [sp]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isCurrentPanelValid
	tst r0, r0
	pop {r0,r1}
	beq loc_8105038
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_810503C // =off_8105040 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	mov r4, #0x2c 
	ldrb r6, [r5,#0x16]
	add r7, sp, #0xc
	bl sub_800D3FE
	add r6, r0, #0
	tst r6, r6
	beq loc_8105038
	add r0, sp, #0xc
	add r1, r6, #0
	add r2, r6, #0
	bl sub_8000C72
	mov r4, #0
loc_8105018:
	add r0, sp, #0xc
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	bl sub_8109794
	add r4, #1
	cmp r4, r6
	bge loc_8105038
	ldr r0, [sp,#8]
	add r0, #1
	str r0, [sp,#8]
	ldr r1, [sp,#4]
	cmp r0, r1
	blt loc_8105018
loc_8105038:
	add sp, sp, #0x24
	pop {r4,r6,r7,pc}
off_810503C: .word off_8105040
off_8105040: .word 0x30
	.word 0x3800040, 0x10, 0x3800060
.func
.thumb_func
sub_8105050:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0x1a
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	pop {pc}
.endfunc // sub_8105050

.func
.thumb_func
sub_810506A:
	push {r4,r6,lr}
	ldr r6, off_810538C // =off_8019B78 
	mov r0, #0x68 // (off_8019BE0 - 0x8019b78)
	ldr r6, [r6,r0]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r1, [r5,#0x12]
	mov r2, #2
	mul r0, r2
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
loc_8105082:
	mov r2, #0
	ldrsb r2, [r6,r2]
	cmp r2, #0x7f
	beq locret_81050C0
	push {r0,r1,r4,r6}
	mul r2, r4
	add r0, r0, r2
	mov r2, #1
	ldrsb r2, [r6,r2]
	add r1, r1, r2
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_81050BA
	ldrb r2, [r7,#2]
	mov r3, #0
	mov r4, #3
	mov r6, #0x78 
	lsl r6, r6, #8
	orr r4, r6
	mov r6, #4
	lsl r6, r6, #0x10
	orr r4, r6
	ldr r6, [r7,#8]
	bl sub_80D07A0
loc_81050BA:
	pop {r0,r1,r4,r6}
	add r6, #2
	b loc_8105082
locret_81050C0:
	pop {r4,r6,pc}
.endfunc // sub_810506A

.func
.thumb_func
sub_81050C2:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #8
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0x2e 
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	pop {pc}
.endfunc // sub_81050C2

.func
.thumb_func
sub_81050F2:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #2
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	mov r4, #0
	mov r3, #0x78 
	lsl r3, r3, #8
	orr r4, r3
	push {r0-r2,r6}
	bl sub_80DA5D2
	pop {r0-r2,r6}
	mov r4, #1
	mov r3, #0x78 
	lsl r3, r3, #8
	orr r4, r3
	bl sub_80DA5D2
	pop {r4,r6,pc}
.endfunc // sub_81050F2

.func
.thumb_func
sub_8105124:
	push {r6,r7,lr}
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0}
	bl object_isValidPanel
	tst r0, r0
	pop {r0}
	beq loc_8105156
	ldrb r1, [r7,#0xe]
	tst r1, r1
	beq locret_8105158
	ldrb r1, [r7,#3]
	tst r1, r1
	beq loc_8105156
	ldrb r2, [r7,#0x16]
	cmp r0, r2
	beq locret_8105158
	mov r3, #1
	sub r0, r0, r2
	bgt loc_8105152
	neg r3, r3
loc_8105152:
	add r0, r2, r3
	b locret_8105158
loc_8105156:
	ldrb r0, [r7,#0x16]
locret_8105158:
	pop {r6,r7,pc}
.endfunc // sub_8105124

.func
.thumb_func
sub_810515A:
	push {r4,r6,lr}
	ldrb r4, [r7,#3]
	lsl r0, r0, #8
	orr r4, r0
	lsl r1, r1, #0x10
	orr r4, r1
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	bl sub_80DA710
	pop {r4,r6,pc}
.endfunc // sub_810515A

.func
.thumb_func
sub_8105174:
	push {r6,r7,lr}
	sub sp, sp, #0x18
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	bne loc_81051B4
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_81051B8 // =dword_81051BC 
	add r1, r1, r0
	ldr r2, [r1]
	ldr r3, [r1,#4]
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_81051B4
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_81051B4:
	add sp, sp, #0x18
	pop {r6,r7,pc}
off_81051B8: .word dword_81051BC
dword_81051BC: .word 0x0
	.word 0x20, 0x20, 0x0
.endfunc // sub_8105174

.func
.thumb_func
sub_81051CC:
	push {lr}
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #1
	ldr r3, off_81051E4 // =off_81051E8 
	add r2, r2, r3
	ldrb r0, [r2]
	ldrb r1, [r2,#1]
	mov r2, #0xf
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	pop {pc}
off_81051E4: .word off_81051E8
off_81051E8: .word byte_2030204
.endfunc // sub_81051CC

.func
.thumb_func
sub_81051EC:
	push {r4,r6,lr}
	push {r0}
	ldrb r4, [r7,#3]
	lsl r1, r0, #8
	orr r4, r1
	mov r1, #0
	lsl r1, r1, #0x10
	orr r4, r1
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	lsl r0, r0, #1
	add r0, r0, r1
	ldr r1, off_8105248 // =byte_810524C 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	bl sub_80DAE48
	pop {r0}
	push {r0}
	bl object_getFlipDirection_800E2CA // () -> int
	add r2, r0, #0
	pop {r0}
	ldrb r4, [r7,#3]
	lsl r1, r0, #8
	orr r4, r1
	mov r1, #1
	lsl r1, r1, #0x10
	orr r4, r1
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	lsl r0, r0, #1
	add r0, r0, r1
	ldr r1, off_8105248 // =byte_810524C 
	add r1, r1, r0
	ldrb r0, [r1]
	add r0, r0, r2
	ldrb r1, [r1,#1]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	bl sub_80DAE48
	pop {r4,r6,pc}
off_8105248: .word byte_810524C
byte_810524C: .byte 0x3, 0x4, 0x4, 0x0, 0x4, 0x4, 0x3, 0x0
.endfunc // sub_81051EC

.func
.thumb_func
sub_8105254:
	push {r4,r6,lr}
	add r6, r0, #0
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x4c 
	add r4, r4, r0
	lsl r0, r6, #9
	add r4, r4, r0
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #2
	lsl r6, r6, #1
	add r6, r6, r1
	ldr r1, off_8105288 // =byte_810528C 
	add r1, r1, r6
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,r6,pc}
off_8105288: .word byte_810528C
byte_810528C: .byte 0x2, 0x2, 0x3, 0x2, 0x3, 0x2, 0x2, 0x2
.endfunc // sub_8105254

.func
.thumb_func
sub_8105294:
	push {r4,r6,lr}
	sub sp, sp, #8
	str r0, [sp]
	str r1, [sp,#4]
	ldrb r0, [r7,#3]
	lsl r0, r0, #2
	ldr r1, off_81052E8 // =dword_81052EC 
	ldr r4, [r1,r0]
	ldr r0, [sp]
	ldr r1, [r5,#0x34]
	push {r0,r1}
	sub r0, r0, r1
	cmp r0, #0
	bge loc_81052B2
	neg r0, r0
loc_81052B2:
	add r1, r4, #0
	svc 6
	add r6, r0, #0
	pop {r0,r1}
	cmp r0, r1
	bgt loc_81052C0
	neg r4, r4
loc_81052C0:
	ldr r0, [sp,#4]
	ldr r1, [r5,#0x3c]
	push {r0,r1}
	sub r0, r0, r1
	cmp r0, #0
	bge loc_81052CE
	neg r0, r0
loc_81052CE:
	add r1, r6, #0
	svc 6
	add r2, r0, #0
	pop {r0,r1}
	cmp r0, r1
	bgt loc_81052DC
	neg r2, r2
loc_81052DC:
	add r1, r2, #0
	add r0, r4, #0
	add r2, r6, #0
	add sp, sp, #8
	pop {r4,r6,pc}
	.balign 4, 0x00
off_81052E8: .word dword_81052EC
dword_81052EC: .word 0x80000, 0xA0000, 0xA0000, 0xA0000
.endfunc // sub_8105294

.func
.thumb_func
sub_81052FC:
	push {lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #8
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	pop {pc}
.endfunc // sub_81052FC

.func
.thumb_func
sub_810530C:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r7,#3]
	lsl r1, r1, #2
	ldr r2, off_8105340 // =dword_8105344 
	ldr r1, [r2,r1]
	mul r0, r1
	str r0, [r5,#0x40]
	mov r0, #6
	ldrb r2, [r5,#0x16]
	tst r2, r2
	beq loc_8105328
	mov r0, #1
loc_8105328:
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	cmp r0, #0
	bge loc_8105332
	neg r0, r0
loc_8105332:
	mov r2, #0x28 
	lsl r2, r2, #0x10
	mul r0, r2
	svc 6
	strh r0, [r7,#0x10]
	pop {pc}
	.byte 0, 0
off_8105340: .word dword_8105344
dword_8105344: .word 0x150000, 0x1C0000, 0x1C0000, 0x1C0000
.endfunc // sub_810530C

.func
.thumb_func
sub_8105354:
	push {r4,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl object_getPanelParameters
.endfunc // sub_8105354

	ldrb r2, [r5,#0x16]
	lsl r2, r2, #2
	ldr r3, off_8105380 // =off_8105384 
	ldr r2, [r3,r2]
	tst r0, r2
	beq locret_810537E
	bl sub_800E456 // () -> int
	lsl r4, r0, #8
	mov r0, #0x53 
	add r4, r4, r0
	ldr r1, [r5,#0x34]
	ldr r2, [r5,#0x38]
	ldr r3, [r5,#0x3c]
	bl sub_80E05F6
locret_810537E:
	pop {r4,pc}
off_8105380: .word off_8105384
off_8105384: .word LCDControl
	.word start_
off_810538C: .word off_8019B78
dword_8105390: .word 0x1011508, 0x15, 0x30008FC, 0xC80000A, 0xA0301, 0x3020C80
	.word 0xC8000C8, 0xA0303, 0x3040C80, 0xC80000A, 0xA0305, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x8016381
	.word 0x8017889, 0x80171A7, 0x8105619, 0x8105625, 0x80178B7, 0x8105631
	.word 0x810563D, 0x81054B9, 0x8105971, 0x8105A97, 0x8105C97, 0x8105E61
	.word 0x8105FE7, 0x81061D7, 0x6DAFB5C0, 0x19F62680, 0x490337A0, 0x58097830
	.word 0x470846FE, 0xBDC0, 0x81054D4, 0x81054D9, 0x7930B550, 0xDB332802
	.word 0x71302000, 0x28027970, 0x2000DB12, 0x79B07170, 0xDB202802, 0x71B02000
	.word 0x8498CE9, 0x42918CAA, 0x79F0DD1F, 0x40412101, 0x420071F1, 0xE009D019
	.word 0x30017970, 0xF6FC7170, 0x210FF80C, 0x28064008, 0xE005DB03, 0xF99AF000
	.word 0xF000E013, 0xE010F963, 0xF946F000, 0x79B0E00D, 0x71B03001, 0xF922F000
	.word 0xF000E007, 0xE004F971, 0x30017930, 0xF0007130, 0xBD50F90F
.func
.thumb_func
sub_8105554:
	push {r4,r6,lr}
	bl sub_800FE36
	lsl r0, r0, #1
	ldr r1, off_81055C8 // =loc_81055CC 
	ldrh r0, [r1,r0]
	strh r0, [r5,#0x24]
	strh r0, [r5,#0x26]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl sprite_setAnimation // (u8 a1) -> void
	bl sprite_loadAnimationData // () -> void
.endfunc // sub_8105554

	bl sub_80E8F78
	str r0, [r5,#0x60]
	mov r4, #0
loc_8105578:
	ldrb r0, [r5,#0x16]
	mov r1, #3
	mul r0, r1
	ldr r1, off_81055BC // =dword_81055C0 
	add r1, r1, r0
	ldrb r6, [r1,r4]
	add r0, r6, #0
	mov r1, #1
	push {r0,r1}
	bl sub_801BB1C
	pop {r0,r1}
	bl object_hidePanel
	add r0, r6, #0
	mov r1, #2
	push {r0,r1}
	bl sub_801BB1C
	pop {r0,r1}
	bl object_hidePanel
	add r0, r6, #0
	mov r1, #3
	push {r0,r1}
	bl sub_801BB1C
	pop {r0,r1}
	bl object_hidePanel
	add r4, #1
	cmp r4, #3
	blt loc_8105578
	pop {r4,r6,pc}
off_81055BC: .word dword_81055C0
dword_81055C0: .word 0x4010203, 0x605
off_81055C8: .word loc_81055CC
loc_81055CC:
	lsl r0, r2, #0x1f
	lsr r0, r6, #0xb
	lsr r0, r0, #0x12
	lsr r0, r4, #0x1e
	push {lr}
	pop {pc}
	push {r4,lr}
	pop {r4,pc}
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r0, #1
	bl sub_801A07C
	mov r0, #0
	str r0, [r5,#0x3c]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	ldr r0, [r5,#0x60]
	tst r0, r0
	beq loc_8105608
	bl sub_80E8FC8
loc_8105608:
	ldr r0, [r5,#0x64]
	tst r0, r0
	beq locret_8105616
	bl sub_80E5410
	mov r0, #0
	str r0, [r5,#0x64]
locret_8105616:
	pop {pc}
	push {r4,lr}
	bl sub_80174FE
	mov r0, #0x14
	strb r0, [r5,#0x10]
	pop {r4,pc}
	push {r4,lr}
	bl sub_80175B8
	mov r0, #0x14
	strb r0, [r5,#0x10]
	pop {r4,pc}
	push {r4,lr}
	bl sub_8017688
	mov r0, #0x14
	strb r0, [r5,#0x10]
	pop {r4,pc}
	push {r4,lr}
	bl sub_8017768
	mov r0, #0x14
	strb r0, [r5,#0x10]
	pop {r4,pc}
.func
.thumb_func
sub_8105648:
	push {lr}
	ldr r0, off_8105654 // =byte_8105658 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8105654: .word byte_8105658
byte_8105658: .byte 0x1, 0x1, 0x1, 0x1
.endfunc // sub_8105648

.func
.thumb_func
sub_810565C:
	push {lr}
	ldr r0, off_8105690 // =byte_8105694 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8105690 // =byte_8105694 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	ldr r0, off_8105690 // =byte_8105694 
	add r0, #8
	bl sub_800FE28
	add r2, r0, #0
	pop {r0,r1}
	push {r0-r2}
	ldr r0, off_8105690 // =byte_8105694 
	add r0, #0xc
	bl sub_800FE28
	add r3, r0, #0
	pop {r0-r2}
	pop {pc}
off_8105690: .word byte_8105694
byte_8105694: .byte 0x1E, 0x18, 0x14, 0x12, 0x1E, 0x18, 0x14, 0x12, 0x10
	.byte 0x10, 0x10, 0x10, 0x8, 0x10, 0x14, 0x1E
.endfunc // sub_810565C

.func
.thumb_func
sub_81056A4:
	push {lr}
	ldr r0, off_81056CC // =byte_81056D0 
	bl sub_800FE28
	push {r0}
	ldr r0, off_81056CC // =byte_81056D0 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	ldr r0, off_81056CC // =byte_81056D0 
	add r0, #8
	bl sub_800FE28
	add r2, r0, #0
	pop {r0,r1}
	pop {pc}
	.balign 4, 0x00
off_81056CC: .word byte_81056D0
byte_81056D0: .byte 0x1E, 0x18, 0x14, 0x12, 0x50, 0x50, 0x50, 0x50, 0x19
	.byte 0x19, 0x19, 0x19
.endfunc // sub_81056A4

.func
.thumb_func
sub_81056DC:
	push {lr}
	ldr r0, off_8105704 // =byte_8105708 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8105704 // =byte_8105708 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	ldr r0, off_8105704 // =byte_8105708 
	add r0, #8
	bl sub_800FE28
	add r2, r0, #0
	pop {r0,r1}
	pop {pc}
	.balign 4, 0x00
off_8105704: .word byte_8105708
byte_8105708: .byte 0x12, 0x12, 0xC, 0xC, 0x14, 0x14, 0x14, 0x14, 0x8, 0x8
	.byte 0x8, 0x8
.endfunc // sub_81056DC

.func
.thumb_func
sub_8105714:
	push {lr}
	ldr r0, off_810573C // =byte_8105740 
	bl sub_800FE28
	push {r0}
	ldr r0, off_810573C // =byte_8105740 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	push {r0,r1}
	ldr r0, off_810573C // =byte_8105740 
	add r0, #8
	bl sub_800FE28
	add r2, r0, #0
	pop {r0,r1}
	pop {pc}
	.balign 4, 0x00
off_810573C: .word byte_8105740
byte_8105740: .byte 0x1E, 0x18, 0x14, 0x12, 0x14, 0x14, 0x14, 0x14, 0xC
	.byte 0x12, 0x18, 0x1E
.endfunc // sub_8105714

.func
.thumb_func
sub_810574C:
	push {lr}
	ldr r0, off_8105764 // =loc_8105768 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8105764 // =loc_8105768 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_8105764: .word loc_8105768
.endfunc // sub_810574C

loc_8105768:
	add r6, r3, r0
	asr r4, r2, #8
	asr r0, r3, #0x20
	asr r0, r2, #0x20
	push {lr}
	ldr r0, off_810595C // =sub_8106418+1 
	str r0, [r7,#0x28]
	bl sub_8105648
	strh r0, [r7,#0x18]
	mov r0, #9
	bl loc_8011690
	pop {pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	ldr r0, dword_8105960 // = 
	str r0, [r7,#0x28]
	mov r0, #0
	bl sub_810588E
	bl sub_810565C
	strh r0, [r7,#0x18]
	strb r1, [r7,#0xc]
	strb r2, [r7,#0xd]
	strb r3, [r7,#0xe]
	mov r0, #0x64 
	add r0, r0, r5
	str r0, [r7,#0x30]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {r4,pc}
	push {lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0x20 
	strb r0, [r7,#2]
	ldr r0, off_8105964 // =sub_8106460+1 
	str r0, [r7,#0x28]
	mov r0, #1
	bl sub_810588E
	bl sub_81056A4
	strh r0, [r7,#0x18]
	strb r1, [r7,#0xc]
	strb r2, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xb
	bl sub_8011680
	pop {pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	ldr r0, off_8105968 // =sub_810649E+1 
	str r0, [r7,#0x28]
	mov r0, #2
	bl sub_810588E
	bl sub_81056DC
	strh r0, [r7,#0x18]
	strb r1, [r7,#0xc]
	strb r2, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	ldr r0, dword_810596C // = 
	str r0, [r7,#0x28]
	mov r0, #3
	bl sub_810588E
	bl sub_8105714
	strh r0, [r7,#0x18]
	strb r1, [r7,#0xc]
	strb r2, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xd
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0x20 
	strb r0, [r7,#2]
	mov r0, #4
	bl sub_810588E
	bl sub_810574C
	strh r0, [r7,#0x18]
	strb r1, [r7,#0xc]
	ldr r0, [r5,#0x60]
	str r0, [r7,#0x30]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xe
	bl sub_8011680
	pop {r4,pc}
.func
.thumb_func
sub_810588E:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_81058E4 // =dword_81058F8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_8105920 // =dword_8105934 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_810588E

	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_81058E4 // =dword_81058F8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_8105920 // =dword_8105934 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.balign 4, 0x00
off_81058E4: .word dword_81058F8
	.word dword_8105900
	.word dword_8105908
	.word dword_8105910
	.word dword_8105918
dword_81058F8: .word 0xF00050, 0xF000F0
dword_8105900: .word 0x12C0064, 0x12C012C
dword_8105908: .word 0xF00050, 0xF000F0
dword_8105910: .word 0x12C0064, 0x12C012C
dword_8105918: .word 0x1C20096, 0x1C201C2
off_8105920: .word dword_8105934
	.word dword_810593C
	.word dword_8105944
	.word dword_810594C
	.word dword_8105954
dword_8105934: .word 0xA000A
	.word 0xA000A
dword_810593C: .word 0xA000A
	.word 0xA000A
dword_8105944: .word 0xA000A
	.word 0xA000A
dword_810594C: .word 0xA000A
	.word 0xA000A
dword_8105954: .word 0xA000A
	.word 0xA000A
off_810595C: .word sub_8106418+1
dword_8105960: .word 0x81064C5
off_8105964: .word sub_8106460+1
off_8105968: .word sub_810649E+1
dword_810596C: .word 0x81064DD
.func
.thumb_func
sub_8105970:
	push {r7,lr}
	ldr r1, off_8105980 // =off_8105984 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_8105980: .word off_8105984
off_8105984: .word sub_8105994+1
	.word sub_81059C0+1
	.word sub_8105A2C+1
	.word sub_8105A72+1
.endfunc // sub_8105970

.func
.thumb_func
sub_8105994:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81059B2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x17
	strb r0, [r5,#0x10]
	mov r0, #0xc4
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x20 
	strh r0, [r7,#0x10]
	b locret_81059BE
loc_81059B2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81059BE
	mov r0, #4
	strh r0, [r7]
locret_81059BE:
	pop {pc}
.endfunc // sub_8105994

.func
.thumb_func
sub_81059C0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105A00
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_8105A0E
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8105A18 // =dword_8105A1C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_8105A0E
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_8105A16
loc_8105A00:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105A16
	mov r0, #8
	strh r0, [r7]
	b locret_8105A16
loc_8105A0E:
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_8105A16:
	pop {pc}
off_8105A18: .word dword_8105A1C
dword_8105A1C: .word 0x0
	.word 0x20, 0x20, 0x0
.endfunc // sub_81059C0

.func
.thumb_func
sub_8105A2C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105A64
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_8105A70
loc_8105A64:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105A70
	mov r0, #0xc
	strh r0, [r7]
locret_8105A70:
	pop {pc}
.endfunc // sub_8105A2C

.func
.thumb_func
sub_8105A72:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105A88
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8105A94
loc_8105A88:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105A94
	bl loc_801171C
locret_8105A94:
	pop {pc}
.endfunc // sub_8105A72

	push {r7,lr}
	ldr r1, off_8105AA4 // =off_8105AA8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8105AA4: .word off_8105AA8
off_8105AA8: .word sub_8105AC4+1
	.word loc_8105AF6+1
	.word sub_8105B4A+1
	.word sub_8105B84+1
	.word sub_8105BBE+1
	.word sub_8105C10+1
	.word sub_8105C72+1
.func
.thumb_func
sub_8105AC4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105AE8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r7,#0x16]
	strb r0, [r7,#0x17]
	mov r0, #0x17
	strb r0, [r5,#0x10]
	mov r0, #0xc4
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x20 
	strh r0, [r7,#0x10]
	b locret_8105AF4
loc_8105AE8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105AF4
	mov r0, #4
	strh r0, [r7]
locret_8105AF4:
	pop {pc}
.endfunc // sub_8105AC4

loc_8105AF6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105B32
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_8105B40
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	str r0, [r7,#0x34]
	str r1, [r7,#0x38]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	bl sub_801A074 // () -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_8105B48
loc_8105B32:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105B48
	mov r0, #8
	strh r0, [r7]
	b locret_8105B48
loc_8105B40:
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_8105B48:
	pop {pc}
.func
.thumb_func
sub_8105B4A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105B76
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x34]
	ldr r1, [r7,#0x38]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_8105B82
loc_8105B76:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105B82
	mov r0, #0xc
	strh r0, [r7]
locret_8105B82:
	pop {pc}
.endfunc // sub_8105B4A

.func
.thumb_func
sub_8105B84:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105BA2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x19
	strb r0, [r5,#0x10]
	mov r0, #0x94
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	b locret_8105BBC
loc_8105BA2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105BBC
	mov r0, #0x18
	strb r0, [r5,#0x10]
	mov r4, #0
	bl sub_80E532C
	ldr r1, [r7,#0x30]
	str r0, [r1]
	mov r0, #0x10
	strh r0, [r7]
locret_8105BBC:
	pop {pc}
.endfunc // sub_8105B84

.func
.thumb_func
sub_8105BBE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105BDC
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_81064F4
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8105C0E
loc_8105BDC:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8105BEE
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl object_highlightPanel
loc_8105BEE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105C0E
	bl sub_8106590
	ldrb r0, [r7,#0xe]
	sub r0, #1
	strb r0, [r7,#0xe]
	tst r0, r0
	beq loc_8105C0A
	mov r0, #0
	strb r0, [r7,#1]
	b locret_8105C0E
loc_8105C0A:
	mov r0, #0x14
	strh r0, [r7]
locret_8105C0E:
	pop {pc}
.endfunc // sub_8105BBE

.func
.thumb_func
sub_8105C10:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105C64
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	ldr r0, [r0]
	tst r0, r0
	beq locret_8105C70
	bl sub_80E5410
	mov r0, #0
	ldr r1, [r7,#0x30]
	str r0, [r1]
	b locret_8105C70
loc_8105C64:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105C70
	mov r0, #0x18
	strh r0, [r7]
locret_8105C70:
	pop {pc}
.endfunc // sub_8105C10

.func
.thumb_func
sub_8105C72:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105C84
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_8105C94
loc_8105C84:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105C94
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_8105C94:
	pop {pc}
.endfunc // sub_8105C72

	push {r7,lr}
	ldr r1, off_8105CA4 // =off_8105CA8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8105CA4: .word off_8105CA8
off_8105CA8: .word sub_8105CC0+1
	.word loc_8105CEC+1
	.word sub_8105D5C+1
	.word sub_8105DA2+1
	.word sub_8105DE6+1
	.word sub_8105E3C+1
.func
.thumb_func
sub_8105CC0:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105CDE
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x19
	strb r0, [r5,#0x10]
	mov r0, #0x94
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	b locret_8105CEA
loc_8105CDE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105CEA
	mov r0, #4
	strh r0, [r7]
locret_8105CEA:
	pop {pc}
.endfunc // sub_8105CC0

loc_8105CEC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105D2E
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_8105D3C
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8105D48 // =dword_8105D4C 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_8105D3C
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_8105D44
loc_8105D2E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105D44
	mov r0, #8
	strh r0, [r7]
	b locret_8105D44
loc_8105D3C:
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_8105D44:
	pop {pc}
	.balign 4, 0x00
off_8105D48: .word dword_8105D4C
dword_8105D4C: .word 0x0
	.word 0x20, 0x20, 0x0
.func
.thumb_func
sub_8105D5C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105D94
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_8105DA0
loc_8105D94:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105DA0
	mov r0, #0xc
	strh r0, [r7]
locret_8105DA0:
	pop {pc}
.endfunc // sub_8105D5C

.func
.thumb_func
sub_8105DA2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105DB8
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8105DE4
loc_8105DB8:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8105DD8
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #1
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0x28 
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_8105DD8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105DE4
	mov r0, #0x10
	strh r0, [r7]
locret_8105DE4:
	pop {pc}
.endfunc // sub_8105DA2

.func
.thumb_func
sub_8105DE6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105E18
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1a
	strb r0, [r5,#0x10]
	mov r0, #0xf3
	bl sound_play // () -> void
	mov r0, #6
	bl object_setCounterTime
	bl sub_8106690
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #2
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strh r0, [r7,#0x12]
	b locret_8105E3A
loc_8105E18:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	cmp r0, #0
	bgt loc_8105E2E
	mov r0, #2
	mov r1, #0xa
	bl sub_80302A8
	mov r0, #0xa
	strh r0, [r7,#0x12]
loc_8105E2E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105E3A
	mov r0, #0x14
	strh r0, [r7]
locret_8105E3A:
	pop {pc}
.endfunc // sub_8105DE6

.func
.thumb_func
sub_8105E3C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105E52
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8105E5E
loc_8105E52:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105E5E
	bl loc_801171C
locret_8105E5E:
	pop {pc}
.endfunc // sub_8105E3C

	push {r7,lr}
	ldr r1, off_8105E70 // =off_8105E74 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_8105E70: .word off_8105E74
off_8105E74: .word sub_8105E88+1
	.word sub_8105EB4+1
	.word sub_8105F20+1
	.word sub_8105F66+1
	.word sub_8105FC2+1
.func
.thumb_func
sub_8105E88:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105EA6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x19
	strb r0, [r5,#0x10]
	mov r0, #0x94
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	b locret_8105EB2
loc_8105EA6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105EB2
	mov r0, #4
	strh r0, [r7]
locret_8105EB2:
	pop {pc}
.endfunc // sub_8105E88

.func
.thumb_func
sub_8105EB4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105EF4
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_8105F02
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8105F0C // =dword_8105F10 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	tst r0, r0
	beq loc_8105F02
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_8105F0A
loc_8105EF4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105F0A
	mov r0, #8
	strh r0, [r7]
	b locret_8105F0A
loc_8105F02:
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_8105F0A:
	pop {pc}
off_8105F0C: .word dword_8105F10
dword_8105F10: .word 0x0
	.word 0x20, 0x20, 0x0
.endfunc // sub_8105EB4

.func
.thumb_func
sub_8105F20:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105F58
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_8105F64
loc_8105F58:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105F64
	mov r0, #0xc
	strh r0, [r7]
locret_8105F64:
	pop {pc}
.endfunc // sub_8105F20

.func
.thumb_func
sub_8105F66:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105F8C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1a
	strb r0, [r5,#0x10]
	bl sub_81066C0
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0x10
	strh r0, [r7,#0x12]
	b locret_8105FC0
loc_8105F8C:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_8105FA0
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r7,#0x12]
loc_8105FA0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105FC0
	bl sub_81066EA
	ldrb r0, [r7,#0xd]
	sub r0, #1
	strb r0, [r7,#0xd]
	tst r0, r0
	beq loc_8105FBC
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_8105FC0
loc_8105FBC:
	mov r0, #0x10
	strh r0, [r7]
locret_8105FC0:
	pop {pc}
.endfunc // sub_8105F66

.func
.thumb_func
sub_8105FC2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8105FD4
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8105FE4
loc_8105FD4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8105FE4
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_8105FE4:
	pop {pc}
.endfunc // sub_8105FC2

	push {r7,lr}
	ldr r1, off_8105FF4 // =off_8105FF8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8105FF4: .word off_8105FF8
off_8105FF8: .word sub_8106014+1
	.word loc_810604A+1
	.word sub_810609E+1
	.word sub_81060D8+1
	.word sub_810610A+1
	.word sub_8106162+1
	.word sub_81061B2+1
.func
.thumb_func
sub_8106014:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810603C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x19
	strb r0, [r5,#0x10]
	mov r0, #0x94
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	strb r0, [r7,#0x16]
	strb r0, [r7,#0x17]
	ldrb r0, [r7,#0xd]
	strb r0, [r7,#0xe]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_8106048
loc_810603C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106048
	mov r0, #4
	strh r0, [r7]
locret_8106048:
	pop {pc}
.endfunc // sub_8106014

loc_810604A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8106086
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_8106094
	ldr r0, [r7,#0x28]
	mov lr, pc
	bx r0
	str r0, [r7,#0x30]
	str r1, [r7,#0x34]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	bl sub_801A074 // () -> void
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #0x15
	strb r0, [r5,#0x10]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_810609C
loc_8106086:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810609C
	mov r0, #8
	strh r0, [r7]
	b locret_810609C
loc_8106094:
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_810609C:
	pop {pc}
.func
.thumb_func
sub_810609E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81060CA
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	ldr r0, [r7,#0x30]
	ldr r1, [r7,#0x34]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	lsl r0, r0, #0x10
	str r0, [r5,#0x3c]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_81060D6
loc_81060CA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81060D6
	mov r0, #0xc
	strh r0, [r7]
locret_81060D6:
	pop {pc}
.endfunc // sub_810609E

.func
.thumb_func
sub_81060D8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81060EE
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8106108
loc_81060EE:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_81060FC
	bl sub_8106670
loc_81060FC:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106108
	mov r0, #0x10
	strh r0, [r7]
locret_8106108:
	pop {pc}
.endfunc // sub_81060D8

.func
.thumb_func
sub_810610A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8106138
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xd]
	mov r1, #1
	and r0, r1
	ldr r1, off_810615C // =byte_8106160 
	ldrb r0, [r1,r0]
	strb r0, [r5,#0x10]
	bl sub_81065A8
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #1
	mov r1, #5
	bl sub_80302A8
	mov r0, #5
	strh r0, [r7,#0x10]
	b locret_8106158
loc_8106138:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106158
	bl sub_8106660
	ldrb r0, [r7,#0xd]
	sub r0, #1
	strb r0, [r7,#0xd]
	tst r0, r0
	beq loc_8106154
	mov r0, #0
	strb r0, [r7,#1]
	b locret_8106158
loc_8106154:
	mov r0, #0x14
	strh r0, [r7]
locret_8106158:
	pop {pc}
	.balign 4, 0x00
off_810615C: .word byte_8106160
byte_8106160: .byte 0x1B, 0x1C
.endfunc // sub_810610A

.func
.thumb_func
sub_8106162:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81061A4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0
	str r0, [r5,#0x3c]
	mov r0, #1
	bl sub_801A07C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_81061B0
loc_81061A4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81061B0
	mov r0, #0x18
	strh r0, [r7]
locret_81061B0:
	pop {pc}
.endfunc // sub_8106162

.func
.thumb_func
sub_81061B2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81061C4
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_81061D4
loc_81061C4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81061D4
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_81061D4:
	pop {pc}
.endfunc // sub_81061B2

	push {r7,lr}
	ldr r1, off_81061E4 // =off_81061E8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_81061E4: .word off_81061E8
off_81061E8: .word sub_8106208+1
	.word sub_8106238+1
	.word sub_8106274+1
	.word sub_810629C+1
	.word sub_81062F8+1
	.word sub_8106380+1
	.word sub_81063A4+1
	.word sub_81063F4+1
.func
.thumb_func
sub_8106208:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810622A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x19
	strb r0, [r5,#0x10]
	mov r0, #0x94
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	strb r0, [r7,#0xd]
	mov r0, #0x3c 
	strh r0, [r7,#0x10]
	b locret_8106236
loc_810622A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106236
	mov r0, #4
	strh r0, [r7]
locret_8106236:
	pop {pc}
.endfunc // sub_8106208

.func
.thumb_func
sub_8106238:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810625C
	mov r0, #4
	strb r0, [r7,#1]
	bl object_canMove
	beq loc_810626A
	mov r0, #0x15
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	mov r0, #4
	strh r0, [r7,#0x10]
	b locret_8106272
loc_810625C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106272
	mov r0, #8
	strh r0, [r7]
	b locret_8106272
loc_810626A:
	mov r0, #0x14
	strb r0, [r5,#0x10]
	bl loc_801171C
locret_8106272:
	pop {pc}
.endfunc // sub_8106238

.func
.thumb_func
sub_8106274:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810628E
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_801A074 // () -> void
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_810629A
loc_810628E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810629A
	mov r0, #0xc
	strh r0, [r7]
locret_810629A:
	pop {pc}
.endfunc // sub_8106274

.func
.thumb_func
sub_810629C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81062C4
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xd]
	bl sub_8106718
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_81062EC
loc_81062C4:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_81062E0
	mov r0, #0
	ldrb r1, [r5,#0x13]
	sub r1, #1
	ldr r2, off_81062F0 // =byte_81062F4 
	ldrb r1, [r2,r1]
	mov r2, #0x23 
	mov r3, #0
	bl object_highlightPanelRegion
loc_81062E0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81062EC
	mov r0, #0x10
	strh r0, [r7]
locret_81062EC:
	pop {pc}
	.byte 0, 0
off_81062F0: .word byte_81062F4
byte_81062F4: .byte 0x1, 0x1, 0x3, 0x0
.endfunc // sub_810629C

.func
.thumb_func
sub_81062F8:
	push {r4,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8106346
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x1d
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x17]
	eor r0, r1
	ldrb r1, [r7,#0xd]
	eor r0, r1
	bl sub_8002F5C
	mov r0, #0
	str r0, [r5,#0x3c]
	ldrb r0, [r7,#0xd]
	bl sub_8106774
	bl sub_81067D0
	mov r0, #3
	ldrh r1, [r7,#0x10]
	bl sub_80302A8
	mov r0, #0xc8
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r7,#0xd]
	tst r0, r0
	beq locret_810637E
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_810637E
	bl sub_80E8FB0
	b locret_810637E
loc_8106346:
	ldrb r4, [r5,#0x12]
	ldr r0, [r5,#0x40]
	ldr r1, [r5,#0x34]
	add r1, r1, r0
	str r1, [r5,#0x34]
	bl sub_800E2AC
	bl sub_801A04C
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_8106362
	bl sub_81067D0
loc_8106362:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810637E
	ldrb r0, [r7,#0xd]
	add r0, #1
	strb r0, [r7,#0xd]
	cmp r0, #1
	bgt loc_810637A
	mov r0, #8
	strh r0, [r7]
	b locret_810637E
loc_810637A:
	mov r0, #0x14
	strh r0, [r7]
locret_810637E:
	pop {r4,pc}
.endfunc // sub_81062F8

.func
.thumb_func
sub_8106380:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8106396
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xff
	strh r0, [r5,#0x3e]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_81063A2
loc_8106396:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81063A2
	mov r0, #0x18
	strh r0, [r7]
locret_81063A2:
	pop {pc}
.endfunc // sub_8106380

.func
.thumb_func
sub_81063A4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81063E6
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x16
	strb r0, [r5,#0x10]
	bl sub_800E456 // () -> int
	bl sub_8002F5C
	mov r0, #1
	bl sub_801A07C
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	mov r0, #0
	strh r0, [r5,#0x3e]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #4
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_81063F2
	bl sub_80E8FC8
	b locret_81063F2
loc_81063E6:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81063F2
	mov r0, #0x1c
	strh r0, [r7]
locret_81063F2:
	pop {pc}
.endfunc // sub_81063A4

.func
.thumb_func
sub_81063F4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810640A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x14
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8106416
loc_810640A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106416
	bl loc_801171C
locret_8106416:
	pop {pc}
.endfunc // sub_81063F4

.func
.thumb_func
sub_8106418:
	push {r6,r7,lr}
	sub sp, sp, #0x20
	str r2, [sp]
	str r3, [sp,#4]
	mov r4, #1
	mov r6, #0
loc_8106424:
	ldrb r0, [r5,#0x16]
	mov r1, #3
	mul r0, r1
	add r0, r0, r4
	ldrb r1, [r5,#0x13]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	add r7, sp, #8
	add r7, r7, r6
	bl sub_800CF14
	add r6, r6, r0
	add r4, #1
	cmp r4, #3
	ble loc_8106424
	tst r6, r6
	beq loc_810645A
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_810645C
loc_810645A:
	mov r0, #0
loc_810645C:
	add sp, sp, #0x20
	pop {r6,r7,pc}
.endfunc // sub_8106418

.func
.thumb_func
sub_8106460:
	push {r4,r6,lr}
	sub sp, sp, #8
	ldrb r6, [r0,#0x13]
	str r2, [sp]
	str r3, [sp,#4]
	mov r4, #3
	ldrb r0, [r5,#0x16]
	tst r0, r0
	beq loc_8106474
	mov r4, #4
loc_8106474:
	add r0, r4, #0
	add r1, r6, #0
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_8106460

	tst r0, r0
	pop {r0,r1}
	bne loc_810649A
	bl sub_800E2C0
	neg r0, r0
	add r4, r4, r0
	cmp r4, #1
	blt loc_8106498
	cmp r4, #6
	ble loc_8106474
loc_8106498:
	mov r0, #0
loc_810649A:
	add sp, sp, #8
	pop {r4,r6,pc}
.func
.thumb_func
sub_810649E:
	push {lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_81064BC // =loc_81064C0 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_810649E

	tst r0, r0
	pop {r0,r1}
	bne locret_81064BA
	mov r0, #0
locret_81064BA:
	pop {pc}
off_81064BC: .word loc_81064C0
loc_81064C0:
	lsl r2, r0, #8
	lsl r5, r0, #8
	push {lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_81064D4 // =loc_81064D8 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	pop {pc}
off_81064D4: .word loc_81064D8
loc_81064D8:
	lsl r2, r0, #8
	lsl r5, r0, #8
	push {lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_81064EC // =byte_81064F0 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	pop {pc}
off_81064EC: .word byte_81064F0
byte_81064F0: .byte 0x3, 0x2, 0x4, 0x2
.func
.thumb_func
sub_81064F4:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldr r3, [r7,#0x2c]
	ldrb r2, [r3,#0x12]
	ldrb r3, [r3,#0x13]
	cmp r0, r2
	bne loc_810650A
	cmp r1, r3
	beq loc_8106526
loc_810650A:
	add r0, r2, #0
	add r1, r3, #0
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_8106568 // =dword_810656C 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne loc_8106564
loc_8106526:
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_801BB1C
.endfunc // sub_81064F4

	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_810657C // =dword_8106580 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	add r6, r7, #0
	add r7, sp, #0
	bl object_getPanelsExceptCurrentFilterred
	add r7, r6, #0
	add r6, r0, #0
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_801BB46
	tst r6, r6
	beq loc_8106564
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_8106564:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
off_8106568: .word dword_810656C
dword_810656C: .word 0x10020, 0x0
	.word 0x10000, 0x20
off_810657C: .word dword_8106580
dword_8106580: .word 0x10020, 0x80, 0x10000, 0xA0
.func
.thumb_func
sub_8106590:
	push {r4,r6,r7,lr}
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldrb r2, [r7,#2]
	ldrb r4, [r7,#3]
	mov r3, #0
	lsl r3, r3, #8
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80DCC70
	pop {r4,r6,r7,pc}
.endfunc // sub_8106590

.func
.thumb_func
sub_81065A8:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	ldrb r0, [r7,#0xd]
	ldrb r1, [r7,#0xe]
	cmp r0, r1
	bne loc_81065DC
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_81065DC
	mov r4, #0
loc_81065C8:
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #1
	add r2, r2, r4
	ldr r3, off_8106658 // =byte_810665C 
	ldrb r2, [r3,r2]
	cmp r0, r2
	beq loc_810663E
	add r4, #1
	cmp r4, #1
	ble loc_81065C8
loc_81065DC:
	mov r4, #0
	mov r6, #0
loc_81065E0:
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	add r0, r0, r4
	ldr r1, off_8106658 // =byte_810665C 
	ldrb r0, [r1,r0]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_8106644 // =dword_8106648 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	add r1, r7, #0
	add r7, sp, #0
	add r7, r7, r6
	push {r1}
	bl sub_800CFDC
	pop {r1}
	add r7, r1, #0
	add r6, r6, r0
	add r4, #1
	cmp r4, #1
	ble loc_81065E0
	mov r0, #0
	tst r6, r6
	beq loc_810663E
	add r0, sp, #0
	add r1, r6, #0
	add r2, r6, #0
	bl sub_8000C72
	mov r4, #0
loc_8106620:
	add r0, sp, #0
	ldrb r0, [r0,r4]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	ldrb r2, [r7,#0x16]
	ldrb r3, [r7,#0x17]
	cmp r0, r2
	bne loc_810663E
	cmp r1, r3
	bne loc_810663E
	add r4, #1
	cmp r4, r6
	blt loc_8106620
	mov r0, #0
loc_810663E:
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_8106644: .word dword_8106648
dword_8106648: .word 0x10020, 0x0
	.word 0x10000, 0x20
off_8106658: .word byte_810665C
byte_810665C: .byte 0x6, 0x5, 0x1, 0x2
.endfunc // sub_81065A8

.func
.thumb_func
sub_8106660:
	push {r6,lr}
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldrb r2, [r7,#2]
	ldr r6, [r7,#8]
	bl sub_80DCDD4
	pop {r6,pc}
.endfunc // sub_8106660

.func
.thumb_func
sub_8106670:
	push {lr}
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_8106688 // =byte_810668C 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	mov r2, #0x11
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
	pop {pc}
off_8106688: .word byte_810668C
byte_810668C: .byte 0x5, 0x2, 0x2, 0x2
.endfunc // sub_8106670

.func
.thumb_func
sub_8106690:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #1
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	mov r4, #1
	mov r6, #0xb
	lsl r6, r6, #8
	orr r4, r6
	ldrb r6, [r7,#0xc]
	lsl r6, r6, #0x10
	orr r4, r6
	mov r6, #1
	lsl r6, r6, #0x18
	orr r4, r6
	ldr r6, [r7,#8]
	bl sub_80D5718
	pop {r4,r6,pc}
.endfunc // sub_8106690

.func
.thumb_func
sub_81066C0:
	push {r4,r6,lr}
	mov r6, #1
loc_81066C4:
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #1
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	add r1, r6, #0
	ldrb r4, [r7,#0xc]
	ldrb r3, [r7,#0xd]
	mul r4, r3
	mov r3, #0xc
	lsl r3, r3, #8
	orr r4, r3
	bl sub_80DCEC6
	add r6, #1
	cmp r6, #3
	ble loc_81066C4
	pop {r4,r6,pc}
.endfunc // sub_81066C0

.func
.thumb_func
sub_81066EA:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	mov r1, #1
	mul r0, r1
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldr r1, [r7,#0x2c]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	bne loc_810670A
	mov r1, #2
loc_810670A:
	ldrb r2, [r7,#2]
	mov r3, #0
	ldrb r4, [r7,#3]
	ldr r6, [r7,#8]
	bl sub_80DD03A
	pop {r4,r6,pc}
.endfunc // sub_81066EA

.func
.thumb_func
sub_8106718:
	push {r4,r6,lr}
	add r6, r0, #0
	bl sub_8001532
	mov r4, #1
	and r4, r0
	ldrb r1, [r5,#0x16]
	lsl r1, r1, #1
	add r0, r6, r1
	ldr r1, off_8106758 // =dword_810675C 
	ldrb r0, [r1,r0]
	tst r6, r6
	bne loc_810674C
	ldr r1, [r7,#0x2c]
	ldrb r1, [r1,#0x13]
	cmp r1, #1
	blt loc_810673E
	cmp r1, #3
	ble loc_8106740
loc_810673E:
	mov r1, #2
loc_8106740:
	sub r1, #1
	lsl r1, r1, #1
	add r1, r1, r4
	ldr r2, off_8106760 // =dword_8106764 
	ldrb r1, [r2,r1]
	b locret_8106754
loc_810674C:
	ldrb r1, [r5,#0x13]
	sub r1, #1
	ldr r2, off_810676C // =byte_8106770 
	ldrb r1, [r2,r1]
locret_8106754:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_8106758: .word dword_810675C
dword_810675C: .word 0x70700
off_8106760: .word dword_8106764
dword_8106764: .word 0x3020202, 0x303
off_810676C: .word byte_8106770
byte_8106770: .byte 0x3, 0x3, 0x2, 0x0
.endfunc // sub_8106718

.func
.thumb_func
sub_8106774:
	push {lr}
	push {r0}
	bl object_getFlipDirection_800E2CA // () -> int
	add r3, r0, #0
	pop {r0}
	tst r0, r0
	beq loc_8106786
	neg r3, r3
loc_8106786:
	ldrb r1, [r7,#3]
	lsl r1, r1, #2
	ldr r2, off_81067B4 // =dword_81067B8 
	ldr r1, [r2,r1]
	mul r3, r1
	str r3, [r5,#0x40]
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #1
	add r2, r2, r0
	ldr r3, off_81067C8 // =byte_81067CC 
	ldrb r0, [r3,r2]
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	cmp r0, #0
	bge loc_81067A6
	neg r0, r0
loc_81067A6:
	mov r2, #0x28 
	lsl r2, r2, #0x10
	mul r0, r2
	svc 6
	strh r0, [r7,#0x10]
	pop {pc}
	.balign 4, 0x00
off_81067B4: .word dword_81067B8
dword_81067B8: .word 0xB0000, 0xB0000, 0xB0000, 0xB0000
off_81067C8: .word byte_81067CC
byte_81067CC: .byte 0x7, 0x0, 0x0, 0x7
.endfunc // sub_8106774

.func
.thumb_func
sub_81067D0:
	push {r4,r6,r7,lr}
	mov r1, #1
	ldr r0, [r5,#0x40]
	cmp r0, #0
	bgt loc_81067DC
	neg r1, r1
loc_81067DC:
	ldrb r0, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_81067F4 // =0x57050618 
	ldr r6, [r7,#8]
	ldr r7, dword_81067F8 // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
dword_81067F4: .word 0x57050618
dword_81067F8: .word 0x3
dword_81067FC: .word 0x1010B00, 0x1000017, 0x3000384, 0x708000A, 0xA0301
	.word 0x3020708, 0x708000A, 0xA0303, 0x3040708, 0x708000A
	.word 0xA0305, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x8016381
	.word 0x8017889, 0x80170C5, 0x80174FF, 0x80175B9, 0x80178B7
	.word 0x8017689, 0x8017769, 0x8106925, 0x8106DED, 0x8106ECF
	.word 0x81070A9, 0x8107185, 0x81073F7, 0x8107751, 0x6DAFB5C0
	.word 0x19F62680, 0x490337A0, 0x58097830, 0x470846FE, 0xBDC0
	.word 0x8106940, 0x810694D, 0x8106965, 0x81069B5, 0xF709B500
	.word 0x4902FA72, 0x70305C08, 0xBD00, 0x8106960, 0x8080404
	.word 0xF000B550, 0x4200F87B, 0x7930D11C, 0xDA032805, 0x31017931
	.word 0xE0187131, 0x71302000, 0x28037970, 0x7970DA0B, 0x71703001
	.word 0xFDD1F6FA, 0x4008210F, 0xDB072808, 0xF968F000, 0x2000E009
	.word 0xF0007170, 0xE004F934, 0xF944F000, 0xF000E001, 0xBD50F903
	.word 0xF000B550, 0x4200F853, 0x7930D114, 0xDA032805, 0x31017931
	.word 0xE0217131, 0x71302000, 0x28037970, 0x7971DA0B, 0x71713101
	.word 0xFDA9F6FA, 0x4008210F, 0xDA0D280F, 0xF924F000, 0x2000E012
	.word 0x79B07170, 0x40412101, 0x420071B1, 0xF000D005, 0xE007F955
	.word 0xF903F000, 0xF000E004, 0xE001F92F, 0xF8D2F000, 0xB500BD50
	.word 0xB500BD00, 0xB510BD00
.endfunc // sub_81067D0

	pop {r4,pc}
.func
.thumb_func
sub_8106A22:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #1
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	ldr r2, [r5,#0x58]
	add r2, #0xa0
	ldrb r0, [r2,#0x16]
	ldrb r1, [r2,#0x17]
	bl sub_801BB46
.endfunc // sub_8106A22

	pop {pc}
	push {r4,lr}
	mov r4, #0
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	push {r5}
	add r5, r0, #0
	bl object_getFlag // () -> int
	pop {r5}
	ldr r1, dword_8106DD0 // =0x800 
	tst r0, r1
	beq loc_8106A80
	mov r4, #1
loc_8106A80:
	add r0, r4, #0
	pop {r4,pc}
.func
.thumb_func
sub_8106A84:
	push {r4,lr}
	ldr r0, off_8106AA0 // =byte_8106AA4 
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_8106DD4 // =0xa000 
	tst r0, r1
	beq loc_8106A9A
	add r4, #0x10
loc_8106A9A:
	add r0, r4, #0
	pop {r4,pc}
	.byte 0, 0
off_8106AA0: .word byte_8106AA4
byte_8106AA4: .byte 0x10, 0x10, 0x10, 0x10
.endfunc // sub_8106A84

.func
.thumb_func
sub_8106AA8:
	push {lr}
	ldr r0, off_8106AB4 // =off_8106AB8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8106AB4: .word off_8106AB8
off_8106AB8: .word aSa+4
.endfunc // sub_8106AA8

.func
.thumb_func
sub_8106ABC:
	push {lr}
	ldr r0, off_8106AC8 // =off_8106ACC 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8106AC8: .word off_8106ACC
off_8106ACC: .word aSa+4
.endfunc // sub_8106ABC

.func
.thumb_func
sub_8106AD0:
	push {lr}
	ldr r0, off_8106ADC // =byte_8106AE0 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8106ADC: .word byte_8106AE0
byte_8106AE0: .byte 0x14, 0x14, 0x10, 0x10
.endfunc // sub_8106AD0

.func
.thumb_func
sub_8106AE4:
	push {lr}
	ldr r0, off_8106AF0 // =loc_8106AF4 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_8106AF0: .word loc_8106AF4
.endfunc // sub_8106AE4

loc_8106AF4:
	asr r4, r2, #0x10
	asr r0, r2, #0x20
	push {lr}
	ldr r0, off_8106B04 // =byte_8106B08 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8106B04: .word byte_8106B08
byte_8106B08: .byte 0x3C, 0x32, 0x28, 0x1E
.func
.thumb_func
sub_8106B0C:
	push {lr}
	ldr r0, off_8106B18 // =byte_8106B1C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8106B18: .word byte_8106B1C
byte_8106B1C: .byte 0x14, 0x14, 0x10, 0x10
.endfunc // sub_8106B0C

.func
.thumb_func
sub_8106B20:
	push {lr}
	ldr r0, off_8106B38 // =byte_8106B3C 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8106B38 // =byte_8106B3C 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_8106B38: .word byte_8106B3C
byte_8106B3C: .byte 0x14, 0x14, 0x10, 0x10, 0xC, 0xC, 0x8, 0x8
.endfunc // sub_8106B20

.func
.thumb_func
sub_8106B44:
	push {lr}
	ldr r0, off_8106B50 // =off_8106B54 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_8106B50: .word off_8106B54
off_8106B54: .word dword_8080AC4+0x148
.endfunc // sub_8106B44

.func
.thumb_func
sub_8106B58:
	push {lr}
	ldr r0, off_8106B70 // =byte_8106B74 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8106B70 // =byte_8106B74 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_8106B70: .word byte_8106B74
byte_8106B74: .byte 0x18, 0x18, 0x10, 0x10, 0x1E, 0x1E, 0x1E, 0x1E
.endfunc // sub_8106B58

.func
.thumb_func
sub_8106B7C:
	push {lr}
	ldr r0, off_8106B88 // =byte_8106B8C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8106B88: .word byte_8106B8C
byte_8106B8C: .byte 0x1E, 0x1E, 0x1E, 0x1E
.endfunc // sub_8106B7C

.func
.thumb_func
sub_8106B90:
	push {lr}
	ldr r0, off_8106B9C // =byte_8106BA0 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8106B9C: .word byte_8106BA0
byte_8106BA0: .byte 0x14, 0x14, 0x14, 0x14
.endfunc // sub_8106B90

.func
.thumb_func
sub_8106BA4:
	push {lr}
	ldr r0, off_8106BB0 // =loc_8106BB4 
	bl sub_800FE28
	pop {pc}
	.byte 0, 0
off_8106BB0: .word loc_8106BB4
.endfunc // sub_8106BA4

loc_8106BB4:
	str r0, [r2,r1]
	str r0, [r2,r1]
	push {r4,lr}
	ldr r0, off_8106DD8 // =sub_81078C2+1 
	str r0, [r7,#0x28]
	bl sub_8106A84
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_8106CEA
	ldr r0, off_8106DDC // =sub_8107914+1 
	str r0, [r7,#0x28]
	bl sub_8106AA8
	strh r0, [r7,#0x18]
	bl sub_8106ABC
	strb r0, [r7,#0xc]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #3
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_8106CEA
	bl sub_8106AD0
	strh r0, [r7,#0x18]
	bl sub_8106AE4
	strb r0, [r7,#0xc]
	mov r0, #0xb
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_8106CEA
	ldr r0, off_8106DE0 // =sub_8107970+1 
	str r0, [r7,#0x28]
	bl sub_8106B0C
	strh r0, [r7,#0x18]
	bl sub_8106B20
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #3
	bl sub_8106CEA
	mov r0, #4
	bl sub_8106D18
	str r0, [r7,#0x30]
	ldr r0, off_8106DE4 // =sub_8107970+1 
	str r0, [r7,#0x28]
	bl sub_8106B44
	strh r0, [r7,#0x18]
	bl sub_8106B58
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xd
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #1
	strb r0, [r7,#2]
	mov r0, #5
	bl sub_8106CEA
	ldr r0, off_8106DE8 // =sub_8107994+1 
	str r0, [r7,#0x28]
	bl sub_8106B7C
	strh r0, [r7,#0x18]
	bl sub_8106B90
	strb r0, [r7,#0xc]
	bl sub_8106BA4
	strb r0, [r7,#0xd]
	mov r0, #0xe
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xe
	bl sub_8011680
	pop {r4,pc}
.func
.thumb_func
sub_8106CEA:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_8106D40 // =dword_8106D58 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_8106D88 // =dword_8106DA0 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_8106CEA

.func
.thumb_func
sub_8106D18:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_8106D40 // =dword_8106D58 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_8106D88 // =dword_8106DA0 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
	.byte 0, 0
off_8106D40: .word dword_8106D58
	.word dword_8106D60
	.word dword_8106D68
	.word dword_8106D70
	.word dword_8106D78
	.word dword_8106D80
dword_8106D58: .word 0xA000A
	.word 0xA000A
dword_8106D60: .word 0x78001E, 0x780078
dword_8106D68: .word 0xF0003C, 0xF000F0
dword_8106D70: .word 0x78001E, 0x780078
dword_8106D78: .word 0x140005, 0x140014
dword_8106D80: .word 0x12C0096, 0x12C012C
off_8106D88: .word dword_8106DA0
	.word dword_8106DA8
	.word dword_8106DB0
	.word dword_8106DB8
	.word dword_8106DC0
	.word dword_8106DC8
dword_8106DA0: .word 0xA000A
	.word 0xA000A
dword_8106DA8: .word 0xA000A
	.word 0xA000A
dword_8106DB0: .word 0xA000A
	.word 0xA000A
dword_8106DB8: .word 0xA000A
	.word 0xA000A
dword_8106DC0: .word 0xA000A
	.word 0xA000A
dword_8106DC8: .word 0xA000A
	.word 0xA000A
dword_8106DD0: .word 0x800
dword_8106DD4: .word 0xA000
off_8106DD8: .word sub_81078C2+1
off_8106DDC: .word sub_8107914+1
off_8106DE0: .word sub_8107970+1
off_8106DE4: .word sub_8107970+1
off_8106DE8: .word sub_8107994+1
.endfunc // sub_8106D18

	push {r7,lr}
	ldr r1, off_8106DFC // =off_8106E00 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_8106DFC: .word off_8106E00
off_8106E00: .word sub_8106E0C+1
	.word sub_8106E68+1
	.word sub_8106E94+1
.func
.thumb_func
sub_8106E0C:
	push {lr}
	bl object_canMove
	beq loc_8106E48
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8106E54 // =dword_8106E58 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_8106E48
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_8106E50
loc_8106E48:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_8106E50:
	pop {pc}
	.balign 4, 0x00
off_8106E54: .word dword_8106E58
dword_8106E58: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.endfunc // sub_8106E0C

.func
.thumb_func
sub_8106E68:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106E92
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_8106E92:
	pop {pc}
.endfunc // sub_8106E68

.func
.thumb_func
sub_8106E94:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8106EC0
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106ECC
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_8106ECC
loc_8106EC0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106ECC
	bl sub_8011714
locret_8106ECC:
	pop {pc}
.endfunc // sub_8106E94

	push {r7,lr}
	ldr r1, off_8106EDC // =off_8106EE0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8106EDC: .word off_8106EE0
off_8106EE0: .word loc_8106EFC+1
	.word sub_8106F5C+1
	.word sub_8106F84+1
	.word sub_8106FA6+1
	.word sub_8106FE6+1
	.word sub_8107030+1
	.word sub_8107050+1
loc_8106EFC:
	push {lr}
	bl object_canMove
	beq loc_8106F46
	ldr r1, off_8106F50 // =dword_8106F54 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_8106F58 - 0x8106f54)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_8106F46
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r7,#0x30]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_8106F4E
loc_8106F46:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_8106F4E:
	pop {pc}
off_8106F50: .word dword_8106F54
dword_8106F54: .word 0x10000
dword_8106F58: .word 0xF880080
.func
.thumb_func
sub_8106F5C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106F82
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_8106F82:
	pop {pc}
.endfunc // sub_8106F5C

.func
.thumb_func
sub_8106F84:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106FA4
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_8106FA4:
	pop {pc}
.endfunc // sub_8106F84

.func
.thumb_func
sub_8106FA6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8106FBC
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8106FE4
loc_8106FBC:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8106FD8
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #4
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_8106FD8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8106FE4
	mov r0, #0x10
	strh r0, [r7]
locret_8106FE4:
	pop {pc}
.endfunc // sub_8106FA6

.func
.thumb_func
sub_8106FE6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8107022
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #5
	strb r0, [r5,#0x10]
	mov r0, #0xa
	bl object_setCounterTime
	mov r0, #0xb0
	bl sound_play // () -> void
	mov r0, #0x15
	strh r0, [r7,#0x10]
	bl sub_81079DC
	push {r4,r7}
	mov r4, #0x19
	mov r3, #0xb
	lsl r3, r3, #8
	orr r4, r3
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r4,r7}
	str r0, [r7,#0x30]
	b locret_810702E
loc_8107022:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810702E
	mov r0, #0x14
	strh r0, [r7]
locret_810702E:
	pop {pc}
.endfunc // sub_8106FE6

.func
.thumb_func
sub_8107030:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8107042
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_810704E
loc_8107042:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810704E
	mov r0, #0x18
	strh r0, [r7]
locret_810704E:
	pop {pc}
.endfunc // sub_8107030

.func
.thumb_func
sub_8107050:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810709A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xd
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_81070A6
	bl sub_80B8E58
	b locret_81070A6
loc_810709A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81070A6
	bl sub_8011714
locret_81070A6:
	pop {pc}
.endfunc // sub_8107050

	push {r7,lr}
	ldr r1, off_81070B8 // =off_81070BC 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_81070B8: .word off_81070BC
off_81070BC: .word sub_81070C8+1
	.word sub_81070EC+1
	.word sub_8107156+1
.func
.thumb_func
sub_81070C8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81070DE
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	str r0, [r7,#0x30]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_81070EA
loc_81070DE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81070EA
	mov r0, #4
	strh r0, [r7]
locret_81070EA:
	pop {pc}
.endfunc // sub_81070C8

.func
.thumb_func
sub_81070EC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8107148
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xe
	strb r0, [r5,#0x10]
	push {r4,r7}
	mov r4, #6
	mov r3, #0xb
	lsl r3, r3, #8
	orr r4, r3
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r4,r7}
	str r0, [r7,#0x30]
	mov r0, #0x18
	bl object_setCounterTime
	push {r4,r6,r7}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0xa
	lsl r3, r3, #0x10
	mov r4, #0
	mov r6, #3
	lsl r6, r6, #8
	orr r4, r6
	mov r6, #0x10
	lsl r6, r6, #0x10
	orr r4, r6
	ldr r6, [r7,#8]
	mov r7, #0
	bl sub_80C954C
	pop {r4,r6,r7}
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_8107154
loc_8107148:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8107154
	mov r0, #8
	strh r0, [r7]
locret_8107154:
	pop {pc}
.endfunc // sub_81070EC

.func
.thumb_func
sub_8107156:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8107176
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x30]
	tst r0, r0
	beq locret_8107182
	bl sub_80B8E58
	b locret_8107182
loc_8107176:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8107182
	bl sub_8011714
locret_8107182:
	pop {pc}
.endfunc // sub_8107156

	push {r7,lr}
	ldr r1, off_8107194 // =off_8107198 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_8107194: .word off_8107198
off_8107198: .word loc_81071C0+1
	.word sub_810721C+1
	.word sub_8107244+1
	.word sub_8107258+1
	.word sub_8107278+1
	.word sub_81072B8+1
	.word sub_81072FE+1
	.word sub_810733E+1
	.word sub_8107388+1
	.word sub_81073A8+1
loc_81071C0:
	push {lr}
	bl object_canMove
	beq loc_8107206
	ldr r1, off_8107210 // =dword_8107214 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_8107218 - 0x8107214)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_8107206
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_810720E
loc_8107206:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_810720E:
	pop {pc}
off_8107210: .word dword_8107214
dword_8107214: .word 0x10000
dword_8107218: .word 0xF880080
.func
.thumb_func
sub_810721C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8107242
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_8107242:
	pop {pc}
.endfunc // sub_810721C

.func
.thumb_func
sub_8107244:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8107256
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xc
	strh r0, [r7]
locret_8107256:
	pop {pc}
.endfunc // sub_8107244

.func
.thumb_func
sub_8107258:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810726A
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_8107276
loc_810726A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8107276
	mov r0, #0x10
	strh r0, [r7]
locret_8107276:
	pop {pc}
.endfunc // sub_8107258

.func
.thumb_func
sub_8107278:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810728E
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_81072B6
loc_810728E:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_81072AA
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #2
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_81072AA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81072B6
	mov r0, #0x14
	strh r0, [r7]
locret_81072B6:
	pop {pc}
.endfunc // sub_8107278

.func
.thumb_func
sub_81072B8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81072E2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0x18
	bl object_setCounterTime
	mov r0, #0xc6
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	bl sub_8107A30
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_81072FC
loc_81072E2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x11
	beq loc_81072F6
	cmp r0, #0
	bgt locret_81072FC
	mov r0, #0x18
	strh r0, [r7]
	b locret_81072FC
loc_81072F6:
	mov r0, #0
	bl sub_8107A00
locret_81072FC:
	pop {pc}
.endfunc // sub_81072B8

.func
.thumb_func
sub_81072FE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8107314
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_810733C
loc_8107314:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8107330
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #4
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_8107330:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810733C
	mov r0, #0x1c
	strh r0, [r7]
locret_810733C:
	pop {pc}
.endfunc // sub_81072FE

.func
.thumb_func
sub_810733E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810736C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #0x18
	bl object_setCounterTime
	mov r0, #0xc7
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #1
	bl sub_8107A30
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_8107386
loc_810736C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x11
	beq loc_8107380
	cmp r0, #0
	bgt locret_8107386
	mov r0, #0x20 
	strh r0, [r7]
	b locret_8107386
loc_8107380:
	mov r0, #1
	bl sub_8107A00
locret_8107386:
	pop {pc}
.endfunc // sub_810733E

.func
.thumb_func
sub_8107388:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810739A
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_81073A6
loc_810739A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81073A6
	mov r0, #0x24 
	strh r0, [r7]
locret_81073A6:
	pop {pc}
.endfunc // sub_8107388

.func
.thumb_func
sub_81073A8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81073E8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xd
	strh r0, [r7,#0x10]
	b locret_81073F4
loc_81073E8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81073F4
	bl sub_8011714
locret_81073F4:
	pop {pc}
.endfunc // sub_81073A8

	push {r7,lr}
	ldr r1, off_8107404 // =off_8107408 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8107404: .word off_8107408
off_8107408: .word loc_8107438+1
	.word sub_810749C+1
	.word sub_81074C4+1
	.word sub_81074D8+1
	.word sub_8107518+1
	.word sub_8107568+1
	.word sub_81075E8+1
	.word sub_8107610+1
	.word sub_8107624+1
	.word sub_8107644+1
	.word sub_81076CE+1
	.word sub_81076EE+1
loc_8107438:
	push {lr}
	bl object_canMove
	beq loc_8107484
	ldr r1, off_8107490 // =dword_8107494 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_8107498 - 0x8107494)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_8107484
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r7,#0x34]
	str r0, [r7,#0x38]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_810748C
loc_8107484:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_810748C:
	pop {pc}
	.byte 0, 0
off_8107490: .word dword_8107494
dword_8107494: .word 0x10000
dword_8107498: .word 0xF880080
.func
.thumb_func
sub_810749C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81074C2
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_81074C2:
	pop {pc}
.endfunc // sub_810749C

.func
.thumb_func
sub_81074C4:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81074D6
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0xc
	strh r0, [r7]
locret_81074D6:
	pop {pc}
.endfunc // sub_81074C4

.func
.thumb_func
sub_81074D8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81074EE
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8107516
loc_81074EE:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_810750A
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #2
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_810750A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8107516
	mov r0, #0x10
	strh r0, [r7]
locret_8107516:
	pop {pc}
.endfunc // sub_81074D8

.func
.thumb_func
sub_8107518:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810753C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0xc6
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	bl sub_8107A30
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_8107566
loc_810753C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x11
	beq loc_810755C
	cmp r0, #0
	bgt locret_8107566
	ldrb r0, [r7,#0xe]
	tst r0, r0
	beq loc_8107556
	mov r0, #0x14
	strh r0, [r7]
	b locret_8107566
loc_8107556:
	mov r0, #0x28 
	strh r0, [r7]
	b locret_8107566
loc_810755C:
	bl sub_8107A64
	bl sub_8107A88
	strb r0, [r7,#0xe]
locret_8107566:
	pop {pc}
.endfunc // sub_8107518

.func
.thumb_func
sub_8107568:
	push {lr}
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_801BB46
.endfunc // sub_8107568

	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	bl object_canMove
	beq loc_81075D6
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r1, #3
	mul r0, r1
	ldr r1, [r7,#0x2c]
	ldrb r1, [r1,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x14]
	ldrb r3, [r5,#0x15]
	cmp r0, r2
	bne loc_81075A4
	cmp r1, r3
	beq loc_81075B6
loc_81075A4:
	ldr r3, off_81075DC // =dword_81075E0 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_81075E4 - 0x81075e0)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_81075D6
loc_81075B6:
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #0x18
	strh r0, [r7]
	b locret_81075DA
loc_81075D6:
	mov r0, #0x28 
	strh r0, [r7]
locret_81075DA:
	pop {pc}
off_81075DC: .word dword_81075E0
dword_81075E0: .word 0x10000
dword_81075E4: .word 0xF880080
.func
.thumb_func
sub_81075E8:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810760E
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #0x1c
	strh r0, [r7]
locret_810760E:
	pop {pc}
.endfunc // sub_81075E8

.func
.thumb_func
sub_8107610:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8107622
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x20 
	strh r0, [r7]
locret_8107622:
	pop {pc}
.endfunc // sub_8107610

.func
.thumb_func
sub_8107624:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8107636
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	b locret_8107642
loc_8107636:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8107642
	mov r0, #0x24 
	strh r0, [r7]
locret_8107642:
	pop {pc}
.endfunc // sub_8107624

.func
.thumb_func
sub_8107644:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810768C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xe
	strb r0, [r5,#0x10]
	bl sub_8107B06
	push {r4,r7}
	mov r4, #6
	mov r3, #0xb
	lsl r3, r3, #8
	orr r4, r3
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r4,r7}
	str r0, [r7,#0x34]
	push {r4,r7}
	mov r4, #5
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r4,r7}
	str r0, [r7,#0x38]
	mov r0, #0xae
	bl sound_play // () -> void
	mov r0, #0x5a 
	strh r0, [r7,#0x10]
	mov r0, #5
	strh r0, [r7,#0x12]
loc_810768C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_810769A
	mov r0, #0x28 
	strh r0, [r7]
	b locret_81076CC
loc_810769A:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt locret_81076CC
	mov r0, #5
	strh r0, [r7,#0x12]
	mov r0, #0xe
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sub_8107B06
	mov r0, #0xae
	bl sound_play // () -> void
	ldr r0, [r7,#0x34]
	tst r0, r0
	beq loc_81076C2
	bl sub_80B8E7C
loc_81076C2:
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq locret_81076CC
	bl sub_80B8E7C
locret_81076CC:
	pop {pc}
.endfunc // sub_8107644

.func
.thumb_func
sub_81076CE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81076E0
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_81076EC
loc_81076E0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81076EC
	mov r0, #0x2c 
	strh r0, [r7]
locret_81076EC:
	pop {pc}
.endfunc // sub_81076CE

.func
.thumb_func
sub_81076EE:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8107742
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xd
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x34]
	tst r0, r0
	beq loc_8107736
	bl sub_80B8E58
loc_8107736:
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq locret_810774E
	bl sub_80B8E58
	b locret_810774E
loc_8107742:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810774E
	bl sub_8011714
locret_810774E:
	pop {pc}
.endfunc // sub_81076EE

	push {r7,lr}
	ldr r1, off_8107760 // =off_8107764 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_8107760: .word off_8107764
off_8107764: .word loc_810777C+1
	.word sub_81077CC+1
	.word sub_81077F8+1
	.word sub_8107816+1
	.word sub_8107856+1
	.word sub_810789E+1
loc_810777C:
	push {lr}
	bl object_canMove
	beq loc_81077B6
	ldr r1, off_81077C0 // =dword_81077C4 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_81077C8 - 0x81077c4)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_81077B6
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_81077BE
loc_81077B6:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_81077BE:
	pop {pc}
off_81077C0: .word dword_81077C4
dword_81077C4: .word 0x10000
dword_81077C8: .word 0xF880080
.func
.thumb_func
sub_81077CC:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81077F6
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_81077F6:
	pop {pc}
.endfunc // sub_81077CC

.func
.thumb_func
sub_81077F8:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8107814
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_8107814:
	pop {pc}
.endfunc // sub_81077F8

.func
.thumb_func
sub_8107816:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810782C
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8107854
loc_810782C:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8107848
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0x1a
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_8107848:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8107854
	mov r0, #0x10
	strh r0, [r7]
locret_8107854:
	pop {pc}
.endfunc // sub_8107816

.func
.thumb_func
sub_8107856:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810787C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0x12
	strb r0, [r5,#0x10]
	bl sub_8107AB2
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0x10
	strh r0, [r7,#0x12]
	b locret_810789C
loc_810787C:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_8107890
	mov r0, #0x2c 
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0x10
	strh r0, [r7,#0x12]
loc_8107890:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810789C
	mov r0, #0x14
	strh r0, [r7]
locret_810789C:
	pop {pc}
.endfunc // sub_8107856

.func
.thumb_func
sub_810789E:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81078B4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_81078C0
loc_81078B4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81078C0
	bl sub_8011714
locret_81078C0:
	pop {pc}
.endfunc // sub_810789E

.func
.thumb_func
sub_81078C2:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x28
	str r2, [sp,#8]
	str r3, [sp,#0xc]
	ldrb r1, [r0,#0x12]
	ldrb r2, [r0,#0x13]
	str r1, [sp]
	str r2, [sp,#4]
	mov r4, #1
	mov r6, #0
loc_81078D6:
	ldrb r0, [r5,#0x12]
	cmp r0, r4
	beq loc_81078EE
	add r0, r4, #0
	ldr r1, [sp,#4]
	ldr r2, [sp,#8]
	ldr r3, [sp,#0xc]
	add r7, sp, #0x10
	add r7, r7, r6
	bl sub_800CF14
	add r6, r6, r0
loc_81078EE:
	add r4, #1
	cmp r4, #6
	ble loc_81078D6
	tst r6, r6
	beq loc_810790C
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0x10
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_8107910
loc_810790C:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
loc_8107910:
	add sp, sp, #0x28
	pop {r4,r6,r7,pc}
.endfunc // sub_81078C2

.func
.thumb_func
sub_8107914:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	add r4, r0, #0
	str r2, [sp]
	str r3, [sp,#4]
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldrb r1, [r4,#0x12]
	add r0, r0, r1
	ldrb r1, [r4,#0x13]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_8107914

	tst r0, r0
	pop {r0,r1}
	bne loc_810796C
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldrb r1, [r4,#0x12]
	add r0, r0, r1
	ldrb r1, [r4,#0x13]
	ldr r2, [sp]
	ldr r3, [sp,#4]
	mov r4, #5
	ldrb r6, [r5,#0x16]
	add r7, sp, #8
	bl sub_800D3FE
	add r6, r0, #0
	tst r6, r6
	beq loc_810796C
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_810796C:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_8107970:
	push {r4,lr}
	add r4, r0, #0
	push {r2,r3}
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	ldrb r1, [r4,#0x12]
	add r0, r0, r1
	ldrb r1, [r4,#0x13]
	pop {r2,r3}
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_8107970

	tst r0, r0
	pop {r0,r1}
	bne locret_8107992
	mov r0, #0
locret_8107992:
	pop {r4,pc}
.func
.thumb_func
sub_8107994:
	push {r4,r6,lr}
	add r4, r2, #0
	add r6, r3, #0
	ldrb r0, [r5,#0x16]
	mov r1, #2
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_81079C8 // =dword_81079CC 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	bl sub_800D086
.endfunc // sub_8107994

	tst r0, r0
	beq locret_81079C4
	push {r0,r1}
	add r2, r4, #0
	add r3, r6, #0
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	bne locret_81079C4
	mov r0, #0
locret_81079C4:
	pop {r4,r6,pc}
	.balign 4, 0x00
off_81079C8: .word dword_81079CC
dword_81079CC: .word 0x0
	.word 0x20, 0x20, 0x0
.func
.thumb_func
sub_81079DC:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_81079F8 // =0x7050104 
	ldr r6, [r7,#8]
	ldr r7, dword_81079FC // =0x3 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_81079F8: .word 0x7050104
dword_81079FC: .word 0x3
.endfunc // sub_81079DC

.func
.thumb_func
sub_8107A00:
	push {r4,r6,r7,lr}
	lsl r0, r0, #2
	ldr r1, off_8107A20 // =dword_8107A24 
	ldr r4, [r1,r0]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r6, [r7,#8]
	ldr r7, dword_8107A2C // =0x1 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
off_8107A20: .word dword_8107A24
dword_8107A24: .word 0x405FF02, 0x405FF04
dword_8107A2C: .word 0x1
.endfunc // sub_8107A00

.func
.thumb_func
sub_8107A30:
	push {r4,lr}
	ldr r1, off_8107A5C // =dword_8107A60 
	ldrb r4, [r1,r0]
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,pc}
	.balign 4, 0x00
off_8107A5C: .word dword_8107A60
dword_8107A60: .word 0x393A
.endfunc // sub_8107A30

.func
.thumb_func
sub_8107A64:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_8107A80 // =0x405ff02 
	ldr r6, [r7,#8]
	ldr r7, dword_8107A84 // =0x1001 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_8107A80: .word 0x405FF02
dword_8107A84: .word 0x1001
.endfunc // sub_8107A64

.func
.thumb_func
sub_8107A88:
	push {r4,r6,lr}
	mov r6, #0
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r1, r3
	bne loc_8107AAE
	add r2, r2, r4
	cmp r0, r2
	beq loc_8107AAC
	add r2, r2, r4
	cmp r0, r2
	bne loc_8107AAE
loc_8107AAC:
	mov r6, #1
loc_8107AAE:
	add r0, r6, #0
	pop {r4,r6,pc}
.endfunc // sub_8107A88

.func
.thumb_func
sub_8107AB2:
	push {r4,r6,lr}
	ldr r6, off_8107B20 // =off_8019B78 
	mov r0, #0x68 // (off_8019BE0 - 0x8019b78)
	ldr r6, [r6,r0]
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
loc_8107AC6:
	mov r2, #0
	ldrsb r2, [r6,r2]
	cmp r2, #0x7f
	beq locret_8107B04
	push {r0,r1,r4,r6}
	mul r2, r4
	add r0, r0, r2
	mov r2, #1
	ldrsb r2, [r6,r2]
	add r1, r1, r2
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_8107AFE
	ldrb r2, [r7,#2]
	mov r3, #0
	mov r4, #2
	ldrb r6, [r7,#0xd]
	lsl r6, r6, #8
	orr r4, r6
	mov r6, #4
	lsl r6, r6, #0x10
	orr r4, r6
	ldr r6, [r7,#8]
	bl sub_80D07A0
loc_8107AFE:
	pop {r0,r1,r4,r6}
	add r6, #2
	b loc_8107AC6
locret_8107B04:
	pop {r4,r6,pc}
.endfunc // sub_8107AB2

.func
.thumb_func
sub_8107B06:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r3, #0x10
	lsl r3, r3, #0x10
	mov r4, #0x1c
	ldr r6, [r7,#0x30]
	bl sub_80C4FFE
	pop {r4,r6,pc}
off_8107B20: .word off_8019B78
dword_8107B24: .word 0x1010C00, 0x1000018, 0x6000320, 0x640000A, 0xA0601
	.word 0x6020640, 0x640000A, 0xA0603, 0x6040640, 0x640000A
	.word 0xA0605, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x8016381
	.word 0x8017889, 0x80170C5, 0x80174FF, 0x80175B9, 0x80178B7
	.word 0x8017689, 0x8017769, 0x8107C4D, 0x810821D, 0x81082FF
	.word 0x81083C7, 0x81084C1, 0x810874B, 0x8108ABD, 0x6DAFB5C0
	.word 0x19F62680, 0x490337A0, 0x58097830, 0x470846FE, 0xBDC0
	.word 0x8107C68, 0x8107C7D, 0x8107C95, 0x8107CF1, 0x8107D63
	.word 0x8107DD5, 0xF708B500, 0x4902F8DA, 0x70305C08, 0xBD00
	.word 0x8107C90, 0xC0C0404, 0x7930B550, 0xDB182805, 0x71302000
	.word 0x210178B0, 0x70B14041, 0xD00D4200, 0x28027970, 0x7971DA05
	.word 0x71713101, 0xF9D9F000, 0x2000E00C, 0xF0007170, 0xE007F9C0
	.word 0xF9A4F000, 0x7931E004, 0x71313101, 0xF98EF000, 0x8408CE8
	.word 0x42888CA9, 0x2108DB05, 0x20007031, 0x20006070, 0xBD508070
	.word 0x7930B550, 0xDB232804, 0x71302000, 0x280479B0, 0x79B0DA19
	.word 0x71B03001, 0x210178B0, 0x70B14041, 0xD00D4200, 0x28027970
	.word 0x7971DA05, 0x71713101, 0xF9A5F000, 0x2000E011, 0xF0007170
	.word 0xE00CF98C, 0xF970F000, 0x2000E009, 0xF00071B0, 0xE004F9B4
	.word 0x31017931, 0xF0007131, 0x8CE8F955, 0x8CA90840, 0xDA054288
	.word 0x70312104, 0x60702000, 0x80702000, 0xB550BD50, 0x28047930
	.word 0x2000DB23, 0x79B07130, 0xDA192804, 0x300179B0, 0x78B071B0
	.word 0x40412101, 0x420070B1, 0x7970D00D, 0xDA052802, 0x31017971
	.word 0xF0007171, 0xE011F96C, 0x71702000, 0xF953F000, 0xF000E00C
	.word 0xE009F937, 0x71B02000, 0xF97BF000, 0x7931E004, 0x71313101
	.word 0xF91CF000, 0x8408CE8, 0x42888CA9, 0x2110DB05, 0x20007031
	.word 0x20006070, 0xBD508070, 0x7930B550, 0xDA032804, 0x31017931
	.word 0xE02C7131, 0x71302000, 0x28057970, 0x7971DA19, 0x71713101
	.word 0x280479B0, 0x79B0DA0E, 0x71B03001, 0x210178F0, 0x70F14041
	.word 0xD1024200, 0xF902F000, 0xF000E017, 0xE014F918, 0x71B02000
	.word 0xF943F000, 0x2000E00F, 0x78B07170, 0x40412101, 0x420070B1
	.word 0xF000D002, 0xE004F958, 0xF919F000, 0xF000E001, 0x8CE8F8D9
	.word 0x8CA90840, 0xDA054288, 0x7031210C, 0x60702000, 0x80702000
	.word 0xB500BD50, 0xB500BD00, 0xB510BD00, 0x6D28BD10, 0xD0034200
	.word 0xFC23F7BC
	.byte  0
	.byte 0xE0
.endfunc // sub_8107B06

.func
.thumb_func
sub_8107E72:
	push {lr}
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #0
	mov r1, #0
	bl sub_801DC7C
	mov r1, #0x10
	mov r2, #2
	mov r3, #3
	bl sub_801A082
	mov r0, #1
	bl sub_801A07C
	ldr r0, [r5,#0x2c]
	add r1, r0, #0
	lsl r0, r0, #0x10
	lsr r0, r0, #0x10
	ldr r2, [r5,#0x54]
	strh r0, [r2,#0x2e]
	lsr r1, r1, #0x10
	strb r0, [r2,#7]
	ldr r2, [r5,#0x58]
	add r2, #0xa0
	ldrb r0, [r2,#0x16]
	ldrb r1, [r2,#0x17]
	bl sub_801BB46
.endfunc // sub_8107E72

	pop {pc}
.func
.thumb_func
sub_8107EB0:
	push {r4,lr}
	mov r2, #0
	ldrh r0, [r5,#0x26]
	lsr r0, r0, #1
	ldrh r1, [r5,#0x24]
	cmp r0, r1
	ble loc_8107EC0
	mov r2, #4
loc_8107EC0:
	ldr r0, off_8107EDC // =byte_8107EE0 
	add r0, r0, r2
	bl sub_800FE28
	add r4, r0, #0
	bl object_getFlag // () -> int
	ldr r1, dword_8108208 // =0xa000 
	tst r0, r1
	beq loc_8107ED6
	add r4, #0x10
loc_8107ED6:
	add r0, r4, #0
	pop {r4,pc}
	.balign 4, 0x00
off_8107EDC: .word byte_8107EE0
byte_8107EE0: .byte 0x10, 0x10, 0xD, 0xD, 0x10, 0x10, 0xD, 0xD
.endfunc // sub_8107EB0

.func
.thumb_func
sub_8107EE8:
	push {lr}
	ldr r0, off_8107EF4 // =byte_8107EF8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8107EF4: .word byte_8107EF8
byte_8107EF8: .byte 0x20, 0x20, 0x18, 0x18
.endfunc // sub_8107EE8

.func
.thumb_func
sub_8107EFC:
	push {lr}
	ldr r0, off_8107F08 // =byte_8107F0C 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8107F08: .word byte_8107F0C
byte_8107F0C: .byte 0x10, 0x10, 0xC, 0xC
.endfunc // sub_8107EFC

.func
.thumb_func
sub_8107F10:
	push {lr}
	ldr r0, off_8107F1C // =byte_8107F20 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8107F1C: .word byte_8107F20
byte_8107F20: .byte 0x20, 0x20, 0x18, 0x18
.endfunc // sub_8107F10

.func
.thumb_func
sub_8107F24:
	push {lr}
	ldr r0, off_8107F3C // =byte_8107F40 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8107F3C // =byte_8107F40 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_8107F3C: .word byte_8107F40
byte_8107F40: .byte 0x10, 0x10, 0xC, 0xC, 0x8, 0x8, 0x8, 0x8
.endfunc // sub_8107F24

.func
.thumb_func
sub_8107F48:
	push {lr}
	ldr r0, off_8107F54 // =byte_8107F58 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8107F54: .word byte_8107F58
byte_8107F58: .byte 0x14, 0x14, 0x10, 0x10
.endfunc // sub_8107F48

.func
.thumb_func
sub_8107F5C:
	push {lr}
	ldr r0, off_8107F74 // =byte_8107F78 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8107F74 // =byte_8107F78 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_8107F74: .word byte_8107F78
byte_8107F78: .byte 0x14, 0x14, 0x10, 0x10, 0xC, 0xC, 0x8, 0x8
.endfunc // sub_8107F5C

.func
.thumb_func
sub_8107F80:
	push {lr}
	ldr r0, off_8107F8C // =byte_8107F90 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8107F8C: .word byte_8107F90
byte_8107F90: .byte 0x18, 0x18, 0x10, 0x10
.endfunc // sub_8107F80

.func
.thumb_func
sub_8107F94:
	push {lr}
	ldr r0, off_8107FAC // =off_8107FB0 
	bl sub_800FE28
	push {r0}
	ldr r0, off_8107FAC // =off_8107FB0 
	add r0, #4
	bl sub_800FE28
	add r1, r0, #0
	pop {r0}
	pop {pc}
off_8107FAC: .word off_8107FB0
off_8107FB0: .word dword_8080AC4+0x148
	.byte 0x1E
	.byte 0x1E
	.byte 0x1E
	.byte 0x1E
.endfunc // sub_8107F94

.func
.thumb_func
sub_8107FB8:
	push {lr}
	ldr r0, off_8107FC4 // =byte_8107FC8 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8107FC4: .word byte_8107FC8
byte_8107FC8: .byte 0x1E, 0x1E, 0x1E, 0x1E
.endfunc // sub_8107FB8

.func
.thumb_func
sub_8107FCC:
	push {lr}
	ldr r0, off_8107FD8 // =byte_8107FDC 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8107FD8: .word byte_8107FDC
byte_8107FDC: .byte 0x14, 0x14, 0x14, 0x14
.endfunc // sub_8107FCC

.func
.thumb_func
sub_8107FE0:
	push {lr}
	ldr r0, off_8107FEC // =loc_8107FF0 
	bl sub_800FE28
	pop {pc}
	.balign 4, 0x00
off_8107FEC: .word loc_8107FF0
.endfunc // sub_8107FE0

loc_8107FF0:
	str r0, [r2,r1]
	str r0, [r2,r1]
	push {r4,lr}
	ldr r0, off_810820C // =sub_8108C10+1 
	str r0, [r7,#0x28]
	bl sub_8107EB0
	strh r0, [r7,#0x18]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #9
	bl loc_8011690
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #2
	strb r0, [r7,#2]
	mov r0, #0
	bl sub_8108124
	bl sub_8107EE8
	strh r0, [r7,#0x18]
	bl sub_8107EFC
	strb r0, [r7,#0xc]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xa
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #4
	strb r0, [r7,#2]
	mov r0, #1
	bl sub_8108124
	bl sub_8107F10
	strh r0, [r7,#0x18]
	bl sub_8107F24
	strb r0, [r7,#0xc]
	strb r0, [r7,#0xd]
	mov r0, #0xb
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #2
	bl sub_8108124
	ldr r0, dword_8108210 // = 
	str r0, [r7,#0x28]
	bl sub_8107F48
	strh r0, [r7,#0x18]
	bl sub_8107F5C
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xc
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0
	strb r0, [r7,#2]
	mov r0, #3
	bl sub_8108124
	mov r0, #4
	bl sub_8108152
	str r0, [r7,#0x30]
	ldr r0, dword_8108214 // = 
	str r0, [r7,#0x28]
	bl sub_8107F80
	strh r0, [r7,#0x18]
	bl sub_8107F94
	strb r0, [r7,#0xc]
	strb r1, [r7,#0xd]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xd
	bl sub_8011680
	pop {r4,pc}
	push {r4,lr}
	bl sub_800FE36
	strb r0, [r7,#3]
	mov r0, #0x20 
	strb r0, [r7,#2]
	mov r0, #5
	bl sub_8108124
	ldr r0, dword_8108218 // = 
	str r0, [r7,#0x28]
	bl sub_8107FB8
	strh r0, [r7,#0x18]
	bl sub_8107FCC
	strb r0, [r7,#0xc]
	bl sub_8107FE0
	strb r0, [r7,#0xd]
	mov r0, #0xe
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103BC
	str r0, [r7,#0x2c]
	mov r0, #0xe
	bl sub_8011680
	pop {r4,pc}
.func
.thumb_func
sub_8108124:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_8108178 // =dword_8108190 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_81081C0 // =dword_81081D8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r6, r0
	ldr r3, [r5,#0x58]
	mov r1, #0xa0
	add r3, r3, r1
	str r6, [r3,#8]
	pop {r4,r6,pc}
.endfunc // sub_8108124

.func
.thumb_func
sub_8108152:
	push {r4,r6,lr}
	add r4, r0, #0
	ldr r1, off_8108178 // =dword_8108190 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	add r6, r0, #0
	add r0, r4, #0
	ldr r1, off_81081C0 // =dword_81081D8 
	mov r2, #8
	mul r0, r2
	add r0, r0, r1
	bl sub_800FE12
	lsl r0, r0, #0x10
	orr r0, r6
	pop {r4,r6,pc}
off_8108178: .word dword_8108190
	.word dword_8108198
	.word dword_81081A0
	.word dword_81081A8
	.word dword_81081B0
	.word dword_81081B8
dword_8108190: .word 0x500014, 0x500050
dword_8108198: .word 0xA00028, 0xA000A0
dword_81081A0: .word 0xA00028, 0xA000A0
dword_81081A8: .word 0x500014, 0x500050
dword_81081B0: .word 0xC0003, 0xC000C
dword_81081B8: .word 0xF00078, 0xF000F0
off_81081C0: .word dword_81081D8
	.word dword_81081E0
	.word dword_81081E8
	.word dword_81081F0
	.word dword_81081F8
	.word dword_8108200
dword_81081D8: .word 0xA000A
	.word 0xA000A
dword_81081E0: .word 0xA000A
	.word 0xA000A
dword_81081E8: .word 0xA000A
	.word 0xA000A
dword_81081F0: .word 0xA000A
	.word 0xA000A
dword_81081F8: .word 0xA000A
	.word 0xA000A
dword_8108200: .word 0xA000A
	.word 0xA000A
dword_8108208: .word 0xA000
off_810820C: .word sub_8108C10+1
dword_8108210: .word 0x8108CBB
dword_8108214: .word 0x8108CBB
dword_8108218: .word 0x8108CDF
.endfunc // sub_8108152

.func
.thumb_func
sub_810821C:
	push {r7,lr}
	ldr r1, off_810822C // =off_8108230 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_810822C: .word off_8108230
off_8108230: .word sub_810823C+1
	.word sub_8108298+1
	.word sub_81082C4+1
.endfunc // sub_810821C

.func
.thumb_func
sub_810823C:
	push {lr}
	bl object_canMove
	beq loc_8108278
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #3
	ldr r1, off_8108284 // =dword_8108288 
	add r0, r0, r1
	ldr r2, [r0]
	ldr r3, [r0,#4]
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_8108278
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_8108280
loc_8108278:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_8108280:
	pop {pc}
	.balign 4, 0x00
off_8108284: .word dword_8108288
dword_8108288: .word 0x10000, 0xF8800A0, 0x10020, 0xF880080
.endfunc // sub_810823C

.func
.thumb_func
sub_8108298:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81082C2
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_81082C2:
	pop {pc}
.endfunc // sub_8108298

.func
.thumb_func
sub_81082C4:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81082F0
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81082FC
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #4
	strb r0, [r7,#1]
	b locret_81082FC
loc_81082F0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81082FC
	bl sub_8011714
locret_81082FC:
	pop {pc}
.endfunc // sub_81082C4

	push {r7,lr}
	ldr r1, off_810830C // =off_8108310 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_810830C: .word off_8108310
off_8108310: .word sub_810831C+1
	.word sub_8108352+1
	.word sub_81083A2+1
.func
.thumb_func
sub_810831C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8108336
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_8108D24
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8108350
loc_8108336:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8108344
	bl sub_8108DF0
loc_8108344:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108350
	mov r0, #4
	strh r0, [r7]
locret_8108350:
	pop {pc}
.endfunc // sub_810831C

.func
.thumb_func
sub_8108352:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8108376
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0
	strb r0, [r7,#0xd]
	mov r0, #5
	strh r0, [r7,#0x12]
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_81083A0
loc_8108376:
	ldrb r0, [r7,#0xd]
	cmp r0, #2
	bgt loc_8108394
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt loc_8108394
	ldrb r0, [r7,#0xd]
	bl sub_8108E10
	ldrb r0, [r7,#0xd]
	add r0, #1
	strb r0, [r7,#0xd]
	mov r0, #5
	strh r0, [r7,#0x12]
loc_8108394:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81083A0
	mov r0, #8
	strh r0, [r7]
locret_81083A0:
	pop {pc}
.endfunc // sub_8108352

.func
.thumb_func
sub_81083A2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81083B8
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_81083C4
loc_81083B8:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81083C4
	bl sub_8011714
locret_81083C4:
	pop {pc}
.endfunc // sub_81083A2

	push {r7,lr}
	ldr r1, off_81083D4 // =off_81083D8 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_81083D4: .word off_81083D8
off_81083D8: .word sub_81083E8+1
	.word sub_8108408+1
	.word sub_8108454+1
	.word sub_810849C+1
.func
.thumb_func
sub_81083E8:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81083FA
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	b locret_8108406
loc_81083FA:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108406
	mov r0, #4
	strh r0, [r7]
locret_8108406:
	pop {pc}
.endfunc // sub_81083E8

.func
.thumb_func
sub_8108408:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810841E
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8108448
loc_810841E:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_810843C
	ldrb r0, [r5,#0x16]
	lsl r0, r0, #1
	ldr r1, off_810844C // =byte_8108450 
	add r1, r1, r0
	ldrb r0, [r1]
	ldrb r1, [r1,#1]
	mov r2, #0x27 
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_810843C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108448
	mov r0, #8
	strh r0, [r7]
locret_8108448:
	pop {pc}
	.balign 4, 0x00
off_810844C: .word byte_8108450
byte_8108450: .byte 0x1, 0x2, 0x6, 0x2
.endfunc // sub_8108408

.func
.thumb_func
sub_8108454:
	push {r4,r6,lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8108470
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0xc
	bl object_setCounterTime
	mov r0, #0x1e
	strh r0, [r7,#0x10]
	b locret_810849A
loc_8108470:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x14
	beq loc_8108484
	cmp r0, #0
	bgt locret_810849A
	mov r0, #0xc
	strh r0, [r7]
	b locret_810849A
loc_8108484:
	ldrb r2, [r7,#2]
	mov r4, #3
	mov r3, #0
	lsl r3, r3, #8
	orr r4, r3
	mov r3, #0
	lsl r3, r3, #0x18
	orr r4, r3
	ldr r6, [r7,#8]
	bl sub_80CA4F6
locret_810849A:
	pop {r4,r6,pc}
.endfunc // sub_8108454

.func
.thumb_func
sub_810849C:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81084B2
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_81084BE
loc_81084B2:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81084BE
	bl sub_8011714
locret_81084BE:
	pop {pc}
.endfunc // sub_810849C

	push {r7,lr}
	ldr r1, off_81084D0 // =off_81084D4 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.byte 0, 0
off_81084D0: .word off_81084D4
off_81084D4: .word loc_81084FC+1
	.word sub_8108558+1
	.word sub_8108580+1
	.word sub_81085A2+1
	.word sub_81085C2+1
	.word sub_8108602+1
	.word sub_8108648+1
	.word sub_8108688+1
	.word sub_81086DC+1
	.word sub_81086FC+1
loc_81084FC:
	push {lr}
	bl object_canMove
	beq loc_8108542
	ldr r1, off_810854C // =dword_8108550 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_8108554 - 0x8108550)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_8108542
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_810854A
loc_8108542:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_810854A:
	pop {pc}
off_810854C: .word dword_8108550
dword_8108550: .word 0x10000
dword_8108554: .word 0xF880080
.func
.thumb_func
sub_8108558:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_810857E
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_810857E:
	pop {pc}
.endfunc // sub_8108558

.func
.thumb_func
sub_8108580:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81085A0
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_81085A0:
	pop {pc}
.endfunc // sub_8108580

.func
.thumb_func
sub_81085A2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81085B4
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xa
	strh r0, [r7,#0x10]
	b locret_81085C0
loc_81085B4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81085C0
	mov r0, #0x10
	strh r0, [r7]
locret_81085C0:
	pop {pc}
.endfunc // sub_81085A2

.func
.thumb_func
sub_81085C2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81085D8
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8108600
loc_81085D8:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_81085F4
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #2
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_81085F4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108600
	mov r0, #0x14
	strh r0, [r7]
locret_8108600:
	pop {pc}
.endfunc // sub_81085C2

.func
.thumb_func
sub_8108602:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810862C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #8
	bl object_setCounterTime
	mov r0, #0xc6
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	bl sub_8108E64
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_8108646
loc_810862C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x11
	beq loc_8108640
	cmp r0, #0
	bgt locret_8108646
	mov r0, #0x18
	strh r0, [r7]
	b locret_8108646
loc_8108640:
	mov r0, #0
	bl sub_8108E34
locret_8108646:
	pop {pc}
.endfunc // sub_8108602

.func
.thumb_func
sub_8108648:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810865E
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8108686
loc_810865E:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_810867A
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #4
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_810867A:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108686
	mov r0, #0x1c
	strh r0, [r7]
locret_8108686:
	pop {pc}
.endfunc // sub_8108648

.func
.thumb_func
sub_8108688:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81086C0
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	mov r0, #8
	bl object_setCounterTime
	mov r0, #0xc7
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #1
	bl sub_8108E64
	mov r0, #0x14
	strh r0, [r7,#0x10]
	ldr r0, [r5,#0x50]
	tst r0, r0
	beq locret_81086DA
	bl sub_80C46B6
	b locret_81086DA
loc_81086C0:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x11
	beq loc_81086D4
	cmp r0, #0
	bgt locret_81086DA
	mov r0, #0x20 
	strh r0, [r7]
	b locret_81086DA
loc_81086D4:
	mov r0, #1
	bl sub_8108E34
locret_81086DA:
	pop {pc}
.endfunc // sub_8108688

.func
.thumb_func
sub_81086DC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81086EE
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_81086FA
loc_81086EE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81086FA
	mov r0, #0x24 
	strh r0, [r7]
locret_81086FA:
	pop {pc}
.endfunc // sub_81086DC

.func
.thumb_func
sub_81086FC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810873C
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xd
	strh r0, [r7,#0x10]
	b locret_8108748
loc_810873C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108748
	bl sub_8011714
locret_8108748:
	pop {pc}
.endfunc // sub_81086FC

	push {r7,lr}
	ldr r1, off_8108758 // =off_810875C 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
off_8108758: .word off_810875C
off_810875C: .word loc_810878C+1
	.word sub_81087F0+1
	.word sub_8108818+1
	.word sub_810883A+1
	.word sub_810887A+1
	.word sub_81088CA+1
	.word sub_810893C+1
	.word sub_8108964+1
	.word sub_8108986+1
	.word sub_81089A6+1
	.word sub_8108A3A+1
	.word sub_8108A5A+1
loc_810878C:
	push {lr}
	bl object_canMove
	beq loc_81087D8
	ldr r1, off_81087E4 // =dword_81087E8 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_81087EC - 0x81087e8)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_81087D8
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #0
	str r0, [r7,#0x34]
	str r0, [r7,#0x38]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_81087E0
loc_81087D8:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_81087E0:
	pop {pc}
	.balign 4, 0x00
off_81087E4: .word dword_81087E8
dword_81087E8: .word 0x10000
dword_81087EC: .word 0xF880080
.func
.thumb_func
sub_81087F0:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108816
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_8108816:
	pop {pc}
.endfunc // sub_81087F0

.func
.thumb_func
sub_8108818:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108838
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_8108838:
	pop {pc}
.endfunc // sub_8108818

.func
.thumb_func
sub_810883A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8108850
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8108878
loc_8108850:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_810886C
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #2
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_810886C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108878
	mov r0, #0x10
	strh r0, [r7]
locret_8108878:
	pop {pc}
.endfunc // sub_810883A

.func
.thumb_func
sub_810887A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_810889E
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xc
	strb r0, [r5,#0x10]
	mov r0, #0xc6
	add r0, #0xff
	bl sound_play // () -> void
	mov r0, #0
	bl sub_8108E64
	mov r0, #0x14
	strh r0, [r7,#0x10]
	b locret_81088C8
loc_810889E:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	cmp r0, #0x11
	beq loc_81088BE
	cmp r0, #0
	bgt locret_81088C8
	ldrb r0, [r7,#0xe]
	tst r0, r0
	beq loc_81088B8
	mov r0, #0x14
	strh r0, [r7]
	b locret_81088C8
loc_81088B8:
	mov r0, #0x28 
	strh r0, [r7]
	b locret_81088C8
loc_81088BE:
	bl sub_8108E98
	bl sub_8108EBC
	strb r0, [r7,#0xe]
locret_81088C8:
	pop {pc}
.endfunc // sub_810887A

.func
.thumb_func
sub_81088CA:
	push {lr}
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_801BB46
.endfunc // sub_81088CA

	bl object_canMove
	beq loc_810892A
	bl object_getFlipDirection_800E2CA // () -> int
	neg r0, r0
	mov r1, #3
	mul r0, r1
	ldr r1, [r7,#0x2c]
	ldrb r1, [r1,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0x14]
	ldrb r3, [r5,#0x15]
	cmp r0, r2
	bne loc_81088F8
	cmp r1, r3
	beq loc_810890A
loc_81088F8:
	ldr r3, off_8108930 // =dword_8108934 
	ldr r2, [r3]
	ldr r3, [r3,#0x4] // (dword_8108938 - 0x8108934)
	push {r0,r1}
	bl object_checkPanelParameters
	tst r0, r0
	pop {r0,r1}
	beq loc_810892A
loc_810890A:
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #0x18
	strh r0, [r7]
	b locret_810892E
loc_810892A:
	mov r0, #0x28 
	strh r0, [r7]
locret_810892E:
	pop {pc}
off_8108930: .word dword_8108934
dword_8108934: .word 0x10000
dword_8108938: .word 0xF880080
.func
.thumb_func
sub_810893C:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108962
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #0x1c
	strh r0, [r7]
locret_8108962:
	pop {pc}
.endfunc // sub_810893C

.func
.thumb_func
sub_8108964:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108984
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0x20 
	strh r0, [r7]
locret_8108984:
	pop {pc}
.endfunc // sub_8108964

.func
.thumb_func
sub_8108986:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8108998
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	b locret_81089A4
loc_8108998:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_81089A4
	mov r0, #0x24 
	strh r0, [r7]
locret_81089A4:
	pop {pc}
.endfunc // sub_8108986

.func
.thumb_func
sub_81089A6:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_81089EE
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0xe
	strb r0, [r5,#0x10]
	bl sub_8108EE6
	push {r4,r7}
	mov r4, #6
	mov r3, #0xc
	lsl r3, r3, #8
	orr r4, r3
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r4,r7}
	str r0, [r7,#0x34]
	push {r4,r7}
	mov r4, #5
	mov r7, #0x4c 
	add r7, r7, r5
	bl sub_80B8E30
	pop {r4,r7}
	str r0, [r7,#0x38]
	mov r0, #0xae
	bl sound_play // () -> void
	mov r0, #0x5a 
	strh r0, [r7,#0x10]
	mov r0, #3
	strh r0, [r7,#0x12]
loc_81089EE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt loc_81089FC
	mov r0, #0x28 
	strh r0, [r7]
	b locret_8108A38
loc_81089FC:
	ldrh r0, [r7,#0x12]
	sub r0, #1
	strh r0, [r7,#0x12]
	bgt locret_8108A38
	mov r0, #3
	strh r0, [r7,#0x12]
	mov r0, #0xe
	strb r0, [r5,#0x10]
	mov r0, #0xff
	strb r0, [r5,#0x11]
	bl sub_8108EE6
	mov r0, #0xae
	bl sound_play // () -> void
	ldr r0, [r7,#0x34]
	tst r0, r0
	beq loc_8108A24
	bl sub_80B8E7C
loc_8108A24:
	ldr r0, [r5,#0x50]
	tst r0, r0
	beq loc_8108A2E
	bl sub_80C46B6
loc_8108A2E:
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq locret_8108A38
	bl sub_80B8E7C
locret_8108A38:
	pop {pc}
.endfunc // sub_81089A6

.func
.thumb_func
sub_8108A3A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8108A4C
	mov r0, #4
	strb r0, [r7,#1]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8108A58
loc_8108A4C:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108A58
	mov r0, #0x2c 
	strh r0, [r7]
locret_8108A58:
	pop {pc}
.endfunc // sub_8108A3A

.func
.thumb_func
sub_8108A5A:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8108AAE
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	bl sub_801BB46
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xd
	strh r0, [r7,#0x10]
	ldr r0, [r7,#0x34]
	tst r0, r0
	beq loc_8108AA2
	bl sub_80B8E58
loc_8108AA2:
	ldr r0, [r7,#0x38]
	tst r0, r0
	beq locret_8108ABA
	bl sub_80B8E58
	b locret_8108ABA
loc_8108AAE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108ABA
	bl sub_8011714
locret_8108ABA:
	pop {pc}
.endfunc // sub_8108A5A

	push {r7,lr}
	ldr r1, off_8108ACC // =off_8108AD0 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r7,pc}
	.balign 4, 0x00
off_8108ACC: .word off_8108AD0
off_8108AD0: .word loc_8108AE8+1
	.word sub_8108B38+1
	.word sub_8108B64+1
	.word sub_8108B82+1
	.word sub_8108BC2+1
	.word sub_8108BEC+1
loc_8108AE8:
	push {lr}
	bl object_canMove
	beq loc_8108B22
	ldr r1, off_8108B2C // =dword_8108B30 
	ldr r2, [r1]
	ldr r3, [r1,#0x4] // (dword_8108B34 - 0x8108b30)
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_8108B22
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strb r0, [r5,#0x10]
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #4
	strh r0, [r7]
	b locret_8108B2A
loc_8108B22:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_8108B2A:
	pop {pc}
off_8108B2C: .word dword_8108B30
dword_8108B30: .word 0x10000
dword_8108B34: .word 0xF880080
.func
.thumb_func
sub_8108B38:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108B62
	mov r0, #3
	strb r0, [r5,#0x10]
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	strb r0, [r5,#0x12]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	mov r0, #3
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_8108B62:
	pop {pc}
.endfunc // sub_8108B38

.func
.thumb_func
sub_8108B64:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108B80
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #0xc
	strh r0, [r7]
locret_8108B80:
	pop {pc}
.endfunc // sub_8108B64

.func
.thumb_func
sub_8108B82:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8108B98
	mov r0, #4
	strb r0, [r7,#1]
	ldrb r0, [r7,#0xc]
	strh r0, [r7,#0x10]
	mov r0, #0
	strh r0, [r7,#0x12]
	b locret_8108BC0
loc_8108B98:
	ldrh r0, [r7,#0x12]
	add r0, #1
	strh r0, [r7,#0x12]
	lsr r0, r0, #3
	bcs loc_8108BB4
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	mov r2, #0x28 
	ldrh r3, [r5,#0x16]
	bl object_highlightPanelRegion
loc_8108BB4:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108BC0
	mov r0, #0x10
	strh r0, [r7]
locret_8108BC0:
	pop {pc}
.endfunc // sub_8108B82

.func
.thumb_func
sub_8108BC2:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8108BDE
	mov r0, #4
	strb r0, [r7,#1]
	bl sub_8108F28
	mov r0, #0xb8
	bl sound_play // () -> void
	ldrb r0, [r7,#0xd]
	strh r0, [r7,#0x10]
	b locret_8108BEA
loc_8108BDE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108BEA
	mov r0, #0x14
	strh r0, [r7]
locret_8108BEA:
	pop {pc}
.endfunc // sub_8108BC2

.func
.thumb_func
sub_8108BEC:
	push {lr}
	ldrb r0, [r7,#1]
	tst r0, r0
	bne loc_8108C02
	mov r0, #4
	strb r0, [r7,#1]
	mov r0, #0
	strb r0, [r5,#0x10]
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	b locret_8108C0E
loc_8108C02:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bgt locret_8108C0E
	bl sub_8011714
locret_8108C0E:
	pop {pc}
.endfunc // sub_8108BEC

.func
.thumb_func
sub_8108C10:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x24
	str r0, [sp]
	str r2, [sp,#4]
	str r3, [sp,#8]
	mov r4, #0
loc_8108C1C:
	ldr r2, off_8108CA4 // =byte_8108CA8 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_8108CA9 - 0x8108ca8)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB1C
.endfunc // sub_8108C10

	add r4, #1
	cmp r4, #9
	blt loc_8108C1C
	ldr r0, [sp]
	ldrb r0, [r0,#0x13]
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl sub_800CFA6
	add r6, r0, #0
	mov r4, #0
loc_8108C50:
	ldr r2, off_8108CA4 // =byte_8108CA8 
	add r1, r4, #0
	lsl r1, r1, #1
	add r2, r2, r1
	mov r1, #0
	ldrsb r0, [r2,r1]
	mov r1, #0x1 // (byte_8108CA9 - 0x8108ca8)
	ldrsb r1, [r2,r1]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	add r0, r0, r2
	add r1, r1, r3
	bl sub_801BB46
	add r4, #1
	cmp r4, #9
	blt loc_8108C50
	tst r6, r6
	bne loc_8108C86
	ldr r2, [sp,#4]
	ldr r3, [sp,#8]
	add r7, sp, #0xc
	bl object_getPanelsExceptCurrentFilterred
	add r6, r0, #0
	tst r6, r6
	beq loc_8108C9A
loc_8108C86:
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #0xc
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	b loc_8108C9E
loc_8108C9A:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
loc_8108C9E:
	add sp, sp, #0x24
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_8108CA4: .word byte_8108CA8
byte_8108CA8: .byte 0x0
byte_8108CA9: .byte 0x0
	.hword 0xFFFF
	.word 0xFF0101FF, 0xFF0101, 0x1FF00, 0xB5100100, 0xB40C1C04
	.word 0xFB03F705, 0x7CA14240, 0x7CE11840, 0xB403BC0C, 0xFFD9F703
	.word 0xBC034200, 0x2000D100, 0xB550BD10, 0x1C1E1C14, 0x21027DA8
	.word 0xD27DAA, 0x189B4B08, 0x685B681A, 0xF9C7F704, 0xD0084200
	.word 0x1C22B403, 0xF7031C33, 0x4200FFC0, 0xD100BC03, 0xBD502000
	.word 0x8108D14, 0x0
	.word 0x20, 0x20, 0x0
.func
.thumb_func
sub_8108D24:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x20
	mov r0, #0
	str r0, [sp]
	str r0, [sp,#4]
	str r0, [r7,#0x34]
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	push {r0,r1}
	bl object_isValidPanel
	tst r0, r0
	pop {r0,r1}
	beq loc_8108D94
	str r0, [sp]
	str r1, [sp,#4]
	lsl r1, r1, #4
	orr r0, r1
	mov r1, #0
	mov r2, #0x34 
	add r1, r1, r2
	strb r0, [r7,r1]
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl sub_801BB1C
	mov r0, #2
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_8108DDC // =dword_8108DE0 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	add r6, r7, #0
	add r7, sp, #8
	bl sub_800D012
	add r7, r6, #0
	add r6, r0, #0
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl sub_801BB46
	tst r6, r6
	beq loc_8108D94
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	mov r1, #1
	mov r2, #0x34 
	add r1, r1, r2
	strb r0, [r7,r1]
loc_8108D94:
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl sub_801BB1C
.endfunc // sub_8108D24

	mov r0, #2
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	ldr r3, off_8108DDC // =dword_8108DE0 
	add r3, r3, r2
	ldr r2, [r3]
	ldr r3, [r3,#4]
	add r6, r7, #0
	add r7, sp, #8
	bl sub_800CFA6
	add r7, r6, #0
	add r6, r0, #0
	ldr r0, [sp]
	ldr r1, [sp,#4]
	bl sub_801BB46
	tst r6, r6
	beq loc_8108DD6
	bl sub_8001532
	add r1, r6, #0
	svc 6
	add r0, sp, #8
	ldrb r0, [r0,r1]
	mov r1, #2
	mov r2, #0x34 
	add r1, r1, r2
	strb r0, [r7,r1]
loc_8108DD6:
	add sp, sp, #0x20
	pop {r4,r6,r7,pc}
	.balign 4, 0x00
off_8108DDC: .word dword_8108DE0
dword_8108DE0: .word 0x20, 0x80, 0x0
	.word 0xA0
.func
.thumb_func
sub_8108DF0:
	push {r4,lr}
	mov r4, #0
loc_8108DF4:
	mov r0, #0x34 
	add r0, r0, r4
	ldrb r0, [r7,r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	tst r0, r0
	beq loc_8108E08
	bl object_highlightPanel
loc_8108E08:
	add r4, #1
	cmp r4, #2
	ble loc_8108DF4
	pop {r4,pc}
.endfunc // sub_8108DF0

.func
.thumb_func
sub_8108E10:
	push {r4,r6,lr}
	mov r1, #0x34 
	add r0, r0, r1
	ldrb r0, [r7,r0]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
	tst r0, r0
	beq locret_8108E32
	ldrb r2, [r7,#2]
	mov r4, #0
	mov r6, #0
	lsl r6, r6, #8
	orr r4, r6
	ldr r6, [r7,#8]
	bl sub_80CE6E6
locret_8108E32:
	pop {r4,r6,pc}
.endfunc // sub_8108E10

.func
.thumb_func
sub_8108E34:
	push {r4,r6,r7,lr}
	lsl r0, r0, #2
	ldr r1, off_8108E54 // =dword_8108E58 
	ldr r4, [r1,r0]
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r6, [r7,#8]
	ldr r7, dword_8108E60 // =0x1 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
off_8108E54: .word dword_8108E58
dword_8108E58: .word 0x405FF02, 0x405FF04
dword_8108E60: .word 0x1
.endfunc // sub_8108E34

.func
.thumb_func
sub_8108E64:
	push {r4,lr}
	ldr r1, off_8108E90 // =dword_8108E94 
	ldrb r4, [r1,r0]
	bl sub_800E456 // () -> int
	lsl r0, r0, #8
	add r4, r4, r0
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	bl sub_80E05F6
	pop {r4,pc}
	.byte 0, 0
off_8108E90: .word dword_8108E94
dword_8108E94: .word 0x393A
.endfunc // sub_8108E64

.func
.thumb_func
sub_8108E98:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	ldr r4, dword_8108EB4 // =0x405ff02 
	ldr r6, [r7,#8]
	ldr r7, dword_8108EB8 // =0x1001 
	bl sub_80C536A
	pop {r4,r6,r7,pc}
dword_8108EB4: .word 0x405FF02
dword_8108EB8: .word 0x1001
.endfunc // sub_8108E98

.func
.thumb_func
sub_8108EBC:
	push {r4,r6,lr}
	mov r6, #0
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldr r1, [r7,#0x2c]
	ldrb r0, [r1,#0x12]
	ldrb r1, [r1,#0x13]
	ldrb r2, [r5,#0x12]
	ldrb r3, [r5,#0x13]
	cmp r1, r3
	bne loc_8108EE2
	add r2, r2, r4
	cmp r0, r2
	beq loc_8108EE0
	add r2, r2, r4
	cmp r0, r2
	bne loc_8108EE2
loc_8108EE0:
	mov r6, #1
loc_8108EE2:
	add r0, r6, #0
	pop {r4,r6,pc}
.endfunc // sub_8108EBC

.func
.thumb_func
sub_8108EE6:
	push {r4,r6,lr}
	bl sub_8001532
	mov r1, #3
	and r0, r1
	ldr r1, off_8108F20 // =byte_8108F24 
	ldrb r4, [r1,r0]
	lsl r4, r4, #0x10
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	add r3, r4, #0
	mov r4, #4
	mov r6, #0
	lsl r6, r6, #8
	orr r4, r6
	mov r6, #0
	lsl r6, r6, #0x10
	orr r4, r6
	ldr r6, [r7,#0x30]
	bl sub_80C6248
	pop {r4,r6,pc}
off_8108F20: .word byte_8108F24
byte_8108F24: .byte 0x24, 0x1C, 0x24, 0x2C
.endfunc // sub_8108EE6

.func
.thumb_func
sub_8108F28:
	push {r4,r6,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldrb r2, [r7,#2]
	mov r3, #0
	mov r4, #1
	mov r6, #0xe
	lsl r6, r6, #8
	orr r4, r6
	ldrb r6, [r7,#0xd]
	lsl r6, r6, #0x10
	orr r4, r6
	ldr r6, [r7,#8]
	bl sub_80D5718
	pop {r4,r6,pc}
	.byte 0, 0
.endfunc // sub_8108F28

.func
.thumb_func
sub_8108F50:
	push {lr}
	ldr r1, off_8108F64 // =off_8108F68 
	ldrb r0, [r5,#8]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	bl sub_8016E64
	pop {pc}
	.balign 4, 0x00
off_8108F64: .word off_8108F68
off_8108F68: .word sub_8016F56+1
	.word sub_8108F74+1
	.word sub_8016C4E+1
.endfunc // sub_8108F50

.func
.thumb_func
sub_8108F74:
	push {r4,lr}
	bl sub_81095D0
	bl sub_801ABB8
	ldrh r0, [r5,#0x28]
	cmp r0, #0x49 
	bne loc_8108FA6
	ldr r0, [r5,#0x54]
	mov r1, #0x84
	ldrh r1, [r0,r1]
	cmp r1, #0
	bne loc_8109020
	mov r1, #0x80
	ldrh r1, [r0,r1]
	cmp r1, #0
	beq loc_8108FA0
	bl sub_801A264
	mov r0, #0x6e 
	bl sound_play // () -> void
loc_8108FA0:
	bl sub_800EA22
	b loc_8109020
loc_8108FA6:
	cmp r0, #0xa3
	blt loc_8108FDA
	cmp r0, #0xa8
	bgt loc_8108FDA
	ldr r0, [r5,#0x54]
	ldr r1, [r0,#0x70]
	mov r2, #2
	tst r1, r2
	beq loc_8108FBC
	mov r1, #0
	strh r1, [r5,#0x24]
loc_8108FBC:
	mov r1, #0x80
	ldrh r1, [r0,r1]
	cmp r1, #1
	ble loc_8109020
	bl sub_800EA90
	cmp r0, #0
	bne loc_8108FDA
	bl sub_8115BB0
	mov r0, #0xcc
	add r0, #0xff
	bl sound_play // () -> void
	b loc_8109020
loc_8108FDA:
	cmp r0, #0x61 
	blt loc_8108FFE
	cmp r0, #0x66 
	bgt loc_8108FFE
	ldr r0, [r5,#0x54]
	mov r1, #0x88
	ldrh r1, [r0,r1]
	cmp r1, #0
	beq loc_8109020
	ldrh r0, [r5,#0x26]
	mov r1, #0
	bl sub_800E2FC
	bl sub_800EADA
	bl sub_811060A
	b loc_8109020
loc_8108FFE:
	ldrh r0, [r5,#0x28]
	cmp r0, #0x43 
	blt loc_8109020
	cmp r0, #0x48 
	bgt loc_8109020
	bl sub_810E340
	ldr r0, [r5,#0x54]
	mov r1, #0x84
	ldrh r1, [r0,r1]
	cmp r1, #0
	beq loc_8109020
	bl sub_800EAC4
	bl sub_810E336
	b loc_8109020
loc_8109020:
	ldr r0, [r5,#0x58]
	ldrb r0, [r0,#1]
	lsl r4, r0, #2
	ldr r1, off_8109048 // =off_8109050 
	ldr r0, [r1,r4]
	bl sub_801B1C4
	ldr r0, off_810904C // =off_81091D0 
	ldr r0, [r0,r4]
	mov lr, pc
	bx r0
	bl sub_801A018
.endfunc // sub_8108F74

	ldrb r0, [r5,#9]
	cmp r0, #7
	beq locret_8109046
	ldr r1, [r5,#0x58]
	ldrh r0, [r5,#0x3e]
	strh r0, [r1,#0x3c]
locret_8109046:
	pop {r4,pc}
off_8109048: .word off_8109050
off_810904C: .word off_81091D0
off_8109050: .word dword_8109AA4+0xD0
	.word dword_8109BFC+0x2F8
	.word off_810A550
	.word dword_810A9E8+4
	.word off_810B2D0
	.word 0x810BB94, 0x810C170, 0x810C6F0, 0x810CD60, 0x810D0F4
	.word 0x810D554, 0x810D910, 0x810E120, 0x810E7B0, 0x810F010
	.word 0x810F39C, 0x810FCE0, 0x81104D4, 0x8110DC0, 0x8111330
	.word 0x8111DC0, 0x81121F0, 0x81129A0, 0x8113078, 0x81135CC
	.word 0x8113D50, 0x8114710, 0x81154F0, 0x8115950, 0x8115DE0
	.word 0x81163F0, 0x81166B0
off_81090D0: .word dword_8109A78
	.word dword_8109AA4+0x12C
	.word dword_8109BFC+0x6C4
	.word dword_810A840
	.word dword_810AE44
	.word dword_810B78C
	.word dword_810BEB4+0x18
	.word dword_810C35C
	.word dword_810C388+0x544
	.word dword_810CFE8+0x20
	.word dword_810D034+0x138
	.word dword_810D198+0x560
	.word dword_810DD10
	.word dword_810E3E8
	.word dword_810EC80
	.word dword_810F200
	.word dword_810F22C+0x2B8
	.word dword_811028C+4
	.word dword_8110610+0x18
	.word dword_8111130
	.word dword_811190C
	.word dword_8111FF8
	.word dword_81126DC
	.word dword_8112B94
	.word dword_8112F2C+0x310
	.word dword_8113754
	.word dword_81143C0+8
	.word dword_81150AC
	.word dword_8115704
	.word dword_8115BEC
	.word dword_81162F8
	.word dword_81165BC
off_8109150: .word dword_8109A78+8
	.word dword_8109AA4+0x134
	.word dword_8109BFC+0x6CC
	.word dword_810A840+8
	.word dword_810AE4C
	.word dword_810B78C+8
	.word dword_810BEB4+0x20
	.word dword_810C35C+8
	.word dword_810C388+0x54C
	.word dword_810CFE8+0x28
	.word dword_810D034+0x140
	.word dword_810D198+0x568
	.word dword_810DD10+8
	.word dword_810E3E8+8
	.word dword_810EC80+8
	.word dword_810F200+8
	.word dword_810F22C+0x2C0
	.word dword_811028C+0xC
	.word dword_8110610+0x20
	.word dword_8111130+8
	.word dword_811190C+8
	.word dword_8111FF8+8
	.word dword_81126DC+8
	.word dword_8112B94+8
	.word dword_8112F2C+0x318
	.word dword_8113754+8
	.word dword_81143C0+0x10
	.word dword_81150AC+8
	.word dword_8115704+8
	.word dword_8115BEC+8
	.word dword_81162F8+8
	.word dword_81165BC+8
off_81091D0: .word nullsub_13+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word sub_810ABD0+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word sub_810E2A6+1
	.word sub_810E854+1
	.word sub_810F090+1
	.word nullsub_13+1
	.word sub_81100E2+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word sub_8111846+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word sub_81129EE+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word nullsub_13+1
	.word sub_8115098+1
	.word nullsub_13+1
	.word sub_81159DC+1
	.word sub_81162AA+1
	.byte 0xA5
	.byte 0x65 
	.byte 0x11
	.byte  8
	.byte 0x2B 
	.byte 0x96
	.byte 0x10
	.byte  8
byte_8109250: .byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0xBE, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x87, 0xE3
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x41, 0xF0, 0x10, 0x8
	.byte 0xF9, 0xF3, 0x10, 0x8, 0x55, 0x2, 0x11, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x17, 0x18, 0x11, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x71, 0x41, 0x11, 0x8, 0x31, 0x4E, 0x11, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x7B, 0x62, 0x11, 0x8
	.byte 0x15, 0x64, 0x11, 0x8, 0xD5, 0x66, 0x11, 0x8
byte_81092D0: .byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x8D, 0xAB, 0x10, 0x8, 0xD, 0xB3, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x41, 0xD9, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x1F, 0xE8, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0xB1, 0x0, 0x11, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x77, 0xE, 0x11, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x27, 0x36, 0x11, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0xF3, 0x4D, 0x11, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0xB1, 0x59, 0x11, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
byte_8109350: .byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x47, 0x5
	.byte 0x11, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
byte_81093D0: .byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x47, 0x5
	.byte 0x11, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
byte_8109450: .byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x47, 0x5
	.byte 0x11, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
byte_81094D0: .byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
byte_8109550: .byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x8D, 0xD9, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x47, 0x5
	.byte 0x11, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96
	.byte 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
	.byte 0x2B, 0x96, 0x10, 0x8, 0x2B, 0x96, 0x10, 0x8
.func
.thumb_func
sub_81095D0:
	push {r4,r6,r7,lr}
	ldr r6, [r5,#0x58]
	ldrb r0, [r6,#0x16]
	add r4, r0, #0
	ldrb r1, [r6,#0x17]
	add r7, r1, #0
	cmp r0, r1
	beq locret_8109628
	strb r0, [r6,#0x17]
	ldrb r1, [r6,#3]
	mul r0, r1
	bl sprite_setPallete // (int pallete) -> void
	push {r4}
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x26 
	bl sub_80E05F6
	ldrb r1, [r0]
	mov r2, #4
	orr r1, r2
	strb r1, [r0]
	pop {r4}
	sub r4, r4, r7
	ldrh r0, [r5,#0x28]
	add r0, r0, r4
	strh r0, [r5,#0x28]
	bl sub_800F23C
	ldrh r1, [r0,#4]
	strh r1, [r5,#0x2c]
	ldr r2, [r5,#0x54]
	strh r1, [r2,#0x2e]
	ldrh r1, [r0]
	add r3, r1, #0
	lsl r1, r1, #0x14
	lsr r1, r1, #0x14
	strh r1, [r5,#0x24]
	strh r1, [r5,#0x26]
	lsr r3, r3, #0xc
	strb r3, [r5,#0xe]
	strb r3, [r2,#2]
locret_8109628:
	pop {r4,r6,r7,pc}
.endfunc // sub_81095D0

.func
.thumb_func
nullsub_13:
	mov pc, lr
	.byte 0, 0, 0, 0
.endfunc // nullsub_13

.func
.thumb_func
sub_8109630:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x10
	mov r7, sp
	mov r4, #0
	add r6, r0, #0
	add r0, r7, #0
	ldrb r3, [r5,#0x16]
	bl object_getEnemyByNameRange
	cmp r0, #0
	ble loc_810965A
	mov r1, #0
loc_8109648:
	ldr r2, [r7]
	ldr r2, [r2,r6]
	cmp r2, #0
	beq loc_8109654
	add r4, #1
	add r1, r1, r2
loc_8109654:
	add r7, #4
	sub r0, #1
	bne loc_8109648
loc_810965A:
	add r0, r4, #0
	add sp, sp, #0x10
	pop {r4,r6,r7,pc}
.endfunc // sub_8109630

.func
.thumb_func
sub_8109660:
	push {r4-r7,lr}
	add r6, r0, #0
	add r7, r1, #0
	ldr r4, off_81096A0 // =off_8019B78 
	lsl r2, r2, #2
	ldr r4, [r4,r2]
	lsl r5, r3, #1
	sub r5, #1
	neg r5, r5
loc_8109672:
	mov r0, #0
	ldrsb r0, [r4,r0]
	cmp r0, #0x7f
	beq locret_810969C
	mul r0, r5
	add r0, r0, r6
	mov r1, #1
	ldrsb r1, [r4,r1]
	add r1, r1, r7
	cmp r0, #1
	blt loc_8109698
	cmp r0, #6
	bgt loc_8109698
	cmp r1, #1
	blt loc_8109698
	cmp r1, #3
	bgt loc_8109698
	bl object_highlightPanel
loc_8109698:
	add r4, #2
	b loc_8109672
locret_810969C:
	pop {r4-r7,pc}
	.byte 0, 0
off_81096A0: .word off_8019B78
.endfunc // sub_8109660

	push {r4,r6,r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldrb r2, [r5,#0xe]
	mov r3, #0
	ldr r4, dword_81097AC // =0x405ff01 
	ldr r6, [r5,#0x2c]
	mov r7, #3
	bl sub_80C536A
	pop {r4,r6,r7,pc}
.func
.thumb_func
sub_81096BA:
	push {r4,lr}
	bl sub_800F2C6
	pop {r4,pc}
.endfunc // sub_81096BA

	push {r4,lr}
	add r4, r0, #0
	ldrb r0, [r5,#9]
	cmp r0, #2
	beq locret_81096F8
	ldrb r0, [r5,#8]
	cmp r0, #8
	beq locret_81096F8
	ldr r3, [r5,#0x54]
	ldrb r1, [r3,#1]
	cmp r1, #0
	bne loc_81096E8
	ldrh r0, [r5,#0x12]
	ldrh r1, [r4]
	cmp r0, r1
	beq locret_81096F8
	mov r0, #1
	strb r0, [r3,#1]
	b locret_81096F8
loc_81096E8:
	ldr r0, [r3,#0x70]
	ldr r1, dword_81097B0 // =0xc000000 
	tst r0, r1
	beq locret_81096F8
	bl sub_801A074 // () -> void
	ldrh r0, [r5,#0x12]
	strh r0, [r4]
locret_81096F8:
	pop {r4,pc}
.func
.thumb_func
sub_81096FA:
	ldrb r2, [r5,#0x16]
	lsl r2, r2, #3
	add r3, r3, r2
	ldr r2, [r3]
	add r3, #4
	ldr r3, [r3]
	mov pc, lr
.endfunc // sub_81096FA

.func
.thumb_func
sub_8109708:
	push {r4,r6,lr}
	add r4, r2, #0
	ldrb r6, [r5,#0x16]
	ldr r3, off_8109780 // =off_8109784 
	bl sub_81096FA
	bl sub_8015E46
	pop {r4,r6,pc}
.endfunc // sub_8109708

.func
.thumb_func
sub_810971A:
	push {r7,lr}
	sub sp, sp, #8
	ldr r3, off_8109780 // =off_8109784 
	bl sub_81096FA
	mov r7, sp
	bl sub_800D012
.endfunc // sub_810971A

	cmp r0, #0
	beq loc_8109742
	add r7, r0, #0
	bl sub_8001532
	add r1, r7, #0
	svc 6
	mov r0, sp
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_8109742:
	add sp, sp, #8
	pop {r7,pc}
.func
.thumb_func
sub_8109746:
	push {r4,r6,r7,lr}
	bl object_getFlipDirection_800E2CA // () -> int
	add r4, r0, #0
	ldrb r6, [r5,#0x12]
	add r6, r6, r4
loc_8109752:
	add r0, r6, #0
	ldrb r1, [r5,#0x13]
	ldr r3, off_8109780 // =off_8109784 
	bl sub_81096FA
	bl object_checkPanelParameters
.endfunc // sub_8109746

	cmp r0, #0
	bne loc_8109770
	add r6, r6, r4
	beq loc_810976C
	cmp r6, #7
	bne loc_8109752
loc_810976C:
	mov r0, #0
	b locret_8109774
loc_8109770:
	add r0, r6, #0
	ldrb r1, [r5,#0x13]
locret_8109774:
	pop {r4,r6,r7,pc}
	.word 0, 0
	.byte 0, 0
off_8109780: .word off_8109784
off_8109784: .word LCDControl
	.word 0x0
	.word start_
	.word 0x0
.func
.thumb_func
sub_8109794:
	push {lr}
	push {r0,r1}
	bl object_getPanelParameters
.endfunc // sub_8109794

	mov r1, #0x40 
	tst r0, r1
	pop {r0,r1}
	bne locret_81097A8
	bl object_crackPanel
locret_81097A8:
	pop {pc}
	.balign 4, 0x00
dword_81097AC: .word 0x405FF01
dword_81097B0: .word 0xC000000
.func
.thumb_func
sub_81097B4:
	push {r6,lr}
	mov r6, #1
	b loc_81097BE
.endfunc // sub_81097B4

.func
.thumb_func
sub_81097BA:
	push {r6,lr}
	mov r6, #0
loc_81097BE:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_81097D4
	cmp r6, #0
	beq loc_81097D0
	bl loc_801171C
	b locret_81097D4
loc_81097D0:
	bl sub_8011714
locret_81097D4:
	pop {r6,pc}
.endfunc // sub_81097BA

loc_81097D6:
	push {r6,lr}
	mov r6, #1
	b loc_81097E0
.func
.thumb_func
sub_81097DC:
	push {r6,lr}
	mov r6, #0
loc_81097E0:
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	bne loc_81097F4
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_8109802
loc_81097F4:
	cmp r6, #0
	beq loc_81097FE
	bl loc_801171C
	b locret_8109802
loc_81097FE:
	bl sub_8011714
locret_8109802:
	pop {r6,pc}
.endfunc // sub_81097DC

.func
.thumb_func
sub_8109804:
	push {lr}
	ldr r1, off_8109814 // =off_8109818 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_8109814: .word off_8109818
off_8109818: .word sub_8109820+1
	.word sub_810986E+1
.endfunc // sub_8109804

.func
.thumb_func
sub_8109820:
	push {r4,r6,r7,lr}
	bl object_canMove
	beq loc_8109864
	ldrb r0, [r7,#0x16]
	ldrb r1, [r7,#0x17]
	ldr r2, [r7,#0x34]
	ldr r3, [r7,#0x38]
	bl object_checkPanelParameters
	cmp r0, #0
	beq loc_8109864
	ldrb r0, [r7,#0x16]
	strb r0, [r5,#0x14]
	ldrb r1, [r7,#0x17]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	mov r0, #4
	strh r0, [r7]
	ldrb r0, [r7,#3]
	cmp r0, #0
	beq loc_810985A
	bl sub_81098C4
	b loc_810985E
loc_810985A:
	bl sub_810990E
loc_810985E:
	bl sub_810986E
	b locret_810986C
loc_8109864:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl loc_801171C
locret_810986C:
	pop {r4,r6,r7,pc}
.endfunc // sub_8109820

.func
.thumb_func
sub_810986E:
	push {lr}
	ldr r1, [r5,#0x40]
	ldr r0, [r5,#0x34]
	add r0, r0, r1
	str r0, [r5,#0x34]
	ldr r1, [r5,#0x44]
	ldr r0, [r5,#0x38]
	add r0, r0, r1
	str r0, [r5,#0x38]
	ldrh r0, [r7,#0x10]
	ldrh r1, [r7,#0x12]
	cmp r0, r1
	bne loc_8109890
	bl sub_800E2AC
	bl sub_801A04C
loc_8109890:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bge locret_81098C2
	ldrb r0, [r5,#0x14]
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x15]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A066
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	mov r0, #1
	strb r0, [r7,#0x1a]
	bl loc_801171C
locret_81098C2:
	pop {pc}
.endfunc // sub_810986E

.func
.thumb_func
sub_81098C4:
	push {lr}
	ldrb r0, [r7,#0x17]
	ldrb r1, [r5,#0x13]
	sub r0, r0, r1
	ldr r1, [r7,#0x30]
	mul r1, r0
	beq loc_81098DE
	str r1, [r5,#0x44]
	mov r0, #0
	str r0, [r5,#0x40]
	mov r0, #0x18
	lsl r0, r0, #0x10
	b loc_8109902
loc_81098DE:
	ldrb r0, [r7,#0x16]
	ldrb r1, [r5,#0x12]
	sub r0, r0, r1
	ldr r1, [r7,#0x30]
	mul r0, r1
	bne loc_81098F8
	mov r0, #0
	str r0, [r5,#0x40]
	str r0, [r5,#0x44]
	mov r0, #1
	strh r0, [r7,#0x10]
	strh r0, [r7,#0x12]
	b locret_810990C
loc_81098F8:
	str r0, [r5,#0x40]
	mov r0, #0
	str r0, [r5,#0x44]
	mov r0, #0x28 
	lsl r0, r0, #0x10
loc_8109902:
	ldr r1, [r7,#0x30]
	svc 6
	strh r0, [r7,#0x10]
	lsr r0, r0, #1
	strh r0, [r7,#0x12]
locret_810990C:
	pop {pc}
.endfunc // sub_81098C4

.func
.thumb_func
sub_810990E:
	push {lr}
	mov r0, #0
	str r0, [r5,#0x40]
	str r0, [r5,#0x44]
	ldr r1, [r7,#0x30]
	strh r1, [r7,#0x10]
	lsr r0, r1, #1
	strh r0, [r7,#0x12]
	cmp r1, #0
	beq locret_8109950
	ldrb r0, [r7,#0x17]
	ldrb r2, [r5,#0x13]
	sub r0, r0, r2
	beq loc_8109938
	push {r0}
	mov r0, #0x18
	lsl r0, r0, #0x10
	svc 6
	pop {r1}
	mul r0, r1
	str r0, [r5,#0x44]
loc_8109938:
	ldrb r0, [r7,#0x16]
	ldrb r2, [r5,#0x12]
	sub r0, r0, r2
	beq locret_8109950
	push {r0}
	mov r0, #0x28 
	lsl r0, r0, #0x10
	ldr r1, [r7,#0x30]
	svc 6
	pop {r1}
	mul r0, r1
	str r0, [r5,#0x40]
locret_8109950:
	pop {pc}
.endfunc // sub_810990E

.func
.thumb_func
sub_8109952:
	push {lr}
	ldr r1, off_8109960 // =off_8109964 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
off_8109960: .word off_8109964
off_8109964: .word sub_8109998+1
	.word sub_81099DA+1
	.word sub_8109A50+1
	.word sub_81097BA+1
.endfunc // sub_8109952

loc_8109974:
	push {lr}
	ldr r1, off_8109984 // =off_8109988 
	ldrb r0, [r7]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {pc}
	.balign 4, 0x00
off_8109984: .word off_8109988
off_8109988: .word sub_8109998+1
	.word sub_81099DA+1
	.word sub_8109A50+1
	.word sub_81097B4+1
.func
.thumb_func
sub_8109998:
	push {lr}
	bl object_canMove
	beq loc_81099D0
	ldr r0, [r7,#0x2c]
	ldr r1, [r7,#0x28]
	mov lr, pc
	bx r1
	tst r0, r0
	beq loc_81099D0
	strb r0, [r5,#0x14]
	strb r1, [r5,#0x15]
	bl sub_801BB1C
	mov r0, #0x40 
	bl object_setFlag // (int a1) -> void
	ldrb r0, [r7,#3]
	mov r1, #1
	tst r0, r1
	beq loc_81099C6
	ldrb r0, [r7,#0xe]
	strb r0, [r5,#0x10]
loc_81099C6:
	ldr r0, [r7,#0x30]
	strh r0, [r7,#0x10]
	mov r0, #4
	strh r0, [r7]
	b locret_81099D8
loc_81099D0:
	mov r0, #0
	strb r0, [r7,#0x1a]
	bl sub_8011714
locret_81099D8:
	pop {pc}
.endfunc // sub_8109998

.func
.thumb_func
sub_81099DA:
	push {r4,lr}
	ldrh r0, [r7,#0x10]
	cmp r0, #3
	bne loc_8109A00
	ldrb r0, [r7,#3]
	mov r1, #2
	tst r0, r1
	beq loc_8109A00
	ldrb r0, [r5,#0x14]
	ldrb r1, [r5,#0x15]
	bl sub_800E276 // (int a1, int a2) -> (int n1, int n2)
	add r2, r1, #0
	add r1, r0, #0
	mov r3, #0x10
	lsl r3, r3, #0x10
	ldrb r4, [r7,#0xd]
	bl sub_80E05F6
loc_8109A00:
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bne locret_8109A4E
	ldrb r0, [r7,#3]
	mov r1, #2
	tst r0, r1
	beq loc_8109A22
	mov r0, #0x34 
	add r0, r0, r5
	ldmia r0!, {r1-r3}
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r3, r3, r4
	ldrb r4, [r7,#0xc]
	bl sub_80E05F6
loc_8109A22:
	ldrb r0, [r5,#0x14]
	strb r0, [r5,#0x12]
	ldrb r1, [r5,#0x15]
	strb r1, [r5,#0x13]
	bl sub_801BB46
	bl sub_800E29C // () -> void
	bl sub_801A04C
	bl sub_81096BA
	ldrb r0, [r7,#3]
	mov r1, #1
	tst r0, r1
	beq loc_8109A46
	ldrb r0, [r7,#0xf]
	strb r0, [r5,#0x10]
loc_8109A46:
	ldr r0, [r7,#0x34]
	strh r0, [r7,#0x10]
	mov r0, #8
	strh r0, [r7]
locret_8109A4E:
	pop {r4,pc}
.endfunc // sub_81099DA

.func
.thumb_func
sub_8109A50:
	push {lr}
	ldrh r0, [r7,#0x10]
	sub r0, #1
	strh r0, [r7,#0x10]
	bne locret_8109A74
	mov r0, #0x40 
	bl object_clearFlag // (int bitfield) -> void
	mov r0, #1
	lsl r0, r0, #0x13
	bl object_setFlag // (int a1) -> void
	ldrh r0, [r7,#0x18]
	strh r0, [r7,#0x10]
	mov r0, #1
	strb r0, [r7,#0x1a]
	mov r0, #0xc
	strh r0, [r7]
locret_8109A74:
	pop {pc}
	.balign 4, 0x00
dword_8109A78: .word 0x10104, 0x1000000, 0x80001F4, 0x3E8000A, 0x280801
	.word 0x80205DC, 0x7D00050, 0x780803, 0x80409C4, 0xBB800A0
	.word 0xC80805
dword_8109AA4: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0x34B134B1, 0xFFFF34B1, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x349F349F
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0x349F349F, 0x34B134B1, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0x34B134B1, 0xFFFFFFFF, 0x34A934A9, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x8A38B500, 0x82383801
	.word 0xF707DA01, 0xBD00FDD1, 0x8016381, 0x80165B9, 0x80165C3
	.word 0x80166AF, 0x8016B03, 0x8016CE9, 0x8016B37, 0x8016B73
	.word 0x8109B9D, 0x8109B65, 0x4903B550, 0x58097830, 0x470846FE
	.word 0xBD50, 0x8109BB0, 0x8109BB9, 0x8109BC1, 0x2004B500
	.word 0xBD007030, 0x20F0B500, 0x20098238, 0xFD5AF707, 0xBD00
	.word 0x10104, 0x1000001, 0x8000028, 0x50000A, 0x140801
	.word 0x8020078, 0xA00028, 0x3C0803, 0x8040078, 0xB40028
	.word 0x500805
dword_8109BFC: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0x34B134B1, 0xFFFF34B1, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x349F349F
	.word 0xFFFF349F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0x349F349F, 0x349F349F, 0x349F349F
	.word 0x349F349F, 0x349F349F, 0x349F349F, 0x349F349F, 0x349F349F
	.word 0x34B134B1, 0x34B134B1, 0x34B134B1, 0x34B134B1, 0x34B134B1
	.word 0x34B134B1, 0xFFFFFFFF, 0x34A934A9, 0x8A38B500, 0x82383801
	.word 0x6B38DA0E, 0x28006800, 0x6E68D008, 0xFEB6F700, 0xF7006E68
	.word 0x2000FEA0, 0x60086B39, 0xFD18F707, 0xB500BD00, 0x78384902
	.word 0x46FE5809, 0xBD004708, 0x8109CF8, 0x8109D09, 0x8109D71
	.word 0x8109D99, 0x8109DBB, 0xF704B5D0, 0xD020FC6A, 0xC07DA8
	.word 0x18404911, 0x68436802, 0x6AB96AF8, 0x470846FE, 0xD0144200
	.word 0x75697528, 0xFEF6F711, 0xF7102040, 0x2034FA0E, 0xC80E1940
	.word 0x4242408, 0x2414191B, 0xFC57F7D6, 0x82382003, 0x80382004
	.word 0x2000E003, 0xF70776B8, 0xBDD0FCDD, 0x8109D60, 0x10
	.word 0x20, 0x20, 0xF880080, 0x8A38B500, 0x82383801
	.word 0x7D28D10D, 0x7D6974A8, 0xF71174E9, 0xF704FEE0, 0xF710FA89
	.word 0x2003F95F, 0x20088238, 0xBD008038, 0x8A38B500, 0x82383801
	.word 0x2040D10A, 0xF9DAF710, 0x4C02001, 0xF9D1F710, 0x82388B38
	.word 0x8038200C, 0xB500BD00, 0x38018A38, 0xD1058238, 0x74282000
	.word 0x76B82001, 0xFCA2F707, 0xB540BD00, 0x78384902, 0x46FE5809
	.word 0xBD404708, 0x8109DE4, 0x8109DED, 0x8109E4B, 0x7878B550
	.word 0xD10B2800, 0x70782001, 0x5802001, 0xF9A9F710, 0x74282001
	.word 0x746820FF, 0x82382040, 0x28328A38, 0x201ED103, 0xFDE2F704
	.word 0x281BE00E, 0xF704D10C, 0x7CA9FA54, 0x7CE91840, 0x7B3C2300
	.word 0xF7BC68BE, 0x2001FF59, 0x60086B39, 0x38018A38, 0xD1038238
	.word 0x74282000, 0x80382004, 0xB500BD50, 0x28007878, 0x2001D103
	.word 0x20287078, 0x8A388238, 0x82383801, 0x6E68D10A, 0xFDECF700
	.word 0xF7006E68, 0x2000FDD6, 0x60086B39, 0xFC4EF707, 0xB540BD00
	.word 0x78384902, 0x46FE5809, 0xBD404708, 0x8109E8C, 0x8109E99
	.word 0x8109EC5, 0x8109EE5, 0x7878B500, 0xD1052800, 0x70782001
	.word 0x74282002, 0x82382022, 0x38018A38, 0xD1068238, 0x74282003
	.word 0xF7102001, 0x2004F94A, 0xBD008038, 0x6E68B500, 0xFD9DF700
	.word 0xD0084200, 0x74282004, 0x82382035, 0xF7102001, 0x2008F93F
	.word 0xBD008038, 0x8A38B500, 0x82383801, 0xF707D101, 0xBD00FC11
	.word 0x8016381, 0x8109F4D, 0x8109F6B, 0x80166AF, 0x8109F7F
	.word 0x8109FC5, 0x8109F8B, 0x8109F97, 0x8109FD7, 0x8109CBD
	.word 0x8109CE7, 0x8109DD3, 0x8109E7B, 0xA000A, 0xA001E
	.word 0xA0032, 0xA0046, 0xA0032, 0xA0064, 0x3020100
	.word 0x181E0504, 0xC120C12, 0x7AA8B500, 0xD1072800, 0x7DE97DA8
	.word 0x66684048, 0xFD5DF700, 0x71E82000, 0xFB28F70C, 0xB500BD00
	.word 0x28007AA8, 0x6E68D102, 0xFD64F700, 0xFB23F70C, 0xB500BD00
	.word 0xFDBFF70C, 0xF80DF000, 0xB500BD00, 0xFDD3F70C, 0xF807F000
	.word 0xB500BD00, 0xFDEBF70C, 0xF801F000, 0xB500BD00, 0x28087A68
	.word 0x6E28D10B, 0xD0082800, 0xF7006E68, 0x6E68FD45, 0xFD2FF700
	.word 0x66282000, 0xBD0071E8, 0x7AA8B500, 0xD1012800, 0x71E82000
	.word 0xFE8AF70C, 0xB5D0BD00, 0x26806DAC, 0x49031936, 0x58097830
	.word 0x470846FE, 0xBDD0, 0x8109FF0, 0x810A005, 0x810A081
	.word 0x810A0BB, 0x810A127, 0x810A205, 0x6E68B500, 0xFCFDF700
	.word 0xD1064200, 0x28007DA0, 0x200CD030, 0xFB32F707, 0x79E8E02C
	.word 0xD1092800, 0x71E8201E, 0x20608238, 0x63381940, 0xF7072009
	.word 0xE01FFB25, 0xF895F710, 0x3892101, 0xD1194208, 0x4208490D
	.word 0x2008D004, 0x20007030, 0xE0118070, 0x21017DA8, 0xF7064048
	.word 0x7CC1F9CD, 0x42887CE8, 0x2004D004, 0x20007030, 0xE0038070
	.word 0x7030200C, 0x80702000, 0xBD00, 0xA000, 0x78B0B500
	.word 0xD10B4200, 0x62B84887, 0x49877DA0, 0x83395C41, 0xF707200A
	.word 0x2004FAF3, 0xE00B70B0, 0x42007EB8, 0x200CD104, 0x20007030
	.word 0xE0038070, 0x70302000, 0x80702000, 0xB500BD00, 0x78B04902
	.word 0x46FE5809, 0xBD004708, 0x810A0CC, 0x810A0D5, 0x810A0EF
	.word 0x4876B500, 0x7DA062B8, 0x5C414975, 0x200A8339, 0xFACCF707
	.word 0x80702004, 0xB500BD00, 0x280078F0, 0x2001D10E, 0xF6F770F0
	.word 0x210FFA1A, 0x28024008, 0x200CDA04, 0x20007030, 0xE0098070
	.word 0x81302032, 0x38018930, 0xD1038130, 0x70302000, 0x80702000
	.word 0xB510BD00, 0x9400B081, 0xF7041C28, 0x421BFE2F, 0x5C4D026
	.word 0x2C9F0DE4, 0x1C28D111, 0x8CC28C81, 0x42910892, 0xF000DD03
	.word 0x2800F833, 0x1C20D018, 0xFAC6F708, 0xFA92F707, 0xF8E1F705
	.word 0xF700E00B, 0x4912FACF, 0xDB0B4288, 0xF7081C20, 0xF707FAB9
	.word 0xF705FA85, 0x2010F8D4, 0x20007030, 0xE0128070, 0x7DA09C00
	.word 0x5C09494B, 0x807339, 0x5808494A, 0x206060B8, 0x63381940
	.word 0xF707200B, 0x2000FA6F, 0x20007030, 0xB0018070, 0xBD10
	.word 0x12C, 0xB084B5D0, 0x2600466F, 0x21001C38, 0x7DAB4A0F
	.word 0xFD06F704, 0xDD162800, 0x41B2301, 0x8CA1683C, 0x8928CE2
	.word 0xDC0B4291, 0xDC094299, 0xB40BDB06, 0xF9A5F6F7, 0x40082101
	.word 0xD001BC0B, 0x1C261C0B, 0x38013704, 0x1C30D1EA, 0xBDD0B004
	.word 0x7FFFFFFF, 0x78B0B500, 0x70B03001, 0xDB032828, 0x7030200C
	.word 0x80702000, 0xB550BD00, 0x21017DA8, 0xF7064048, 0x7CC0F8E9
	.word 0x42887CE9, 0xDB03D002, 0xE0023101, 0xE00C2000, 0x7CA83901
	.word 0x1C0E1C04, 0xF7FF4B12, 0xF702FA5A, 0x2800FD1E, 0x1C20D001
	.word 0xBD501C31, 0xF6F7B5D0, 0x2101F96C, 0x4C104008, 0x20001824
	.word 0x34015620, 0xD00D2800, 0x18097CE9, 0x4B067CA8, 0xFA41F7FF
	.word 0x1C0F1C06, 0xFD03F702, 0xD0EE2800, 0x1C391C30, 0xBDD0
	.word 0x810A290, 0x10, 0xF8800A0, 0x30, 0xF880080
	.word 0x810A2A4, 0x1FF01, 0x810A21B, 0x8109F46, 0x810A255
	.word 0x8109F46, 0x8109F40, 0x8109F28, 0x10204, 0x1000002
	.word 0x4002046, 0x20780014, 0x280401, 0x4022096, 0x20B4003C
	.word 0x500403, 0x404208C, 0x20D2003C, 0x640405
dword_810A2EC: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFF34A3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0x34A334A3, 0x34A334A3, 0x34A334A3
	.word 0x34A334A3, 0x34A334A3, 0x34A334A3, 0x34A334A3, 0x34A334A3
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x4903B500, 0x58097838
	.word 0x470846FE, 0xBD00, 0x810A3C0, 0x810A3DD, 0x810A439
	.word 0x810A463, 0x810A49D, 0x810A4D1, 0x810A50D, 0x810A51F
	.word 0x7878B5D0, 0xD10F2800, 0xF8A6F000, 0xD0062800, 0x74282003
	.word 0x82382014, 0x8038200C, 0x2001E01D, 0x20017078, 0xE0187428
	.word 0xFCF1F6F8, 0x42082180, 0x2002D013, 0x20047428, 0xF7038038
	.word 0x7CA9FF58, 0x7CE91840, 0x41B2310, 0x27606B3A, 0xF7DB197F
	.word 0x2084F8AE, 0xF6F630FF, 0xBDD0F8CB, 0xF000B5D0, 0x2800F87B
	.word 0x2003D005, 0x20147428, 0x200C8238, 0x6E288038, 0xD1052800
	.word 0x74282003, 0x82388B38, 0x80382008, 0xB500BDD0, 0x28037C28
	.word 0xF6F8D106, 0x2180FCBE, 0xD0014208, 0x74282000, 0xF85CF000
	.word 0xD0062800, 0x74282003, 0x82382014, 0x8038200C, 0x8A38E005
	.word 0x82383801, 0xF707D101, 0xBD00F93D, 0x7C28B500, 0xD1062803
	.word 0xFCA1F6F8, 0x42082180, 0x2000D001, 0x8A387428, 0x82383801
	.word 0x2000D109, 0x66686628, 0xF704201E, 0x2004FA8B, 0x20107428
	.word 0xBD008038, 0xF6F8B500, 0x2180FC8A, 0xD0164208, 0xFEF5F703
	.word 0x18407CA9, 0x6B7A7CE9, 0x41B2318, 0x68BE2400, 0xF97DF7C4
	.word 0xF6F620AF, 0x2000F869, 0x200566A8, 0x8B387428, 0x20148238
	.word 0xBD008038, 0x38018A38, 0xD1038238, 0x74282006, 0x80382018
	.word 0xB50046F7, 0xFC63F6F8, 0x42082180, 0x2000D003, 0xF7077428
	.word 0xBD00F8F1, 0x2068B500, 0x220C2107, 0xF878F7FF, 0xBD00
	.word 0x0, 0x0, 0x0
off_810A550: .word sub_8016380+1
	.word sub_80165B8+1
	.word sub_810A5C2+1
	.word sub_80166AE+1
	.word sub_810A5D6+1
	.word sub_8016CE8+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word loc_810A5EA+1
	.word sub_81097BA+1
	.word sub_8109952+1
dword_810A57C: .word 0x810A3AD, 0x1A000, 0x1B000, 0x1C000, 0x1D000, 0x1E000
	.word 0x1F000, 0x70000, 0x70000, 0x70000, 0x70000, 0x70000
	.word 0x70000, 0x503C2814, 0x201643C, 0x2020202, 0x2A30363C
	.byte 0x24 
	.byte 0x1E
.endfunc // sub_8109A50

.func
.thumb_func
sub_810A5C2:
	push {lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_810A5D0
	mov r0, #0
	str r0, [r5,#0x60]
	str r0, [r5,#0x64]
loc_810A5D0:
	bl sub_80165C2
	pop {pc}
.endfunc // sub_810A5C2

.func
.thumb_func
sub_810A5D6:
	push {lr}
	ldrb r0, [r5,#0xb]
	cmp r0, #0
	bne loc_810A5E4
	mov r0, #0
	str r0, [r5,#0x60]
	str r0, [r5,#0x64]
loc_810A5E4:
	bl sub_8016B02
	pop {pc}
.endfunc // sub_810A5D6

loc_810A5EA:
	push {r4,r6,lr}
	bl sub_810A6F4
	cmp r0, #0
	bne locret_810A5FE
	ldr r1, off_810A600 // =off_810A604 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
locret_810A5FE:
	pop {r4,r6,pc}
off_810A600: .word off_810A604
off_810A604: .word sub_810A610+1
	.word sub_810A648+1
	.word sub_810A6C0+1
.func
.thumb_func
sub_810A610:
	push {lr}
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103F8
	str r0, [r7,#0x2c]
	ldr r0, off_810A818 // =sub_810A724+1 
	str r0, [r7,#0x28]
	mov r0, #1
	strh r0, [r7,#0x18]
	mov r0, #2
	strb r0, [r7,#3]
	mov r0, #0x14
	strb r0, [r7,#0xc]
	mov r0, #0x15
	strb r0, [r7,#0xd]
	mov r0, #3
	str r0, [r7,#0x30]
	str r0, [r7,#0x34]
	mov r0, #0xa
	bl sub_8011680
	bl sub_8109952
	mov r0, #4
	strb r0, [r6]
	pop {pc}
.endfunc // sub_810A610

.func
.thumb_func
sub_810A648:
	push {lr}
	bl object_getFlag // () -> int
	mov r1, #1
	lsl r1, r1, #0xf
	tst r0, r1
	bne loc_810A66E
	mov r1, #1
	lsl r1, r1, #0xd
	tst r0, r1
	beq loc_810A6A2
	ldrb r0, [r6,#4]
	add r1, r0, #1
	cmp r1, #2
	blt loc_810A668
	mov r1, #0
loc_810A668:
	strb r1, [r6,#4]
	ldr r1, off_810A6B0 // =off_810A6B8 
	b loc_810A67C
loc_810A66E:
	ldrb r0, [r6,#5]
	add r1, r0, #1
	cmp r1, #3
	blt loc_810A678
	mov r1, #0
loc_810A678:
	strb r1, [r6,#5]
	ldr r1, dword_810A6B4 // =off_810A6B8 
loc_810A67C:
	ldrb r0, [r1,r0]
	cmp r0, #0
	beq loc_810A692
	cmp r0, #1
	beq loc_810A6A2
	bl sub_8001532
	mov r1, #3
	svc 6
	cmp r1, #0
	beq loc_810A6A2
loc_810A692:
	mov r0, #0x64 
	strh r0, [r7,#0x10]
	mov r0, #9
	bl sub_8011680
	mov r0, #0
	strb r0, [r6]
	b locret_810A6A6
loc_810A6A2:
	mov r0, #8
	strb r0, [r6]
locret_810A6A6:
	pop {pc}
	.word 0
	.byte 0, 0, 0, 0
off_810A6B0: .word off_810A6B8
dword_810A6B4: .word 0x810A6BA
off_810A6B8: .word 0x100
	.word 0x2
.endfunc // sub_810A648

.func
.thumb_func
sub_810A6C0:
	push {lr}
	ldrb r1, [r4,#0x16]
	ldr r0, off_810A81C // =dword_810A57C+64 
	ldrb r0, [r0,r1]
	strh r0, [r7,#0x18]
	ldr r0, dword_810A820 // =dword_810A57C 
	ldrb r0, [r0,r1]
	strb r0, [r7,#0xc]
	ldr r0, off_810A824 // =dword_810A57C+52 
	ldrb r0, [r0,r1]
	strh r0, [r7,#8]
	mov r0, #0xa
	strh r0, [r7,#0xa]
	lsl r1, r1, #2
	ldr r0, off_810A828 // =dword_810A57C+4 
	ldr r0, [r0,r1]
	str r0, [r7,#0x30]
	ldr r0, off_810A82C // =dword_810A57C+28 
	ldr r0, [r0,r1]
	str r0, [r7,#0x34]
	mov r0, #0xb
	bl sub_8011680
	mov r0, #0
	strb r0, [r6]
	pop {pc}
.endfunc // sub_810A6C0

.func
.thumb_func
sub_810A6F4:
	push {r4,r6,lr}
	mov r6, #0
	add r0, r5, #0
	bl sub_800ED90
	tst r3, r3
	beq loc_810A720
	lsl r4, r0, #0x17
	lsr r4, r4, #0x17
	bl sub_800A704
	ldr r1, off_810A830 // =0x12c 
	cmp r0, r1
	blt loc_810A720
	add r0, r4, #0
	bl sub_80126E4
	bl sub_8011680
	bl sub_800F322
	mov r6, #1
loc_810A720:
	add r0, r6, #0
	pop {r4,r6,pc}
.endfunc // sub_810A6F4

.func
.thumb_func
sub_810A724:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x18
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
.endfunc // sub_810A724

	bl sub_810A7E0
	add r6, r0, #0
	add r7, sp, #0
	mov r1, #1
	mov r3, #0
loc_810A73E:
	mov r2, #1
	tst r2, r6
	beq loc_810A766
	ldrb r0, [r5,#0x12]
	push {r0,r1,r3}
	ldr r3, off_810A834 // =dword_810A7D0 
	bl sub_81096FA
	bl object_checkPanelParameters
	cmp r0, #0
	pop {r0,r1,r3}
	beq loc_810A766
	add r2, r1, #0
	lsl r1, r1, #4
	orr r0, r1
	strb r0, [r7]
	add r7, #1
	add r3, #1
	add r1, r2, #0
loc_810A766:
	lsr r6, r6, #1
	add r1, #1
	cmp r1, #3
	ble loc_810A73E
	add r0, r3, #0
	bne loc_810A7A0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r4,#0x13]
	ldr r3, off_810A838 // =dword_810A7D0 
	bl sub_81096FA
	push {r0,r1}
	bl object_checkPanelParameters
	cmp r0, #0
	pop {r0,r1}
	bne loc_810A7B4
	ldrb r0, [r5,#0x12]
	ldr r3, off_810A83C // =dword_810A7D0 
	bl sub_81096FA
	add r7, sp, #0
	bl sub_800CFDC
	tst r0, r0
	bne loc_810A7A0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	b loc_810A7B4
loc_810A7A0:
	add r7, r0, #0
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_810A7B4:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	pop {r0,r1}
	add sp, sp, #0x18
	pop {r4,r6,r7,pc}
	.word 0, 0
	.byte 0, 0, 0, 0
dword_810A7D0: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.func
.thumb_func
sub_810A7E0:
	push {r4,r6,r7,lr}
	sub sp, sp, #0x10
	mov r7, sp
	mov r4, #7
	add r0, r7, #0
	ldrb r3, [r5,#0x16]
	mov r1, #7
	mov r2, #0xc
	bl object_getEnemyByNameRange
	cmp r0, #0
	ble loc_810A812
loc_810A7F8:
	ldr r6, [r7]
	ldrb r1, [r6,#0x13]
	ldrb r3, [r6,#9]
	cmp r3, #0xa
	bne loc_810A804
	ldrb r1, [r6,#0x15]
loc_810A804:
	mov r2, #1
	sub r1, #1
	lsl r2, r1
	bic r4, r2
	add r7, #4
	sub r0, #1
	bne loc_810A7F8
loc_810A812:
	add r0, r4, #0
	add sp, sp, #0x10
	pop {r4,r6,r7,pc}
off_810A818: .word sub_810A724+1
off_810A81C: .word dword_810A57C+0x40
dword_810A820: .word 0x810A5B6
off_810A824: .word dword_810A57C+0x34
off_810A828: .word dword_810A57C+4
off_810A82C: .word dword_810A57C+0x1C
off_810A830: .word 0x12C
off_810A834: .word dword_810A7D0
off_810A838: .word dword_810A7D0
off_810A83C: .word dword_810A7D0
dword_810A840: .word 0x10304, 0x1000003, 0x6000082, 0xA00032, 0x320601
	.word 0x60200D2, 0xF00032, 0x320603, 0x60400B4, 0x1180032
	.word 0x320605
dword_810A86C: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x4903B500, 0x58097838
	.word 0x470846FE, 0xBD00, 0x810A940, 0x810A94D, 0x810A9AF
	.word 0x81097B5, 0x8A38B510, 0x82383801, 0x8938D11B, 0x4098979
	.word 0x1C014308, 0x7CAA6E68, 0xF7B17CEB, 0xF722FD27, 0x2806FC63
	.word 0x2014D002, 0xF832F704, 0xFB7CF70F, 0x30FF2021, 0xFE24F6F5
	.word 0x80382004, 0x70782000, 0x8A38E00E, 0x42082104, 0xF703D10A
	.word 0x7CA9FC98, 0x7CE91840, 0x7DEA7DAB, 0x22064053, 0xFE5AF7FE
	.word 0xB550BD10, 0x42006E28, 0x480AD113, 0x5A69217C, 0x58400089
	.word 0x8B387428, 0x20018238, 0xFB58F70F, 0x7CE97CA8, 0xF8B9F711
	.word 0xF70F2040, 0x2008FBC1, 0xBD508038, 0x810A9E4, 0x0
dword_810A9E8: .word 0x2, 0x8016381, 0x810ABF7, 0x810AA91, 0x80166AF, 0x8016B03
	.word 0x8016CE9, 0x8016B37, 0x8016B73, 0x810AA73, 0x81097B5, 0x810A92D
	.word 0x8109975, 0x810AC35, 0x6E5A4628, 0x7846, 0xA0A0A0A, 0xA0A
dword_810AA30: .word 0x4B004B
	.word 0x4B004B
	.word 0x4B004B
dword_810AA3C: .word 0x6AAAA, 0x6AAAA, 0x6AAAA, 0x6AAAA, 0x6AAAA, 0x6AAAA
dword_810AA54: .word 0x2E20, 0x2E20, 0x2E20, 0x2E20, 0x2E20, 0x2E20, 0x6080A0C
	.word 0xB5500A0C, 0x78304902, 0x46FE5809, 0xBD504708, 0x810AA84, 0x810AAD1, 0x810AAE7
	.word 0x810AB41, 0x7AA8B500, 0xD1152800, 0xFB65F70F, 0x4208490B, 0x6E68D010, 0xFC83F7B1
	.word 0x66682000, 0x42006DA8, 0x6E00D008, 0xD0054200, 0x22147801, 0x70014311, 0xF97EF7D6
	.word 0xFD7DF70B, 0xBD00, 0x40000000, 0xF000B500, 0x4200F8E2, 0x2004D002, 0xE0017030
	.word 0x70302008, 0xB500BD00, 0xFD7BF703, 0x7DA1D01F, 0x83382030, 0x5C4048C8, 0x48C88138
	.word 0x81785C40, 0x21682000, 0x7CA85468, 0xF7117CE9, 0x4809F807, 0x5A69217C, 0x58400089
	.word 0x20147428, 0x20018238, 0x20406628, 0xFB15F70F, 0xF706200A, 0x2000FDA9, 0xBD007030
	.word 0x810AB38, 0x1, 0x2, 0x48B7B500, 0x7DA862B8, 0x40482101, 0xFC54F705
	.word 0x48B462F8, 0x5C407DA1, 0xF70F8338, 0x49B2FB04, 0xD0024208, 0x303C8B38, 0x20028338
	.word 0x201470F8, 0x20157338, 0x20037378, 0x63786338, 0xF706200B, 0xF7FEFD7F, 0x2000FEF7
	.word 0xBD007030, 0xB410B510, 0x89798938, 0x43080409, 0x22001C06, 0xF7B17DA4, 0x6668FBF4
	.word 0x66282000, 0x217C2000, 0x20005268, 0x5268217E, 0x67286BA8, 0x22746B69, 0x227850A9
	.word 0xF00050A8, 0x2001F81C, 0x5268217E, 0xBD10BC10
.endfunc // sub_810A7E0

.func
.thumb_func
sub_810ABD0:
	push {r4,lr}
	ldr r0, [r5,#0x54]
	ldrb r0, [r0,#6]
	tst r0, r0
	bne locret_810ABF4
	mov r0, #0x7e 
	ldrh r0, [r5,r0]
	tst r0, r0
	beq locret_810ABF4
	mov r0, #0x7c 
	ldrh r0, [r5,r0]
	tst r0, r0
	bne locret_810ABF4
	mov r0, #1
	mov r1, #0x7c 
	strh r0, [r5,r1]
	mov r0, #2
	strb r0, [r5,#0x10]
locret_810ABF4:
	pop {r4,pc}
.endfunc // sub_810ABD0

	push {lr}
	bl sub_80165B8
	pop {pc}
	push {r4-r7,lr}
	ldr r4, [r5,#0x58]
	ldrb r0, [r4,#0x16]
	ldr r1, off_810AC28 // =dword_810AC2C 
	ldrb r0, [r1,r0]
	cmp r0, #0xff
	beq locret_810AC24
	push {r0}
	bl sub_801A7CC
	pop {r4}
	ldr r6, [r5,#0x58]
	mov r7, #0x60 
	add r7, r7, r6
	bl sub_80E0D98
	mov r0, #0x89
	bl sound_play // () -> void
locret_810AC24:
	pop {r4-r7,pc}
	.balign 4, 0x00
off_810AC28: .word dword_810AC2C
dword_810AC2C: .word 0xD0E0B0C, 0xFFFF0F0F, 0xBD00B500, 0x6EE8B5F0, 0xD1204200
	.word 0xFA91F70F, 0x42084979, 0x2060D11D, 0x2212210D, 0xFCEEF7FE
	.word 0xD1162800, 0x21017DA8, 0xF7054048, 0x7CC1FBCB, 0x42917CEA
	.word 0x62F8D10D, 0x6BAA6B81, 0x29001A89, 0x4249DA00, 0x42914A6B
	.word 0x2001DC03, 0x2000BDF0, 0x200066E8, 0xB5F0BDF0, 0xB5F0BDF0
	.word 0xB5F0BDF0, 0xB5F0BDF0, 0xB5F0BDF0, 0x5C68216B, 0x54683001
	.word 0xDA092805, 0xF6F6B403, 0x2101FC42, 0xBC064008, 0x54A81840
	.word 0xE0022000, 0x54682000, 0xBDF02001, 0xF70FB5F0, 0x4958FA4E
	.word 0xD1114208, 0x5C68216B, 0xDB022804, 0xF868F000, 0xF6F6E008
	.word 0x2101FC28, 0x804008, 0x58084905, 0x470046FE, 0xD1044200
	.word 0xF853F000, 0x7CA8D101, 0xBDF07CE9, 0x810AD08, 0x810AD0C
	.word 0x810AD11, 0x810AD89, 0xF000B5F0, 0xBDF0F801, 0xB088B5F0
	.word 0x1C38AF00, 0x22AE2101, 0xF7037DAB, 0x4200FF55, 0x1C06D02A
	.word 0x61F82000, 0xB4481C3B, 0x42A96819, 0x7D8ED011, 0x7CC97C88
	.word 0xF7FE4B3A, 0x2408FCD8, 0xF87BF70B, 0xD0062800, 0x43080109
	.word 0x1C5A69FB, 0x19DB61FA, 0xBC487418, 0x3E013304, 0x69F8D1E5
	.word 0xD0092800, 0xF6F61C04, 0x1C21FBDE, 0xA804DF06, 0x9015C40
	.word 0xF400740, 0xBDF0B008, 0x7CA8B5F0, 0x4B297CE9, 0xFCB3F7FE
	.word 0x7DAE242C, 0xF855F70B, 0xB5F0BDF0, 0xF7FE4B25, 0xF70AFCAA
	.word 0xBDF0FF75, 0x7DA8B5F0, 0x40482101, 0xFB20F705, 0xD0244200
	.word 0xB4201C07, 0xF7031C3D, 0x2103FA82, 0x7CA94348, 0x7CE91840
	.word 0x4B1ABC20, 0xFC91F7FE, 0x7DAE2401, 0xF833F70B, 0xD1104200
	.word 0x1C3DB420, 0xFA6FF703, 0x43482103, 0x18407CA9, 0xBC207CE9
	.word 0xF7FE4B11, 0x2407FC7E, 0xF70B7DAE, 0xBDF0F820, 0x0
dword_810AE0C: .word 0xF8800A0, 0x20, 0xF880080, 0x810AA20, 0x810AA28
	.word 0x810ACC5, 0x810AA6C, 0x8000, 0xA000, 0x810AE08
	.word 0x810AE08, 0x810AE08, 0x810AE08, 0x810AE08
dword_810AE44: .word 0x10404, 0x1000004
dword_810AE4C: .word 0x400005A, 0x108C001E, 0x3C0401, 0x40220A0, 0xC8005A
	.word 0x780403, 0x40410A0, 0x20DC005A, 0x780405
dword_810AE70: .word 0x34A334A3, 0x34A334A3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x34A334A3, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFF34A3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x34A334A3
	.word 0x34A334A3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0x34A334A3, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFF34A3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x4903B500, 0x58097BB8
	.word 0x470846FE, 0xBD00, 0x810AF44, 0x810AF51, 0x810AF91
	.word 0x810AFD5, 0x7BF8B500, 0xD10D2800, 0x73F82001, 0x63382000
	.word 0x5802001, 0xF8F5F70F, 0x210378F8, 0x30014348, 0xE00C7428
	.word 0xFF39F6F7, 0x42082180, 0x7C28D007, 0x74283001, 0xF703201E
	.word 0x2004FD29, 0xBD0081F8, 0x8A38B500, 0xD30E08C0, 0xF997F703
	.word 0x18407CA9, 0x7DEB7DAA, 0x22044053, 0x290078F9, 0x2202D000
	.word 0xF7FE7CE9, 0x8A38FB55, 0x82383801, 0x7C28D109, 0x74283001
	.word 0xF6F520B0, 0x8B38FB01, 0x20088238, 0xBD0081F8, 0x7BF8B500
	.word 0x73F83001, 0xD1292804, 0xF703B4D0, 0x204FA38, 0x4007BA8
	.word 0x20164304, 0x290078F9, 0x2017D000, 0xF7034304, 0x7CA9F966
	.word 0x7CE91840, 0xF703B403, 0x1C0AF936, 0x23101C01, 0xF7D5041B
	.word 0x4CAAFAF0, 0x78F92004, 0xD0002900, 0x43042002, 0x7BAABC03
	.word 0x68BE2300, 0xF7BA2703, 0xBCD0F99C, 0x38018A38, 0xD1018238
	.word 0x63382001
	.byte  0
	.byte 0xBD
	.byte 0x40 
byte_810B043: .byte 0xB5, 0x2, 0x49, 0x38, 0x78, 0x9, 0x58, 0xFE, 0x46, 0x8
	.byte 0x47, 0x40, 0xBD, 0x54, 0xB0, 0x10, 0x8, 0x59, 0xB0, 0x10
	.byte 0x8, 0x0, 0xB5, 0xFF, 0xF7, 0x69, 0xFF, 0x38, 0x6B, 0x0
	.byte 0x28, 0x1, 0xD0, 0x6, 0xF7, 0x56, 0xFB, 0x0, 0xBD, 0x40
byte_810B06B: .byte 0xB5, 0x2, 0x49, 0x38, 0x78, 0x9, 0x58, 0xFE, 0x46, 0x8
	.byte 0x47, 0x40, 0xBD, 0x7C, 0xB0, 0x10, 0x8, 0x91, 0xB0, 0x10
	.byte 0x8, 0xB9, 0xB0, 0x10, 0x8, 0x3F, 0xB1, 0x10, 0x8, 0xB9
	.byte 0xB0, 0x10, 0x8, 0x5D, 0xB1, 0x10, 0x8, 0xD0, 0xB5, 0x3
	.byte 0xF7, 0xA6, 0xFA, 0xC, 0xD0, 0x40, 0x20, 0xF, 0xF7, 0x5A
	.byte 0xF8, 0xA8, 0x7C, 0xE9, 0x7C, 0x9, 0x1, 0x8, 0x43, 0x38
	.byte 0x64, 0x4, 0x20, 0x38, 0x80, 0x0, 0xF0, 0x4, 0xF8, 0x1
	.byte 0xE0, 0x6, 0xF7, 0x2F, 0xFB, 0xD0, 0xBD, 0x0, 0xB5, 0x78
	.byte 0x78, 0x0, 0x28, 0x21, 0xD1, 0x1, 0x20, 0x78, 0x70, 0x7F
	.byte 0x4A, 0x1, 0x23, 0xA8, 0x7C, 0xB9, 0x7D, 0x9, 0x1A, 0xD
	.byte 0xD0, 0x1, 0xD5, 0x52, 0x42, 0x2, 0x3B, 0x2A, 0x64, 0xC0
	.byte 0x18, 0xE9, 0x7C, 0x7A, 0x6B, 0xBB, 0x6B, 0x3, 0xB4, 0x1
	.byte 0xF7, 0xD0, 0xFD, 0x0, 0x28, 0x3, 0xBC, 0x3, 0xD1, 0x38
	.byte 0x78, 0x4, 0x30, 0x38, 0x80, 0x23, 0xE0, 0x28, 0x75, 0x69
	.byte 0x75, 0x10, 0xF7, 0x10, 0xFD, 0x5, 0x20, 0x78, 0x82, 0x40
	.byte 0x8, 0xF8, 0x63, 0x29, 0x6C, 0x68, 0x6B, 0x40, 0x18, 0x68
	.byte 0x63, 0x78, 0x8A, 0xF9, 0x6B, 0x88, 0x42, 0x3, 0xD1, 0x3
	.byte 0xF7, 0xCA, 0xF8, 0xE, 0xF7, 0x98, 0xFF, 0x78, 0x8A, 0x1
	.byte 0x38, 0x78, 0x82, 0xB, 0xDA, 0x28, 0x7D, 0xA8, 0x74, 0x69
	.byte 0x7D, 0xE9, 0x74, 0x10, 0xF7, 0xB, 0xFD, 0x3, 0xF7, 0xB4
	.byte 0xF8, 0xE, 0xF7, 0x97, 0xFF, 0x0, 0x20, 0x78, 0x70, 0x0
	.byte 0xBD, 0x0, 0xB5, 0xFF, 0xF7, 0xF6, 0xFE, 0x38, 0x6B, 0x0
	.byte 0x28, 0x7, 0xD0, 0x38, 0x6C, 0x1, 0x9, 0x40, 0x7, 0x40
	.byte 0xF, 0xB8, 0x75, 0xF9, 0x75, 0xC, 0x20, 0x38, 0x80, 0x0
	.byte 0xBD, 0x0, 0xB5, 0x40, 0x20, 0xE, 0xF7, 0xFC, 0xFF, 0x1
	.byte 0x20, 0xC0, 0x4, 0xE, 0xF7, 0xF3, 0xFF, 0x6, 0xF7, 0xD2
	.byte 0xFA, 0x0, 0xBD, 0x40
byte_810B173: .byte 0xB5, 0x2, 0x49, 0x38, 0x78, 0x9, 0x58, 0xFE, 0x46, 0x8
	.byte 0x47, 0x40, 0xBD, 0x84, 0xB1, 0x10, 0x8, 0x99, 0xB1, 0x10
	.byte 0x8, 0xF5, 0xB1, 0x10, 0x8, 0x45, 0xB2, 0x10, 0x8, 0x71
	.byte 0xB2, 0x10, 0x8, 0xAF, 0xB2, 0x10, 0x8, 0xD0, 0xB5, 0x3
	.byte 0xF7, 0x22, 0xFA, 0x26, 0xD0, 0x3, 0xF7, 0x93, 0xF8, 0xFA
	.byte 0x6A, 0x91, 0x7C, 0x8, 0x1A, 0xD1, 0x7C, 0x10, 0x22, 0x46
	.byte 0x4B, 0x3, 0xB4, 0x1, 0xF7, 0x68, 0xFD, 0x0, 0x28, 0x3
	.byte 0xBC, 0x18, 0xD0, 0xB8, 0x75, 0xF9, 0x75, 0xA8, 0x7C, 0xE9
	.byte 0x7C, 0x10, 0xF7, 0xAA, 0xFC, 0x40, 0x20, 0xE, 0xF7, 0xC2
	.byte 0xFF, 0x3, 0x20, 0x78, 0x82, 0xB8, 0x7D, 0xF9, 0x7D, 0x3
	.byte 0xF7, 0x4E, 0xF8, 0xA, 0x1C, 0x1, 0x1C, 0x10, 0x23, 0x1B
	.byte 0x4, 0x15, 0x24, 0xD5, 0xF7, 0x7, 0xFA, 0x4, 0x20, 0x38
	.byte 0x80, 0x1, 0xE0, 0x6, 0xF7, 0x91, 0xFA, 0xD0, 0xBD, 0x0
	.byte 0xB5, 0x78, 0x8A, 0x1, 0x38, 0x78, 0x82, 0xD, 0xD1, 0x0
	.byte 0xF0, 0xD, 0xF8, 0xB8, 0x7D, 0xA8, 0x74, 0xF9, 0x7D, 0xE9
	.byte 0x74, 0x3, 0xF7, 0x47, 0xF8, 0xE, 0xF7, 0x1D, 0xFF, 0x0
	.byte 0xF0, 0x17, 0xF8, 0x8, 0x20, 0x38, 0x80, 0x0, 0xBD, 0xD0
	.byte 0xB5, 0x3, 0xF7, 0x1A, 0xF9, 0x4, 0x6, 0x6, 0x48, 0x4
	.byte 0x43, 0x69, 0x6B, 0xAA, 0x6B, 0xEB, 0x6B, 0x2, 0x4E, 0x2
	.byte 0x4F, 0xD8, 0xF7, 0xE2, 0xF8, 0xD0, 0xBD, 0xE0, 0x83, 0x0
	.byte 0x0, 0x14, 0x0, 0x1, 0x1, 0x4, 0x4, 0x0, 0x0, 0x10
	.byte 0xB5, 0xFF, 0xF7, 0x73, 0xFE, 0x38, 0x6B, 0x0, 0x28, 0xE
	.byte 0xD0, 0x28, 0x7D, 0x69, 0x7D, 0x3, 0xF7, 0xF, 0xF8, 0xA
	.byte 0x1C, 0x1, 0x1C, 0x10, 0x23, 0x1B, 0x4, 0x15, 0x24, 0xD5
	.byte 0xF7, 0xC8, 0xF9, 0x3, 0x20, 0x78, 0x82, 0xC, 0x20, 0x38
	.byte 0x80, 0x10, 0xBD, 0x0, 0xB5, 0x78, 0x8A, 0x1, 0x38, 0x78
	.byte 0x82, 0x18, 0xD1, 0xFF, 0xF7, 0xCF, 0xFF, 0x28, 0x7D, 0xA8
	.byte 0x74, 0x69, 0x7D, 0xE9, 0x74, 0x10, 0xF7, 0x5E, 0xFC, 0x3
	.byte 0xF7, 0x7, 0xF8, 0xE, 0xF7, 0xDD, 0xFE, 0x0, 0x20, 0x28
	.byte 0x74, 0x40, 0x20, 0xE, 0xF7, 0x60, 0xFF, 0x1, 0x20, 0xC0
	.byte 0x4, 0xE, 0xF7, 0x57, 0xFF, 0x38, 0x8B, 0x38, 0x82, 0x10
	.byte 0x20, 0x38, 0x80, 0x0, 0xBD, 0x0, 0xB5, 0x38, 0x8A, 0x1
	.byte 0x38, 0x38, 0x82, 0x1, 0xD1, 0x6, 0xF7, 0x2C, 0xFA, 0x0
	.byte 0xBD, 0x0, 0x0, 0x0, 0xFF, 0x5, 0x7, 0x0, 0x0, 0x8
	.byte 0x0, 0x80, 0x0, 0x88, 0xF, 0x0, 0x0, 0x0, 0x0
off_810B2D0: .word sub_8016380+1
	.word sub_80165B8+1
	.word sub_810B338+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8016CE8+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word loc_810B350+1
	.word sub_81097BA+1
	.word sub_8109804+1
	.word byte_810B043
	.word byte_810B06B
	.word sub_8109952+1
	.word byte_810B173
.func
.thumb_func
sub_810B30C:
	push {lr}
	ldr r4, dword_810B334 // =0x7000404 
	mov r2, #0
	mov r3, #0xff
	bl sub_80C468C
	str r0, [r5,#0x60]
	bl sub_80C46C6
	bl sub_8001532
	mov r1, #1
	and r0, r1
	lsl r0, r0, #1
	sub r0, #1
	str r0, [r5,#0x68]
	mov r0, #0x6c 
	mov r1, #0
	strh r1, [r5,r0]
	pop {pc}
dword_810B334: .word 0x7000404
.endfunc // sub_810B30C

.func
.thumb_func
sub_810B338:
	push {lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_810B34A
	ldr r0, [r5,#0x60]
	cmp r0, #0
	beq loc_810B34A
	bl sub_80C46B0
loc_810B34A:
	bl sub_80165C2
	pop {pc}
.endfunc // sub_810B338

loc_810B350:
	push {r4,r6,lr}
	ldr r1, off_810B360 // =off_810B364 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,r6,pc}
	.byte 0, 0
off_810B360: .word off_810B364
off_810B364: .word sub_810B36C+1
	.word sub_810B3CC+1
.func
.thumb_func
sub_810B36C:
	push {lr}
	mov r0, #0x6c 
	mov r1, #0
	strh r1, [r5,r0]
	mov r0, #0
	str r0, [r5,#0x64]
	bl sub_810B54C
	cmp r0, #0
	bne locret_810B3A0
	ldr r1, off_810B3B0 // =off_810B3B4 
	ldrb r0, [r4,#0x16]
	lsl r0, r0, #2
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	ldr r0, [r5,#0x64]
	tst r0, r0
	bne locret_810B3A0
	bl object_getFlag // () -> int
	ldr r1, dword_810B74C+12 // =0x8000 
	tst r0, r1
	beq locret_810B3A0
	mov r0, #4
	strb r0, [r6]
locret_810B3A0:
	pop {pc}
	.word 0, 0, 0
	.byte 0, 0
off_810B3B0: .word off_810B3B4
off_810B3B4: .word sub_810B3E4+1
	.byte 0x37 
	.byte 0xB4
	.byte 0x10
	.byte  8
	.byte 0x9D
	.byte 0xB4
	.byte 0x10
	.byte  8
	.byte 0xE5
	.byte 0xB3
	.byte 0x10
	.byte  8
	.byte 0x37 
	.byte 0xB4
	.byte 0x10
	.byte  8
	.byte 0x9D
	.byte 0xB4
	.byte 0x10
	.byte  8
.endfunc // sub_810B36C

.func
.thumb_func
sub_810B3CC:
	push {lr}
	mov r0, #0
	str r0, [r5,#0x64]
	mov r0, #0x6c 
	ldrh r1, [r5,r0]
	add r1, #1
	strh r1, [r5,r0]
	cmp r1, #0x3c 
	blt locret_810B3E2
	mov r0, #0
	strb r0, [r6]
locret_810B3E2:
	pop {pc}
.endfunc // sub_810B3CC

.func
.thumb_func
sub_810B3E4:
	push {lr}
	bl sub_810B58A
	cmp r0, #0
	bne loc_810B40C
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	bl sub_810B598
	cmp r0, #0
	beq loc_810B40C
	bl sub_810B6F0
	mov r0, #0xb
	bl sub_8011680
	b locret_810B434
loc_810B40C:
	bl object_getFlag // () -> int
	ldr r1, dword_810B75C // =0xa000 
	tst r0, r1
	beq loc_810B420
	bl sub_810B6B4
	cmp r0, #0
	bne loc_810B430
	b locret_810B434
loc_810B420:
	bl sub_810B60C
	cmp r0, #0
	bne loc_810B430
	bl sub_810B62E
	cmp r0, #0
	beq locret_810B434
loc_810B430:
	bl sub_810B5BE
locret_810B434:
	pop {pc}
.endfunc // sub_810B3E4

	push {r6,lr}
	bl sub_810B58A
	cmp r0, #0
	bne loc_810B47A
	bl object_getFlipDirection_800E2CA // () -> int
	add r6, r0, #0
	ldrb r0, [r5,#0x16]
	ldrb r1, [r5,#0x13]
	ldr r3, off_810B760 // =dword_810B6E0 
	bl sub_81096FA
	bl sub_800D086
	cmp r0, #0
	beq loc_810B47A
	strb r0, [r7,#0x16]
	add r0, r0, r6
	bl sub_810B598
	cmp r0, #0
	beq loc_810B47A
	bl sub_810B6F0
	ldr r3, off_810B764 // =dword_810B6E0 
	bl sub_81096FA
	str r2, [r7,#0x34]
	str r3, [r7,#0x38]
	mov r0, #0xc
	bl sub_8011680
	b locret_810B49A
loc_810B47A:
	bl object_getFlag // () -> int
	ldr r1, dword_810B75C // =0xa000 
	tst r0, r1
	beq loc_810B48E
	bl sub_810B6B4
	cmp r0, #0
	bne loc_810B496
	b locret_810B49A
loc_810B48E:
	bl sub_810B62E
	cmp r0, #0
	beq locret_810B49A
loc_810B496:
	bl sub_810B5BE
locret_810B49A:
	pop {r6,pc}
	push {lr}
	bl sub_810B58A
	cmp r0, #0
	bne loc_810B4D4
	ldrb r0, [r6,#4]
	add r1, r0, #1
	strb r1, [r6,#4]
	cmp r0, #3
	blt loc_810B4D4
	bl sub_8001532
	mov r1, #1
	and r0, r1
	bl sub_810B6F0
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103F8
	str r0, [r7,#0x2c]
	mov r0, #0xe
	bl sub_8011680
	mov r0, #0
	strb r0, [r6,#4]
	b locret_810B54A
loc_810B4D4:
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103F8
	str r0, [r7,#0x2c]
	bl object_getFlag // () -> int
	ldr r1, dword_810B75C // =0xa000 
	tst r0, r1
	beq loc_810B4FE
	bl sub_810B6B4
	cmp r0, #0
	bne loc_810B512
	mov r0, #0x50 
	strh r0, [r7,#0x10]
	mov r0, #9
	bl sub_8011680
	b locret_810B54A
loc_810B4FE:
	bl sub_810B65E
	cmp r0, #0
	bne loc_810B512
	mov r0, #0x50 
	strh r0, [r7,#0x10]
	mov r0, #9
	bl sub_8011680
	b locret_810B54A
loc_810B512:
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	bl object_getFlag // () -> int
	ldr r1, dword_810B75C // =0xa000 
	tst r0, r1
	beq loc_810B526
	ldr r0, off_810B768 // =sub_810B6B4+1 
	str r0, [r7,#0x28]
	b loc_810B52A
loc_810B526:
	ldr r0, off_810B76C // =sub_810B65E+1 
	str r0, [r7,#0x28]
loc_810B52A:
	mov r0, #0x3c 
	strh r0, [r7,#0x18]
	mov r0, #2
	strb r0, [r7,#3]
	mov r0, #0x14
	strb r0, [r7,#0xc]
	mov r0, #0x15
	strb r0, [r7,#0xd]
	mov r0, #3
	str r0, [r7,#0x30]
	str r0, [r7,#0x34]
	mov r0, #0xd
	bl sub_8011680
	bl sub_8109952
locret_810B54A:
	pop {pc}
.func
.thumb_func
sub_810B54C:
	push {r4,r6,lr}
	mov r6, #0
	add r0, r5, #0
	bl sub_800ED90
	tst r3, r3
	beq loc_810B580
	lsl r4, r0, #0x17
	lsr r4, r4, #0x17
	bl sub_800A704
	ldr r1, off_810B770 // =0x12c 
	cmp r0, r1
	blt loc_810B580
	bl sub_810B584
	cmp r0, #3
	blt loc_810B580
	add r0, r4, #0
	bl sub_80126E4
	bl sub_8011680
	bl sub_800F322
	mov r6, #1
loc_810B580:
	add r0, r6, #0
	pop {r4,r6,pc}
.endfunc // sub_810B54C

.func
.thumb_func
sub_810B584:
	push {r4,r6,lr}
	mov r0, #3
	pop {r4,r6,pc}
.endfunc // sub_810B584

.func
.thumb_func
sub_810B58A:
	push {lr}
	mov r0, #0x64 
	mov r1, #0x13
	mov r2, #0x18
	bl sub_8109630
	pop {pc}
.endfunc // sub_810B58A

.func
.thumb_func
sub_810B598:
	push {r4,lr}
	mov r4, #0
	mov r2, #4
	push {r0-r2}
	bl sub_8109708
	cmp r0, #0
	pop {r0-r2}
	beq loc_810B5AC
	mov r4, #1
loc_810B5AC:
	mov r2, #2
	bl sub_8109708
	cmp r0, #0
	beq loc_810B5BA
	mov r0, #2
	orr r4, r0
loc_810B5BA:
	add r0, r4, #0
	pop {r4,pc}
.endfunc // sub_810B598

.func
.thumb_func
sub_810B5BE:
	push {lr}
	strb r0, [r7,#0x16]
	strb r1, [r7,#0x17]
	mov r0, #1
	strb r0, [r7,#3]
	ldr r1, off_810B5F0 // =dword_810B5F4 
	ldrb r0, [r4,#0x16]
	lsl r0, r0, #2
	ldr r0, [r1,r0]
	str r0, [r7,#0x30]
	ldr r3, off_810B774 // =dword_810B6E0 
	bl sub_81096FA
	str r2, [r7,#0x34]
	str r3, [r7,#0x38]
	mov r0, #0xa
	bl sub_8011680
	bl sub_8109804
	pop {pc}
	.word 0
	.byte 0, 0, 0, 0
off_810B5F0: .word dword_810B5F4
dword_810B5F4: .word 0x5000, 0x7000, 0x0
	.word 0x7000, 0x9000, 0x0
.endfunc // sub_810B5BE

.func
.thumb_func
sub_810B60C:
	push {lr}
	bl object_getFlipDirection_800E2CA // () -> int
	ldrb r1, [r5,#0x12]
	add r0, r0, r1
	ldrb r1, [r5,#0x13]
	ldr r3, off_810B778 // =dword_810B6E0 
	bl sub_81096FA
	push {r0,r1}
	bl object_checkPanelParameters
.endfunc // sub_810B60C

	cmp r0, #0
	pop {r0,r1}
	bne locret_810B62C
	mov r0, #0
locret_810B62C:
	pop {pc}
.func
.thumb_func
sub_810B62E:
	push {lr}
	bl sub_810B646
.endfunc // sub_810B62E

	bne locret_810B644
	ldr r0, [r5,#0x68]
	neg r0, r0
	str r0, [r5,#0x68]
	bl sub_810B646
	bne locret_810B644
	mov r0, #0
locret_810B644:
	pop {pc}
.func
.thumb_func
sub_810B646:
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r2, [r5,#0x68]
	add r1, r1, r2
	push {r0,r1,lr}
	ldr r3, off_810B77C // =dword_810B6E0 
	bl sub_81096FA
	bl object_checkPanelParameters
.endfunc // sub_810B646

	cmp r0, #0
	pop {r0,r1,pc}
.func
.thumb_func
sub_810B65E:
	push {r4,r7,lr}
	sub sp, sp, #0x18
	add r4, r0, #0
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB1C
.endfunc // sub_810B65E

	ldrb r0, [r4,#0x13]
	ldr r3, off_810B780 // =dword_810B6E0 
	bl sub_81096FA
	add r7, sp, #0
	bl sub_800CFA6
	tst r0, r0
	bne loc_810B690
	ldrb r0, [r4,#0x13]
	ldr r3, off_810B784 // =dword_810B6E0 
	bl sub_81096FA
	add r7, sp, #0
	bl sub_800D012
	tst r0, r0
	beq loc_810B6A4
loc_810B690:
	add r7, r0, #0
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_810B6A4:
	push {r0,r1}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	bl sub_801BB46
	pop {r0,r1}
	add sp, sp, #0x18
	pop {r4,r7,pc}
.func
.thumb_func
sub_810B6B4:
	push {r4-r7,lr}
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	ldr r3, off_810B788 // =dword_810B6E0 
	bl sub_81096FA
	ldr r4, off_810B6D0 // =dword_810B6D4 
	bl sub_8015D80
	pop {r4-r7,pc}
	.word 0
	.byte 0, 0, 0, 0
off_810B6D0: .word dword_810B6D4
dword_810B6D4: .word 0x100FF00, 0x100FF, 0x7F
dword_810B6E0: .word 0x10, 0xF8800A0, 0x30, 0xF880080
.endfunc // sub_810B6B4

.func
.thumb_func
sub_810B6F0:
	push {lr}
	cmp r0, #1
	beq loc_810B704
	cmp r0, #2
	beq loc_810B70A
	bl sub_8001532
	mov r1, #1
	and r0, r1
	bne loc_810B70A
loc_810B704:
	mov r0, #0
	ldr r1, off_810B730 // =dword_810B740 
	b loc_810B70E
loc_810B70A:
	mov r0, #1
	ldr r1, dword_810B734 // =dword_810B740 
loc_810B70E:
	strb r0, [r7,#3]
	mov r0, #0xa
	strh r0, [r7,#0xa]
	ldrb r2, [r4,#0x16]
	ldrb r0, [r1,r2]
	strh r0, [r7,#8]
	ldr r1, off_810B738 // =dword_810B74C 
	ldrb r0, [r1,r2]
	strh r0, [r7,#0x10]
	ldr r1, dword_810B73C // =dword_810B74C 
	ldrb r0, [r1,r2]
	strh r0, [r7,#0x18]
	mov r0, #0
	strh r0, [r7,#0xe]
	mov r0, #1
	str r0, [r5,#0x64]
	pop {pc}
off_810B730: .word dword_810B740
dword_810B734: .word 0x810B746
off_810B738: .word dword_810B74C
dword_810B73C: .word 0x810B752
dword_810B740: .word 0x785A3C1E, 0x3C1E9650, 0x9650785A
dword_810B74C: .word 0x2828143C, 0x1E64140C, 0x2810503C, 0x8000
dword_810B75C: .word 0xA000
off_810B760: .word dword_810B6E0
off_810B764: .word dword_810B6E0
off_810B768: .word sub_810B6B4+1
off_810B76C: .word sub_810B65E+1
off_810B770: .word 0x12C
off_810B774: .word dword_810B6E0
off_810B778: .word dword_810B6E0
off_810B77C: .word dword_810B6E0
off_810B780: .word dword_810B6E0
off_810B784: .word dword_810B6E0
off_810B788: .word dword_810B6E0
dword_810B78C: .word 0x30504, 0x100000C, 0x4003064, 0x3096001E, 0x3C0401
	.word 0x40230BE, 0x30E6005A, 0x780403, 0x40430AA, 0x30FA005A
	.word 0x960405
byte_810B7B8: .byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xA7, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xA7, 0x34
	.byte 0xA7, 0x34, 0xA7, 0x34, 0xA7, 0x34, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0xFF, 0xFF, 0x0, 0xB5, 0xFE, 0xF6, 0x88, 0xFC
	.byte 0x0, 0x42, 0x28, 0xD1, 0x7C, 0x21, 0x68, 0x5C, 0x0
	.byte 0x42, 0x7, 0xD0, 0x0, 0x20, 0x68, 0x54, 0x40, 0x20
	.byte 0xE, 0xF7, 0x64, 0xFC, 0x5, 0xF7, 0x3E, 0xFF, 0x1C
	.byte 0xE0, 0xE, 0xF7, 0x64, 0xFC, 0xBA, 0x49, 0x8, 0x42
	.byte 0x12, 0xD0, 0x38, 0x88, 0x8, 0x21, 0x88, 0x42, 0xE
	.byte 0xD0, 0x64, 0x20, 0x28, 0x58, 0xCD, 0xF7, 0xE8, 0xFC
	.byte 0x0, 0xF0, 0x56, 0xF9, 0x1, 0x20, 0x28, 0x74, 0x8
	.byte 0x20, 0x38, 0x80, 0x40, 0x20, 0xE, 0xF7, 0x4B, 0xFC
	.byte 0x0, 0x20, 0x78, 0x70, 0x3, 0x49, 0x38, 0x78, 0x9
	.byte 0x58, 0xFE, 0x46, 0x8, 0x47, 0x0, 0xBD, 0x0, 0x0
	.byte 0xDC, 0xB8, 0x10, 0x8, 0xED, 0xB8, 0x10, 0x8, 0x65
	.byte 0xB9, 0x10, 0x8, 0xAB, 0xB9, 0x10, 0x8, 0xB5, 0x97
	.byte 0x10, 0x8, 0x10, 0xB5, 0x78, 0x78, 0x0, 0x28, 0x11
	.byte 0xD1, 0x38, 0x8A, 0x1, 0x38, 0x38, 0x82, 0x32, 0xD1
	.byte 0x1, 0x20, 0x78, 0x70, 0xA1, 0x7D, 0xA2, 0x48, 0x40
	.byte 0x5C, 0x38, 0x82, 0x10, 0x20, 0x3, 0xF7, 0x67, 0xF8
	.byte 0x0, 0xF0, 0xA3, 0xF8, 0x64, 0x21, 0x68, 0x50, 0x24
	.byte 0xE0, 0x0, 0xF0, 0xBC, 0xF8, 0x11, 0xD1, 0x38, 0x8A
	.byte 0x1, 0x38, 0x38, 0x82, 0x1D, 0xD1, 0x64, 0x20, 0x28
	.byte 0x58, 0xCD, 0xF7, 0xAB, 0xFC, 0x0, 0xF0, 0x7B, 0xF8
	.byte 0x0, 0x20, 0x38, 0x82, 0x40, 0x20, 0xE, 0xF7, 0x10
	.byte 0xFC, 0x5, 0xF7, 0xEE, 0xFE, 0xF, 0xE0, 0x64, 0x20
	.byte 0x28, 0x58, 0xCD, 0xF7, 0x9D, 0xFC, 0x0, 0xF0, 0x79
	.byte 0xF8, 0x90, 0x48, 0xA1, 0x7D, 0x40, 0x5C, 0x0, 0x6
	.byte 0x0, 0xE, 0x38, 0x82, 0x4, 0x20, 0x38, 0x80, 0x0
	.byte 0x20, 0x78, 0x70, 0x10, 0xBD, 0x50, 0xB5, 0x78, 0x78
	.byte 0x0, 0x42, 0xE, 0xD1, 0x38, 0x8A, 0x1, 0x38, 0x38
	.byte 0x82, 0x0, 0x28, 0x18, 0xD1, 0x0, 0xF0, 0x99, 0xF8
	.byte 0x9B, 0x20, 0xFF, 0x30, 0xF4, 0xF6, 0x25, 0xFE, 0x78
	.byte 0x20, 0x38, 0x82, 0x1, 0x20, 0x78, 0x70, 0x38, 0x8A
	.byte 0x1, 0x38, 0x38, 0x82, 0xA, 0xD1, 0x38, 0x8B, 0x38
	.byte 0x82, 0x0, 0xF0, 0x47, 0xF8, 0x0, 0xF0, 0xE3, 0xF8
	.byte 0x40, 0x20, 0xE, 0xF7, 0xDC, 0xFB, 0xC, 0x20, 0x38
	.byte 0x80, 0x50, 0xBD, 0x50, 0xB5, 0xE, 0xF7, 0xDB, 0xFB
	.byte 0x75, 0x49, 0x8, 0x42, 0xE, 0xD0, 0xF7, 0xF6, 0x18
	.byte 0xFA, 0x80, 0x21, 0x8, 0x42, 0xF, 0xD0, 0x78, 0x78
	.byte 0x8, 0x49, 0x9, 0x5C, 0x29, 0x74, 0x1, 0x30, 0x4
	.byte 0x28, 0x0, 0xD1, 0x0, 0x20, 0x78, 0x70, 0x5, 0xE0
	.byte 0x0, 0x20, 0x78, 0x70, 0x0, 0xF0, 0xC, 0xFA, 0x5
	.byte 0xF7, 0x9E, 0xFE, 0x50, 0xBD, 0x0, 0x0, 0xE8, 0xB9
	.byte 0x10, 0x8, 0x3, 0x4, 0x6, 0x1, 0xF0, 0xB5, 0x63
	.byte 0x21, 0x68, 0x5C, 0x39, 0x7B, 0x5, 0x4A, 0x80, 0x0
	.byte 0x10, 0x58, 0x40, 0x5C, 0xFF, 0x28, 0x0, 0xD0, 0x28
	.byte 0x74, 0x38, 0x7B, 0x63, 0x21, 0x68, 0x54, 0xF0, 0xBD
	.byte 0x0, 0x0, 0x10, 0xBA, 0x10, 0x8, 0x1C, 0xBA, 0x10
	.byte 0x8, 0x20, 0xBA, 0x10, 0x8, 0x24, 0xBA, 0x10, 0x8
	.byte 0xFF, 0x3, 0xFF, 0xFF, 0x1, 0xFF, 0x4, 0xFF, 0xFF
	.byte 0x6, 0xFF, 0xFF, 0xF0, 0xB5, 0x38, 0x7B, 0x2, 0x49
	.byte 0x8, 0x5C, 0xFF, 0x28, 0x0, 0xD0, 0x28, 0x74, 0xF0
	.byte 0xBD, 0x3C, 0xBA, 0x10, 0x8, 0x2, 0x0, 0x5, 0xFF
	.byte 0xF0, 0xB5, 0x38, 0x7B, 0x2, 0x49, 0x8, 0x5C, 0xFF
	.byte 0x28, 0x0, 0xD0, 0x28, 0x74, 0xF0, 0xBD, 0x54, 0xBA
	.byte 0x10, 0x8, 0x8, 0x7, 0x9, 0xFF, 0xF0, 0xB5, 0x38
	.byte 0x89, 0x79, 0x89, 0x9, 0x4, 0x8, 0x43, 0x6, 0x1C
	.byte 0x2, 0xF7, 0x31, 0xFC, 0xA9, 0x7C, 0x40, 0x18, 0x7
	.byte 0x49, 0x3A, 0x7B, 0x89, 0x56, 0xEA, 0x7C, 0x89, 0x18
	.byte 0xAA, 0x7B, 0x64, 0x23, 0x5B, 0x19, 0x3C, 0x7B, 0xCD
	.byte 0xF7, 0xE6, 0xFB, 0xF0, 0xBD, 0x88, 0xBA, 0x10, 0x8
	.byte 0x2, 0x0, 0x5, 0xFF, 0x90, 0xBA, 0x10, 0x8, 0xFF
	.byte 0x0, 0x1, 0x0, 0xF0, 0xB5, 0x0, 0x20, 0x64, 0x21
	.byte 0x69, 0x58, 0x0, 0x29, 0x4, 0xD0, 0x66, 0x22, 0x89
	.byte 0x5C, 0x0, 0x29, 0x0, 0xD0, 0x1, 0x20, 0xF0, 0xBD
	.byte 0xF0, 0xB5, 0xA0, 0x7D, 0x78, 0x73, 0x38, 0x89, 0x79
	.byte 0x89, 0x9, 0x4, 0x8, 0x43, 0x80, 0x21, 0x68, 0x50
	.byte 0x68, 0x20, 0x40, 0x19, 0x84, 0x21, 0x68, 0x50, 0x0
	.byte 0x20, 0x7F, 0x21, 0x68, 0x54, 0x2, 0xF7, 0xFD, 0xFB
	.byte 0xA9, 0x7C, 0xEA, 0x7C, 0x40, 0x18, 0x1F, 0x49, 0x3B
	.byte 0x7B, 0xC9, 0x56, 0x52, 0x18, 0x7D, 0x21, 0x68, 0x54
	.byte 0x7E, 0x21, 0x6A, 0x54, 0x7D, 0x22, 0xA8, 0x5C, 0x7E
	.byte 0x22, 0xA9, 0x5C, 0x0, 0x29, 0x2E, 0xD0, 0x4, 0x29
	.byte 0x2C, 0xD0, 0x19, 0x4A, 0xAB, 0x7D, 0xD2, 0x5C, 0x90
	.byte 0x42, 0x27, 0xD0, 0xAA, 0x7B, 0x84, 0x23, 0xEB, 0x58
	.byte 0x7F, 0x24, 0x3, 0x26, 0x2C, 0x5D, 0x66, 0x43, 0x36
	.byte 0x2, 0x3C, 0x7B, 0x34, 0x43, 0x7E, 0x7B, 0x36, 0x4
	.byte 0x34, 0x43, 0x80, 0x26, 0xAE, 0x59, 0xCD, 0xF7, 0xE8
	.byte 0xFC, 0x84, 0x23, 0xEB, 0x58, 0x4, 0x33, 0x84, 0x20
	.byte 0x2B, 0x50, 0x2, 0xF7, 0xCD, 0xFB, 0x7D, 0x22, 0xA9
	.byte 0x5C, 0x40, 0x18, 0xA8, 0x54, 0x7E, 0x21, 0x68, 0x5C
	.byte 0x5, 0x4A, 0x3B, 0x7B, 0xD2, 0x56, 0x80, 0x18, 0x68
	.byte 0x54, 0x7F, 0x21, 0x68, 0x5C, 0x1, 0x30, 0x68, 0x54
	.byte 0xCA, 0xE7, 0xF0, 0xBD, 0x0, 0x0, 0x58, 0xBB, 0x10
	.byte 0x8, 0xFF, 0x0, 0x1, 0x0, 0x60, 0xBB, 0x10, 0x8
	.byte 0x7, 0x0, 0x0, 0x0
.endfunc // sub_810B6F0

.func
.thumb_func
sub_810BB64:
	push {r4-r7,lr}
	ldr r0, [r5,#0x68]
	bl sub_80D9532
	ldr r0, [r5,#0x6c]
	bl sub_80D9532
	ldr r0, [r5,#0x70]
	bl sub_80D9532
	ldr r0, [r5,#0x74]
	bl sub_80D9532
	ldr r0, [r5,#0x78]
	bl sub_80D9532
	pop {r4-r7,pc}
	.byte  0
	.byte  0
	.byte  0
	.byte 0xA0
	.byte  0
	.byte  0
	.byte 0xE0
	.byte 0xBB
	.byte 0x10
	.byte  8
	.byte 0xE8
	.byte 0xBB
	.byte 0x10
	.byte  8
	.byte 0x81
	.byte 0x63 
	.byte  1
	.byte  8
	.byte 0xB9
	.byte 0x65 
	.byte  1
	.byte  8
	.byte 0x75 
	.byte 0xBE
	.byte 0x10
	.byte  8
	.byte 0xAF
	.byte 0x66 
	.byte  1
	.byte  8
	.byte 0xF7
	.byte 0xBB
	.byte 0x10
	.byte  8
	.byte 0x8F
	.byte 0xBE
	.byte 0x10
	.byte  8
	.byte 0x11
	.byte 0xBC
	.byte 0x10
	.byte  8
	.byte 0x2B 
	.byte 0xBC
	.byte 0x10
	.byte  8
	.byte 0x45 
	.byte 0xBC
	.byte 0x10
	.byte  8
	.byte 0xB5
	.byte 0x97
	.byte 0x10
	.byte  8
	.byte 0x79 
	.byte 0xB8
	.byte 0x10
	.byte  8
	.byte 0x53 
	.byte 0x99
	.byte 0x10
	.byte  8
	.byte  5
	.byte 0x98
	.byte 0x10
	.byte  8
	.byte 0x32 
	.byte 0x64 
	.byte 0x96
	.byte 0xC8
	.byte 0x78 
	.byte 0xFA
	.byte  0
	.byte  0
	.byte 0xA
	.byte 0xA
	.byte 0xA
	.byte 0xA
	.byte 0xA
	.byte 0xA
	.byte  0
	.byte  0
	.byte 0x78 
	.byte 0x78 
	.byte 0x78 
	.byte 0x78 
	.byte 0x78 
	.byte 0x78 
	.byte  0
	.byte  0
	.byte 0x50 
	.byte 0x50 
	.byte 0x50 
	.byte 0x50 
	.byte 0x50 
	.byte 0x50 
	.byte  0
	.byte  0
	.byte 0x12
	.byte 0xC
	.byte 0xC
	.byte  6
	.byte  6
	.byte  6
	.byte  0
	.byte  0
	.byte 0x50 
	.byte 0x50 
	.byte 0x50 
	.byte 0x50 
	.byte 0x50 
	.byte 0x50 
	.byte  0
	.byte 0xB5
	.byte 0xE8
	.byte 0x7A 
	.byte  0
	.byte 0x28 
	.byte  5
	.byte 0xD1
	.byte 0x64 
	.byte 0x20
	.byte 0x28 
	.byte 0x58 
	.byte 0xCD
	.byte 0xF7
	.byte 0x3F 
	.byte 0xFB
	.byte 0xFF
	.byte 0xF7
	.byte 0xAD
	.byte 0xFF
	.byte 0xA
	.byte 0xF7
	.byte 0x7A 
	.byte 0xFF
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0xE8
	.byte 0x7A 
	.byte  0
	.byte 0x28 
	.byte  5
	.byte 0xD1
	.byte 0x64 
	.byte 0x20
	.byte 0x28 
	.byte 0x58 
	.byte 0xCD
	.byte 0xF7
	.byte 0x32 
	.byte 0xFB
	.byte 0xFF
	.byte 0xF7
	.byte 0xA0
	.byte 0xFF
	.byte 0xA
	.byte 0xF7
	.byte 0x87
	.byte 0xFF
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0xE8
	.byte 0x7A 
	.byte  0
	.byte 0x28 
	.byte  5
	.byte 0xD1
	.byte 0x64 
	.byte 0x20
	.byte 0x28 
	.byte 0x58 
	.byte 0xCD
	.byte 0xF7
	.byte 0x25 
	.byte 0xFB
	.byte 0xFF
	.byte 0xF7
	.byte 0x93
	.byte 0xFF
	.byte 0xA
	.byte 0xF7
	.byte 0x98
	.byte 0xFF
	.byte  0
	.byte 0xBD
	.byte 0x50 
	.byte 0xB5
	.byte 0xFE
	.byte 0xF6
	.byte 0xA2
	.byte 0xFA
	.byte  0
	.byte 0x42 
	.byte 0x1F
	.byte 0xD1
	.byte 0x7C 
	.byte 0x21 
	.byte 0x68 
	.byte 0x5C 
	.byte  0
	.byte 0x42 
	.byte  1
	.byte 0xD0
	.byte  0
	.byte 0x20
	.byte 0x68 
	.byte 0x54 
	.byte 0xE
	.byte 0xF7
	.byte 0x84
	.byte 0xFA
	.byte 0x95
	.byte 0x49 
	.byte  8
	.byte 0x42 
	.byte 0xB
	.byte 0xD0
	.byte 0x30 
	.byte 0x78 
	.byte  8
	.byte 0x21 
	.byte 0x88
	.byte 0x42 
	.byte 0xB
	.byte 0xD0
	.byte  1
	.byte 0x20
	.byte 0x28 
	.byte 0x74 
	.byte  8
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte 0x88
	.byte 0x20
	.byte  0
	.byte 0x21 
	.byte 0x29 
	.byte 0x52 
	.byte  3
	.byte 0xE0
	.byte  0
	.byte 0xF0
	.byte 0xA2
	.byte 0xF8
	.byte  0
	.byte 0x28 
	.byte  4
	.byte 0xD1
	.byte  2
	.byte 0x49 
	.byte 0x30 
	.byte 0x78 
	.byte  9
	.byte 0x58 
	.byte 0xFE
	.byte 0x46 
	.byte  8
	.byte 0x47 
	.byte 0x50 
	.byte 0xBD
	.byte 0x94
	.byte 0xBC
	.byte 0x10
	.byte  8
	.byte 0xA1
	.byte 0xBC
	.byte 0x10
	.byte  8
	.byte 0xBD
	.byte 0xBC
	.byte 0x10
	.byte  8
	.byte 0xFD
	.byte 0xBC
	.byte 0x10
	.byte  8
	.byte  0
	.byte 0xB5
	.byte 0x30 
	.byte 0x89
	.byte  1
	.byte 0x30 
	.byte 0x30 
	.byte 0x81
	.byte 0x83
	.byte 0x49 
	.byte 0xA2
	.byte 0x7D 
	.byte 0x89
	.byte 0x5C 
	.byte 0x88
	.byte 0x42 
	.byte  3
	.byte 0xDB
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x81
	.byte  4
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte  2
	.byte 0xF7
	.byte 0x90
	.byte 0xFC
	.byte 0x18
	.byte 0xD0
	.byte 0xA1
	.byte 0x7D 
	.byte 0x7D 
	.byte 0x48 
	.byte 0x40 
	.byte 0x5C 
	.byte 0x38 
	.byte 0x83
	.byte 0x7C 
	.byte 0x48 
	.byte 0x40 
	.byte 0x5C 
	.byte 0x38 
	.byte 0x81
	.byte 0x7C 
	.byte 0x48 
	.byte 0x40 
	.byte 0x5C 
	.byte 0x78 
	.byte 0x81
	.byte  0
	.byte 0xF0
	.byte 0x5C 
	.byte 0xF8
	.byte 0x38 
	.byte 0x73 
	.byte  0
	.byte 0xF0
	.byte 0x3E 
	.byte 0xF8
	.byte 0xA
	.byte 0x20
	.byte 0x38 
	.byte 0x82
	.byte 0xFF
	.byte 0xF7
	.byte 0x81
	.byte 0xFE
	.byte 0x40 
	.byte 0x20
	.byte 0xE
	.byte 0xF7
	.byte 0x31 
	.byte 0xFA
	.byte 0xA
	.byte 0x20
	.byte  5
	.byte 0xF7
	.byte 0xC5
	.byte 0xFC
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte  0
	.byte 0xBD
	.byte  0
	.byte 0xB5
	.byte 0xE
	.byte 0xF7
	.byte 0x32 
	.byte 0xFA
	.byte 0x6C 
	.byte 0x49 
	.byte  8
	.byte 0x42 
	.byte 0xF
	.byte 0xD0
	.byte 0xF7
	.byte 0xF6
	.byte 0x6F 
	.byte 0xF8
	.byte 0x80
	.byte 0x21 
	.byte  8
	.byte 0x42 
	.byte 0x11
	.byte 0xD0
	.byte 0x88
	.byte 0x21 
	.byte 0x68 
	.byte 0x5A 
	.byte  8
	.byte 0x4A 
	.byte 0x12
	.byte 0x5C 
	.byte 0x2A 
	.byte 0x74 
	.byte  1
	.byte 0x30 
	.byte  4
	.byte 0x28 
	.byte  0
	.byte 0xD1
	.byte  0
	.byte 0x20
	.byte 0x68 
	.byte 0x52 
	.byte  6
	.byte 0xE0
	.byte  0
	.byte 0x20
	.byte 0x88
	.byte 0x21 
	.byte 0x68 
	.byte 0x52 
	.byte  0
	.byte 0xF0
	.byte 0x61 
	.byte 0xF8
	.byte  0
	.byte 0x20
	.byte 0x30 
	.byte 0x70 
	.byte  0
	.byte 0xBD
	.byte 0x3C 
	.byte 0xBD
	.byte 0x10
	.byte  8
	.byte  3
	.byte  4
	.byte  6
	.byte  1
.endfunc // sub_810BB64

.func
.thumb_func
sub_810BD40:
	push {r4-r7,lr}
	mov r4, #1
	mov r0, #0x60 
	ldrb r2, [r5,r0]
	mov r0, #0x61 
	ldrb r3, [r5,r0]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	cmp r0, r2
	bne loc_810BD5A
	cmp r1, r3
	bne loc_810BD5A
	mov r4, #0
loc_810BD5A:
	add r0, r4, #0
	pop {r4-r7,pc}
	.byte 0xF0
	.byte 0xB5
	.byte 0x62 
	.byte 0x22 
	.byte 0xA8
	.byte 0x5C 
	.byte 0xE9
	.byte 0x7C 
	.byte  4
	.byte 0x4A 
	.byte  1
	.byte 0x39 
	.byte 0x89
	.byte  0
	.byte 0x52 
	.byte 0x58 
	.byte 0x10
	.byte 0x5C 
	.byte 0x62 
	.byte 0x22 
	.byte 0xA8
	.byte 0x54 
	.byte 0xF0
	.byte 0xBD
	.byte  0
	.byte  0
	.byte 0x7C 
	.byte 0xBD
	.byte 0x10
	.byte  8
	.byte 0x88
	.byte 0xBD
	.byte 0x10
	.byte  8
	.byte 0x8C
	.byte 0xBD
	.byte 0x10
	.byte  8
	.byte 0x90
	.byte 0xBD
	.byte 0x10
	.byte  8
	.byte  1
	.byte  0
	.byte  0
	.byte  0
	.byte  1
	.byte  2
	.byte  3
	.byte  0
	.byte  1
	.byte  0
	.byte  0
	.byte  0
	.byte 0xF0
	.byte 0xB5
	.byte 0x62 
	.byte 0x22 
	.byte 0xA8
	.byte 0x5C 
	.byte 0xE9
	.byte 0x7C 
	.byte  2
	.byte 0x4A 
	.byte  1
	.byte 0x39 
	.byte 0x89
	.byte  0
	.byte 0x52 
	.byte 0x58 
	.byte 0x10
	.byte 0x5C 
	.byte 0xF0
	.byte 0xBD
	.byte 0xAC
	.byte 0xBD
	.byte 0x10
	.byte  8
	.byte 0xB8
	.byte 0xBD
	.byte 0x10
	.byte  8
	.byte 0xBC
	.byte 0xBD
	.byte 0x10
	.byte  8
	.byte 0xC0
	.byte 0xBD
	.byte 0x10
	.byte  8
	.byte  1
	.byte  2
	.byte  0
	.byte  0
	.byte  0
	.byte  1
	.byte  2
	.byte  1
	.byte  0
	.byte  1
	.byte  0
	.byte  0
	.byte 0x50 
	.byte 0xB5
	.byte  0
	.byte 0x26 
	.byte 0x28 
	.byte 0x1C
	.byte  2
	.byte 0xF7
	.byte 0xE1
	.byte 0xFF
	.byte 0x1B
	.byte 0x42 
	.byte 0xE
	.byte 0xD0
	.byte 0xC4
	.byte  5
	.byte 0xE4
	.byte 0xD
	.byte 0xFE
	.byte 0xF6
	.byte 0x95
	.byte 0xFC
	.byte 0x3B 
	.byte 0x49 
	.byte 0x88
	.byte 0x42 
	.byte  7
	.byte 0xDB
	.byte 0x20
	.byte 0x1C
	.byte  6
	.byte 0xF7
	.byte 0x7F 
	.byte 0xFC
	.byte  5
	.byte 0xF7
	.byte 0x4B 
	.byte 0xFC
	.byte  3
	.byte 0xF7
	.byte 0x9A
	.byte 0xFA
	.byte  1
	.byte 0x26 
	.byte 0x30 
	.byte 0x1C
	.byte 0x50 
	.byte 0xBD
.endfunc // sub_810BD40

.func
.thumb_func
sub_810BDF4:
	push {r4-r7,lr}
	mov r0, #1
	mov r1, #0x63 
	strb r0, [r5,r1]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x60 
	strb r0, [r5,r2]
	mov r2, #0x61 
	strb r1, [r5,r2]
	bl change_20013F0_800151C // () -> int
	mov r1, #3
	and r0, r1
	ldrb r1, [r5,#0x13]
	sub r1, #1
	lsl r1, r1, #2
	ldr r2, off_810BE58 // =off_810BE5C 
	ldr r1, [r2,r1]
	ldrb r0, [r1,r0]
	mov r1, #0x62 
	strb r0, [r5,r1]
	mov r0, #0
	strb r0, [r5,#0x10]
	mov r0, #0
	strh r0, [r7,#0x10]
	pop {r4-r7,pc}
.endfunc // sub_810BDF4

.func
.thumb_func
sub_810BE2A:
	push {r4,lr}
	mov r0, #1
	mov r1, #0x63 
	strb r0, [r5,r1]
	ldrb r0, [r5,#0x12]
	ldrb r1, [r5,#0x13]
	mov r2, #0x60 
	strb r0, [r5,r2]
	mov r2, #0x61 
	strb r1, [r5,r2]
	bl change_20013F0_800151C // () -> int
	mov r1, #3
	and r0, r1
	ldrb r1, [r5,#0x13]
	sub r1, #1
	lsl r1, r1, #2
	ldr r2, off_810BE58 // =off_810BE5C 
	ldr r1, [r2,r1]
	ldrb r0, [r1,r0]
	mov r1, #0x62 
	strb r0, [r5,r1]
	pop {r4,pc}
off_810BE58: .word off_810BE5C
off_810BE5C: .word dword_810BE68
	.word dword_810BE6C
	.word dword_810BE70
dword_810BE68: .word 0x1010101
dword_810BE6C: .word 0x2000200
dword_810BE70: .word 0x0
.endfunc // sub_810BE2A

.func
.thumb_func
sub_810BE74:
	push {lr}
	ldrb r0, [r5,#0xa]
	cmp r0, #0
	bne loc_810BE88
	mov r0, #0x64 
	ldr r0, [r5,r0]
	bl sub_80D9284
	bl sub_810BB64
loc_810BE88:
	bl sub_80165C2
	pop {pc}
.endfunc // sub_810BE74

.func
.thumb_func
sub_810BE8E:
	push {lr}
	bl sub_8016CE8
	bl sub_810BD40
	beq locret_810BEB0
	bl sub_810BDF4
	mov r0, #0x64 
	ldr r0, [r5,r0]
	bl sub_80D9284
	bl sub_810BB64
	mov r0, #1
	mov r1, #0x7c 
	strb r0, [r5,r1]
locret_810BEB0:
	pop {pc}
	.balign 4, 0x00
dword_810BEB4: .word 0xA000, 0x810BBD8, 0x810BBF0, 0x810BBC8, 0x810BBD0
	.word 0x12C, 0x10604, 0x1000006, 0x8000050, 0x6E000A
	.word 0x140801, 0x80200C8, 0xE60028, 0x500803, 0x8040096
	.word 0x1040028, 0x500805
dword_810BEF8: .word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0x34A334A3, 0x34A334A3, 0xFFFFFFFF
	.word 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF
	.word 0x34A334A3, 0x34A334A3, 0x34A334A3, 0x34A334A3, 0x34A334A3
	.word 0x34A334A3, 0x34A334A3, 0x34A334A3, 0x4903B500, 0x58097838
	.word 0x470846FE, 0xBD00, 0x810BFCC, 0x810BFE1, 0x810C05D
	.word 0x810C071, 0x810C0E5, 0x81097BB, 0xF702B5D0, 0xD034FAFE
	.word 0x6AB96AF8, 0x470846FE, 0xD1014200, 0x7CE97CA8, 0x75697528
	.word 0xFD8EF70F, 0xF70E2040, 0x2001F8A6, 0xF70E0580, 0x200AF8A2
	.word 0xFCE4F702, 0x7D287B39, 0x1A807CAA, 0x4122228, 0xDF064350
	.word 0x7B396428, 0x7CEA7D68, 0x22181A80, 0x43500412, 0x6468DF06
	.word 0x64A86B38, 0x8497B39, 0x6438DF06, 0x74282001, 0x8238200F
	.word 0x80382004, 0x2000E003, 0xF70576B8, 0xBDD0FB5D, 0x8A38B500
	.word 0x82383801, 0x7B38DA03, 0x20088238, 0xBD008038, 0x6C29B500
	.word 0x18406B68, 0x6C696368, 0x18406BA8, 0x6CA963A8, 0x18406BE8
	.word 0x6C3A63E8, 0x64A91A89, 0x78526D6A, 0x4092110, 0xDB044288
	.word 0xD00D2A00, 0xFFE8F70D, 0x2A00E00A, 0x2001D108, 0xFFE6F70D
	.word 0x74A87D28, 0x74E97D69, 0xFFC8F70D, 0x38018A38, 0xDA0E8238
	.word 0x74A87D28, 0x74E97D69, 0xFD3BF70F, 0xF8E4F702, 0x63E82000
	.word 0x20028238, 0x200C7428, 0xBD008038, 0x8A38B550, 0x82383001
	.word 0xD1172802, 0xF6F420C0, 0x7B79FA6B, 0xD0112900, 0xF7242002
	.word 0xF702F8D3, 0x7CA9F8E2, 0x7CE91840, 0x78FC2300, 0xF7BA68BE
	.word 0x7BB8FDE7, 0xD0012800, 0xF815F000, 0xFE63F6F6, 0x42082180
	.word 0x2000D00E, 0x20407428, 0xF814F70E, 0x4C02001, 0xF80BF70E
	.word 0x76B82001, 0x82388B38, 0x80382010, 0xB5D0BD50, 0x7CE97CA8
	.word 0x23002205, 0x26004C03, 0x23F2746, 0xF7B93700, 0xBDD0F904
	.word 0x3205FF83, 0x0, 0x0
	.word sub_8016380+1
	.word sub_80165B8+1
	.word sub_80165C2+1
	.word sub_80166AE+1
	.word sub_8016B02+1
	.word sub_8016CE8+1
	.word sub_8016B36+1
	.word sub_8016B72+1
	.word sub_810C1D8+1
	.word sub_81097BA+1
dword_810C198: .word 0x810BFB9, 0x40000, 0x50000, 0x60000, 0x70000, 0x60000
	.word 0x80000, 0x78641E14, 0x363C7832, 0x24302A30, 0x1824303C, 0x1E181824
	.word 0x301E2A24, 0x1010100, 0x7060101, 0xB0A0908
.endfunc // sub_810BE8E

.func
.thumb_func
sub_810C1D8:
	push {r4,r6,lr}
	ldr r1, off_810C1E8 // =off_810C1EC 
	ldrb r0, [r6]
	ldr r1, [r1,r0]
	mov lr, pc
	bx r1
	pop {r4,r6,pc}
	.balign 4, 0x00
off_810C1E8: .word off_810C1EC
off_810C1EC: .word sub_810C1F4+1
	.word sub_810C212+1
.endfunc // sub_810C1D8

.func
.thumb_func
sub_810C1F4:
	push {lr}
	bl sub_8001532
	mov r1, #7
	and r0, r1
	mov r1, #0xa
	mul r0, r1
	add r0, #0x1e
	strh r0, [r7,#0x10]
	mov r0, #9
	bl sub_8011680
	mov r0, #4
	strb r0, [r6]
	pop {pc}
.endfunc // sub_810C1F4

.func
.thumb_func
sub_810C212:
	push {lr}
	bl sub_810C282
	cmp r0, #0
	bne locret_810C280
	ldrb r1, [r4,#0x16]
	ldr r0, dword_810C320 // =dword_810C198 
	ldrb r0, [r0,r1]
	strb r0, [r7,#3]
	ldr r0, dword_810C324 // =dword_810C198 
	ldrb r0, [r0,r1]
	strb r0, [r7,#0xc]
	ldr r0, dword_810C328 // =dword_810C198 
	ldrb r0, [r0,r1]
	strb r0, [r7,#0xd]
	ldr r0, off_810C32C // =dword_810C198+52 
	ldrb r0, [r0,r1]
	strb r0, [r7,#0xe]
	ldr r0, off_810C330 // =dword_810C198+40 
	ldrb r0, [r0,r1]
	strh r0, [r7,#0x18]
	ldr r0, off_810C334 // =dword_810C198+28 
	ldrb r0, [r0,r1]
	strh r0, [r7,#8]
	mov r0, #0xa
	strh r0, [r7,#0xa]
	ldr r0, off_810C338 // =dword_810C198+4 
	lsl r1, r1, #2
	ldr r0, [r0,r1]
	str r0, [r7,#0x30]
	ldrb r0, [r5,#0x16]
	mov r1, #1
	eor r0, r1
	bl sub_80103F8
	tst r0, r0
	bne loc_810C262
	ldr r0, off_810C33C // =sub_8015C48+1 
	str r0, [r7,#0x28]
	b loc_810C268
loc_810C262:
	str r0, [r7,#0x2c]
	ldr r0, off_810C340 // =sub_810C2B2+1 
	str r0, [r7,#0x28]
loc_810C268:
	bl object_getFlag // () -> int
	ldr r1, dword_810C344 // =0xa000 
	tst r0, r1
	beq loc_810C27A
	mov r0, #0x50 
	strh r0, [r7,#0xc]
	ldr r0, off_810C348 // =sub_8015C48+1 
	str r0, [r7,#0x28]
loc_810C27A:
	mov r0, #0xa
	bl sub_8011680
locret_810C280:
	pop {pc}
.endfunc // sub_810C212

.func
.thumb_func
sub_810C282:
	push {r4,r6,lr}
	mov r6, #0
	add r0, r5, #0
	bl sub_800ED90
	tst r3, r3
	beq loc_810C2AE
	lsl r4, r0, #0x17
	lsr r4, r4, #0x17
	bl sub_800A704
	ldr r1, off_810C34C // =0x12c 
	cmp r0, r1
	blt loc_810C2AE
	add r0, r4, #0
	bl sub_80126E4
	bl sub_8011680
	bl sub_800F322
	mov r6, #1
loc_810C2AE:
	add r0, r6, #0
	pop {r4,r6,pc}
.endfunc // sub_810C282

.func
.thumb_func
sub_810C2B2:
	push {r4,r7,lr}
	sub sp, sp, #0x18
	add r4, r0, #0
	ldrb r0, [r4,#0x13]
	ldr r3, off_810C350 // =dword_810C310 
	bl sub_81096FA
	add r7, sp, #0
	bl sub_800D012
	tst r0, r0
	bne loc_810C2F8
	ldrb r0, [r4,#0x13]
	sub r0, #1
	ldr r3, off_810C354 // =dword_810C310 
	bl sub_81096FA
	add r7, sp, #0
	bl sub_800D012
	add r6, r0, #0
	add r7, r7, r0
	ldrb r0, [r4,#0x13]
	add r0, #1
	ldr r3, off_810C358 // =dword_810C310 
	bl sub_81096FA
	bl sub_800D012
	add r0, r0, r6
	cmp r0, #0
	bne loc_810C2F8
	bl sub_8015C48
	b loc_810C30C
loc_810C2F8:
	add r7, r0, #0
	bl sub_8001532
	add r1, r7, #0
	svc 6
	add r0, sp, #0
	ldrb r0, [r0,r1]
	lsr r1, r0, #4
	lsl r0, r0, #0x1d
	lsr r0, r0, #0x1d
loc_810C30C:
	add sp, sp, #0x18
	pop {r4,r7,pc}
dword_810C310: .word 0x10, 0xF8800A0, 0x30, 0xF880080
dword_810C320: .word 0x810C1D2
dword_810C324: .word 0x810C1BA
dword_810C328: .word 0x810C1C6
off_810C32C: .word dword_810C198+0x34
off_810C330: .word dword_810C198+0x28
off_810C334: .word dword_810C198+0x1C
off_810C338: .word dword_810C198+4
off_810C33C: .word sub_8015C48+1
off_810C340: .word sub_810C2B2+1
dword_810C344: .word 0xA000
off_810C348: .word sub_8015C48+1
off_810C34C: .word 0x12C
off_810C350: .word dword_810C310
off_810C354: .word dword_810C310
off_810C358:
	// <endpool> <endfile>
	.word dword_810C310
.endfunc // sub_810C2B2

/*For debugging purposes, connect comment at any range!*/
